/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: allregs_k.i 1.7 Broadcom SDK $
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * File:	allregs_k.i
 * Purpose:	Independent register descriptions.
 */

#if defined(BCM_56725_A0) || defined(BCM_56820_A0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASKr */
	soc_block_list[6],
	soc_portreg,
	1,
	0xf000049,
	0,
	1,
	soc_BCAST_BLOCK_MASKr_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x1fffffff, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56624_A0) || defined(BCM_56624_B0) || \
    defined(BCM_56680_A0) || defined(BCM_56680_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_64r */
	soc_block_list[6],
	soc_portreg,
	1,
	0x11000049,
	SOC_REG_FLAG_64_BITS,
	3,
	soc_IKNOWN_MCAST_BLOCK_MASK_64r_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0xffffffff, 0x003fffff)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56142_A0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_64_BCM56142_A0r */
	soc_block_list[6],
	soc_portreg,
	1,
	0x11000069,
	0,
	2,
	soc_IKNOWN_MCAST_BLOCK_MASK_64_BCM56334_A0r_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x3fffffff, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56150_A0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_64_BCM56150_A0r */
	soc_block_list[6],
	soc_portreg,
	1,
	0x44001200,
	0,
	2,
	soc_IKNOWN_MCAST_BLOCK_MASK_64_BCM56150_A0r_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x00000000, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56334_A0) || defined(BCM_56334_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_64_BCM56334_A0r */
	soc_block_list[6],
	soc_portreg,
	1,
	0x11000049,
	0,
	2,
	soc_IKNOWN_MCAST_BLOCK_MASK_64_BCM56334_A0r_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x3fffffff, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56524_A0) || defined(BCM_56524_B0) || \
    defined(BCM_56634_A0) || defined(BCM_56634_B0) || \
    defined(BCM_56685_A0) || defined(BCM_56685_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_64_BCM56634_A0r */
	soc_block_list[6],
	soc_portreg,
	1,
	0xe000049,
	SOC_REG_FLAG_64_BITS,
	4,
	soc_IKNOWN_MCAST_BLOCK_MASK_64_BCM56634_A0r_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0xffffffff, 0x007fffff)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56524_A0) || defined(BCM_56524_B0) || \
    defined(BCM_56634_A0) || defined(BCM_56634_B0) || \
    defined(BCM_56685_A0) || defined(BCM_56685_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_CONTROLr */
	soc_block_list[6],
	soc_genreg,
	1,
	0xe080297,
	0,
	1,
	soc_EGR_IPFIX_EXPORT_FIFO_PARITY_CONTROLr_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x00000001, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56440_A0) || defined(BCM_56440_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_CONTROL_BCM56440_A0r */
	soc_block_list[6],
	soc_genreg,
	1,
	0xf080d66,
	0,
	1,
	soc_ALTERNATE_EMIRROR_BITMAP_PARITY_CONTROLr_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x00000000, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56450_A0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_CONTROL_BCM56450_A0r */
	soc_block_list[6],
	soc_genreg,
	1,
	0x3e016600,
	0,
	1,
	soc_FT_CNTR_SER_CONTROLr_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x00000000, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56840_A0) || defined(BCM_56840_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_CONTROL_BCM56840_A0r */
	soc_block_list[6],
	soc_genreg,
	1,
	0xf080d67,
	0,
	1,
	soc_ALTERNATE_EMIRROR_BITMAP_PARITY_CONTROLr_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x00000000, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56524_A0) || defined(BCM_56524_B0) || \
    defined(BCM_56634_A0) || defined(BCM_56634_B0) || \
    defined(BCM_56685_A0) || defined(BCM_56685_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_STATUS_INTRr */
	soc_block_list[6],
	soc_genreg,
	1,
	0xe080298,
	0,
	3,
	soc_BCAST_BLOCK_MASK_PARITY_STATUS_INTRr_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x000000ff, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56440_A0) || defined(BCM_56440_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_STATUS_INTR_BCM56440_A0r */
	soc_block_list[6],
	soc_genreg,
	1,
	0xf080d67,
	0,
	3,
	soc_IFP_COUNTER_MUX_DATA_STAGING_PARITY_STATUS_INTRr_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x00000000, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56450_A0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_STATUS_INTR_BCM56450_A0r */
	soc_block_list[6],
	soc_genreg,
	1,
	0x3e016700,
	0,
	3,
	soc_ALTERNATE_EMIRROR_BITMAP_PARITY_STATUS_INTR_BCM56450_A0r_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x00000000, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56840_A0) || defined(BCM_56840_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_STATUS_INTR_BCM56840_A0r */
	soc_block_list[6],
	soc_genreg,
	1,
	0xf080d68,
	0,
	3,
	soc_BCAST_BLOCK_MASK_PARITY_STATUS_INTR_BCM56840_A0r_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x00000000, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56524_A0) || defined(BCM_56524_B0) || \
    defined(BCM_56634_A0) || defined(BCM_56634_B0) || \
    defined(BCM_56685_A0) || defined(BCM_56685_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_STATUS_NACKr */
	soc_block_list[6],
	soc_genreg,
	1,
	0xe080299,
	0,
	3,
	soc_BCAST_BLOCK_MASK_PARITY_STATUS_INTRr_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x000000ff, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56440_A0) || defined(BCM_56440_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_STATUS_NACK_BCM56440_A0r */
	soc_block_list[6],
	soc_genreg,
	1,
	0xf080d68,
	0,
	3,
	soc_IFP_COUNTER_MUX_DATA_STAGING_PARITY_STATUS_INTRr_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x00000000, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56450_A0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_STATUS_NACK_BCM56450_A0r */
	soc_block_list[6],
	soc_genreg,
	1,
	0x3e016800,
	0,
	3,
	soc_ALTERNATE_EMIRROR_BITMAP_PARITY_STATUS_INTR_BCM56450_A0r_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x00000000, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

#if defined(BCM_56840_A0) || defined(BCM_56840_B0)
    { /* SOC_REG_INT_KNOWN_MCAST_BLOCK_MASK_PARITY_STATUS_NACK_BCM56840_A0r */
	soc_block_list[6],
	soc_genreg,
	1,
	0xf080d69,
	0,
	3,
	soc_BCAST_BLOCK_MASK_PARITY_STATUS_INTR_BCM56840_A0r_fields,
	SOC_RESET_VAL_DEC(0x00000000, 0x00000000)
	SOC_RESET_MASK_DEC(0x00000000, 0x00000000)
	-1,
	-1,
    },
#endif /* chips */

