/*
 * $Id: bregex.h 1.20 Broadcom SDK $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_BREGEX_H__
#define __BCM_BREGEX_H__

#if defined(INCLUDE_REGEX)

#include <bcm/types.h>

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize BCM regex module. */
extern int bcm_regex_init(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Regex Configuration structure. */
typedef struct bcm_regex_config_s {
    uint32 flags;                   /* Flags for Regex configuration. */
    int max_flows;                  /* maximum number of flows to be tracked. */
    int payload_depth;              /* Maximum payload length to be inspected. */
    int inspect_num_pkt;            /* maximum number of packets to be inspected
                                       per flow. */
    int inactivity_timeout_usec;    /* Inactivity timeout. */
    bcm_mac_t dst_mac;              /* Destination MAC address */
    bcm_mac_t src_mac;              /* Source MAC address */
    uint16 ethertype;               /* Ethertype */
    uint32 report_flags;            /* Bitmap of report types enabled. */
} bcm_regex_config_t;

#define BCM_REGEX_CONFIG_ENABLE             0x0001     /* Enable Regex feature */
#define BCM_REGEX_CONFIG_TCP_SESSION_DETECT 0x0002     /* Enable TCP session
                                                          termination */
#define BCM_REGEX_CONFIG_IP4                0x0004     /* Enable tracking on
                                                          IPv4 packets */
#define BCM_REGEX_CONFIG_IP6                0x0008     /* Enable tracking on
                                                          IPv6 packets */
#define BCM_REGEX_CONFIG_AGING              0x0010     /* Enable aging on
                                                          tracked flows */
#define BCM_REGEX_COUNTER_ENABLE            0x0020     /* Enable counter and
                                                          statistics */
#define BCM_REGEX_PER_DIRECTION_COUNTER_ENABLE 0x0040     /* Enable counter and
                                                          statistics per
                                                          direction */

#define BCM_REGEX_REPORT_NEW        0x0001     /* Enable report generation for
                                                  new flows */
#define BCM_REGEX_REPORT_MATCHED    0x0002     /* Enable report generation for
                                                  flows that mateched pattern */
#define BCM_REGEX_REPORT_END        0x0004     /* Enable report generation on
                                                  flow is stopped from being
                                                  tracked */

/*  bcm_regex_config_t_init */
extern void bcm_regex_config_t_init(
    bcm_regex_config_t *config);

#ifndef BCM_HIDE_DISPATCHABLE

/*  Set configuration for Regex module. */
extern int bcm_regex_config_set(
    int unit, 
    bcm_regex_config_t *config);

/*  Get configuration for Regex module. */
extern int bcm_regex_config_get(
    int unit, 
    bcm_regex_config_t *config);

/* Add a range of L4 ports to be excluded from flow tracking. */
extern int bcm_regex_exclude_add(
    int unit, 
    uint8 protocol, 
    uint16 l4_start, 
    uint16 l4_end);

/* Delete L4 ports range excluded from flow tracking. */
extern int bcm_regex_exclude_delete(
    int unit, 
    uint8 protocol, 
    uint16 l4_start, 
    uint16 l4_end);

/* Delete all L4 ports excluded from flow tracking. */
extern int bcm_regex_exclude_delete_all(
    int unit);

/* Delete L4 ports range excluded from flow tracking. */
extern int bcm_regex_exclude_get(
    int unit, 
    int array_size, 
    uint8 *protocol, 
    uint16 *l4low, 
    uint16 *l4high, 
    int *array_count);

#endif /* BCM_HIDE_DISPATCHABLE */

/* bcm_regex_engine_t */
typedef int bcm_regex_engine_t;

/* Regex Engine Configuration structure. */
typedef struct bcm_regex_engine_config_s {
    uint32 flags;   /* Flags for Regex configuration. */
} bcm_regex_engine_config_t;

#define BCM_REGEX_ENGINE_CONFIG_MULTI_PACKET 0x0001     /* Match pattern across
                                                          packet boundary */

/*  bcm_regex_engine_config_t_init */
extern void bcm_regex_engine_config_t_init(
    bcm_regex_engine_config_t *config);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create regex engine. */
extern int bcm_regex_engine_create(
    int unit, 
    bcm_regex_engine_config_t *config, 
    bcm_regex_engine_t *engid);

/* destroy regex engine. */
extern int bcm_regex_engine_destroy(
    int unit, 
    bcm_regex_engine_t engid);

#endif /* BCM_HIDE_DISPATCHABLE */

/*  Prototype for regex engine traverse callback. */
typedef int (*bcm_regex_engine_traverse_cb)(
    int unit, 
    bcm_regex_engine_t engine, 
    bcm_regex_engine_config_t *config, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* Traverse regex engines. */
extern int bcm_regex_engine_traverse(
    int unit, 
    bcm_regex_engine_traverse_cb cb, 
    void *user_data);

/* Get regex engine configuration. */
extern int bcm_regex_engine_get(
    int unit, 
    bcm_regex_engine_t engid, 
    bcm_regex_engine_config_t *config);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_REGEX_MAX_PATTERN_SIZE  256        

/* Regex Configuration structure. */
typedef struct bcm_regex_match_s {
    uint32 flags;                       /* Flags for Regex match. */
    int match_id;                       /* User specified match object
                                           identifier */
    char pattern[BCM_REGEX_MAX_PATTERN_SIZE]; /* Regex Pattern. */
    int sequence;                       /* first packet (0), Non-first packet
                                           (non-zero), Negative value for any
                                           packet. */
    int payload_length_max;             /* Check payload length of the match
                                           packet is less than this. */
    int payload_length_min;             /* Check payload length of the match
                                           packet is greater than this. */
    uint16 l4_src_port_low;             /* L4 port value to qualify source port
                                           range. */
    uint16 l4_src_port_high;            /* L4 port value to qualify source port
                                           range. */
    uint16 l4_dst_port_low;             /* L4 port value to qualify destination
                                           port range. */
    uint16 l4_dst_port_high;            /* L4 port value to qualify destination
                                           port range. */
    uint16 priority;                    /* priority for match. */
    int provides;                       /* Identifier of this match object in
                                           link list */
    int requires;                       /* Identifier of the next match object
                                           in chain */
    int inactivity_timeout_usec;        /* timeout value in microsec */
    uint32 action_flags;                /* action flags for Regex match. */
    int new_int_pri;                    /* Assign new internal priority to
                                           packets */
    int new_dscp;                       /* reassign DSCP value */
    int new_pkt_pri;                    /* reassign new .1x priority */
    int policer_id;                     /* meter using the specified policer id */
} bcm_regex_match_t;

/*  bcm_regex_engine_config_t_init */
extern void bcm_regex_match_t_init(
    bcm_regex_match_t *match);

#ifndef BCM_HIDE_DISPATCHABLE

/* check Regex match objects. */
extern int bcm_regex_match_check(
    int unit, 
    bcm_regex_match_t *matches, 
    int count, 
    int *metric);

/* Add Regex match objects to engine. */
extern int bcm_regex_match_set(
    int unit, 
    bcm_regex_engine_t engid, 
    bcm_regex_match_t *matches, 
    int count);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_REGEX_MATCH_TO_SERVER           0x00000001 
#define BCM_REGEX_MATCH_TO_CLIENT           0x00000002 
#define BCM_REGEX_MATCH_MULTI_FLOW          0x00000004 
#define BCM_REGEX_MATCH_CASE_INSENSITIVE    0x00000008 
#define BCM_REGEX_MATCH_L4_SRC_PORT         0x00000010 
#define BCM_REGEX_MATCH_L4_DST_PORT         0x00000020 
#define BCM_REGEX_MATCH_PKT_SEQUENCE        0x00000040 /* Qualify match only if
                                                          packets are received
                                                          without error in
                                                          sequence */

#define BCM_REGEX_MATCH_ACTION_IGNORE       0x00000001 
#define BCM_REGEX_MATCH_ACTION_DROP         0x00000002 
#define BCM_REGEX_MATCH_ACTION_COPY_TO_CPU  0x00000004 
#define BCM_REGEX_MATCH_ACTION_INT_PRI      0x00000008 
#define BCM_REGEX_MATCH_ACTION_DSCP         0x00000010 
#define BCM_REGEX_MATCH_ACTION_PKT_PRI      0x00000020 
#define BCM_REGEX_MATCH_ACTION_NOTIFY_HEADER_ONLY 0x00000040 
#define BCM_REGEX_MATCH_ACTION_NOTIFY_COPY_TO_CPU 0x00000080 

/* Regex report structure. */
typedef struct bcm_regex_report_s {
    int match_id;                   /* Match identifier. */
    uint32 flags;                   /* flags. */
    bcm_ip_t sip;                   /* Source IPV4 address. */
    bcm_ip_t dip;                   /* destination IPV4 address. */
    bcm_ip6_t sip6;                 /* Source IPV6 address. */
    uint8 protocol;                 /* IP protocol */
    bcm_ip6_t dip6;                 /* destination IPV6 address. */
    uint32 dst_port;                /* L4 dst port. */
    uint32 src_port;                /* L4 src port */
    uint32 match_flags;             /* match flags. */
    uint64 packet_count;            /* Packet count. */
    uint64 byte_count;              /* byte count. */
    uint64 packet_count_to_server;  /* Packet count to server. */
    uint64 byte_count_to_server;    /* byte count to server . */
    uint64 packet_count_to_client;  /* Packet count to client. */
    uint64 byte_count_to_client;    /* byte count to client . */
    uint32 start_timestamp;         /* Session start timestamp (10ms
                                       granularity) */
    uint32 last_timestamp;          /* Session last packet timestamp (10ms
                                       granularity). */
} bcm_regex_report_t;

/*  bcm_regex_engine_config_t_init */
extern void bcm_regex_report_t_init(
    bcm_regex_report_t *match);

/*  Prototype for user provided report callback. */
typedef void (*bcm_regex_report_cb)(
    int unit, 
    bcm_regex_report_t *report, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* register user provided callabck for regex report. */
extern int bcm_regex_report_register(
    int unit, 
    uint32 reports, 
    bcm_regex_report_cb callback, 
    void *user_data);

/* Unregister user provided callabck for regex report. */
extern int bcm_regex_report_unregister(
    int unit, 
    uint32 reports, 
    bcm_regex_report_cb callback, 
    void *user_data);

#endif /* defined(INCLUDE_REGEX) */

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_BREGEX_H__ */
