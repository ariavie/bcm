/*
 * $Id: cosq.h 1.174.2.1 Broadcom SDK $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_COSQ_H__
#define __BCM_COSQ_H__

#include <bcm/types.h>
#include <bcm/fabric.h>
#include <bcm/field.h>

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the COSQ subsystem. */
extern int bcm_cosq_init(
    int unit);

/* De-initialize the COSQ subsystem. */
extern int bcm_cosq_detach(
    int unit);

/* Configure the number of Class of Service Queues (COSQs). */
extern int bcm_cosq_config_set(
    int unit, 
    int numq);

/* Configure the number of Class of Service Queues (COSQs). */
extern int bcm_cosq_config_get(
    int unit, 
    int *numq);

/* Set the mapping from internal priority to COS queue. */
extern int bcm_cosq_mapping_set(
    int unit, 
    bcm_cos_t priority, 
    bcm_cos_queue_t cosq);

/* Get the mapping from internal priority to COS queue. */
extern int bcm_cosq_mapping_get(
    int unit, 
    bcm_cos_t priority, 
    bcm_cos_queue_t *cosq);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Config parameters for Priority flow control */
typedef struct bcm_cosq_pfc_config_s {
    int xoff_threshold;     /* Assert backpressure when number of buffers used
                               is at or above this threshold. */
    int xon_threshold;      /* Remove backpressure when number of buffers used
                               drops below this threshold. */
    int xoff_threshold_bd;  /* Assert backpressure when number of buffer
                               descriptors used is at or above this threshold. */
    int xon_threshold_bd;   /* Remove backpressure when number of buffer
                               descriptors used drops below this threshold. */
    int drop_threshold;     /* Drop packets when number of buffers used hit this
                               threshold. */
    int reserved_buffers;   /* Number of buffers reserved for the specified
                               priority group. */
    int lossless;           /* lossless PFC enable for the specified priority
                               group. */
} bcm_cosq_pfc_config_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Set the buffer pool allocation scheme for PFC (priority flow control). */
extern int bcm_cosq_pfc_config_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    bcm_cosq_pfc_config_t *config);

/* Get the buffer pool allocation scheme for PFC (priority flow control). */
extern int bcm_cosq_pfc_config_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    bcm_cosq_pfc_config_t *config);

/* Set the mapping from internal priority to COS queue. */
extern int bcm_cosq_port_mapping_set(
    int unit, 
    bcm_port_t port, 
    bcm_cos_t priority, 
    bcm_cos_queue_t cosq);

/* Get the mapping from internal priority to COS queue. */
extern int bcm_cosq_port_mapping_get(
    int unit, 
    bcm_port_t port, 
    bcm_cos_t priority, 
    bcm_cos_queue_t *cosq);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Class of Service policies. */
#define BCM_COSQ_NONE                       0x0        /* Pass through. */
#define BCM_COSQ_STRICT                     0x01       /* Weights are ignored. */
#define BCM_COSQ_ROUND_ROBIN                0x02       /* Weights are ignored. */
#define BCM_COSQ_WEIGHTED_ROUND_ROBIN       0x03       
#define BCM_COSQ_WEIGHTED_FAIR_QUEUING      0x04       
#define BCM_COSQ_DEFICIT_ROUND_ROBIN        0x05       /* XGS3 only. */
#define BCM_COSQ_BOUNDED_DELAY              0x06       /* Strata only. */
#define BCM_COSQ_SP                         BCM_COSQ_STRICT /* Strict priority. */
#define BCM_COSQ_EF                         0x07       /* Expedited forwarding. */
#define BCM_COSQ_AF                         0x08       /* Assured forwarding. */
#define BCM_COSQ_SP_GLOBAL                  0x09       
#define BCM_COSQ_BE                         0x0A       /* Best effort. */
#define BCM_COSQ_CALENDAR                   0x0B       /* Calendar based
                                                          scheduling discipline. */
#define BCM_COSQ_SP0                        0x0C       /* Strict priority level
                                                          0. */
#define BCM_COSQ_SP1                        0x0D       /* Strict priority level
                                                          1. */
#define BCM_COSQ_SP2                        0x0E       /* Strict priority level
                                                          2. */
#define BCM_COSQ_SP3                        0x0F       /* Strict priority level
                                                          3. */
#define BCM_COSQ_SP4                        0x10       /* Strict priority level
                                                          4. */
#define BCM_COSQ_SP5                        0x11       /* Strict priority level
                                                          5. */
#define BCM_COSQ_SP6                        0x12       /* Strict priority level
                                                          6. */
#define BCM_COSQ_SP7                        0x13       /* Strict priority level
                                                          7. */
#define BCM_COSQ_SP8                        0x14       /* Strict priority level
                                                          8. */
#define BCM_COSQ_SP9                        0x15       /* Strict priority level
                                                          9. */
#define BCM_COSQ_SP10                       0x16       /* Strict priority level
                                                          10. */
#define BCM_COSQ_AF0                        0x17       /* Assured forwarding
                                                          level 0. */
#define BCM_COSQ_AF1                        0x18       /* Assured forwarding
                                                          level 1. */
#define BCM_COSQ_AF2                        0x19       /* Assured forwarding
                                                          level 2. */
#define BCM_COSQ_AF3                        0x1A       /* Assured forwarding
                                                          level 3. */
#define BCM_COSQ_AF4                        0x1B       /* Assured forwarding
                                                          level 4. */
#define BCM_COSQ_AF5                        0x1C       /* Assured forwarding
                                                          level 5. */
#define BCM_COSQ_AF6                        0x1D       /* Assured forwarding
                                                          level 6. */
#define BCM_COSQ_AF7                        0x1E       /* Assured forwarding
                                                          level 7. */
#define BCM_COSQ_GSP0                       0x1F       /* Global Strict priority
                                                          level 0. */
#define BCM_COSQ_GSP1                       0x20       /* Global Strict priority
                                                          level 1. */
#define BCM_COSQ_GSP2                       0x21       /* Global Strict priority
                                                          level 2. */
#define BCM_COSQ_GSP3                       0x22       /* Global Strict priority
                                                          level 3. */
#define BCM_COSQ_GSP4                       0x23       /* Global Strict priority
                                                          level 4. */
#define BCM_COSQ_GSP5                       0x24       /* Global Strict priority
                                                          level 5. */
#define BCM_COSQ_GSP6                       0x25       /* Global Strict priority
                                                          level 6. */
#define BCM_COSQ_GSP7                       0x26       /* Global Strict priority
                                                          level 7. */
#define BCM_COSQ_GSP8                       0x27       /* Global Strict priority
                                                          level 8. */
#define BCM_COSQ_GSP9                       0x28       /* Global Strict priority
                                                          level 9. */
#define BCM_COSQ_GSP10                      0x29       /* Global Strict priority
                                                          level 10. */
#define BCM_COSQ_DELAY_TOLERANCE_NORMAL     0x2A       /* Delay tolerance is
                                                          normal */
#define BCM_COSQ_DELAY_TOLERANCE_LOW_DELAY  0x2B       /* Delay tolerance is low
                                                          delay */
#define BCM_COSQ_DELAY_TOLERANCE_02         0x2C       /* Flexible delay
                                                          tolerance level.
                                                          Mainly needed for
                                                          interfaces with rates
                                                          higher than 10G (e.g.
                                                          Interlaken) */
#define BCM_COSQ_DELAY_TOLERANCE_03         0x2D       /* Flexible delay
                                                          tolerance level.
                                                          Mainly needed for
                                                          interfaces with rates
                                                          higher than 10G (e.g.
                                                          Interlaken) */
#define BCM_COSQ_DELAY_TOLERANCE_04         0x2E       /* Flexible delay
                                                          tolerance level.
                                                          Mainly needed for
                                                          interfaces with rates
                                                          higher than 10G (e.g.
                                                          Interlaken) */
#define BCM_COSQ_DELAY_TOLERANCE_05         0x2F       /* Flexible delay
                                                          tolerance level.
                                                          Mainly needed for
                                                          interfaces with rates
                                                          higher than 10G (e.g.
                                                          Interlaken) */
#define BCM_COSQ_DELAY_TOLERANCE_06         0x30       /* Flexible delay
                                                          tolerance level.
                                                          Mainly needed for
                                                          interfaces with rates
                                                          higher than 10G (e.g.
                                                          Interlaken) */
#define BCM_COSQ_DELAY_TOLERANCE_07         0x31       /* Flexible delay
                                                          tolerance level.
                                                          Mainly needed for
                                                          interfaces with rates
                                                          higher than 10G (e.g.
                                                          Interlaken) */
#define BCM_COSQ_DELAY_TOLERANCE_08         0x32       /* Flexible delay
                                                          tolerance level. */
#define BCM_COSQ_DELAY_TOLERANCE_09         0x33       /* Flexible delay
                                                          tolerance level. */
#define BCM_COSQ_DELAY_TOLERANCE_10         0x34       /* Flexible delay
                                                          tolerance level */
#define BCM_COSQ_DELAY_TOLERANCE_11         0x35       /* Flexible delay
                                                          tolerance level */
#define BCM_COSQ_DELAY_TOLERANCE_12         0x36       /* Flexible delay
                                                          tolerance level */
#define BCM_COSQ_DELAY_TOLERANCE_13         0x37       /* Flexible delay
                                                          tolerance level */
#define BCM_COSQ_DELAY_TOLERANCE_14         0x38       /* Flexible delay
                                                          tolerance level */
#define BCM_COSQ_DELAY_TOLERANCE_15         0x39       /* Flexible delay
                                                          tolerance level */
#define BCM_COSQ_PON_DROPDOWN               0x3A       /* Weights for EPON DBA
                                                          Dropdown. */
#define BCM_COSQ_DELAY_TOLERANCE_10G_SLOW_ENABLED 0x3B       /* Adjusted for slow
                                                          enabled 10Gb ports */
#define BCM_COSQ_DELAY_TOLERANCE_10G_LOW_DELAY 0x3C       /* Adjusted for low delay
                                                          10Gb ports */
#define BCM_COSQ_DELAY_TOLERANCE_1G         0x3D       /* Adjusted for 1Gb ports */
#define BCM_COSQ_DELAY_TOLERANCE_40G_SLOW_ENABLED 0x3E       /* Adjusted for slow
                                                          enabled 40Gb ports */
#define BCM_COSQ_DELAY_TOLERANCE_40G_LOW_DELAY 0x3F       /* Adjusted for low delay
                                                          40Gb ports */
#define BCM_COSQ_DELAY_TOLERANCE_100G_SLOW_ENABLED 0x40       /* Adjusted for slow
                                                          enabled 100Gb ports */
#define BCM_COSQ_DELAY_TOLERANCE_100G_LOW_DELAY 0x41       /* Adjusted for low delay
                                                          100Gb ports */
#define BCM_COSQ_DELAY_TOLERANCE_200G_SLOW_ENABLED 0x42       /* Adjusted for slow
                                                          enabled 200Gb ports */
#define BCM_COSQ_DELAY_TOLERANCE_200G_LOW_DELAY 0x43       /* Adjusted for low delay
                                                          200Gb ports */
#define BCM_COSQ_DELAY_TOLERANCE_SET_COMMON_STATUS_MSG -2         /* sets the status
                                                          message generation
                                                          period, in the common
                                                          status message mode */
#define BCM_COSQ_MAX                        0x43       

#define BCM_COSQ_WEIGHT_UNLIMITED   -1         
#define BCM_COSQ_WEIGHT_STRICT      0          
#define BCM_COSQ_WEIGHT_MIN         1          

#define BCM_COSQ_PRIO_VALID(prio)  ((prio) >= 0 && (prio < 8)) 

#define BCM_COSQ_QUEUE_VALID(unit, numq)  \
    ((numq) >= 0 && (numq) < NUM_COS(unit)) 

#ifndef BCM_HIDE_DISPATCHABLE

/* Set Class of Service policy, weights and delay. */
extern int bcm_cosq_sched_set(
    int unit, 
    int mode, 
    const int weights[BCM_COS_COUNT], 
    int delay);

/* Set Class of Service policy, weights and delay. */
extern int bcm_cosq_port_sched_set(
    int unit, 
    bcm_pbmp_t pbm, 
    int mode, 
    const int weights[BCM_COS_COUNT], 
    int delay);

/* Set Class of Service policy, weights and delay. */
extern int bcm_cosq_sched_get(
    int unit, 
    int *mode, 
    int weights[BCM_COS_COUNT], 
    int *delay);

/* Get Class of Service policy, weights and delay. */
extern int bcm_cosq_port_sched_get(
    int unit, 
    bcm_pbmp_t pbm, 
    int *mode, 
    int weights[BCM_COS_COUNT], 
    int *delay);

/* Retrieve maximum weights for given COS policy. */
extern int bcm_cosq_sched_weight_max_get(
    int unit, 
    int mode, 
    int *weight_max);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_COSQ_ALL            0x00000001 
#define BCM_COSQ_BW_EAV_MODE    0x00000008 /* Prioritize selected queue(s) for
                                              bandwidth before non-selected
                                              queue(s). */
#define BCM_COSQ_BW_LLFC        0x00000010 /* Link Level Flow Control setting */
#define BCM_COSQ_BW_PACKET_MODE 0x00000020 /* The bandwidth specified is in
                                              packets per second instead of
                                              kbits per second */

#ifndef BCM_HIDE_DISPATCHABLE

/* Configure a port bandwidth distribution among COS queues. */
extern int bcm_cosq_port_bandwidth_set(
    int unit, 
    bcm_port_t port, 
    bcm_cos_queue_t cosq, 
    uint32 kbits_sec_min, 
    uint32 kbits_sec_max, 
    uint32 flags);

/* Configure a port bandwidth distribution among COS queues. */
extern int bcm_cosq_port_bandwidth_get(
    int unit, 
    bcm_port_t port, 
    bcm_cos_queue_t cosq, 
    uint32 *kbits_sec_min, 
    uint32 *kbits_sec_max, 
    uint32 *flags);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Discard (WRED) related flags. */
#define BCM_COSQ_DISCARD_ENABLE             0x0001     
#define BCM_COSQ_DISCARD_CAP_AVERAGE        0x0002     
#define BCM_COSQ_DISCARD_NONTCP             0x0004     
#define BCM_COSQ_DISCARD_COLOR_GREEN        0x0100     
#define BCM_COSQ_DISCARD_COLOR_YELLOW       0x0200     
#define BCM_COSQ_DISCARD_COLOR_RED          0x0400     
#define BCM_COSQ_DISCARD_COLOR_BLACK        0x0800     
#define BCM_COSQ_DISCARD_COLOR_ALL          0x0F00     
#define BCM_COSQ_DISCARD_DROP_FIRST         BCM_COSQ_DISCARD_COLOR_RED 
#define BCM_COSQ_DISCARD_PACKETS            0x1000     
#define BCM_COSQ_DISCARD_BYTES              0x2000     
#define BCM_COSQ_DISCARD_MARK_CONGESTION    0x4000     
#define BCM_COSQ_DISCARD_PORT               0x8000     
#define BCM_COSQ_DISCARD_DEVICE             0x10000    
#define BCM_COSQ_DISCARD_BUFFER_DESC        0x20000    
#define BCM_COSQ_DISCARD_TCP                0x40000    
#define BCM_COSQ_DISCARD_SYSTEM             0x80000    
#define BCM_COSQ_DISCARD_PROBABILITY1       0x100000   
#define BCM_COSQ_DISCARD_PROBABILITY2       0x200000   
#define BCM_COSQ_DISCARD_IFP                0x400000   
#define BCM_COSQ_DISCARD_OUTER_CFI          0x800000   

#ifndef BCM_HIDE_DISPATCHABLE

/* Configure Weighted Random Early Discard (WRED). */
extern int bcm_cosq_discard_set(
    int unit, 
    uint32 flags);

/* Configure Weighted Random Early Discard (WRED). */
extern int bcm_cosq_discard_get(
    int unit, 
    uint32 *flags);

/* Configure a port's Weighted Random Early Discard (WRED) parameters. */
extern int bcm_cosq_discard_port_set(
    int unit, 
    bcm_port_t port, 
    bcm_cos_queue_t cosq, 
    uint32 color, 
    int drop_start, 
    int drop_slope, 
    int average_time);

/* Configure a port's Weighted Random Early Discard (WRED) parameters. */
extern int bcm_cosq_discard_port_get(
    int unit, 
    bcm_port_t port, 
    bcm_cos_queue_t cosq, 
    uint32 color, 
    int *drop_start, 
    int *drop_slope, 
    int *average_time);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Definitions for queue priorities. Used for end-to-end scheduler flow
 * control configuration and for threshold setting
 */
#define BCM_COSQ_HIGH_PRIORITY  -4         
#define BCM_COSQ_LOW_PRIORITY   -5         

/* flags for various admission tests */
#define BCM_COSQ_CONTROL_ADMISSION_CT   0x0001     /* Category */
#define BCM_COSQ_CONTROL_ADMISSION_CTTC 0x0002     /* category, traffic class */
#define BCM_COSQ_CONTROL_ADMISSION_CTCC 0x0004     /* category, connection class */
#define BCM_COSQ_CONTROL_ADMISSION_ST   0x0008     /* statistics tag */
#define BCM_COSQ_CONTROL_ADMISSION_LLFC 0x0010     
#define BCM_COSQ_CONTROL_ADMISSION_PFC  0x0020     

/* Features that can be controlled on a gport/cosq  basis. */
typedef enum bcm_cosq_control_e {
    bcmCosqControlFabricConnectMinUtilization, /* percentage of minimum utilization
                                           before connection is established. */
    bcmCosqControlFabricConnectMaxTime, /* timeout configuration for minimum
                                           utilization connection setting. */
    bcmCosqControlBandwidthBurstMax,    /* kbits burst for maximum rate
                                           restriction if different from default
                                           burst size. */
    bcmCosqControlBandwidthBurstMin,    /* Burst for maximum rate restriction in
                                           kbits (for DNX [MZ] devices, check
                                           documentation for burst max units). */
    bcmCosqControlFabricConnectMax,     /* length a queue retains its fabric
                                           connection */
    bcmCosqControlPortTxqBackpressure,  /* the port capability of pausing
                                           traffic scheduling on the specific
                                           queue. */
    bcmCosqControlCopyPktToCpuUseTC,    /* use generic TC based COS mapping for
                                           copying packets to CPU. */
    bcmCosqControlWdrrGranularity,      /* granularity selector for WDRR weight. */
    bcmCosqControlDpValueDlf,           /* DP value of the unknown
                                           unicast/multicast packet. */
    bcmCosqControlDpChangeDlf,          /* DP change control for the unknown
                                           unicast/multicast packet. */
    bcmCosqControlDpChangeXoff,         /* DP change control for the
                                           flow-controllable port. */
    bcmCosqControlEavClassAWindow,      /* EAV Class A traffic credit carry-over
                                           control */
    bcmCosqControlEgressRateBurstAccumulateControl, /* Burst accumulate control for egress
                                           rate. */
    bcmCosqControlEgressRateType,       /* Rate type selector for egress rate
                                           control. */
    bcmCosqControlSchedulable,          /* Allow TX scheduling of packets in the
                                           queue. */
    bcmCosqControlEEETxQCongestionThreshold, /* If any of these thresholds are
                                           exceeded, EEE is disabled for all
                                           ports. */
    bcmCosqControlPacketLengthAdjust,   /* positive or negative queue packet
                                           length adjustment in bytes */
    bcmCosqControlCongestionManagedQueue, /* Congestion managed queue identifier */
    bcmCosqControlCongestionFeedbackWeight, /* Congestion feedback weight */
    bcmCosqControlCongestionSetPoint,   /* Congestion point queue size set point */
    bcmCosqControlCongestionSampleBytesMin, /* Minimum number of bytes to enqueue
                                           between congestion status sampling */
    bcmCosqControlCongestionSampleBytesMax, /* Maximum number of bytes to enqueue
                                           between congestion status sampling */
    bcmCosqControlFabricPortIngressScheduler, /* Associating ingress scheduler node
                                           with Fabric/Child gport */
    bcmCosqControlFlowControlPriority,  /* Flow Control Mapping to port level HR
                                           end-to-end scheduler. For end-to-end
                                           port scheduler only
                                           BCM_COSQ_HIGH_PRIORITY value is
                                           meaningful for arg parameter. */
    bcmCosqControlSpLevelMax,           /* Retreive Max SP level of a scheduler
                                           Element */
    bcmCosqControlSp0WeightMax,         /* For a Scheduler Element, retreive the
                                           Max weight support for SP level 0 */
    bcmCosqControlSp1WeightMax,         /* For a Scheduler Element, retreive the
                                           Max weight support for SP level 1 */
    bcmCosqControlSp2WeightMax,         /* For a Scheduler Element, retreive the
                                           Max weight support for SP level 2 */
    bcmCosqControlSp3WeightMax,         /* For a Scheduler Element, retreive the
                                           Max weight support for SP level 3 */
    bcmCosqControlSp4WeightMax,         /* For a Scheduler Element, retreive the
                                           Max weight support for SP level 4 */
    bcmCosqControlSp5WeightMax,         /* For a Scheduler Element, retreive the
                                           Max weight support for SP level 5 */
    bcmCosqControlSp6WeightMax,         /* For a Scheduler Element, retreive the
                                           Max weight support for SP level 6 */
    bcmCosqControlSp7WeightMax,         /* For a Scheduler Element, retreive the
                                           Max weight support for SP level 7 */
    bcmCosqControlSp8WeightMax,         /* For a Scheduler Element, retreive the
                                           Max weight support for SP level 8 */
    bcmCosqControlSp9WeightMax,         /* For a Scheduler Element, retreive the
                                           Max weight support for SP level 9 */
    bcmCosqControlSp10WeightMax,        /* For a Scheduler Element, retreive the
                                           Max weight support for SP level 10 */
    bcmCosqControlDropLimitAlpha,       /* Congestion drop limit alpha */
    bcmCosqControlDropLimitBytes,       /* Congestion drop limit bytes */
    bcmCosqControlResumeLimitBytes,     /* Resume traffic flow from Congestion
                                           drop */
    bcmCosqControlYellowDropLimitBytes, /* Congestion yellow drop limit bytes */
    bcmCosqControlRedDropLimitBytes,    /* Congestion red drop limit bytes */
    bcmCosqControlQselOffset,           /* associate qsel_offset_id */
    bcmCosqControlEgressFlowControlThreshold0, /* Boundary before which all traffic
                                           flows */
    bcmCosqControlEgressFlowControlThreshold1, /* Boundary for some traffic throttling */
    bcmCosqControlEgressFlowControlThreshold2, /* Boundary for higher traffic
                                           throttling */
    bcmCosqControlEgressFlowControlThreshold3, /* Boundary after which all traffic
                                           drops */
    bcmCosqControlFabricPortScheduler,  /* Associating scheduler node with
                                           Fabric/Child gport */
    bcmCosqControlClassMap,             /* Associate an Egress Cos to a specific
                                           resource */
    bcmCosqControlSchedulerAdoptAllPriority, /* Scheduler node priority adoption
                                           scheme, 1 - adopt all priorities, 0 -
                                           standard behaviour */
    bcmCosqControlEgressPool,           /* Associate an Egress Cos to a specific
                                           service pool */
    bcmCosqControlEgressPoolLimitBytes, /* Shared pool limit setting */
    bcmCosqControlEgressPoolYellowLimitBytes, /* Shared pool limit setting for yellow
                                           packets */
    bcmCosqControlEgressPoolRedLimitBytes, /* Shared pool limit setting for red
                                           packets */
    bcmCosqControlEgressPoolLimitEnable, /* Enable or disable using egress shared
                                           pool */
    bcmCosqControlEfPropagation,        /* Enable or disable EF propagation */
    bcmCosqControlFlowControlState,     /* Set flow control state for the
                                           specified gport */
    bcmCosqControlHeaderUpdateField,    /* updating header with queue specific
                                           information/signature */
    bcmCosqControlFlowSlowRate1,        /* configure the device wide slow rate
                                           one */
    bcmCosqControlFlowSlowRate2,        /* configure the device wide slow rate
                                           two */
    bcmCosqControlFlowSlowRate,         /* associate slow rate with a connector
                                           gport or scheduling element gport. In
                                           case of a composite element this
                                           configuration should be done with
                                           gport created when the element was
                                           added. the valid values are 0 =>
                                           disable, 1 => slowRate one, 2 => slow
                                           Rate two */
    bcmCosqControlDiscreteWeightLevel0, /* weight associated with level 0 of
                                           scheduler element having discrete
                                           weight attribute */
    bcmCosqControlDiscreteWeightLevel1, /* weight associated with level 1 of
                                           scheduler element having discrete
                                           weight attribute */
    bcmCosqControlDiscreteWeightLevel2, /* weight associated with level 2 of
                                           scheduler element having discrete
                                           weight attribute */
    bcmCosqControlDiscreteWeightLevel3, /* weight associated with level 3 of
                                           scheduler element having discrete
                                           weight attribute */
    bcmCosqControlAdmissionTestProfileA, /* admission test profile A */
    bcmCosqControlAdmissionTestProfileB, /* admission test profile B */
    bcmCosqControlFlowControlEnable,    /* Enables / Disables device-level flow
                                           control functionality */
    bcmCosqControlEgressBandwidthEnable, /* Enable / Disables Egress bandwidth
                                           functionality */
    bcmCosqControlCongestionFeedbackMax, /* Maximum value of the Congestion
                                           Feedback. Units: bytes */
    bcmCosqControlCongestionManagedQueueMin, /* It defines the range of VOQs mapped
                                           to CP-Id */
    bcmCosqControlCongestionManagedQueueMax, /* It defines the range of VOQs mapped
                                           to CP-Id */
    bcmCosqControlCongestionThresholdRandom, /* Randomize the Congestion Sample
                                           Threshold */
    bcmCosqControlIgnoreAnemic,         /* Ignore anemic priority */
    bcmCosqControlCongestionProxy,      /* Enable/disable QCN Proxy */
    bcmCosqControlSchedulerTxqEmptySelect, /* Select the source of TxQ empty status */
    bcmCosqControlWdrrNegCreditClearEnable, /* Enable auto-clear on WDRR's negative
                                           credit in next run */
    bcmCosqControlSchedulerBurstModeEnable, /* Enable the burst mode for round robin
                                           scheduler */
    bcmCosqControlEgressWredDropCancel, /* Bypass the WRED drop at egress side */
    bcmCosqControlMulticastPriorityIngressScheduling, /* Multicast packets traffic class
                                           mapping to high/low strict priority */
    bcmCosqControlEgressUCQueueSharedLimitBytes, /* Egress UC Shared Queue limit setting */
    bcmCosqControlEgressUCQueueMinLimitBytes, /* UC Min Queue limit setting */
    bcmCosqControlEgressUCSharedDynamicEnable, /* Enable Dynamic threshold limit for
                                           Egress UC Queue */
    bcmCosqControlEgressUCQueueLimitEnable, /* Enable Discards based on configured
                                           threshold for Egress UC Queue */
    bcmCosqControlEgressMCQueueSharedLimitBytes, /* Egress MC Shared Queue limit setting */
    bcmCosqControlEgressMCQueueMinLimitBytes, /* MC Min Queue limit setting */
    bcmCosqControlEgressMCSharedDynamicEnable, /* Enable Dynamic threshold limit for
                                           Egress MC Queue */
    bcmCosqControlEgressMCQueueLimitEnable, /* Enable Discards based on configured
                                           threshold for Egress UC Queue */
    bcmCosqControlIngressPortPGSharedLimitBytes, /* Ingress Port PG Shared limit setting */
    bcmCosqControlIngressPortPGMinLimitBytes, /* Ingress Port PG Min limit setting */
    bcmCosqControlIngressPortPGSharedDynamicEnable, /* Enable Dynamic threshold limit for
                                           Ingress Port PG */
    bcmCosqControlIngressPortPoolMaxLimitBytes, /* Ingress Port SP Max limit setting */
    bcmCosqControlIngressPortPoolMinLimitBytes, /* Ingress Port SP Min limit setting */
    bcmCosqControlBandwidthBurstMaxEmptyQueue, /* Sets the maximum amount of credits
                                           that an empty queue can get */
    bcmCosqControlBandwidthBurstMaxFlowControlledQueue /* Sets the maximum amount of credits
                                           for a flow controlled queue */
} bcm_cosq_control_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* set various features at the gport/cosq level. */
extern int bcm_cosq_control_set(
    int unit, 
    bcm_gport_t port, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_control_t type, 
    int arg);

/* Get various features at the gport/cosq level. */
extern int bcm_cosq_control_get(
    int unit, 
    bcm_gport_t port, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_control_t type, 
    int *arg);

#endif /* BCM_HIDE_DISPATCHABLE */

/* For Virtual output queues (system ports) */
typedef struct bcm_cosq_gport_discard_s {
    uint32 flags; 
    int min_thresh;         /* Queue depth in bytes to begin dropping. */
    int max_thresh;         /* Queue depth in bytes to drop all packets. */
    int drop_probability;   /* Drop probability at max threshold. */
    int gain;               /* Determines the smoothing that should be applied. */
    int ecn_thresh;         /* Queue depth in bytes to stop marking and start
                               dropping. */
    int refresh_time;       /* Actual average refresh time. */
} bcm_cosq_gport_discard_t;

/* For Virtual output queues (system ports) */
typedef enum bcm_cosq_gport_stats_e {
    bcmCosqGportGreenAcceptedPkts,      /* Green/DP0, accepted packet count. */
    bcmCosqGportGreenAcceptedBytes,     /* Green/DP0, accepted byte count. */
    bcmCosqGportNotGreenAcceptedPkts,   /* Not Green/DP1-3, accepted packet
                                           count. */
    bcmCosqGportNotGreenAcceptedBytes,  /* Not Green/DP1-3, accepted byte count. */
    bcmCosqGportGreenCongestionMarkedPkts, /* Green/DP0, ECN Marked packets. */
    bcmCosqGportGreenCongestionMarkedBytes, /* Green/DP0, ECN Marked bytes. */
    bcmCosqGportGreenDiscardDroppedPkts, /* Green/DP0, WRED dropped packets. */
    bcmCosqGportGreenDiscardDroppedBytes, /* Green/DP0, WRED dropped bytes. */
    bcmCosqGportYellowAcceptedPkts,     /* Yellow/DP1, accepted packet count. */
    bcmCosqGportYellowAcceptedBytes,    /* Yellow/DP1, accepted byte count. */
    bcmCosqGportYellowCongestionMarkedPkts, /* Yellow/DP1, ECN Marked packets. */
    bcmCosqGportYellowCongestionMarkedBytes, /* Yellow/DP1, ECN nMarked bytes. */
    bcmCosqGportYellowDiscardDroppedPkts, /* Yellow/DP1, WRED dropped packets. */
    bcmCosqGportYellowDiscardDroppedBytes, /* Yellow/DP1, WRED dropped bytes. */
    bcmCosqGportRedAcceptedPkts,        /* Red/DP2, accepted packet count. */
    bcmCosqGportRedAcceptedBytes,       /* Red/DP2, accepted byte count. */
    bcmCosqGportRedCongestionMarkedPkts, /* Red/DP2, ECN Marked packets. */
    bcmCosqGportRedCongestionMarkedBytes, /* Red/DP2, ECN Marked bytes. */
    bcmCosqGportRedDiscardDroppedPkts,  /* Red/DP2, WRED dropped packets. */
    bcmCosqGportRedDiscardDroppedBytes, /* Red/DP2, WRED dropped bytes. */
    bcmCosqGportBlackAcceptedPkts,      /* Black/DP3, accepted packet count. */
    bcmCosqGportBlackAcceptedBytes,     /* Black/DP3, accepted byte count. */
    bcmCosqGportNonWredDroppedPkts,     /* NON-WRED dropped packet count. */
    bcmCosqGportNonWredDroppedBytes,    /* NON-WRED dropped byte count. */
    bcmCosqGportDequeuedPkts,           /* dequeued packets. */
    bcmCosqGportDequeuedBytes,          /* dequeued bytes. */
    bcmCosqGportGreenDroppedPkts,       /* Green/DP0, non-WRED dropped pkts. */
    bcmCosqGportGreenDroppedBytes,      /* Green/DP0, non-WRED dropped bytes. */
    bcmCosqGportNotGreenDroppedPkts,    /* Not Green/DP1-3 dropped pkts. */
    bcmCosqGportNotGreenDroppedBytes,   /* Not Green/DP1-3 dropped bytes. */
    bcmCosqGportYellowDroppedPkts,      /* Yellow/DP1, non-WRED dropped pkts. */
    bcmCosqGportYellowDroppedBytes,     /* Yellow/DP1, non-WRED dropped bytes. */
    bcmCosqGportRedDroppedPkts,         /* Red/DP2, non-WRED dropped pkts. */
    bcmCosqGportRedDroppedBytes,        /* Red/DP2, non-WRED dropped bytes. */
    bcmCosqGportBlackCongestionMarkedPkts, /* Black/DP3, ECN Marked packets. */
    bcmCosqGportBlackCongestionMarkedBytes, /* Black/DP3, ECN Marked bytes. */
    bcmCosqGportBlackDiscardDroppedPkts, /* Black/DP3, WRED dropped at packets. */
    bcmCosqGportBlackDiscardDroppedBytes, /* Black/DP3, WRED dropped bytes. */
    bcmCosqGportBlackDroppedPkts,       /* Black/DP3, non-WRED dropped at
                                           packets. */
    bcmCosqGportBlackDroppedBytes,      /* Black/DP3, non-WRED dropped bytes. */
    bcmCosqGportOverSubscribeTotelDroppedPkts, /* Free list underflow, pkts dropped. */
    bcmCosqGportOverSubscribeTotalDroppedBytes, /* Free list underflow, bytes dropped. */
    bcmCosqGportOverSubscribeGuaranteeDroppedPkts, /* Gbl buf thres guarantee, pkts
                                           dropped. */
    bcmCosqGportOverSubscribeGuaranteedDroppedBytes, /* Gbl buf thres guarantee, bytes
                                           dropped. */
    bcmCosqGportDiscardDroppedPkts,     /* discarded packets */
    bcmCosqGportDiscardDroppedBytes,    /* discarded bytes */
    bcmCosqGportYellowRedDiscardDroppedPkts, /* Yellow and Red dropped packets */
    bcmCosqGportYellowRedDiscardDroppedBytes, /* Yellow and Red dropped bytes */
    bcmCosqGportEnqueuedPkts,           /* enqueued packets */
    bcmCosqGportEnqueuedBytes,          /* enqueued bytes */
    bcmCosqGportOutLimitDroppedPkts,    /* Egress Admission Control (EAC)
                                           dropped pkts */
    bcmCosqGportOutLimitDroppedBytes,   /* EAC dropped bytes */
    bcmCosqGportOutLimitDroppedGreenPkts, /* EAC dropped green pkts */
    bcmCosqGportOutLimitDroppedGreenBytes, /* EAC dropped green bytes */
    bcmCosqGportOutLimitDroppedYellowPkts, /* EAC dropped yellow pkts */
    bcmCosqGportOutLimitDroppedYellowBytes, /* EAC dropped yellow bytes */
    bcmCosqGportOutLimitDroppedRedPkts, /* EAC dropped red pkts */
    bcmCosqGportOutLimitDroppedRedBytes, /* EAC dropped red bytes */
    bcmCosqGportOutLimitDroppedMulticastPkts, /* EAC dropped multicast pkts */
    bcmCosqGportOutLimitDroppedMulticastBytes, /* EAC dropped multicast bytes */
    bcmCosqGportOutPkts,                /* Egress Interface. */
    bcmCosqGportOutBytes,               /* Egress Interface. */
    bcmCosqGportReceivedBytes,          /* Bytes received into queue. */
    bcmCosqGportReceivedPkts,           /* Pkts received into queue. */
    bcmCosqGportDroppedBytes,           /* Bytes dropped in queue. */
    bcmCosqGportDroppedPkts,            /* Pkts dropped in queue. */
    bcmCosqGportDelayedBytes,           /* Delayed bytes. */
    bcmCosqGportDelayedHundredUs,       /* Maximum Pkts delay. */
    bcmCosqGportGreenPkts,              /* Green/DP0 packet count. */
    bcmCosqGportGreenBytes,             /* Green/DP0 byte count. */
    bcmCosqGportNotGreenPkts,           /* Not-Green/DP0 packet count. */
    bcmCosqGportNotGreenBytes,          /* Not-Green/DP0 byte count. */
    bcmCosqGportOffset0Bytes,           /* Byte count at configurable offset 0. */
    bcmCosqGportOffset0Packets,         /* Packet count at configurable offset
                                           0. */
    bcmCosqGportOffset1Bytes,           /* Byte count at configurable offset 1. */
    bcmCosqGportOffset1Packets,         /* Packet count at configurable offset
                                           1. */
    bcmCosqGportOffset2Bytes,           /* Byte count at configurable offset 2. */
    bcmCosqGportOffset2Packets,         /* Packet count at configurable offset
                                           2. */
    bcmCosqGportOffset3Bytes,           /* Byte count at configurable offset 3. */
    bcmCosqGportOffset3Packets,         /* Packet count at configurable offset
                                           3. */
    bcmCosqGportOffset4Bytes,           /* Byte count at configurable offset 4. */
    bcmCosqGportOffset4Packets,         /* Packet count at configurable offset
                                           4. */
    bcmCosqGportOffset5Bytes,           /* Byte count at configurable offset 5. */
    bcmCosqGportOffset5Packets,         /* Packet count at configurable offset
                                           5. */
    bcmCosqGportOffset6Bytes,           /* Byte count at configurable offset 6. */
    bcmCosqGportOffset6Packets,         /* Packet count at configurable offset
                                           6. */
    bcmCosqGportOffset7Bytes,           /* Byte count at configurable offset 7. */
    bcmCosqGportOffset7Packets,         /* Packet count at configurable offset
                                           7. */
    bcmCosqGportStatCount               /* Must be the last entry ! */
} bcm_cosq_gport_stats_t;

/* Profile stat event-related flags. */
#define BCM_COSQ_GPORT_STATS_SHARED 0x00000001 

/* Statistics Profile */
typedef struct bcm_cosq_gport_stat_profile_s {
    SHR_BITDCL stats[_SHR_BITDCLSIZE(bcmCosqGportOutBytes)]; /* Use Gport Stats Enumeration */
} bcm_cosq_gport_stat_profile_t;

#define BCM_COSQ_GPORT_STAT_PROFILE_INIT(_profile_set)  SHR_BITCLR_RANGE(_profile_set.stats, 0, (sizeof(_profile_set)*8)) 
#define BCM_COSQ_GPORT_STAT_PROFILE_ADD(_profile_set, _stat)  SHR_BITSET(_profile_set.stats, _stat) 
#define BCM_COSQ_GPORT_STAT_PROFILE_REMOVE(_profile_set, _stat)  SHR_BITCLR(_profile_set.stats, _stat) 
#define BCM_COSQ_GPORT_STAT_PROFILE_TEST(_profile_set, _stat)  SHR_BITGET(_profile_set.stats, _stat) 

#define BCM_COSQ_PRIORITY_PROFILE_MAX_SIZE  64         /* Maximum priority
                                                          profile size across
                                                          all devices. */

/* Priority Profile */
typedef struct bcm_cosq_gport_priority_profile_s {
    SHR_BITDCL pri[_SHR_BITDCLSIZE(BCM_COSQ_PRIORITY_PROFILE_MAX_SIZE)]; /* Use Gport priority macros Enumeration */
} bcm_cosq_gport_priority_profile_t;

#define BCM_COSQ_PRI_PROFILE_SET(_profile, _offset)  SHR_BITSET(_profile.pri, _offset) 
#define BCM_COSQ_PRI_PROFILE_GET(_profile, _offset)  SHR_BITGET(_profile.pri, _offset) 
#define BCM_COSQ_PRI_PROFILE_CLEAR(_profile, _offset)  SHR_BITCLR(_profile.pri, (sizeof(_profile))) 
#define BCM_COSQ_PRI_PROFILE_CLEAR_ALL(_profile)  SHR_BITCLR_RANGE(_profile.pri, 0, BCM_COSQ_PRIORITY_PROFILE_MAX_SIZE) 
#define BCM_COSQ_PRI_PROFILE_SET_ALL(_profile)  SHR_BITSET_RANGE(_profile.pri, 0, BCM_COSQ_PRIORITY_PROFILE_MAX_SIZE) 

#ifndef BCM_HIDE_DISPATCHABLE

/* Get a COSQ priority profile. */
extern int bcm_cosq_priority_profile_get(
    int unit, 
    int pri_profile_id, 
    int *count, 
    bcm_cosq_gport_priority_profile_t *pri_profile);

/* Initialize a COSQ priority profile. */
extern int bcm_cosq_priority_profile_set(
    int unit, 
    int pri_profile_id, 
    int count, 
    bcm_cosq_gport_priority_profile_t *pri_profile);

/* Associate a queue range with a priority profile. */
extern int bcm_cosq_priority_set(
    int unit, 
    int start_queue, 
    int end_queue, 
    int pri_profile_id);

/* Get the priority profile ID associated with a queue range. */
extern int bcm_cosq_priority_get(
    int unit, 
    int start_queue, 
    int end_queue, 
    int *pri_profile_id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize a COSQ GPORT discard structure. */
extern void bcm_cosq_gport_discard_t_init(
    bcm_cosq_gport_discard_t *discard);

#ifndef BCM_HIDE_DISPATCHABLE

extern int bcm_cosq_gport_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_gport_t *physical_port, 
    int *num_cos_levels, 
    uint32 *flags);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef int (*bcm_cosq_gport_traverse_cb)(
    int unit, 
    bcm_gport_t port, 
    int numq, 
    uint32 flags, 
    bcm_gport_t gport, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

extern int bcm_cosq_gport_traverse(
    int unit, 
    bcm_cosq_gport_traverse_cb cb, 
    void *user_data);

extern int bcm_cosq_fabric_distribution_add(
    int unit, 
    bcm_fabric_distribution_t ds_id, 
    int num_cos_levels, 
    uint32 flags, 
    bcm_gport_t *req_gport);

extern int bcm_cosq_fabric_distribution_get(
    int unit, 
    bcm_fabric_distribution_t ds_id, 
    int *num_cos_levels, 
    bcm_gport_t *req_gport, 
    uint32 *flags);

extern int bcm_cosq_gport_size_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    uint32 bytes_min, 
    uint32 bytes_max);

extern int bcm_cosq_gport_size_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    uint32 *bytes_min, 
    uint32 *bytes_max);

#endif /* BCM_HIDE_DISPATCHABLE */

/* color size related flags. */
#define BCM_COSQ_GPORT_SIZE_BYTES           0x0001     
#define BCM_COSQ_GPORT_SIZE_BUFFER_DESC     0x0002     
#define BCM_COSQ_GPORT_SIZE_COLOR_BLIND     0x0004     
#define BCM_COSQ_GPORT_SIZE_COLOR_SYSTEM_RED 0x0008     

/* color size configuration */
typedef struct bcm_cosq_gport_size_s {
    uint32 size_min;        /* minimum size */
    uint32 size_max;        /* maximum size */
    int32 size_alpha_max;   /* additional maximum size limit: free size * 2 ^
                               size_alpha_max */
} bcm_cosq_gport_size_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* size setting (color based) */
extern int bcm_cosq_gport_color_size_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_color_t color, 
    uint32 flags, 
    bcm_cosq_gport_size_t *gport_size);

/* Get size_setting (color based) */
extern int bcm_cosq_gport_color_size_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_color_t color, 
    uint32 flags, 
    bcm_cosq_gport_size_t *gport_size);

extern int bcm_cosq_gport_enable_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    int enable);

extern int bcm_cosq_gport_enable_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    int *enable);

extern int bcm_cosq_gport_stat_enable_set(
    int unit, 
    bcm_gport_t gport, 
    int enable);

extern int bcm_cosq_gport_stat_enable_get(
    int unit, 
    bcm_gport_t gport, 
    int *enable);

extern int bcm_cosq_gport_stat_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_gport_stats_t stat, 
    uint64 *value);

extern int bcm_cosq_gport_stat_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_gport_stats_t stat, 
    uint64 value);

extern int bcm_cosq_gport_stat_config_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_gport_t lgl_gport, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    bcm_cosq_gport_stat_profile_t *profile);

extern int bcm_cosq_gport_stat_config_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_gport_t lgl_gport, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    bcm_cosq_gport_stat_profile_t profile);

extern int bcm_cosq_gport_statistic_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_gport_t lgl_gport, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    bcm_cosq_gport_stats_t stat, 
    uint64 *value);

extern int bcm_cosq_gport_statistic_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_gport_t lgl_gport, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    bcm_cosq_gport_stats_t stat, 
    uint64 value);

extern int bcm_cosq_gport_statistic_multi_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_gport_t lgl_gport, 
    bcm_cos_queue_t cosq, 
    int stat_count, 
    bcm_cosq_gport_stats_t *stats_array, 
    int value_count, 
    uint64 *value_array);

extern int bcm_cosq_gport_statistic_multi_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_gport_t lgl_gport, 
    bcm_cos_queue_t cosq, 
    int stat_count, 
    bcm_cosq_gport_stats_t *stats_array, 
    uint64 value);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_COSQ_GPORT_WITH_ID              0x00000001 
#define BCM_COSQ_GPORT_SCHEDULER            0x00000002 
#define BCM_COSQ_GPORT_OVERLAY              0x00000004 
#define BCM_COSQ_GPORT_UCAST_QUEUE_GROUP    0x00000008 
#define BCM_COSQ_GPORT_DESTMOD_UCAST_QUEUE_GROUP 0x00000010 
#define BCM_COSQ_GPORT_MCAST_QUEUE          0x00000010 
#define BCM_COSQ_GPORT_MCAST_QUEUE_GROUP    0x00000020 
#define BCM_COSQ_GPORT_SUBSCRIBER           0x00000040 
#define BCM_COSQ_GPORT_TM_FLOW_ID           0x00000040 
#define BCM_COSQ_GPORT_EGRESS_GROUP         0x00000080 
#define BCM_COSQ_GPORT_DISABLE              0x00000100 /* Disable queue, used
                                                          for
                                                          BCM_COSQ_GPORT_CALENDAR
                                                          scheduling discipline */
#define BCM_COSQ_GPORT_CALENDAR             0x00000200 /* Indicates that this
                                                          gport is of scheduling
                                                          type CALENDAR */
#define BCM_COSQ_GPORT_QSEL_ENTRY_DISABLE   0x00000400 /* Inhibits automatic
                                                          update of queue
                                                          mapping table based
                                                          upon the GPORT
                                                          parameters */
#define BCM_COSQ_GPORT_VOQ_CONNECTOR        0x00000800 /* Indicates a VoQ
                                                          connector resource has
                                                          to be allocated */
#define BCM_COSQ_GPORT_VSQ                  0x00001000 /* Indicates a VSQ
                                                          resource has to be
                                                          allocated */
#define BCM_COSQ_GPORT_ISQ                  0x00002000 /* indicates that an ISQ
                                                          resource has to be
                                                          allocated */
#define BCM_COSQ_GPORT_REPLACE              0x00004000 /* modify configuration */
#define BCM_COSQ_GPORT_RECYCLE              0x00008000 /* Indicate a recycle
                                                          queue space */
#define BCM_COSQ_GPORT_SCHEDULER_HR_DUAL_WFQ 0x00010000 /* The scheduler works in
                                                          Dual HR mode */
#define BCM_COSQ_GPORT_SCHEDULER_HR_ENHANCED 0x00020000 /* The scheduler works in
                                                          Enhanced HR mode */
#define BCM_COSQ_GPORT_SCHEDULER_HR_SINGLE_WFQ 0x00030000 /* The scheduler works in
                                                          Single HR mode */
#define BCM_COSQ_GPORT_SCHEDULER_CLASS_MODE1_4SP 0x00040000 /* The scheduler works in
                                                          4 SP levels CL mode */
#define BCM_COSQ_GPORT_SCHEDULER_CLASS_MODE2_3SP_WFQ 0x00080000 /* The scheduler works in
                                                          3 SP levels, the last
                                                          being WFQ */
#define BCM_COSQ_GPORT_SCHEDULER_CLASS_MODE3_WFQ_2SP 0x000C0000 /* The scheduler works in
                                                          2 SP levels, the first
                                                          one being WFQ */
#define BCM_COSQ_GPORT_SCHEDULER_CLASS_MODE4_2SP_WFQ 0x00100000 /* The scheduler works in
                                                          2 SP levels, the last
                                                          one being WFQ */
#define BCM_COSQ_GPORT_SCHEDULER_CLASS_MODE5_1SP_WFQ 0x00140000 /* The scheduler works in
                                                          1 SP level and that is
                                                          WFQ mode */
#define BCM_COSQ_GPORT_SCHEDULER_FQ         0x00200000 /* The scheduler works in
                                                          Fair Queue mode */
#define BCM_COSQ_GPORT_SCHEDULER_CLASS_ENHANCED_LOWPRI_FQ 0x00400000 /* The CL scheduler
                                                          element is in enhanced
                                                          CL mode, when the
                                                          spouse FQ is the
                                                          lowest priority */
#define BCM_COSQ_GPORT_SCHEDULER_CLASS_ENHANCED_HIGHPRI_FQ 0x00800000 /* The CL scheduler
                                                          element is in enhanced
                                                          CL mode, when the
                                                          spouse FQ is the
                                                          highest priority */
#define BCM_COSQ_GPORT_SCHEDULER_CLASS_WFQ_MODE_DISCREET 0x01000000 /* WFQ mode is Discreet */
#define BCM_COSQ_GPORT_SCHEDULER_CLASS_WFQ_MODE_CLASS 0x02000000 /* WFQ mode is class
                                                          based */
#define BCM_COSQ_GPORT_SCHEDULER_CLASS_WFQ_MODE_INDEPENDENT 0x03000000 /* WFQ mode is
                                                          independent (inverse) */
#define BCM_COSQ_GPORT_SCHEDULER_CLASS_WFQ_MODE_INDEPENDENT_PROPORTIONAL 0x08000000 /* WFQ mode is
                                                          independent
                                                          (proportinal) */
#define BCM_COSQ_GPORT_SCHEDULER_DUAL_SHAPER 0x04000000 /* The scheduler element
                                                          is in Dual shaper
                                                          mode. This scheduler
                                                          element is composed of
                                                          CL scheduler element
                                                          for CIR and a FQ
                                                          scheduler element for
                                                          EIR. */
#define BCM_COSQ_GPORT_COMPOSITE            0x10000000 /* composite mode for
                                                          CIR/PIR functionality */
#define BCM_COSQ_GPORT_NON_CONTIGUOUS_VOQ_CONNECTOR 0x00010000 /* queue, connector
                                                          resource associated
                                                          with non-contiguous
                                                          connector region */
#define BCM_COSQ_GPORT_WITH_SHAPING         0x04000000 
#define BCM_COSQ_GPORT_WITHOUT_SHAPING      0x08000000 
#define BCM_COSQ_GPORT_MULTIPATH            0x10000000 
#define BCM_COSQ_GPORT_VLAN_UCAST_QUEUE_GROUP 0x20000000 
#define BCM_COSQ_GPORT_VIRTUAL_PORT         0x40000000 

#define BCM_COSQ_GPORT_PRIORITY_PROFILE_SET(_flags, _profile)  \
    _SHR_COSQ_GPORT_PRIORITY_PROFILE_SET(_flags, _profile) 

#define BCM_COSQ_GPORT_LOCAL    BCM_COSQ_GPORT_SUBSCRIBER /* for compatibility */

#define BCM_COSQ_SUBSCRIBER_MAP_PORT_VLAN   0x00000001 
#define BCM_COSQ_SUBSCRIBER_MAP_ENCAP_ID    0x00000002 

typedef struct bcm_cosq_subscriber_map_s {
    uint32 flags; 
    bcm_port_t port; 
    bcm_vlan_t vlan; 
    bcm_if_t encap_id; 
    bcm_gport_t queue_id; 
} bcm_cosq_subscriber_map_t;

#ifndef BCM_HIDE_DISPATCHABLE

extern int bcm_cosq_subscriber_map_add(
    int unit, 
    bcm_cosq_subscriber_map_t *map);

extern int bcm_cosq_subscriber_map_delete(
    int unit, 
    bcm_cosq_subscriber_map_t *map);

extern int bcm_cosq_subscriber_map_delete_all(
    int unit);

extern int bcm_cosq_subscriber_map_get(
    int unit, 
    bcm_cosq_subscriber_map_t *map);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef int (*bcm_cosq_subscriber_map_traverse_cb)(
    int unit, 
    bcm_cosq_subscriber_map_t *map, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

extern int bcm_cosq_subscriber_traverse(
    int unit, 
    bcm_cosq_subscriber_map_traverse_cb cb, 
    void *user_data);

extern int bcm_cosq_gport_add(
    int unit, 
    bcm_gport_t port, 
    int numq, 
    uint32 flags, 
    bcm_gport_t *gport);

extern int bcm_cosq_gport_delete(
    int unit, 
    bcm_gport_t gport);

/* Set the mapping from internal priority to COS queue. */
extern int bcm_cosq_gport_mapping_set(
    int unit, 
    bcm_port_t ing_port, 
    bcm_cos_t int_pri, 
    uint32 flags, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq);

/* Get the mapping from internal priority to COS queue. */
extern int bcm_cosq_gport_mapping_get(
    int unit, 
    bcm_port_t ing_port, 
    bcm_cos_t int_pri, 
    uint32 flags, 
    bcm_gport_t *gport, 
    bcm_cos_queue_t *cosq);

extern int bcm_cosq_gport_bandwidth_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    uint32 kbits_sec_min, 
    uint32 kbits_sec_max, 
    uint32 flags);

extern int bcm_cosq_gport_bandwidth_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    uint32 *kbits_sec_min, 
    uint32 *kbits_sec_max, 
    uint32 *flags);

extern int bcm_cosq_gport_sched_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    int mode, 
    int weight);

extern int bcm_cosq_gport_sched_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    int *mode, 
    int *weight);

extern int bcm_cosq_gport_discard_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_gport_discard_t *discard);

extern int bcm_cosq_gport_discard_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_gport_discard_t *discard);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_COSQ_SCHED_CONFIG_EXPEDITE  0x00000001 

#ifndef BCM_HIDE_DISPATCHABLE

extern int bcm_cosq_gport_sched_config_set(
    int unit, 
    bcm_gport_t gport, 
    int sched_mode, 
    int int_pri, 
    uint32 flags);

extern int bcm_cosq_gport_sched_config_get(
    int unit, 
    bcm_gport_t gport, 
    int sched_mode, 
    int int_pri, 
    uint32 *flags);

extern int bcm_cosq_gport_flow_control_set(
    int unit, 
    bcm_gport_t port, 
    bcm_cos_t int_pri, 
    uint32 flow_control_mask);

extern int bcm_cosq_gport_flow_control_get(
    int unit, 
    bcm_gport_t port, 
    bcm_cos_t int_pri, 
    uint32 *flow_control_mask);

extern int bcm_cosq_gport_attach(
    int unit, 
    bcm_gport_t sched_port, 
    bcm_gport_t input_port, 
    bcm_cos_queue_t cosq);

extern int bcm_cosq_gport_detach(
    int unit, 
    bcm_gport_t sched_port, 
    bcm_gport_t input_port, 
    bcm_cos_queue_t cosq);

extern int bcm_cosq_gport_attach_get(
    int unit, 
    bcm_gport_t sched_port, 
    bcm_gport_t *input_port, 
    bcm_cos_queue_t *cosq);

/* retreive parent scheduler for a child gport */
extern int bcm_cosq_gport_parent_get(
    int unit, 
    bcm_gport_t child_port, 
    bcm_cos_queue_t cos, 
    bcm_gport_t *parent_port);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_COSQ_GPORT_QUEUE_ATTACH_WITH_ID 0x00000001 
#define BCM_COS_MULTICAST_EF                -2         
#define BCM_COS_MULTICAST_NON_EF            -3         

#define BCM_COSQ_GPORT_ATTACH_ID_SYSPORT_SET(_attach_id, _sysport)  \
    _SHR_COSQ_GPORT_ATTACH_ID_SYSPORT_SET(_attach_id,_sysport) 

#ifndef BCM_HIDE_DISPATCHABLE

extern int bcm_cosq_gport_queue_attach(
    int unit, 
    uint32 flags, 
    bcm_gport_t ingress_queue, 
    bcm_cos_t ingress_int_pri, 
    bcm_gport_t egress_queue, 
    bcm_cos_t egress_int_pri, 
    int *attach_id);

extern int bcm_cosq_gport_queue_detach(
    int unit, 
    bcm_gport_t ingress_queue, 
    bcm_cos_t ingress_int_pri, 
    int attach_id);

extern int bcm_cosq_gport_queue_attach_get(
    int unit, 
    bcm_gport_t ingress_queue, 
    bcm_cos_t ingress_int_pri, 
    bcm_gport_t *egress_queue, 
    bcm_cos_t *egress_int_pri, 
    int attach_id);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_COSQ_GPORT_CONNECTION_INGRESS   0x01       /* establishing the
                                                          connection on ingress */
#define BCM_COSQ_GPORT_CONNECTION_EGRESS    0x02       /* establishing the
                                                          connection on egress */
#define BCM_COSQ_GPORT_CONNECTION_INVALID   0x04       /* removing the
                                                          connection */

/* connection information */
typedef struct bcm_cosq_gport_connection_s {
    uint32 flags; 
    bcm_module_t remote_modid;  /* remote module id. */
    bcm_gport_t voq;            /* voq gport */
    bcm_gport_t voq_connector;  /* voq connector gport */
} bcm_cosq_gport_connection_t;

#ifndef BCM_HIDE_DISPATCHABLE

extern int bcm_cosq_gport_connection_set(
    int unit, 
    bcm_cosq_gport_connection_t *gport_connect);

extern int bcm_cosq_gport_connection_get(
    int unit, 
    bcm_cosq_gport_connection_t *gport_connect);

#endif /* BCM_HIDE_DISPATCHABLE */

/* delay tolerance configuration */
typedef struct bcm_cosq_delay_tolerance_s {
    int credit_request_watchdog_status_msg_gen; /* Watch Dog Status Message Generation
                                           Period. When the Watch Dog Status
                                           Message Generation Period time passed
                                           since the last credit for an active
                                           Queue, the Queue will generate flow
                                           status message again. Range depends
                                           on mode. ARAD A supports 1-15 in
                                           aggressive status message credit
                                           watchdog mode, and 33-500 in the
                                           normal mode. (0 disables TH).
                                           Resolution: WD full cycle units. */
    int credit_request_watchdog_delete_queue_thresh; /* Watch Dog Delete Queue Threshold.
                                           When the Watch Dog Delete Queue
                                           Threshold time passed since the last
                                           credit for an active Queue, the Queue
                                           will be in Delete State. Range:
                                           100-500. (0 disables TH).  Not
                                           supported in aggressive status
                                           message credit watchdog mode of ARAD
                                           A. Units: milliseconds. Resolution:
                                           WD full cycle units. */
    int credit_request_hungry_off_to_slow_thresh; /* When (QsizeCrBal) >
                                           off_to_slow_thresh, and CRS==OFF, CRS
                                           may be changed to SLOW. Resolution in
                                           bytes. Range: (-229376) - (229376).
                                           Resolution: 1 Byte. */
    int credit_request_hungry_off_to_normal_thresh; /* When (QsizeCrBal) >
                                           off_to_normal_thresh, and CRS==OFF,
                                           CRS may be changed to NORM.
                                           Resolution in bytes. Range: (-229376)
                                           - (229376). Resolution: 1 Byte. */
    int credit_request_hungry_slow_to_normal_thresh; /* When (QsizeCrBal) >
                                           slow_to_normal_thresh, and CRS==SLOW,
                                           CRS may be changed to NORM.
                                           Resolution in bytes.  Range:
                                           (-229376) - (229376). Resolution: 1
                                           Byte. */
    int credit_request_hungry_normal_to_slow_thresh; /* When (QsizeCrBal) <
                                           normal_to_slow_th, and CRS==NORM, CRS
                                           may be changed to SLOW. Resolution in
                                           bytes. Range: (-229376) - (229376).
                                           Resolution: 1 Byte. */
    int credit_request_hungry_multiplier; /* When queue size crosses a multiply of
                                           multiplier a new FlowStatus Cell is
                                           generated. Resolution in bytes.
                                           Range: 2^5  2^12. (2^4  disables
                                           mechanism). */
    int credit_request_satisfied_backoff_enter_thresh; /* When the Credit Balance is bigger
                                           than the threshold, the device sends
                                           OFF message to the scheduler. This is
                                           to prevent credit accumulation from a
                                           certain threshold. Resolution in
                                           bytes. Range: 0  491520. Resolution:
                                           1 Byte. */
    int credit_request_satisfied_backoff_exit_thresh; /* Hysteresis value for to the Backoff
                                           Enter. Resolution in bytes. Range: 0 
                                           491520. Resolution: 1 Byte. */
    int credit_request_satisfied_backlog_enter_thresh; /* When the Credit Balance is bigger
                                           Backlog Enter threshold bytes than
                                           the queue size, the device sends OFF
                                           message to the scheduler. This
                                           threshold acts as Slow/Norm to off
                                           threshold. Resolution in bytes.
                                           Range: 0  491520. Resolution: 1 Byte. */
    int credit_request_satisfied_backlog_exit_thresh; /* Hysteresis value for to the Backlog
                                           Enter. Resolution in bytes. Range: 0 
                                           491520. Resolution: 1 Byte. */
    int credit_request_satisfied_empty_queue_thresh; /* When Qsize==0 and CrBal >=
                                           satisfied_empty_q_th, the CRS is
                                           changed to OFF. This threshold is a
                                           specific case of
                                           PETRA_ITM_CR_REQUEST_CR_BALANCE_TH.
                                           backlog_enter_th threshold.
                                           Resolution in bytes. Range: 32768 
                                           32767. */
    int credit_request_satisfied_empty_queue_max_balance_thresh; /* Max Empty Queue Credit Balance. This
                                           value is the maximum credits an empty
                                           queue can accumulate. Resolution in
                                           bytes. Range: 32768  32767. */
    int credit_request_satisfied_empty_queue_exceed_thresh; /* Exceed Max Empty Queue Credit
                                           Balance. This indication permits the
                                           credit balance of an empty queue to
                                           exceed configured Exceed Max Empty
                                           Queue Credit Balance up to (Credit
                                           Value minus 1), when a credit is
                                           received. This is used to prevent the
                                           deletion of partial credits. */
    uint32 flags;                       /* flags for the API */
} bcm_cosq_delay_tolerance_t;

/* 
 * tolerance level related flags specified in the flags field of
 * bcm_cosq_delay_tolerance_t.
 */
#define BCM_COSQ_DELAY_TOLERANCE_REMOTE_CREDIT_VALUE 1          /* Specifies that the
                                                          profile works with the
                                                          remote credit value,
                                                          works only in specific
                                                          device types */

#ifndef BCM_HIDE_DISPATCHABLE

/* setting delay tolerance */
extern int bcm_cosq_delay_tolerance_level_set(
    int unit, 
    int delay_tolerance_level, 
    bcm_cosq_delay_tolerance_t *delay_tolerance);

/* retreiving delay tolerance */
extern int bcm_cosq_delay_tolerance_level_get(
    int unit, 
    int delay_tolerance_level, 
    bcm_cosq_delay_tolerance_t *delay_tolerance);

/* mapping {traffic class, dp} to a egress queue on a port */
extern int bcm_cosq_gport_egress_map_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_t ingress_pri, 
    bcm_color_t ingress_dp, 
    bcm_cos_queue_t offset);

/* 
 * retreiving the egress queue on a port to which {traffic class, dp} is
 * mapped
 */
extern int bcm_cosq_gport_egress_map_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_t ingress_pri, 
    bcm_color_t ingress_dp, 
    bcm_cos_queue_t *offset);

#endif /* BCM_HIDE_DISPATCHABLE */

/* flag values for multicast config setting */
#define BCM_COSQ_MULTICAST_SCHEDULED    0x00000001 /* multicast scheduled values
                                                      are valid */
#define BCM_COSQ_MULTICAST_UNSCHEDULED  0x00000002 /* multicast unscheduled
                                                      values are valid */

/* multicast configuration settings */
typedef enum bcm_cosq_egress_multicast_service_pools_e {
    bcmCosqEgressMulticastServicePool0, /* Service pool 0 identifier */
    bcmCosqEgressMulticastServicePool1  /* Service pool 1 identifier */
} bcm_cosq_egress_multicast_service_pools_t;

/* multicast configuration settings */
typedef struct bcm_cosq_egress_multicast_config_s {
    bcm_color_t scheduled_dp;   /* drop precedence */
    bcm_cos_t priority;         /* TC */
    int unscheduled_se;         /* shared resource eligibility */
    int unscheduled_sp;         /* service pool ID */
} bcm_cosq_egress_multicast_config_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * mapping {traffic class, dp} to multicast egress configuration on a
 * port
 */
extern int bcm_cosq_gport_egress_multicast_config_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_t ingress_pri, 
    bcm_color_t ingress_dp, 
    uint32 flags, 
    bcm_cosq_egress_multicast_config_t *config);

/* 
 * retreiving the egress multicast configuration on a port to which
 * {traffic class, dp} is mapped
 */
extern int bcm_cosq_gport_egress_multicast_config_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_t ingress_pri, 
    bcm_color_t ingress_dp, 
    uint32 flags, 
    bcm_cosq_egress_multicast_config_t *config);

#endif /* BCM_HIDE_DISPATCHABLE */

/* flag values for VSQ creation */
#define BCM_COSQ_VSQ_GL         0x00000001 /* create 1 global VSQ */
#define BCM_COSQ_VSQ_CT         0x00000002 /* create according to Category */
#define BCM_COSQ_VSQ_CTTC       0x00000004 /* create according to Category *
                                              Traffic-Class */
#define BCM_COSQ_VSQ_CTCC       0x00000008 /* create according to Category *
                                              Connection-Class */
#define BCM_COSQ_VSQ_PP         0x00000010 /* create according to
                                              ST-VSQ-Pointer, arrived from the
                                              field processor or external PP */
#define BCM_COSQ_VSQ_LLFC       0x00000020 /* create according to Source Network
                                              Port */
#define BCM_COSQ_VSQ_PFC        0x00000040 /* create according to Packet
                                              Priority */

/* VSQ info settings */
typedef struct bcm_cosq_vsq_info_s {
    uint32 flags;           /* flags for vsq info */
    int ct_id;              /* Category ID. Relevant when flag is CT/CTTC/CTCC */
    int cc_id;              /* Connection Class ID. Relevant when flag is CTCC */
    int traffic_class;      /* VSQ Traffic Class ID. The VSQ traffic class ID
                               only relevant for the VSQ mapping and doesn't
                               remap the system TC. Relevant when flag is CTTC */
    bcm_gport_t src_port;   /* Source Physical port ID. The network interface ID
                               that the packet arrived from. Relevant when flag
                               is LLFC, PFC */
    int pp_vsq_id;          /* The ID of the VSQ, in the PP space. Relevant when
                               flag PP is set. In this case, the user specifies
                               the ST-VSQ-Pointer in the range 0-255 from the
                               FP/PP that needs to be mapped to the VSQ */
} bcm_cosq_vsq_info_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Create the VSQ */
extern int bcm_cosq_gport_vsq_create(
    int unit, 
    bcm_cosq_vsq_info_t *vsq_info, 
    bcm_gport_t *vsq_gport);

/* Destroy the VSQ */
extern int bcm_cosq_gport_vsq_destroy(
    int unit, 
    bcm_gport_t vsq_gport);

/* adding queue to vsq */
extern int bcm_cosq_gport_vsq_add(
    int unit, 
    bcm_gport_t vsq, 
    bcm_gport_t queue, 
    bcm_cos_queue_t cosq);

/* deleting queue from vsq */
extern int bcm_cosq_gport_vsq_delete(
    int unit, 
    bcm_gport_t vsq, 
    bcm_gport_t queue, 
    bcm_cos_queue_t cosq);

/* deleting all queues from vsq */
extern int bcm_cosq_gport_vsq_delete_all(
    int unit, 
    bcm_gport_t vsq);

/* retreiving queues that are part of vsq */
extern int bcm_cosq_gport_vsq_get(
    int unit, 
    bcm_gport_t vsq, 
    int queue_max, 
    bcm_gport_t *queue_array, 
    bcm_cos_queue_t *cosq_array, 
    int *queue_count);

#endif /* BCM_HIDE_DISPATCHABLE */

/* flag values for threshold setting */
#define BCM_COSQ_THRESHOLD_PER_DP           0x00000001 /* dp field meaningful */
#define BCM_COSQ_THRESHOLD_INGRESS          0x00000002 /* device level ingress
                                                          thresholds */
#define BCM_COSQ_THRESHOLD_EGRESS           0x00000004 /* device level egress
                                                          thresholds */
#define BCM_COSQ_THRESHOLD_UNICAST          0x00000008 /* device level unicast
                                                          thresholds */
#define BCM_COSQ_THRESHOLD_MULTICAST        0x00000010 /* device level multicast
                                                          thresholds */
#define BCM_COSQ_THRESHOLD_SET              0x00000020 /* threshold for assert
                                                          condition (where
                                                          applicable) */
#define BCM_COSQ_THRESHOLD_CLEAR            0x00000040 /* threshold for
                                                          de-assert (where
                                                          applicable) */
#define BCM_COSQ_THRESHOLD_NOT_COMMIT       0x00000080 /* to aid in template
                                                          management */
#define BCM_COSQ_THRESHOLD_FLOW_CONTROL     0x00000100 /* flow control */
#define BCM_COSQ_THRESHOLD_DROP             0x00000200 /* Admission Control */
#define BCM_COSQ_THRESHOLD_MULTICAST_SP0    0x00000400 /* Multicast Service-Pool
                                                          0 */
#define BCM_COSQ_THRESHOLD_MULTICAST_SP1    0x00000800 /* Multicast Service-Pool
                                                          1 */
#define BCM_COSQ_THRESHOLD_COLOR_SYSTEM_RED 0x00001000 /* Set Color System red
                                                          format */
#define BCM_COSQ_THRESHOLD_RANGE_0          0x00002000 /* Set Range 0 threshold,
                                                          where threshold value
                                                          indicates the max size
                                                          of the specific range */
#define BCM_COSQ_THRESHOLD_RANGE_1          0x00004000 /* Set Range 1 threshold,
                                                          where threshold value
                                                          indicates the max size
                                                          of the specific range */
#define BCM_COSQ_THRESHOLD_RANGE_2          0x00008000 /* Set Range 2 threshold,
                                                          where threshold value
                                                          indicates the max size
                                                          of the specific range */
#define BCM_COSQ_THRESHOLD_RANGE_3          0x00010000 /* Set Range 3 threshold,
                                                          where threshold value
                                                          indicates the max size
                                                          of the specific range */
#define BCM_COSQ_THRESHOLD_OCB              0x00020000 /* On-Chip buffer */

/* threshold type enumerartions */
typedef enum bcm_cosq_threshold_type_e {
    bcmCosqThresholdBytes,              /* consumed bytes. Egress Drop
                                           threshold, Unicast, multicast, dp
                                           (multicast) at port and device level.
                                           Egress Flow control threshold,
                                           unicast , multicast, port, channel
                                           and device level. */
    bcmCosqThresholdPacketDescriptors,  /* consumed packet descriptors. Egress
                                           drop threshold, unicast, multicast,
                                           dp (multicast) at port level. Egress
                                           Flow control threshold, unicast,
                                           multicast device level. */
    bcmCosqThresholdPackets,            /* consumed packets. Egress Drop
                                           threshold, Unicast, multicast,
                                           dp(multicast) at device level. Egress
                                           Flow control threshold, multicast at
                                           device level. */
    bcmCosqThresholdDataBuffers,        /* consumed data buffers. Egress Drop
                                           threshold, multicast, dp at device
                                           level Egress Flow control threshold,
                                           unicast, multicast at device level. */
    bcmCosqThresholdAvailablePacketDescriptors, /* available Packet Descriptors. Egress
                                           Drop threshold, Unicast, multicast,
                                           dp (multicast) at port and device
                                           level. */
    bcmCosqThresholdAvailableDataBuffers, /* available data buffers. Egress Drop
                                           threshold, multicast, dp at device
                                           level. */
    bcmCosqThresholdBufferDescriptorBuffers, /* consumed Buffer descriptor Buffers.
                                           Ingress Drop threshold, DP at device
                                           level. Ingress Flow control threshold
                                           at device level. */
    bcmCosqThresholdBufferDescriptors,  /* consumed buffer descriptors. Ingress
                                           Drop threshold, DP at device level. */
    bcmCosqThresholdDbuffs,             /* consumed Dbuffs. Ingress Drop
                                           threshold, DP, unicast at device
                                           level. Ingress flow control
                                           threshold, unicast, multicast at
                                           device level. */
    bcmCosqThresholdFullDbuffs,         /* consumed Full Dbuffs. Ingress Drop
                                           threshold, DP, multicast at device
                                           level. */
    bcmCosqThresholdMiniDbuffs          /* consumed mini Dbuffs. Ingress Drop
                                           threshold, DP, multicast at device
                                           level. */
} bcm_cosq_threshold_type_t;

/* flow control / addmission settings */
typedef struct bcm_cosq_threshold_s {
    uint32 flags;                   /* BCM_COSQ_THRESHOLD_* flag values */
    bcm_color_t dp;                 /* drop precedence. relevant for
                                       BCM_COSQ_THRESHOLD_PER_DP flag value */
    bcm_cosq_threshold_type_t type; /* threshold type */
    int value;                      /* threshold value for drop/flow control */
} bcm_cosq_threshold_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Configuring Ingress / egress Thresholds for Flow control and Admission
 * Control
 */
extern int bcm_cosq_gport_threshold_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_threshold_t *threshold);

/* 
 * Retreiving Ingress / egress Thresholds for Flow control and Admission
 * Control
 */
extern int bcm_cosq_gport_threshold_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_threshold_t *threshold);

#endif /* BCM_HIDE_DISPATCHABLE */

/* the source of empty status for CoSQ scheduler */
typedef enum bcm_cosq_sched_empty_e {
    bcmCosqSchedEmptyTxQueue,   /* Empty from Tx Queue */
    bcmCosqSchedEmptyTxqShaper, /* Empty from TxQ shaper */
    bcmCosqSchedEmptyCount      /* Must be the last. Not a usable value. */
} bcm_cosq_sched_empty_t;

/* cosq gport type eumerations */
typedef enum bcm_cosq_gport_type_e {
    bcmCosqGportTypeE2EPort,            /* Ports in E2E hierarchy */
    bcmCosqGportTypeUnicastEgress,      /* Unicast Egress Queues - Port
                                           hierarchy */
    bcmCosqGportTypeMulticastEgress,    /* Multicast Egress Queues - Port
                                           Hierarchy */
    bcmCosqGportTypeCompositeFlow2,     /* 2nd  flow of either composite
                                           connector or composite SE */
    bcmCosqGportTypeSchedCIR,           /* SE(scheduling Element) of CIR type.
                                           Applicable for Dual Shaper SE */
    bcmCosqGportTypeSchedPIR,           /* SE(scheduling Element) of CIR type.
                                           Applicable for Dual Shaper SE */
    bcmCosqGportTypeLocalPort,          /* Ports in Egress transmit hierarchy */
    bcmCosqGportTypeLocalPortTC,        /* Port TC level in Egress transmit
                                           hierarchy */
    bcmCosqGportTypeLocalPortTCG,       /* Port TC Group level in Egress
                                           transmit hierarchy */
    bcmCosqGportTypeE2EPortTC,          /* Port TC level in End-to-End hierarchy */
    bcmCosqGportTypeE2EPortTCG,         /* Port TC Group level in End-to-End
                                           hierarchy */
    bcmCosqGportTypeGlobalFmqRoot,      /* FMQ Root gport. TypeGlobal indicates
                                           single instance */
    bcmCosqGportTypeGlobalFmqGuaranteed, /* FMQ Guaranteed gport */
    bcmCosqGportTypeGlobalFmqBestEffortAggregate, /* FMQ Best Effort aggregate gport */
    bcmCosqGportTypeGlobalFmqBestEffort0, /* FMQ Best Effort 0 gport */
    bcmCosqGportTypeGlobalFmqBestEffort1, /* FMQ Best Effort 1 gport */
    bcmCosqGportTypeGlobalFmqBestEffort2, /* FMQ Best Effort 2 gport */
    bcmCosqGportTypeGlobalFmqClass1,    /* FMQ Class 1 gport */
    bcmCosqGportTypeGlobalFmqClass2,    /* FMQ Class 2 gport */
    bcmCosqGportTypeGlobalFmqClass3,    /* FMQ Class 3 gport */
    bcmCosqGportTypeGlobalFmqClass4,    /* FMQ Class 4 gport */
    bcmCosqGportTypeGlobalIsqRoot,      /* ISQ Root gport */
    bcmCosqGportTypeGlobalFabricMeshLocal, /* Ingress Mesh Scheduler - Local */
    bcmCosqGportTypeGlobalFabricMeshDev1, /* Ingress Mesh Scheduler - Destination
                                           Device 1 */
    bcmCosqGportTypeGlobalFabricMeshDev2, /* Ingress Mesh Scheduler - Destination
                                           Device 2 */
    bcmCosqGportTypeGlobalFabricMeshDev3, /* Ingress Mesh Scheduler - Destination
                                           Device 3 */
    bcmCosqGportTypeGlobalFabricMeshDev4, /* Ingress Mesh Scheduler - Destination
                                           Device 4 */
    bcmCosqGportTypeGlobalFabricMeshDev5, /* Ingress Mesh Scheduler - Destination
                                           Device 5 */
    bcmCosqGportTypeGlobalFabricMeshDev6, /* Ingress Mesh Scheduler - Destination
                                           Device 6 */
    bcmCosqGportTypeGlobalFabricMeshDev7, /* Ingress Mesh Scheduler - Destination
                                           Device 7 */
    bcmCosqGportTypeGlobalFabricClosUnicastLocal, /* Ingress Clos Fabric scheduler -
                                           shaper e (Ref Arch Spec) */
    bcmCosqGportTypeGlobalFabricClosUnicastLocalLow, /* Ingress Clos Fabric scheduler - WFQ 3
                                           (Ref Arch Spec) */
    bcmCosqGportTypeGlobalFabricClosUnicastLocalHigh, /* Ingress Clos Fabric scheduler -
                                           shaper a and WFQ 2 (Ref Arch Spec) */
    bcmCosqGportTypeGlobalFabricClosFabric, /* Ingress Clos Fabric scheduler -
                                           shaper f (Ref Arch Spec) */
    bcmCosqGportTypeGlobalFabricClosFabricHigh, /* Ingress Clos Fabric scheduler - WFQ 2
                                           (Ref Arch Spec) */
    bcmCosqGportTypeGlobalFabricClosFabricLow, /* Ingress Clos Fabric scheduler - WFQ 3
                                           (Ref Arch Spec) */
    bcmCosqGportTypeGlobalFabricClosUnicastFabricHigh, /* Ingress Clos Fabric scheduler -
                                           shaper b and WFQ 4 (Ref Arch Spec) */
    bcmCosqGportTypeGlobalFabricClosUnicastFabricLow, /* Ingress Clos Fabric scheduler - WFQ 5
                                           (Ref Arch Spec) */
    bcmCosqGportTypeGlobalFabricClosFmqGuaranteed, /* Ingress Clos Fabric scheduler -
                                           shaper c and WFQ 4 (Ref Arch Spec) */
    bcmCosqGportTypeGlobalFabricClosFmqBestEffort, /* Ingress Clos Fabric scheduler - WFQ 5
                                           (Ref Arch Spec) */
    bcmCosqGportTypeSched,              /* SE(scheduling Element) */
    bcmCosqGportTypeGlobalSystemRed     /* System RED gport */
} bcm_cosq_gport_type_t;

/* gport information related to getting a handle */
typedef struct bcm_cosq_gport_info_s {
    bcm_gport_t in_gport;   /* gport to be converted. NULL for global gports
                               (i.e. single instance on a device) */
    bcm_cos_queue_t cosq;   /* Num of cosq levels */
    bcm_gport_t out_gport;  /* retreived gport */
} bcm_cosq_gport_info_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Getting a gport handle. This could be either a global gport (single
 * instance on a device) or converting a gport to the desired type
 */
extern int bcm_cosq_gport_handle_get(
    int unit, 
    bcm_cosq_gport_type_t gport_type, 
    bcm_cosq_gport_info_t *gport_info);

#endif /* BCM_HIDE_DISPATCHABLE */

/* flow control direction type eumerations */
typedef enum bcm_cosq_fc_direction_type_e {
    bcmCosqFlowControlGeneration,   /* flow control generation */
    bcmCosqFlowControlReception     /* flow control reception */
} bcm_cosq_fc_direction_type_t;

/* flag values for flow control path configuration */
#define BCM_COSQ_FC_ENDPOINT_PORT_ALL       0x00000001 /* all ports as endpoint,
                                                          e.g. generate flow
                                                          control on all
                                                          interfaces */
#define BCM_COSQ_FC_ENDPOINT_PORT_IMPLICIT  0x00000002 /* endpoint not
                                                          specified. It is
                                                          implicitly specified.
                                                          e.g. for flow control
                                                          generation based on
                                                          in-band VSQ the target
                                                          endpoint is determined
                                                          by the VSQ interface
                                                          attribute */
#define BCM_COSQ_FC_INHERIT_UP              0x00000004 /* also applies flow
                                                          control to all cos
                                                          levels greater then
                                                          that specified via
                                                          flow control endpoint */
#define BCM_COSQ_FC_INHERIT_DOWN            0x00000008 /* also applies flow
                                                          control to all cos
                                                          levels lower then that
                                                          specified via flow
                                                          control endpoint */
#define BCM_COSQ_FC_RETRANSMIT              0x00000010 /* ILKN Retransmit -
                                                          relevant for both FC
                                                          directions */
#define BCM_COSQ_FC_HCFC_BITMAP             0x00000020 /* HCFC Bitmap */

/* Endpoint(source or reaction/target) definition */
typedef struct bcm_cosq_fc_endpoint_s {
    uint32 flags;           /* flags to qualify a endpoint */
    bcm_gport_t port;       /* gport identifing the underlying resource */
    bcm_cos_queue_t cosq;   /* cosq/class */
    int calender_index;     /* calender entry */
    int priority;           /* priority. Example, E2E Scheduler Element priority
                               level - for mapping flow control to E2E SE
                               (Scheduler Element) */
} bcm_cosq_fc_endpoint_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* configure flow control path */
extern int bcm_cosq_fc_path_add(
    int unit, 
    bcm_cosq_fc_direction_type_t fc_direction, 
    bcm_cosq_fc_endpoint_t *source, 
    bcm_cosq_fc_endpoint_t *target);

/* retreive flow control path information */
extern int bcm_cosq_fc_path_get(
    int unit, 
    bcm_cosq_fc_direction_type_t fc_direction, 
    bcm_cosq_fc_endpoint_t *source, 
    int target_max, 
    bcm_cosq_fc_endpoint_t *target, 
    int *target_count);

/* delete flow control path configuration */
extern int bcm_cosq_fc_path_delete(
    int unit, 
    bcm_cosq_fc_direction_type_t fc_direction, 
    bcm_cosq_fc_endpoint_t *source, 
    bcm_cosq_fc_endpoint_t *target);

extern int bcm_cosq_gport_destmod_attach(
    int unit, 
    bcm_gport_t gport, 
    bcm_port_t ingress_port, 
    bcm_module_t dest_modid, 
    int fabric_egress_port);

extern int bcm_cosq_gport_destmod_detach(
    int unit, 
    bcm_gport_t gport, 
    bcm_port_t ingress_port, 
    bcm_module_t dest_modid, 
    int fabric_egress_port);

extern int bcm_cosq_gport_multipath_add(
    int unit, 
    bcm_gport_t multipath_gport, 
    bcm_gport_t member_gport, 
    bcm_cos_queue_t member_gport_cosq);

extern int bcm_cosq_gport_multipath_get(
    int unit, 
    bcm_gport_t multipath_gport, 
    int member_gport_max, 
    bcm_gport_t *member_gport_array, 
    bcm_cos_queue_t *member_gport_cosq_array, 
    int *member_gport_count);

extern int bcm_cosq_gport_multipath_delete(
    int unit, 
    bcm_gport_t multipath_gport, 
    bcm_gport_t member_gport, 
    bcm_cos_queue_t member_gport_cosq);

#endif /* BCM_HIDE_DISPATCHABLE */

/* For queue report thresholds on EPON */
typedef struct bcm_cosq_report_threshold_s {
    int threshold0; /* Queue report threshold0. */
    int threshold1; /* Queue report threshold1. */
    int threshold2; /* Queue report threshold2. */
    int threshold3; /* Queue report threshold3. */
} bcm_cosq_report_threshold_t;

#ifndef BCM_HIDE_DISPATCHABLE

extern int bcm_cosq_gport_report_threshold_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_report_threshold_t *threshold);

extern int bcm_cosq_gport_report_threshold_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_report_threshold_t *threshold);

#endif /* BCM_HIDE_DISPATCHABLE */

/* XGS3 cosq counters */
typedef enum bcm_cosq_stat_e {
    bcmCosqStatDroppedPackets,          /* Dropped packet count. */
    bcmCosqStatDroppedBytes,            /* Dropped byte count. */
    bcmCosqStatYellowCongestionDroppedPackets, /* Dropped yellow packets due to
                                           congestion. */
    bcmCosqStatRedCongestionDroppedPackets, /* Dropped red packets due to
                                           congestion. */
    bcmCosqStatGreenDiscardDroppedPackets, /* WRED green packets. */
    bcmCosqStatYellowDiscardDroppedPackets, /* WRED yellow packets. */
    bcmCosqStatRedDiscardDroppedPackets, /* WRED red packets. */
    bcmCosqStatOutPackets,              /* Transmit packet count. */
    bcmCosqStatOutBytes,                /* Transmit byte count. */
    bcmCosqStatIeee8021CnCpTransmittedCnms /* QCN CNM Transmit packet count. */
} bcm_cosq_stat_t;

#ifndef BCM_HIDE_DISPATCHABLE

extern int bcm_cosq_stat_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_stat_t stat, 
    uint64 *value);

extern int bcm_cosq_stat_get32(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_stat_t stat, 
    uint32 *value);

extern int bcm_cosq_stat_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_stat_t stat, 
    uint64 value);

extern int bcm_cosq_stat_set32(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_stat_t stat, 
    uint32 value);

#endif /* BCM_HIDE_DISPATCHABLE */

/* parameters for VOQ gport */
typedef struct bcm_cosq_congestion_info_s {
    bcm_module_t fabric_modid;  /* Fabric module ID. */
    bcm_port_t fabric_port;     /* Fabric module ID. */
    bcm_module_t dest_modid;    /* destination module ID. */
    bcm_port_t dest_port;       /* destination port ID. */
} bcm_cosq_congestion_info_t;

#ifndef BCM_HIDE_DISPATCHABLE

extern int bcm_cosq_gport_congestion_config_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_congestion_info_t *config);

extern int bcm_cosq_gport_congestion_config_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_queue_t cosq, 
    bcm_cosq_congestion_info_t *config);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef struct bcm_cos_pon_link_sla_s {
    int option;                 /* option flag(force report, etc). */
    int polling_level;          /* polling level 0 - 7. */
    uint32 tdm_rate;            /* TDM rate in kbps unit */
    uint32 tdm_grant_length;    /* TDM grant length in bytes */
} bcm_cos_pon_link_sla_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Update EPON link SLA. */
extern int bcm_cosq_gport_pon_link_sla_set(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_pon_link_sla_t *link_sla);

/* Get EPON link SLA. */
extern int bcm_cosq_gport_pon_link_sla_get(
    int unit, 
    bcm_gport_t gport, 
    bcm_cos_pon_link_sla_t *link_sla);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Attribute flags for resource identifier. */
#define BCM_COSQ_DEVICE                 0x10000    /* device resource */
#define BCM_COSQ_DEVICE_EGRESS_POOL     0x20000    /* device egress service
                                                      pool. */
#define BCM_COSQ_DEVICE_INGRESS_POOL    0x40000    /* device ingress service
                                                      pool. */
#define BCM_COSQ_PORT_POOL              0x80000    /* port service pool. */
#define BCM_COSQ_PRIGROUP               0x100000   /* priority group. */
#define BCM_COSQ_HEADROOM               0x200000   /* headroom. */
#define BCM_COSQ_QUEUE                  0x400000   /* headroom. */

typedef struct bcm_cosq_bst_profile_s {
    uint32 byte; 
} bcm_cosq_bst_profile_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Set the profile for tracking. */
extern int bcm_cosq_bst_profile_set(
    int unit, 
    bcm_gport_t port, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    bcm_cosq_bst_profile_t *profile);

/* Set the profile for tracking. */
extern int bcm_cosq_bst_profile_get(
    int unit, 
    bcm_gport_t port, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    bcm_cosq_bst_profile_t *profile);

/* Set the profile for tracking. */
extern int bcm_cosq_bst_stat_get(
    int unit, 
    bcm_gport_t port, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    uint64 *value);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef int (*bcm_cosq_bst_stat_traverse_cb)(
    int unit, 
    bcm_gport_t port, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    uint64 value, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

extern int bcm_cosq_bst_stat_traverse(
    int unit, 
    bcm_gport_t port, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    bcm_cosq_bst_stat_traverse_cb cb, 
    void *user_data);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_COSQ_WEIGHT_DISCRETE_WEIGHT_LEVEL0 -1         /* weight associated with
                                                          level 0 of scheduler
                                                          element having
                                                          discrete weight
                                                          attribute. */
#define BCM_COSQ_WEIGHT_DISCRETE_WEIGHT_LEVEL1 -2         /* weight associated with
                                                          level 1 of scheduler
                                                          element having
                                                          discrete weight
                                                          attribute. */
#define BCM_COSQ_WEIGHT_DISCRETE_WEIGHT_LEVEL2 -3         /* weight associated with
                                                          level 2 of scheduler
                                                          element having
                                                          discrete weight
                                                          attribute. */
#define BCM_COSQ_WEIGHT_DISCRETE_WEIGHT_LEVEL3 -4         /* weight associated with
                                                          level 3 of scheduler
                                                          element having
                                                          discrete weight
                                                          attribute. */

/* Various types of cosq classifiers */
typedef struct bcm_cosq_classifier_s {
    uint32 flags;       /* BCM_COSQ_CLASSIFIER_xxx flags */
    bcm_vlan_t vlan;    /* VLAN */
    bcm_mac_t mac;      /* MAC address */
    bcm_vrf_t vrf;      /* Virtual Router Instance */
    bcm_ip_t ip_addr;   /* IPv4 address */
    bcm_ip6_t ip6_addr; /* IPv6 address */
    bcm_gport_t gport;  /* GPORT ID */
} bcm_cosq_classifier_t;

/* Flags indicating classifier type */
#define BCM_COSQ_CLASSIFIER_WITH_ID 0x00000001 /* Classifier ID */
#define BCM_COSQ_CLASSIFIER_VLAN    0x00000002 /* Classifier consists of VLAN */
#define BCM_COSQ_CLASSIFIER_L2      0x00000004 /* Classifier consists of VLAN
                                                  and MAC address */
#define BCM_COSQ_CLASSIFIER_L3      0x00000008 /* Classifier consists of VRF and
                                                  IP address */
#define BCM_COSQ_CLASSIFIER_IP6     0x00000010 /* The IP address in L3
                                                  classifier is IPv6 */
#define BCM_COSQ_CLASSIFIER_GPORT   0x00000020 /* Classifier consists of GPORT */
#define BCM_COSQ_CLASSIFIER_FIELD   0x00000040 /* Classifier used in a field
                                                  processor rule. */

/* Initialize a bcm_cosq_classifier_t. */
extern void bcm_cosq_classifier_t_init(
    bcm_cosq_classifier_t *classifier);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a cosq classifier */
extern int bcm_cosq_classifier_create(
    int unit, 
    bcm_cosq_classifier_t *classifier, 
    int *classifier_id);

/* Destroy the cosq classifier */
extern int bcm_cosq_classifier_destroy(
    int unit, 
    int classifier_id);

/* Get info about a cosq classifier */
extern int bcm_cosq_classifier_get(
    int unit, 
    int classifier_id, 
    bcm_cosq_classifier_t *classifier);

/* 
 * Set the mapping from port, classifier, and internal priority to a COS
 * queue in a queue group.
 */
extern int bcm_cosq_classifier_mapping_set(
    int unit, 
    bcm_gport_t port, 
    int classifier_id, 
    bcm_gport_t queue_group, 
    bcm_cos_t priority, 
    bcm_cos_queue_t cosq);

/* 
 * Set the mapping from port, classifier, and multiple internal
 * priorities to multiple COS queues in a queue group.
 */
extern int bcm_cosq_classifier_mapping_multi_set(
    int unit, 
    bcm_gport_t port, 
    int classifier_id, 
    bcm_gport_t queue_group, 
    int array_count, 
    bcm_cos_t *priority_array, 
    bcm_cos_queue_t *cosq_array);

/* 
 * Get the mapping from port, classifier, and internal priority to a COS
 * queue in a queue group.
 */
extern int bcm_cosq_classifier_mapping_get(
    int unit, 
    bcm_gport_t port, 
    int classifier_id, 
    bcm_gport_t *queue_group, 
    bcm_cos_t priority, 
    bcm_cos_queue_t *cosq);

/* 
 * Get the mapping from port, classifier, and multiple internal
 * priorities to multiple COS queues in a queue group.
 */
extern int bcm_cosq_classifier_mapping_multi_get(
    int unit, 
    bcm_gport_t port, 
    int classifier_id, 
    bcm_gport_t *queue_group, 
    int array_max, 
    bcm_cos_t *priority_array, 
    bcm_cos_queue_t *cosq_array, 
    int *array_count);

/* 
 * Clear the mapping from port, classifier, and internal priorities to
 * COS queues in a queue group.
 */
extern int bcm_cosq_classifier_mapping_clear(
    int unit, 
    bcm_gport_t port, 
    int classifier_id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Config parameters for Priority flow control */
typedef struct bcm_cosq_qcn_config_s {
    int size;                           /* Set point for queue. In Bytes. */
    int weight;                         /* Weight to be given to change in queue
                                           length. */
    int nbr_samples;                    /* Number of valid samples. */
    int sample_bytes[BCM_COS_COUNT]; 
    int max_feedback;                   /* Maximum value of congestion feedback. */
    int quantization;                   /* Quantization value. */
    int randomize_sample_threshold;     /* Random sample threshold - true/false. */
} bcm_cosq_qcn_config_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Set the configuration of a congestion managed queue parameters. */
extern int bcm_cosq_qcn_config_set(
    int unit, 
    bcm_gport_t port, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    bcm_cosq_qcn_config_t *config);

/* Get the configuration of a congestion managed queue parameters. */
extern int bcm_cosq_qcn_config_get(
    int unit, 
    bcm_gport_t port, 
    bcm_cos_queue_t cosq, 
    uint32 flags, 
    bcm_cosq_qcn_config_t *config);

/* Set the credit worth size per module-ID. */
extern int bcm_cosq_dest_credit_size_set(
    int unit, 
    bcm_module_t dest_modid, 
    uint32 credit_size);

/* Get the credit worth size per module-ID. */
extern int bcm_cosq_dest_credit_size_get(
    int unit, 
    bcm_module_t dest_modid, 
    uint32 *credit_size);

/* To enable/disable Rx of packets on the specified CPU cosq. */
extern int bcm_cosq_cpu_cosq_enable_set(
    int unit, 
    bcm_cos_queue_t cosq, 
    int enable);

/* 
 * To get enable/disable status on Rx of packets on the specified CPU
 * cosq.
 */
extern int bcm_cosq_cpu_cosq_enable_get(
    int unit, 
    bcm_cos_queue_t cosq, 
    int *enable);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_COSQ_H__ */
