/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: async.h 1.293 Broadcom SDK $
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * File:	xasync.h
 * Purpose:	Asynchronous BCMX API routines
 * Generator:	mkdispatch 1.54
 * Generated:	Thu Feb 21 13:03:48 2013
 */

#ifndef	_BCMX_ASYNC_H
#define	_BCMX_ASYNC_H

#include <bcm/types.h>
#include <bcmx/auth.h>
#include <bcmx/bcmx.h>
#include <bcmx/cosq.h>
#include <bcmx/custom.h>
#include <bcmx/failover.h>
#include <bcmx/field.h>
#include <bcmx/ipfix.h>
#include <bcmx/ipmc.h>
#include <bcmx/l2.h>
#include <bcmx/l3.h>
#include <bcmx/link.h>
#include <bcmx/mcast.h>
#include <bcmx/mim.h>
#include <bcmx/mirror.h>
#include <bcmx/mpls.h>
#include <bcmx/multicast.h>
#include <bcmx/niv.h>
#include <bcmx/oam.h>
#include <bcmx/policer.h>
#include <bcmx/port.h>
#include <bcmx/proxy.h>
#include <bcmx/qos.h>
#include <bcmx/rate.h>
#include <bcmx/rx.h>
#include <bcmx/stat.h>
#include <bcmx/stg.h>
#include <bcmx/subport.h>
#include <bcmx/switch.h>
#include <bcmx/trill.h>
#include <bcmx/trunk.h>
#include <bcmx/tunnel.h>
#include <bcmx/tx.h>
#include <bcmx/vlan.h>
#include <bcmx/wlan.h>

#ifdef	BCM_ASYNC_SUPPORT

typedef void (*bcmx_async_cb_t)(void *cookie, int retval);

void	bcmx_auth_egress_get_async(bcmx_lport_t port, int * enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_auth_egress_set_async(bcmx_lport_t port, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_auth_mac_add_async(bcmx_lport_t port, bcm_mac_t mac, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_auth_mac_delete_async(bcmx_lport_t port, bcm_mac_t mac, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_auth_mac_delete_all_async(bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_auth_mode_get_async(bcmx_lport_t port, uint32 * modep, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_auth_mode_set_async(bcmx_lport_t port, uint32 mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_auth_unauth_callback_async(bcmx_auth_cb_t func, void * cookie, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_config_get_async(int * numq, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_config_set_async(int numq, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_control_get_async(bcm_gport_t port, bcm_cos_queue_t cosq, bcm_cosq_control_t type, int * arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_control_set_async(bcm_gport_t port, bcm_cos_queue_t cosq, bcm_cosq_control_t type, int arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_detach_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_discard_get_async(uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_discard_port_get_async(bcmx_lport_t port, bcm_cos_queue_t cosq, uint32 color, int * drop_start, int * drop_slope, int * average_time, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_discard_port_set_async(bcmx_lport_t port, bcm_cos_queue_t cosq, uint32 color, int drop_start, int drop_slope, int average_time, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_discard_set_async(uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_add_async(bcm_gport_t port, int numq, uint32 flags, bcm_gport_t * gport, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_attach_async(bcm_gport_t sched_port, bcm_gport_t input_port, bcm_cos_queue_t cosq, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_attach_get_async(bcm_gport_t sched_port, bcm_gport_t * input_port, bcm_cos_queue_t * cosq, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_bandwidth_get_async(bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 * kbits_sec_min, uint32 * kbits_sec_max, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_bandwidth_set_async(bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 kbits_sec_min, uint32 kbits_sec_max, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_delete_async(bcm_gport_t gport, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_destmod_attach_async(bcm_gport_t gport, bcm_gport_t ingress_port, bcm_module_t dest_modid, int fabric_egress_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_destmod_detach_async(bcm_gport_t gport, bcm_gport_t ingress_port, bcm_module_t dest_modid, int fabric_egress_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_detach_async(bcm_gport_t sched_port, bcm_gport_t input_port, bcm_cos_queue_t cosq, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_discard_get_async(bcm_gport_t gport, bcm_cos_queue_t cosq, bcmx_cosq_gport_discard_t * discard, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_discard_set_async(bcm_gport_t gport, bcm_cos_queue_t cosq, bcmx_cosq_gport_discard_t * discard, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_sched_get_async(bcm_gport_t gport, bcm_cos_queue_t cosq, int * mode, int * weight, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_gport_sched_set_async(bcm_gport_t gport, bcm_cos_queue_t cosq, int mode, int weight, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_mapping_get_async(bcm_cos_t priority, bcm_cos_queue_t * cosq, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_mapping_set_async(bcm_cos_t priority, bcm_cos_queue_t cosq, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_port_bandwidth_get_async(bcmx_lport_t port, bcm_cos_queue_t cosq, uint32 * kbits_sec_min, uint32 * kbits_sec_max, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_port_bandwidth_set_async(bcmx_lport_t port, bcm_cos_queue_t cosq, uint32 kbits_sec_min, uint32 kbits_sec_max, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_port_mapping_get_async(bcmx_lport_t port, bcm_cos_t priority, bcm_cos_queue_t * cosq, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_port_mapping_set_async(bcmx_lport_t port, bcm_cos_t priority, bcm_cos_queue_t cosq, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_port_sched_get_async(bcmx_lplist_t lplist, int * mode, int weights[BCM_COS_COUNT], int * delay, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_port_sched_set_async(bcmx_lplist_t lplist, int mode, const int weights[BCM_COS_COUNT], int delay, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_sched_get_async(int * mode, int weights[BCM_COS_COUNT], int * delay, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_sched_set_async(int mode, const int weights[BCM_COS_COUNT], int delay, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_sched_weight_max_get_async(int mode, int * weight_max, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_stat_get_async(bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint64 * value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_stat_get32_async(bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint32 * value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_stat_set_async(bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint64 value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_cosq_stat_set32_async(bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint32 value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_custom_port_get_async(bcmx_lport_t port, int type, int max_len, uint32 * args, int * actual_len, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_custom_port_set_async(bcmx_lport_t port, int type, int len, uint32 * args, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_custom_unit_get_async(int type, int max_len, uint32 * args, int * actual_len, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_custom_unit_set_async(int type, int len, uint32 * args, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_device_attach_async(int unit, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_device_detach_async(int unit, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_failover_cleanup_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_failover_create_async(uint32 flags, bcm_failover_t * failover_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_failover_destroy_async(bcm_failover_t failover_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_failover_get_async(bcm_failover_t failover_id, int * enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_failover_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_failover_set_async(bcm_failover_t failover_id, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_action_add_async(bcm_field_entry_t entry, bcm_field_action_t action, uint32 param0, uint32 param1, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_action_delete_async(bcm_field_entry_t entry, bcm_field_action_t action, uint32 param0, uint32 param1, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_action_get_async(bcm_field_entry_t entry, bcm_field_action_t action, uint32 * param0, uint32 * param1, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_action_mac_add_async(bcm_field_entry_t entry, bcm_field_action_t action, bcm_mac_t mac, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_action_mac_get_async(bcm_field_entry_t entry, bcm_field_action_t action, bcm_mac_t * mac, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_action_ports_add_async(bcm_field_entry_t entry, bcm_field_action_t action, bcmx_lplist_t lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_action_ports_get_async(bcm_field_entry_t entry, bcm_field_action_t action, bcmx_lplist_t * lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_action_remove_async(bcm_field_entry_t entry, bcm_field_action_t action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_action_remove_all_async(bcm_field_entry_t entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_control_get_async(bcm_field_control_t control, uint32 * state, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_control_set_async(bcm_field_control_t control, uint32 state, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_data_qualifier_create_async(bcmx_field_data_qualifier_t * data_qualifier, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_data_qualifier_destroy_async(int qual_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_data_qualifier_destroy_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_data_qualifier_ethertype_add_async(int qual_id, bcmx_field_data_ethertype_t * etype, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_data_qualifier_ethertype_delete_async(int qual_id, bcmx_field_data_ethertype_t * etype, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_data_qualifier_get_async(int qual_id, bcmx_field_data_qualifier_t * qual, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_data_qualifier_ip_protocol_add_async(int qual_id, bcmx_field_data_ip_protocol_t * ip_protocol, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_data_qualifier_ip_protocol_delete_async(int qual_id, bcmx_field_data_ip_protocol_t * ip_protocol, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_data_qualifier_multi_get_async(int qual_size, int * qual_array, int * qual_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_data_qualifier_packet_format_add_async(int qual_id, bcmx_field_data_packet_format_t * packet_format, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_data_qualifier_packet_format_delete_async(int qual_id, bcmx_field_data_packet_format_t * packet_format, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_copy_async(bcm_field_entry_t src_entry, bcm_field_entry_t * dst_entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_create_async(bcm_field_group_t group, bcm_field_entry_t * entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_create_id_async(bcm_field_group_t group, bcm_field_entry_t entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_destroy_async(bcm_field_entry_t entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_destroy_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_install_async(bcm_field_entry_t entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_multi_get_async(bcm_field_group_t group, int entry_size, bcm_field_entry_t * entry_array, int * entry_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_policer_attach_async(bcm_field_entry_t entry_id, int level, bcm_policer_t policer_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_policer_detach_async(bcm_field_entry_t entry_id, int level, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_policer_detach_all_async(bcm_field_entry_t entry_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_policer_get_async(bcm_field_entry_t entry_id, int level, bcm_policer_t * policer_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_prio_get_async(bcm_field_entry_t entry, int * prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_prio_set_async(bcm_field_entry_t entry, int prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_reinstall_async(bcm_field_entry_t entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_remove_async(bcm_field_entry_t entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_stat_attach_async(bcm_field_entry_t entry, int stat_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_stat_detach_async(bcm_field_entry_t entry, int stat_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_entry_stat_get_async(bcm_field_entry_t entry, int * stat_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_compress_async(bcm_field_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_create_async(bcm_field_qset_t qset, int pri, bcm_field_group_t * group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_create_id_async(bcm_field_qset_t qset, int pri, bcm_field_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_create_mode_async(bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_create_mode_id_async(bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_destroy_async(bcm_field_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_enable_get_async(bcm_field_group_t group, int * enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_enable_set_async(bcm_field_group_t group, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_get_async(bcm_field_group_t group, bcm_field_qset_t * qset, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_install_async(bcm_field_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_mode_get_async(bcm_field_group_t group, bcm_field_group_mode_t * mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_port_create_mode_async(bcmx_lport_t port, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_port_create_mode_id_async(bcmx_lport_t port, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_ports_create_mode_async(bcmx_lplist_t lplist, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_ports_create_mode_id_async(bcmx_lplist_t lplist, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_priority_get_async(bcm_field_group_t group, int * priority, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_priority_set_async(bcm_field_group_t group, int priority, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_remove_async(bcm_field_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_set_async(bcm_field_group_t group, bcm_field_qset_t qset, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_traverse_async(bcm_field_group_traverse_cb callback, void * user_data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_wlan_create_mode_async(bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_group_wlan_create_mode_id_async(bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qset_data_qualifier_add_async(bcm_field_qset_t * qset, int qual_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qset_data_qualifier_get_async(bcm_field_qset_t * qset, int qual_max, int * qual_arr, int * qual_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualifier_delete_async(bcm_field_entry_t entry, bcm_field_qualify_t qual_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_BigIcmpCheck_get_async(bcm_field_entry_t entry, uint32 * flag, uint32 * size, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_CnTag_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_CnTag_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Color_async(bcm_field_entry_t entry, uint8 color, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Color_get_async(bcm_field_entry_t entry, uint8 * color, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DSCP_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DSCP_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Decap_async(bcm_field_entry_t entry, bcm_field_decap_t decap, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DosAttack_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DosAttack_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Drop_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Drop_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstClassField_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstClassField_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstClassL2_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstClassL2_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstClassL3_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstClassL3_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstHiGig_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstHiGig_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstIp_async(bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstIp6_async(bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstIp6High_async(bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstIp6High_get_async(bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstIp6Low_async(bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstIp6Low_get_async(bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstIp6_get_async(bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstIp_get_async(bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstL3Egress_async(bcm_field_entry_t entry, bcm_if_t if_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstL3Egress_get_async(bcm_field_entry_t entry, bcm_if_t * if_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstMac_async(bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstMac_get_async(bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstMimGport_async(bcm_field_entry_t entry, bcm_gport_t mim_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstMimGport_get_async(bcm_field_entry_t entry, bcm_gport_t * mim_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstMplsGport_async(bcm_field_entry_t entry, bcm_gport_t mpls_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstMplsGport_get_async(bcm_field_entry_t entry, bcm_gport_t * mpls_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstMulticastGroup_async(bcm_field_entry_t entry, bcm_gport_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstMulticastGroup_get_async(bcm_field_entry_t entry, bcm_gport_t * group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstMultipath_async(bcm_field_entry_t entry, bcm_if_t mpintf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstMultipath_get_async(bcm_field_entry_t entry, bcm_if_t * mpintf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstPort_async(bcm_field_entry_t entry, bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstPort_get_async(bcm_field_entry_t entry, bcm_module_t * data_modid, bcm_module_t * mask_modid, bcm_port_t * data_port, bcm_port_t * mask_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstTrunk_async(bcm_field_entry_t entry, bcm_trunk_t tid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstTrunk_get_async(bcm_field_entry_t entry, bcm_trunk_t * data, bcm_trunk_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstWlanGport_async(bcm_field_entry_t entry, bcm_gport_t wlan_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_DstWlanGport_get_async(bcm_field_entry_t entry, bcm_gport_t * wlan_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_EqualL4Port_async(bcm_field_entry_t entry, uint32 flag, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_EqualL4Port_get_async(bcm_field_entry_t entry, uint32 * flag, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_EtherType_async(bcm_field_entry_t entry, uint16 data, uint16 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_EtherType_get_async(bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ExtensionHeader2Type_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ExtensionHeader2Type_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ExtensionHeaderSubCode_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ExtensionHeaderSubCode_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ExtensionHeaderType_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ExtensionHeaderType_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_FabricQueueTag_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_FabricQueueTag_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_FibreChanInner_async(bcm_field_entry_t entry, bcm_field_FibreChan_t fibre_chan_type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_FibreChanInner_get_async(bcm_field_entry_t entry, bcm_field_FibreChan_t * fibre_chan_type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_FibreChanOuter_async(bcm_field_entry_t entry, bcm_field_FibreChan_t fibre_chan_type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_FibreChanOuter_get_async(bcm_field_entry_t entry, bcm_field_FibreChan_t * fibre_chan_type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ForwardingType_async(bcm_field_entry_t entry, bcm_field_ForwardingType_t type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ForwardingType_get_async(bcm_field_entry_t entry, bcm_field_ForwardingType_t * type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ForwardingVlanId_async(bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ForwardingVlanId_get_async(bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ForwardingVlanValid_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_ForwardingVlanValid_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_HiGig_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_HiGig_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IcmpTypeCode_get_async(bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IgmpTypeMaxRespTime_get_async(bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InPort_async(bcm_field_entry_t entry, bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InPort_get_async(bcm_field_entry_t entry, bcm_port_t * data, bcm_port_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InPorts_async(bcm_field_entry_t entry, bcmx_lplist_t lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InPorts_get_async(bcm_field_entry_t entry, bcm_pbmp_t * data, bcm_pbmp_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IngressStpState_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IngressStpState_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerDSCP_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerDSCP_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerDstIp_async(bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerDstIp6_async(bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerDstIp6High_async(bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerDstIp6High_get_async(bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerDstIp6_get_async(bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerDstIp_get_async(bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerIp6FlowLabel_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerIp6FlowLabel_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerIpFrag_async(bcm_field_entry_t entry, bcm_field_IpFrag_t frag_info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerIpFrag_get_async(bcm_field_entry_t entry, bcm_field_IpFrag_t * frag_info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerIpProtocol_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerIpProtocolCommon_async(bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t protocol, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerIpProtocolCommon_get_async(bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t * protocol, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerIpProtocol_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerIpType_async(bcm_field_entry_t entry, bcm_field_IpType_t type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerIpType_get_async(bcm_field_entry_t entry, bcm_field_IpType_t * type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerL4DstPort_async(bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerL4DstPort_get_async(bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerL4SrcPort_async(bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerL4SrcPort_get_async(bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerSrcIp_async(bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerSrcIp6_async(bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerSrcIp6High_async(bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerSrcIp6High_get_async(bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerSrcIp6_get_async(bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerSrcIp_get_async(bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerTos_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerTos_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerTpid_async(bcm_field_entry_t entry, uint16 tpid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerTpid_get_async(bcm_field_entry_t entry, uint16 * tpid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerTtl_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerTtl_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerVlan_async(bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerVlanCfi_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerVlanCfi_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerVlanId_async(bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerVlanId_get_async(bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerVlanPri_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerVlanPri_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InnerVlan_get_async(bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IntPriority_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IntPriority_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InterfaceClassL2_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InterfaceClassL2_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InterfaceClassL3_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InterfaceClassL3_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InterfaceClassPort_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_InterfaceClassPort_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Ip6FlowLabel_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Ip6FlowLabel_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Ip6HopLimit_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Ip6HopLimit_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Ip6NextHeader_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Ip6NextHeader_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Ip6TrafficClass_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Ip6TrafficClass_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpAuth_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpFlags_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpFlags_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpFrag_async(bcm_field_entry_t entry, bcm_field_IpFrag_t frag_info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpFrag_get_async(bcm_field_entry_t entry, bcm_field_IpFrag_t * frag_info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpInfo_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpInfo_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpProtocol_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpProtocolCommon_async(bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t protocol, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpProtocolCommon_get_async(bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t * protocol, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpProtocol_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpType_async(bcm_field_entry_t entry, bcm_field_IpType_t type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpType_get_async(bcm_field_entry_t entry, bcm_field_IpType_t * type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpmcStarGroupHit_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_IpmcStarGroupHit_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2CacheHit_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2CacheHit_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2DestHit_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2DestHit_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2Format_async(bcm_field_entry_t entry, bcm_field_L2Format_t type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2Format_get_async(bcm_field_entry_t entry, bcm_field_L2Format_t * type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2PayloadFirstEightBytes_async(bcm_field_entry_t entry, uint32 data1, uint32 data2, uint32 mask1, uint32 mask2, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2PayloadFirstEightBytes_get_async(bcm_field_entry_t entry, uint32 * data1, uint32 * data2, uint32 * mask1, uint32 * mask2, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2SrcHit_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2SrcHit_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2SrcStatic_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2SrcStatic_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2StationMove_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L2StationMove_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L3DestHostHit_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L3DestHostHit_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L3DestRouteHit_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L3DestRouteHit_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L3Ingress_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L3Ingress_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L3Routable_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L3Routable_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L3SrcHostHit_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L3SrcHostHit_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L4DstPort_async(bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L4DstPort_get_async(bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L4Ports_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L4Ports_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L4SrcPort_async(bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_L4SrcPort_get_async(bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Llc_async(bcm_field_entry_t entry, bcm_field_llc_header_t data, bcm_field_llc_header_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Llc_get_async(bcm_field_entry_t entry, bcm_field_llc_header_t * data, bcm_field_llc_header_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Loopback_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_LoopbackType_async(bcm_field_entry_t entry, bcm_field_LoopbackType_t loopback_type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_LoopbackType_get_async(bcm_field_entry_t entry, bcm_field_LoopbackType_t * loopback_type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Loopback_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_MHOpcode_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_MHOpcode_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_MirrorCopy_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_MirrorCopy_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_MplsTerminated_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_MplsTerminated_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_MyStationHit_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_MyStationHit_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OutPort_async(bcm_field_entry_t entry, bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OutPort_get_async(bcm_field_entry_t entry, bcm_port_t * data, bcm_port_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OutPorts_async(bcm_field_entry_t entry, bcmx_lplist_t lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OutPorts_get_async(bcm_field_entry_t entry, bcm_pbmp_t * data, bcm_pbmp_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OuterTpid_async(bcm_field_entry_t entry, uint16 tpid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OuterTpid_get_async(bcm_field_entry_t entry, uint16 * tpid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OuterVlan_async(bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OuterVlanCfi_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OuterVlanCfi_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OuterVlanId_async(bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OuterVlanId_get_async(bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OuterVlanPri_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OuterVlanPri_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_OuterVlan_get_async(bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_PacketRes_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_PacketRes_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_RangeCheck_async(bcm_field_entry_t entry, int range, int result, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_RangeCheck_get_async(bcm_field_entry_t entry, int max_count, bcm_field_range_t * range, int * invert, int * count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Snap_async(bcm_field_entry_t entry, bcm_field_snap_header_t data, bcm_field_snap_header_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Snap_get_async(bcm_field_entry_t entry, bcm_field_snap_header_t * data, bcm_field_snap_header_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcClassField_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcClassField_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcClassL2_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcClassL2_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcClassL3_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcClassL3_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcIp_async(bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcIp6_async(bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcIp6High_async(bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcIp6High_get_async(bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcIp6Low_async(bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcIp6Low_get_async(bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcIp6_get_async(bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcIpEqualDstIp_async(bcm_field_entry_t entry, uint32 flag, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcIpEqualDstIp_get_async(bcm_field_entry_t entry, uint32 * flag, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcIp_get_async(bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcMac_async(bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcMac_get_async(bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcMimGport_async(bcm_field_entry_t entry, bcm_gport_t mim_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcMimGport_get_async(bcm_field_entry_t entry, bcm_gport_t * mim_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcModPortGport_async(bcm_field_entry_t entry, bcm_gport_t data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcModPortGport_get_async(bcm_field_entry_t entry, bcm_gport_t * data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcModuleGport_async(bcm_field_entry_t entry, bcm_gport_t data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcModuleGport_get_async(bcm_field_entry_t entry, bcm_gport_t * data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcMplsGport_async(bcm_field_entry_t entry, bcm_gport_t mpls_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcMplsGport_get_async(bcm_field_entry_t entry, bcm_gport_t * mpls_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcPort_async(bcm_field_entry_t entry, bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcPort_get_async(bcm_field_entry_t entry, bcm_module_t * data_modid, bcm_module_t * mask_modid, bcm_port_t * data_port, bcm_port_t * mask_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcTrunk_async(bcm_field_entry_t entry, bcm_trunk_t tid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcTrunk_get_async(bcm_field_entry_t entry, bcm_trunk_t * data, bcm_trunk_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcVirtualPortValid_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcVirtualPortValid_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcWlanGport_async(bcm_field_entry_t entry, bcm_gport_t wlan_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_SrcWlanGport_get_async(bcm_field_entry_t entry, bcm_gport_t * wlan_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TcpControl_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TcpControl_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TcpHeaderSize_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TcpHeaderSize_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TcpSequenceZero_async(bcm_field_entry_t entry, uint32 flag, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TcpSequenceZero_get_async(bcm_field_entry_t entry, uint32 * flag, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Tos_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Tos_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TranslatedVlanFormat_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TranslatedVlanFormat_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Ttl_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Ttl_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TunnelTerminated_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TunnelTerminated_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TunnelType_async(bcm_field_entry_t entry, bcm_field_TunnelType_t tunnel_type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_TunnelType_get_async(bcm_field_entry_t entry, bcm_field_TunnelType_t * tunnel_type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_VlanFormat_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_VlanFormat_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_VlanTranslationHit_async(bcm_field_entry_t entry, uint8 data, uint8 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_VlanTranslationHit_get_async(bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_VnTag_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_VnTag_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Vpn_async(bcm_field_entry_t entry, bcm_vpn_t data, bcm_vpn_t mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Vpn_get_async(bcm_field_entry_t entry, bcm_vpn_t * data, bcm_vpn_t * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Vrf_async(bcm_field_entry_t entry, uint32 data, uint32 mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_Vrf_get_async(bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_clear_async(bcm_field_entry_t entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_qualify_data_async(bcm_field_entry_t eid, int qual_id, uint8 * data, uint8 * mask, uint16 length, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_range_create_async(bcm_field_range_t * range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_range_create_id_async(bcm_field_range_t range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_range_destroy_async(bcm_field_range_t range, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_range_get_async(bcm_field_range_t range, uint32 * flags, bcm_l4_port_t * min, bcm_l4_port_t * max, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_range_group_create_async(bcm_field_range_t * range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_if_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_range_group_create_id_async(bcm_field_range_t range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_if_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_resync_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_all_set_async(int stat_id, uint64 value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_all_set32_async(int stat_id, uint32 value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_config_get_async(int stat_id, int nstat, bcm_field_stat_t * stat_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_create_async(bcm_field_group_t group, int nstat, bcm_field_stat_t * stat_arr, int * stat_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_create_id_async(bcm_field_group_t group, int nstat, bcm_field_stat_t * stat_arr, int stat_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_destroy_async(int stat_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_get_async(int stat_id, bcm_field_stat_t stat, uint64 * value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_get32_async(int stat_id, bcm_field_stat_t stat, uint32 * value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_multi_get_async(int stat_id, int nstat, bcm_field_stat_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_multi_get32_async(int stat_id, int nstat, bcm_field_stat_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_set_async(int stat_id, bcm_field_stat_t stat, uint64 value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_set32_async(int stat_id, bcm_field_stat_t stat, uint32 value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_field_stat_size_async(int stat_id, int * stat_size, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_config_get_async(bcm_ipfix_stage_t stage, bcmx_lport_t port, bcmx_ipfix_config_t * config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_config_set_async(bcm_ipfix_stage_t stage, bcmx_lport_t port, bcmx_ipfix_config_t * config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_mirror_config_get_async(bcm_ipfix_stage_t stage, bcm_gport_t port, bcmx_ipfix_mirror_config_t * config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_mirror_config_set_async(bcm_ipfix_stage_t stage, bcm_gport_t port, bcmx_ipfix_mirror_config_t * config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_mirror_port_dest_add_async(bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_gport_t mirror_dest_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_mirror_port_dest_delete_async(bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_gport_t mirror_dest_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_mirror_port_dest_delete_all_async(bcm_ipfix_stage_t stage, bcm_gport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_mirror_port_dest_get_async(bcm_ipfix_stage_t stage, bcm_gport_t port, int mirror_dest_size, bcm_gport_t * mirror_dest_id, int * mirror_dest_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_rate_create_async(bcmx_ipfix_rate_t * rate_info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_rate_destroy_async(bcm_ipfix_rate_id_t rate_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_rate_destroy_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_rate_get_async(bcmx_ipfix_rate_t * rate_info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_rate_mirror_add_async(bcm_ipfix_rate_id_t rate_id, bcm_gport_t mirror_dest_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_rate_mirror_delete_async(bcm_ipfix_rate_id_t rate_id, bcm_gport_t mirror_dest_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_rate_mirror_delete_all_async(bcm_ipfix_rate_id_t rate_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipfix_rate_mirror_get_async(bcm_ipfix_rate_id_t rate_id, int mirror_dest_size, bcm_gport_t * mirror_dest_id, int * mirror_dest_count, bcmx_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcmx_ipmc_add_async(bcmx_ipmc_addr_t * data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_age_async(uint32 flags, bcm_ipmc_traverse_cb age_cb, void * user_data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_counters_get_async(bcmx_lport_t port, bcm_ipmc_counters_t * counters, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_detach_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_egress_port_get_async(bcmx_lport_t port, bcm_mac_t mac, int * untag, bcm_vlan_t * vid, int * ttl_threshold, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_egress_port_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_egress_port_set_async(bcmx_lport_t port, const bcm_mac_t mac, int untag, bcm_vlan_t vid, int ttl_threshold, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_enable_async(int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_find_async(bcmx_ipmc_addr_t * data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_remove_async(bcmx_ipmc_addr_t * data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_remove_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_ipmc_traverse_async(uint32 flags, bcm_ipmc_traverse_cb cb, void * user_data, bcmx_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcmx_l2_addr_add_async(bcmx_l2_addr_t * l2addr, bcmx_lplist_t * port_block, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_delete_async(bcm_mac_t mac, bcm_vlan_t vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_delete_by_mac_async(bcm_mac_t mac, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_delete_by_mac_port_async(bcm_mac_t mac, bcmx_lport_t port, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_delete_by_port_async(bcmx_lport_t port, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_delete_by_trunk_async(bcm_trunk_t tid, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_delete_by_vlan_async(bcm_vlan_t vid, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_delete_by_vlan_port_async(bcm_vlan_t vid, bcmx_lport_t port, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_delete_by_vlan_trunk_async(bcm_vlan_t vid, bcm_trunk_t tid, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_freeze_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_from_bcm_async(bcmx_l2_addr_t * dest, bcmx_lplist_t * port_block, bcm_l2_addr_t * source, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_get_async(bcm_mac_t mac_addr, bcm_vlan_t vid, bcmx_l2_addr_t * l2addr, bcmx_lplist_t * port_block, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_native_get_async(bcm_mac_t mac_addr, bcm_vlan_t vid, bcmx_l2_addr_t * l2addr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_port_get_async(bcmx_lport_t port, bcm_mac_t mac_addr, bcm_vlan_t vid, bcmx_l2_addr_t * l2addr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_refresh_async(bcmx_l2_addr_t * l2addr, bcmx_lplist_t * port_block, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_thaw_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_addr_to_bcm_async(int bcm_unit, bcm_l2_addr_t * dest, bcmx_l2_addr_t * source, bcmx_lplist_t * port_block, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_age_timer_get_async(int * age_seconds, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_age_timer_set_async(int age_seconds, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_cache_delete_async(int index, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_cache_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_cache_get_async(int index, bcmx_l2_cache_addr_t * addr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_cache_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_cache_set_async(int index, bcmx_l2_cache_addr_t * addr, int * index_used, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_cache_size_get_async(int * size, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_conflict_get_async(bcmx_l2_addr_t * addr, bcmx_l2_addr_t * cf_array, int cf_max, int * cf_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_device_add_async(int bcm_unit, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_device_remove_async(int bcm_unit, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_learn_class_get_async(int lclass, int * lclass_prio, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_learn_class_set_async(int lclass, int lclass_prio, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_learn_limit_get_async(bcmx_l2_learn_limit_t * limit, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_learn_limit_set_async(bcmx_l2_learn_limit_t * limit, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_learn_port_class_get_async(bcmx_lport_t port, int * lclass, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_learn_port_class_set_async(bcmx_lport_t port, int lclass, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_notify_register_async(bcmx_l2_notify_f callback, void * userdata, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_notify_start_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_notify_stop_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_notify_unregister_async(bcmx_l2_notify_f callback, void * userdata, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_replace_async(uint32 flags, bcmx_l2_addr_t * match_addr, bcmx_lport_t new_port, bcm_trunk_t new_trunk, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_tunnel_add_async(bcm_mac_t mac, bcm_vlan_t vlan, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_tunnel_delete_async(bcm_mac_t mac, bcm_vlan_t vlan, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l2_tunnel_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcmx_l3_cleanup_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_create_async(uint32 flags, bcmx_l3_egress_t * egr, bcm_if_t * intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_destroy_async(bcm_if_t intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_find_async(bcmx_l3_egress_t * egr, bcm_if_t * intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_get_async(bcm_if_t intf, bcmx_l3_egress_t * egr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_multipath_add_async(bcm_if_t mpintf, bcm_if_t intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_multipath_create_async(uint32 flags, int intf_count, bcm_if_t * intf_array, bcm_if_t * mpintf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_multipath_delete_async(bcm_if_t mpintf, bcm_if_t intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_multipath_destroy_async(bcm_if_t mpintf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_multipath_find_async(int intf_count, bcm_if_t * intf_array, bcm_if_t * mpintf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_multipath_get_async(bcm_if_t mpintf, int intf_size, bcm_if_t * intf_array, int * intf_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_multipath_max_create_async(uint32 flags, int max_paths, int intf_count, bcm_if_t * intf_array, bcm_if_t * mpintf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_multipath_traverse_async(bcm_l3_egress_multipath_traverse_cb trav_fn, void * user_data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_egress_traverse_async(bcm_l3_egress_traverse_cb trav_fn, void * user_data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_enable_set_async(int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_host_add_async(bcmx_l3_host_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_host_age_async(uint32 flags, bcm_l3_host_traverse_cb age_cb, void * user_data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_host_conflict_get_async(bcm_l3_key_t * ipkey, bcm_l3_key_t * cf_array, int cf_max, int * cf_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_host_delete_async(bcmx_l3_host_t * ip_addr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_host_delete_all_async(bcmx_l3_host_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_host_delete_by_interface_async(bcmx_l3_host_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_host_delete_by_network_async(bcmx_l3_route_t * ip_addr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_host_find_async(bcmx_l3_host_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_host_invalidate_entry_async(bcm_ip_t info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_host_traverse_async(uint32 flags, uint32 start, uint32 end, bcm_l3_host_traverse_cb cb, void * user_data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_host_validate_entry_async(bcm_ip_t info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_info_async(bcm_l3_info_t * l3info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_ingress_create_async(bcmx_l3_ingress_t * ing_intf, bcm_if_t * intf_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_ingress_destroy_async(bcm_if_t intf_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_ingress_find_async(bcmx_l3_ingress_t * ing_intf, bcm_if_t * intf_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_ingress_get_async(bcm_if_t intf, bcmx_l3_ingress_t * ing_intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_intf_create_async(bcm_l3_intf_t * intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_intf_delete_async(bcm_l3_intf_t * intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_intf_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_intf_find_async(bcm_l3_intf_t * intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_intf_find_vlan_async(bcm_l3_intf_t * intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_intf_get_async(bcm_l3_intf_t * intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_ip6_prefix_map_add_async(bcm_ip6_t ip6_addr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_ip6_prefix_map_delete_async(bcm_ip6_t ip6_addr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_ip6_prefix_map_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_ip6_prefix_map_get_async(int map_size, bcm_ip6_t * ip6_array, int * ip6_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_route_add_async(bcmx_l3_route_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_route_age_async(uint32 flags, bcm_l3_route_traverse_cb age_out, void * user_data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_route_delete_async(bcmx_l3_route_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_route_delete_all_async(bcmx_l3_route_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_route_delete_by_interface_async(bcmx_l3_route_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_route_get_async(bcmx_l3_route_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_route_max_ecmp_get_async(int * max, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_route_max_ecmp_set_async(int max, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_route_multipath_get_async(bcmx_l3_route_t * the_route, bcmx_l3_route_t * path_array, int max_path, int * path_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_route_traverse_async(uint32 flags, uint32 start, uint32 end, bcm_l3_route_traverse_cb trav_fn, void * user_data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_source_bind_add_async(bcmx_l3_source_bind_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_source_bind_delete_async(bcmx_l3_source_bind_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_source_bind_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_source_bind_enable_get_async(bcm_gport_t port, int * enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_source_bind_enable_set_async(bcm_gport_t port, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_source_bind_get_async(bcmx_l3_source_bind_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrf_stat_enable_set_async(bcm_vrf_t vrf, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrf_stat_get_async(bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint64 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrf_stat_get32_async(bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrf_stat_multi_get_async(bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrf_stat_multi_get32_async(bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrf_stat_multi_set_async(bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrf_stat_multi_set32_async(bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrf_stat_set_async(bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint64 val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrf_stat_set32_async(bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrrp_add_async(bcm_vlan_t vlan, uint32 vrid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrrp_delete_async(bcm_vlan_t vlan, uint32 vrid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrrp_delete_all_async(bcm_vlan_t vlan, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_l3_vrrp_get_async(bcm_vlan_t vlan, int alloc_size, int * vrid_array, int * count, bcmx_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcmx_linkscan_device_add_async(int bcm_unit, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_linkscan_device_remove_async(int bcm_unit, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_linkscan_enable_get_async(int * us, int * consistent, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_linkscan_enable_port_get_async(bcmx_lport_t lport, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_linkscan_enable_set_async(int us, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_linkscan_register_async(bcmx_link_notify_f ln_cb, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_linkscan_unregister_async(bcmx_link_notify_f ln_cb, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mcast_addr_add_async(bcmx_mcast_addr_t * mcaddr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mcast_addr_remove_async(bcm_mac_t mac, bcm_vlan_t vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mcast_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mcast_join_async(bcm_mac_t mac, bcm_vlan_t vid, bcmx_lport_t port, bcmx_mcast_addr_t * mcaddr, bcmx_lplist_t * allrtr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mcast_leave_async(bcm_mac_t mac, bcm_vlan_t vid, bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mcast_port_add_async(bcmx_mcast_addr_t * mcaddr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mcast_port_get_async(bcm_mac_t mac, bcm_vlan_t vid, bcmx_mcast_addr_t * mcaddr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mcast_port_remove_async(bcmx_mcast_addr_t * mcaddr, bcmx_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcmx_mim_detach_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mim_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mim_port_add_async(bcm_mim_vpn_t vpn, bcmx_mim_port_t * mim_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mim_port_delete_async(bcm_mim_vpn_t vpn, bcm_gport_t mim_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mim_port_delete_all_async(bcm_mim_vpn_t vpn, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mim_port_get_async(bcm_mim_vpn_t vpn, bcmx_mim_port_t * mim_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mim_port_get_all_async(bcm_mim_vpn_t vpn, int port_max, bcmx_mim_port_t * port_array, int * port_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mim_vpn_create_async(bcmx_mim_vpn_config_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mim_vpn_destroy_async(bcm_mim_vpn_t vpn, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mim_vpn_destroy_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mim_vpn_get_async(bcm_mim_vpn_t vpn, bcmx_mim_vpn_config_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcmx_mirror_destination_create_async(bcmx_mirror_destination_t * mirror_dest, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_destination_destroy_async(bcm_gport_t mirror_dest_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_destination_get_async(bcm_gport_t mirror_dest_id, bcmx_mirror_destination_t * mirror_dest, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_egress_get_async(bcmx_lport_t port, int * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_egress_set_async(bcmx_lport_t port, int val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_fabric_list_get_async(bcmx_lport_t port, bcmx_lplist_t * lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_fabric_list_set_async(bcmx_lport_t port, bcmx_lplist_t lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_ingress_get_async(bcmx_lport_t port, int * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_ingress_set_async(bcmx_lport_t port, int val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_mode_get_async(int * mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_mode_set_async(int mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_port_dest_add_async(bcmx_lport_t port, uint32 flags, bcm_gport_t mirror_dest_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_port_dest_delete_async(bcmx_lport_t port, uint32 flags, bcm_gport_t mirror_dest_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_port_dest_delete_all_async(bcmx_lport_t port, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_port_dest_get_async(bcmx_lport_t port, uint32 flags, int mirror_dest_size, bcm_gport_t * mirror_dest, int * mirror_dest_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_port_get_async(bcmx_lport_t port, bcmx_lport_t * dest_port, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_port_set_async(bcmx_lport_t port, bcmx_lport_t dest_port, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_to_get_async(bcmx_lport_t * port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_to_set_async(bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_vlan_get_async(bcmx_lport_t port, uint16 * tpid, uint16 * vlan, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mirror_vlan_set_async(bcmx_lport_t port, uint16 tpid, uint16 vlan, bcmx_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcmx_mpls_cleanup_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_exp_map_create_async(uint32 flags, int * exp_map_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_exp_map_destroy_async(int exp_map_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_exp_map_get_async(int exp_map_id, bcm_mpls_exp_map_t * exp_map, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_exp_map_set_async(int exp_map_id, bcm_mpls_exp_map_t * exp_map, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_label_stat_clear_async(bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_label_stat_get_async(bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint64 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_label_stat_get32_async(bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_port_add_async(bcm_vpn_t vpn, bcmx_mpls_port_t * mpls_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_port_delete_async(bcm_vpn_t vpn, bcm_gport_t mpls_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_port_delete_all_async(bcm_vpn_t vpn, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_port_get_async(bcm_vpn_t vpn, bcmx_mpls_port_t * mpls_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_port_get_all_async(bcm_vpn_t vpn, int port_max, bcmx_mpls_port_t * port_array, int * port_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_tunnel_initiator_clear_async(bcm_if_t intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_tunnel_initiator_clear_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_tunnel_initiator_get_async(bcm_if_t intf, int label_max, bcmx_mpls_egress_label_t * label_array, int * label_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_tunnel_initiator_set_async(bcm_if_t intf, int num_labels, bcmx_mpls_egress_label_t * label_array, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_tunnel_switch_add_async(bcmx_mpls_tunnel_switch_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_tunnel_switch_delete_async(bcmx_mpls_tunnel_switch_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_tunnel_switch_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_tunnel_switch_get_async(bcmx_mpls_tunnel_switch_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_vpn_id_create_async(bcmx_mpls_vpn_config_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_vpn_id_destroy_async(bcm_vpn_t vpn, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_vpn_id_destroy_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_mpls_vpn_id_get_async(bcm_vpn_t vpn, bcmx_mpls_vpn_config_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcmx_multicast_control_get_async(bcm_multicast_t group, bcm_multicast_control_t type, int * arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_control_set_async(bcm_multicast_t group, bcm_multicast_control_t type, int arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_create_async(uint32 flags, bcm_multicast_t * group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_destroy_async(bcm_multicast_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_detach_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_egress_add_async(bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_egress_delete_async(bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_egress_delete_all_async(bcm_multicast_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_egress_get_async(bcm_multicast_t group, int port_max, bcm_gport_t * port_array, bcm_if_t * encap_id_array, int * port_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_egress_set_async(bcm_multicast_t group, int port_count, bcm_gport_t * port_array, bcm_if_t * encap_id_array, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_group_get_async(bcm_multicast_t group, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_l2_encap_get_async(bcm_multicast_t group, bcm_gport_t port, bcm_vlan_t vlan, bcm_if_t * encap_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_l3_encap_get_async(bcm_multicast_t group, bcm_gport_t port, bcm_if_t intf, bcm_if_t * encap_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_mim_encap_get_async(bcm_multicast_t group, bcm_gport_t port, bcm_gport_t mim_port_id, bcm_if_t * encap_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_niv_encap_get_async(bcm_multicast_t group, bcm_gport_t port, bcm_gport_t niv_port_id, bcm_if_t * encap_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_repl_get_async(int index, bcmx_lport_t port, bcm_vlan_vector_t vlan_vec, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_repl_set_async(int index, bcmx_lport_t port, bcm_vlan_vector_t vlan_vec, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_subport_encap_get_async(bcm_multicast_t group, bcm_gport_t port, bcm_gport_t subport, bcm_if_t * encap_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_trill_encap_get_async(bcm_multicast_t group, bcm_gport_t port, bcm_if_t intf, bcm_if_t * encap_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_vlan_encap_get_async(bcm_multicast_t group, bcm_gport_t port, bcm_gport_t vlan_port_id, bcm_if_t * encap_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_vpls_encap_get_async(bcm_multicast_t group, bcm_gport_t port, bcm_gport_t mpls_port_id, bcm_if_t * encap_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_multicast_wlan_encap_get_async(bcm_multicast_t group, bcm_gport_t port, bcm_gport_t wlan_port_id, bcm_if_t * encap_id, bcmx_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcmx_niv_cleanup_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_niv_forward_add_async(bcmx_niv_forward_t * iv_fwd_entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_niv_forward_delete_async(bcmx_niv_forward_t * iv_fwd_entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_niv_forward_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_niv_forward_get_async(bcmx_niv_forward_t * iv_fwd_entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_niv_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_niv_port_add_async(bcmx_niv_port_t * niv_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_niv_port_delete_async(bcm_gport_t niv_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_niv_port_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_niv_port_get_async(bcmx_niv_port_t * niv_port, bcmx_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcmx_oam_detach_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_oam_endpoint_create_async(bcmx_oam_endpoint_info_t * endpoint_info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_oam_endpoint_destroy_async(bcm_oam_endpoint_t endpoint, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_oam_endpoint_destroy_all_async(bcm_oam_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_oam_endpoint_get_async(bcm_oam_endpoint_t endpoint, bcmx_oam_endpoint_info_t * endpoint_info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_oam_group_create_async(bcmx_oam_group_info_t * group_info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_oam_group_destroy_async(bcm_oam_group_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_oam_group_destroy_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_oam_group_get_async(bcm_oam_group_t group, bcmx_oam_group_info_t * group_info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_oam_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_policer_create_async(bcmx_policer_config_t * pol_cfg, bcm_policer_t * policer_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_policer_destroy_async(bcm_policer_t policer_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_policer_destroy_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_policer_get_async(bcm_policer_t policer_id, bcmx_policer_config_t * pol_cfg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_policer_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_policer_set_async(bcm_policer_t policer_id, bcmx_policer_config_t * pol_cfg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_ability_advert_get_async(bcmx_lport_t port, bcmx_port_ability_t * ability_mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_ability_advert_set_async(bcmx_lport_t port, bcmx_port_ability_t * ability_mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_ability_get_async(bcmx_lport_t port, bcm_port_abil_t * local_ability_mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_ability_local_get_async(bcmx_lport_t port, bcmx_port_ability_t * local_ability_mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_ability_remote_get_async(bcmx_lport_t port, bcmx_port_ability_t * ability_mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_advert_get_async(bcmx_lport_t port, bcm_port_abil_t * ability_mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_advert_remote_get_async(bcmx_lport_t port, bcm_port_abil_t * ability_mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_advert_set_async(bcmx_lport_t port, bcm_port_abil_t ability_mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_autoneg_get_async(bcmx_lport_t port, int * autoneg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_autoneg_set_async(bcmx_lport_t port, int autoneg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_bpdu_enable_get_async(bcmx_lport_t port, int * enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_bpdu_enable_set_async(bcmx_lport_t port, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_cable_diag_async(bcmx_lport_t port, bcm_port_cable_diag_t * status, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_cfi_color_get_async(bcmx_lport_t port, int cfi, bcm_color_t * color, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_cfi_color_set_async(bcmx_lport_t port, int cfi, bcm_color_t color, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_class_get_async(bcmx_lport_t port, bcm_port_class_t pclass, uint32 * class_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_class_set_async(bcmx_lport_t port, bcm_port_class_t pclass, uint32 class_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_config_get_async(bcmx_port_config_t * config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_congestion_config_get_async(bcm_gport_t port, bcmx_port_congestion_config_t * config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_congestion_config_set_async(bcm_gport_t port, bcmx_port_congestion_config_t * config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_control_get_async(bcmx_lport_t port, bcm_port_control_t type, int * value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_control_phy_timesync_get_async(bcm_gport_t port, bcm_port_control_phy_timesync_t type, uint64 * value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_control_phy_timesync_set_async(bcm_gport_t port, bcm_port_control_phy_timesync_t type, uint64 value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_control_set_async(bcmx_lport_t port, bcm_port_control_t type, int value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_discard_get_async(bcmx_lport_t port, int * mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_discard_set_async(bcmx_lport_t port, int mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_dscp_map_get_async(bcmx_lport_t port, int srccp, int * mapcp, int * prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_dscp_map_mode_get_async(bcmx_lport_t port, int * mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_dscp_map_mode_set_async(bcmx_lport_t port, int mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_dscp_map_set_async(bcmx_lport_t port, int srccp, int mapcp, int prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_dtag_mode_get_async(bcmx_lport_t port, int * mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_dtag_mode_set_async(bcmx_lport_t port, int mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_duplex_get_async(bcmx_lport_t port, int * duplex, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_duplex_set_async(bcmx_lport_t port, int duplex, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_egress_get_async(bcmx_lport_t port, int modid, bcmx_lplist_t * lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_egress_set_async(bcmx_lport_t port, int modid, bcmx_lplist_t lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_enable_get_async(bcmx_lport_t port, int * enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_enable_set_async(bcmx_lport_t port, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_encap_config_get_async(bcm_gport_t gport, bcmx_port_encap_config_t * encap_config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_encap_config_set_async(bcm_gport_t gport, bcmx_port_encap_config_t * encap_config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_encap_get_async(bcmx_lport_t port, int * mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_encap_set_async(bcmx_lport_t port, int mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_fault_get_async(bcmx_lport_t port, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_flood_block_get_async(bcmx_lport_t ingress_port, bcmx_lport_t egress_port, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_flood_block_set_async(bcmx_lport_t ingress_port, bcmx_lport_t egress_port, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_force_vlan_get_async(bcmx_lport_t port, bcm_vlan_t * vlan, int * pkt_prio, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_force_vlan_set_async(bcmx_lport_t port, bcm_vlan_t vlan, int pkt_prio, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_frame_max_get_async(bcmx_lport_t port, int * size, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_frame_max_set_async(bcmx_lport_t port, int size, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_gport_get_async(bcmx_lport_t port, bcm_gport_t * gport, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_ifg_get_async(bcmx_lport_t port, int speed, bcm_port_duplex_t duplex, int * bit_times, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_ifg_set_async(bcmx_lport_t port, int speed, bcm_port_duplex_t duplex, int bit_times, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_ifilter_get_async(bcmx_lport_t port, int * mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_ifilter_set_async(bcmx_lport_t port, int mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_info_get_async(bcmx_lport_t port, bcm_port_info_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_info_restore_async(bcmx_lport_t port, bcm_port_info_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_info_save_async(bcmx_lport_t port, bcm_port_info_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_info_set_async(bcmx_lport_t port, bcm_port_info_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_inner_tpid_get_async(bcmx_lport_t port, uint16 * tpid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_inner_tpid_set_async(bcmx_lport_t port, uint16 tpid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_interface_get_async(bcmx_lport_t port, bcm_port_if_t * intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_interface_set_async(bcmx_lport_t port, bcm_port_if_t intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_ipmc_modify_get_async(bcmx_lport_t port, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_ipmc_modify_set_async(bcmx_lport_t port, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_jam_get_async(bcmx_lport_t port, int * enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_jam_set_async(bcmx_lport_t port, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_l3_enable_get_async(bcmx_lport_t port, int * enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_l3_enable_set_async(bcmx_lport_t port, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_l3_modify_get_async(bcmx_lport_t port, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_l3_modify_set_async(bcmx_lport_t port, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_l3_mtu_get_async(bcmx_lport_t port, int * size, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_l3_mtu_set_async(bcmx_lport_t port, int size, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_learn_get_async(bcmx_lport_t port, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_learn_modify_async(bcmx_lport_t port, uint32 add, uint32 remove, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_learn_set_async(bcmx_lport_t port, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_link_failed_clear_async(bcm_gport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_link_status_get_async(bcmx_lport_t port, int * status, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_linkscan_get_async(bcmx_lport_t port, int * linkscan, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_linkscan_set_async(bcmx_lport_t port, int linkscan, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_loopback_get_async(bcmx_lport_t port, int * loopback, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_loopback_set_async(bcmx_lport_t port, int loopback, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_lplist_populate_async(bcmx_lplist_t * list, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_master_get_async(bcmx_lport_t port, int * ms, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_master_set_async(bcmx_lport_t port, int ms, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_match_add_async(bcm_gport_t port, bcmx_port_match_info_t * match, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_match_delete_async(bcm_gport_t port, bcmx_port_match_info_t * match, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_match_delete_all_async(bcm_gport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_match_multi_get_async(bcm_gport_t port, int size, bcmx_port_match_info_t * match_array, int * count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_match_replace_async(bcm_gport_t port, bcmx_port_match_info_t * old_match, bcmx_port_match_info_t * new_match, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_match_set_async(bcm_gport_t port, int size, bcmx_port_match_info_t * match_array, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_mdix_get_async(bcmx_lport_t port, bcm_port_mdix_t * mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_mdix_set_async(bcmx_lport_t port, bcm_port_mdix_t mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_mdix_status_get_async(bcmx_lport_t port, bcm_port_mdix_status_t * status, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_medium_config_get_async(bcmx_lport_t port, bcm_port_medium_t medium, bcm_phy_config_t * config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_medium_config_set_async(bcmx_lport_t port, bcm_port_medium_t medium, bcm_phy_config_t * config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_medium_get_async(bcmx_lport_t port, bcm_port_medium_t * medium, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_modid_enable_get_async(bcmx_lport_t port, int modid, int * enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_modid_enable_set_async(bcmx_lport_t port, int modid, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_pause_addr_get_async(bcmx_lport_t port, bcm_mac_t mac, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_pause_addr_set_async(bcmx_lport_t port, bcm_mac_t mac, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_pause_get_async(bcmx_lport_t port, int * pause_tx, int * pause_rx, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_pause_set_async(bcmx_lport_t port, int pause_tx, int pause_rx, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_pause_sym_get_async(bcmx_lport_t port, int * pause, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_pause_sym_set_async(bcmx_lport_t port, int pause, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_pfm_get_async(bcmx_lport_t port, int * mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_pfm_set_async(bcmx_lport_t port, int mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_phy_control_get_async(bcmx_lport_t port, bcm_port_phy_control_t type, uint32 * value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_phy_control_set_async(bcmx_lport_t port, bcm_port_phy_control_t type, uint32 value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_phy_get_async(bcmx_lport_t port, uint32 flags, uint32 phy_reg_addr, uint32 * phy_data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_phy_modify_async(bcmx_lport_t port, uint32 flags, uint32 phy_reg_addr, uint32 phy_data, uint32 phy_mask, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_phy_set_async(bcmx_lport_t port, uint32 flags, uint32 phy_reg_addr, uint32 phy_data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_phy_timesync_config_get_async(bcm_gport_t port, bcmx_port_phy_timesync_config_t * conf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_phy_timesync_config_set_async(bcm_gport_t port, bcmx_port_phy_timesync_config_t * conf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_phy_timesync_enhanced_capture_get_async(bcm_gport_t port, bcmx_port_phy_timesync_enhanced_capture_t * conf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_priority_color_get_async(bcmx_lport_t port, int prio, bcm_color_t * color, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_priority_color_set_async(bcmx_lport_t port, int prio, bcm_color_t color, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_protocol_vlan_add_async(bcmx_lport_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_vlan_t vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_protocol_vlan_delete_async(bcmx_lport_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_protocol_vlan_delete_all_async(bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_queued_count_get_async(bcmx_lport_t port, uint32 * count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_rate_egress_get_async(bcmx_lport_t port, uint32 * kbits_sec, uint32 * kbits_burst, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_rate_egress_set_async(bcmx_lport_t port, uint32 kbits_sec, uint32 kbits_burst, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_rate_ingress_get_async(bcmx_lport_t port, uint32 * kbits_sec, uint32 * kbits_burst, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_rate_ingress_set_async(bcmx_lport_t port, uint32 kbits_sec, uint32 kbits_burst, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_rate_pause_get_async(bcmx_lport_t port, uint32 * kbits_pause, uint32 * kbits_resume, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_rate_pause_set_async(bcmx_lport_t port, uint32 kbits_pause, uint32 kbits_resume, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_sample_rate_get_async(bcm_port_t port, int * ingress_rate, int * egress_rate, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_sample_rate_set_async(bcm_port_t port, int ingress_rate, int egress_rate, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_selective_get_async(bcmx_lport_t port, bcm_port_info_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_selective_set_async(bcmx_lport_t port, bcm_port_info_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_speed_get_async(bcmx_lport_t port, int * speed, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_speed_max_async(bcmx_lport_t port, int * speed, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_speed_set_async(bcmx_lport_t port, int speed, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_stat_enable_set_async(bcm_gport_t port, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_stat_get_async(bcm_gport_t port, bcm_port_stat_t stat, uint64 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_stat_get32_async(bcm_gport_t port, bcm_port_stat_t stat, uint32 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_stat_multi_get_async(bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_stat_multi_get32_async(bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_stat_multi_set_async(bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_stat_multi_set32_async(bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_stat_set_async(bcm_gport_t port, bcm_port_stat_t stat, uint64 val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_stat_set32_async(bcm_gport_t port, bcm_port_stat_t stat, uint32 val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_stp_get_async(bcmx_lport_t port, int * state, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_stp_set_async(bcmx_lport_t port, int state, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_subsidiary_ports_get_async(bcm_gport_t port, bcmx_lplist_t * lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_tgid_get_async(bcmx_lport_t port, int * tgid, int * psc, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_tgid_set_async(bcmx_lport_t port, int tgid, int psc, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_tpid_add_async(bcmx_lport_t port, uint16 tpid, int color_select, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_tpid_delete_async(bcmx_lport_t port, uint16 tpid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_tpid_delete_all_async(bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_tpid_get_async(bcmx_lport_t port, uint16 * tpid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_tpid_set_async(bcmx_lport_t port, uint16 tpid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_untagged_priority_get_async(bcmx_lport_t port, int * priority, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_untagged_priority_set_async(bcmx_lport_t port, int priority, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_untagged_vlan_get_async(bcmx_lport_t port, bcm_vlan_t * vid_ptr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_untagged_vlan_set_async(bcmx_lport_t port, bcm_vlan_t vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_update_async(bcmx_lport_t port, int link, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_vlan_inner_tag_get_async(bcmx_lport_t port, uint16 * inner_tag, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_vlan_inner_tag_set_async(bcmx_lport_t port, uint16 inner_tag, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_vlan_member_get_async(bcmx_lport_t port, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_vlan_member_set_async(bcmx_lport_t port, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_vlan_priority_map_get_async(bcmx_lport_t port, int pkt_pri, int cfi, int * internal_pri, bcm_color_t * color, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_vlan_priority_map_set_async(bcmx_lport_t port, int pkt_pri, int cfi, int internal_pri, bcm_color_t color, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_vlan_priority_unmap_get_async(bcmx_lport_t port, int internal_pri, bcm_color_t color, int * pkt_pri, int * cfi, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_port_vlan_priority_unmap_set_async(bcmx_lport_t port, int internal_pri, bcm_color_t color, int pkt_pri, int cfi, bcmx_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcmx_proxy_cleanup_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_proxy_client_set_async(bcmx_lport_t client_port, bcm_proxy_proto_type_t proto_type, bcmx_lport_t server_lport, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_proxy_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_proxy_server_get_async(bcmx_lport_t server_lport, bcm_proxy_mode_t mode, int * enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_proxy_server_set_async(bcmx_lport_t server_lport, bcm_proxy_mode_t mode, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcmx_qos_detach_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_qos_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_qos_map_add_async(uint32 flags, bcmx_qos_map_t * map, int map_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_qos_map_create_async(uint32 flags, int * map_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_qos_map_delete_async(uint32 flags, bcmx_qos_map_t * map, int map_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_qos_map_destroy_async(int map_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_qos_map_multi_get_async(uint32 flags, int map_id, int array_size, bcmx_qos_map_t * array, int * array_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_qos_multi_get_async(int array_size, int * map_ids_array, int * flags_array, int * array_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_qos_port_map_get_async(bcm_gport_t port, int * ing_map, int * egr_map, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_qos_port_map_set_async(bcm_gport_t port, int ing_map, int egr_map, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_qos_port_vlan_map_get_async(bcm_gport_t port, bcm_vlan_t vid, int * ing_map, int * egr_map, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_qos_port_vlan_map_set_async(bcm_gport_t port, bcm_vlan_t vid, int ing_map, int egr_map, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_bandwidth_get_async(bcmx_lport_t port, int flags, uint32 * kbits_sec, uint32 * kbits_burst, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_bandwidth_set_async(bcmx_lport_t port, int flags, uint32 kbits_sec, uint32 kbits_burst, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_bcast_get_async(int * limit, int * flags, bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_bcast_set_async(int limit, int flags, bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_dlfbc_get_async(int * limit, int * flags, bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_dlfbc_set_async(int limit, int flags, bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_get_async(int * val, int * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_mcast_get_async(int * limit, int * flags, bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_mcast_set_async(int limit, int flags, bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_set_async(int val, int flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_type_get_async(bcm_rate_limit_t * rl, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rate_type_set_async(bcm_rate_limit_t * rl, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rx_control_get_async(bcm_rx_control_t type, int * arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rx_control_set_async(bcm_rx_control_t type, int arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rx_device_add_async(int unit, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rx_device_remove_async(int unit, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rx_register_async(const char * name, bcm_rx_cb_f fn, int priority, void * cookie, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rx_running_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rx_start_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rx_stop_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_rx_unregister_async(bcm_rx_cb_f fn, int pri, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_clear_async(bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_custom_add_async(bcmx_lport_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_custom_check_async(bcmx_lport_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, int * result, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_custom_delete_async(bcmx_lport_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_custom_delete_all_async(bcmx_lport_t port, bcm_stat_val_t type, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_custom_get_async(bcmx_lport_t port, bcm_stat_val_t type, uint32 * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_custom_set_async(bcmx_lport_t port, bcm_stat_val_t type, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_get_async(bcmx_lport_t port, bcm_stat_val_t type, uint64 * value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_get32_async(bcmx_lport_t port, bcm_stat_val_t type, uint32 * value, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_multi_get_async(bcm_gport_t port, int nstat, bcm_stat_val_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_multi_get32_async(bcm_gport_t port, int nstat, bcm_stat_val_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stat_sync_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_count_get_async(int * max_stg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_create_async(bcm_stg_t * stg_ptr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_create_id_async(bcm_stg_t stg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_default_get_async(bcm_stg_t * stg_ptr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_default_set_async(bcm_stg_t stg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_destroy_async(bcm_stg_t stg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_list_async(bcm_stg_t ** list, int * count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_list_destroy_async(bcm_stg_t * list, int count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_stp_get_async(bcm_stg_t stg, bcmx_lport_t port, int * stp_state, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_stp_set_async(bcm_stg_t stg, bcmx_lport_t port, int stp_state, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_vlan_add_async(bcm_stg_t stg, bcm_vlan_t vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_vlan_list_async(bcm_stg_t stg, bcm_vlan_t ** list, int * count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_vlan_list_destroy_async(bcm_vlan_t * list, int count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_vlan_remove_async(bcm_stg_t stg, bcm_vlan_t vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_stg_vlan_remove_all_async(bcm_stg_t stg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_subport_cleanup_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_subport_group_create_async(bcmx_subport_group_config_t * config, bcm_gport_t * group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_subport_group_destroy_async(bcm_gport_t group, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_subport_group_get_async(bcm_gport_t group, bcmx_subport_group_config_t * config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_subport_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_subport_port_add_async(bcmx_subport_config_t * config, bcm_gport_t * port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_subport_port_delete_async(bcm_gport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_subport_port_get_async(bcm_gport_t port, bcmx_subport_config_t * config, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_switch_control_get_async(bcm_switch_control_t type, int * arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_switch_control_port_get_async(bcmx_lport_t port, bcm_switch_control_t type, int * arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_switch_control_port_set_async(bcmx_lport_t port, bcm_switch_control_t type, int arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_switch_control_set_async(bcm_switch_control_t type, int arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_switch_rcpu_encap_priority_map_get_async(uint32 flags, int internal_cpu_pri, int * encap_pri, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_switch_rcpu_encap_priority_map_set_async(uint32 flags, int internal_cpu_pri, int encap_pri, bcmx_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcmx_trill_cleanup_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_multicast_delete_all_async(bcm_trill_name_t root_name, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_multicast_entry_add_async(bcm_trill_multicast_entry_t * trill_mc_entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_multicast_entry_delete_async(bcm_trill_multicast_entry_t * trill_mc_entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_multicast_entry_get_async(bcm_trill_multicast_entry_t * trill_mc_entry, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_multicast_source_add_async(bcm_trill_name_t root_name, bcm_trill_name_t source_rbridge_name, bcm_gport_t port, bcm_if_t encap_intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_multicast_source_delete_async(bcm_trill_name_t root_name, bcm_trill_name_t source_rbridge_name, bcm_gport_t port, bcm_if_t encap_intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_multicast_source_get_async(bcm_trill_name_t root_name, bcm_trill_name_t source_rbridge_name, bcm_gport_t * port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_port_add_async(bcmx_trill_port_t * trill_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_port_delete_async(bcm_gport_t trill_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_port_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_port_get_async(bcmx_trill_port_t * trill_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_port_get_all_async(int port_max, bcmx_trill_port_t * port_array, int * port_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_stat_clear_async(bcm_gport_t port, bcm_trill_stat_t stat, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_stat_get_async(bcm_gport_t port, bcm_trill_stat_t stat, uint64 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trill_stat_get32_async(bcm_gport_t port, bcm_trill_stat_t stat, uint32 * val, bcmx_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcmx_trunk_chip_info_get_async(bcm_trunk_chip_info_t * ta_info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_create_async(bcm_trunk_t * tid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_create_id_async(bcm_trunk_t tid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_destroy_async(bcm_trunk_t tid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_detach_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_egress_get_async(bcm_trunk_t tid, bcmx_lplist_t * lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_egress_set_async(bcm_trunk_t tid, bcmx_lplist_t lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_failover_get_async(bcm_trunk_t tid, bcm_gport_t failport, int * psc, uint32 * flags, int array_size, bcm_gport_t * fail_to_array, int * array_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_failover_set_async(bcm_trunk_t tid, bcm_gport_t failport, int psc, uint32 flags, int count, bcm_gport_t * fail_to_array, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_find_async(bcmx_lport_t port, bcm_trunk_t * tid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_get_async(bcm_trunk_t tid, bcmx_trunk_add_info_t * t_data, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_mcast_join_async(bcm_trunk_t tid, bcm_vlan_t vid, bcm_mac_t mac, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_member_add_async(bcm_trunk_t tid, bcmx_trunk_member_t * member, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_member_delete_async(bcm_trunk_t tid, bcmx_trunk_member_t * member, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_member_delete_all_async(bcm_trunk_t tid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_member_get_async(bcm_trunk_t tid, int member_max, bcmx_trunk_member_t * member_array, int * member_count, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_member_set_async(bcm_trunk_t tid, int member_count, bcmx_trunk_member_t * member_array, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_psc_get_async(bcm_trunk_t tid, int * psc, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_psc_set_async(bcm_trunk_t tid, int psc, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_trunk_set_async(bcm_trunk_t tid, bcmx_trunk_add_info_t * add_info, bcmx_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcmx_tunnel_config_get_async(bcmx_tunnel_config_t * tconfig, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_config_set_async(bcmx_tunnel_config_t * tconfig, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_dscp_map_create_async(uint32 flags, int * dscp_map_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_dscp_map_destroy_async(int dscp_map_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_dscp_map_get_async(int dscp_map_id, bcm_tunnel_dscp_map_t * dscp_map, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_dscp_map_port_get_async(bcmx_lport_t port, bcm_tunnel_dscp_map_t * dscp_map, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_dscp_map_port_set_async(bcmx_lport_t port, bcm_tunnel_dscp_map_t * dscp_map, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_dscp_map_set_async(int dscp_map_id, bcm_tunnel_dscp_map_t * dscp_map, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_initiator_clear_async(bcmx_l3_intf_t * intf, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_initiator_get_async(bcmx_l3_intf_t * intf, bcmx_tunnel_initiator_t * tunnel, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_initiator_set_async(bcmx_l3_intf_t * intf, bcmx_tunnel_initiator_t * tunnel, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_terminator_add_async(bcmx_tunnel_terminator_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_terminator_delete_async(bcmx_tunnel_terminator_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_terminator_get_async(bcmx_tunnel_terminator_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_terminator_update_async(bcmx_tunnel_terminator_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_terminator_vlan_get_async(bcm_gport_t tunnel, bcm_vlan_vector_t * vlan_vec, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tunnel_terminator_vlan_set_async(bcm_gport_t tunnel, bcm_vlan_vector_t vlan_vec, bcmx_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcmx_tx_async(bcm_pkt_t * pkt, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tx_flood_async(bcm_pkt_t * pkt, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tx_lplist_async(bcm_pkt_t * pkt, bcmx_lplist_t * tx_ports, bcmx_lplist_t * untagged_ports, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tx_pkt_l3_set_async(bcm_pkt_t * pkt, int l3, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tx_pkt_untagged_set_async(bcm_pkt_t * pkt, int untagged, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tx_port_list_async(bcmx_lplist_t * lplist, bcm_pkt_t * pkt, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_tx_uc_async(bcm_pkt_t * pkt, bcmx_lport_t d_port, uint32 flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_uport_create_callback_set_async(bcmx_uport_create_f create_callback, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_block_get_async(bcm_vlan_t vlan, bcmx_vlan_block_t * vlan_block, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_block_set_async(bcm_vlan_t vlan, bcmx_vlan_block_t * vlan_block, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_control_get_async(bcm_vlan_control_t type, int * arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_control_port_get_async(bcmx_lport_t port, bcm_vlan_control_port_t type, int * arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_control_port_set_async(bcmx_lport_t port, bcm_vlan_control_port_t type, int arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_control_set_async(bcm_vlan_control_t type, int arg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_control_vlan_get_async(bcm_vlan_t vlan, bcm_vlan_control_vlan_t * control, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_control_vlan_set_async(bcm_vlan_t vlan, bcm_vlan_control_vlan_t control, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_create_async(bcm_vlan_t vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_cross_connect_add_async(bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_gport_t port_1, bcm_gport_t port_2, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_cross_connect_delete_async(bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_cross_connect_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_default_get_async(bcm_vlan_t * vid_ptr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_default_set_async(bcm_vlan_t vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_destroy_async(bcm_vlan_t vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_destroy_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_dtag_add_async(bcmx_lport_t port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_dtag_delete_async(bcmx_lport_t port, bcm_vlan_t old_vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_dtag_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_dtag_get_async(bcmx_lport_t port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_dtag_range_add_async(bcmx_lport_t port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t new_vid, int int_prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_dtag_range_delete_async(bcmx_lport_t port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_dtag_range_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_dtag_range_get_async(bcmx_lport_t port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t * new_vid, int * prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_gport_add_async(bcm_vlan_t vlan, bcm_gport_t port, int flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_gport_delete_async(bcm_vlan_t vlan, bcm_gport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_gport_delete_all_async(bcm_vlan_t vlan, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_gport_get_async(bcm_vlan_t vlan, bcm_gport_t port, int * flags, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_gport_get_all_async(bcm_vlan_t vlan, int array_max, bcm_gport_t * gport_array, int * flags_array, int * array_size, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_ip_action_add_async(bcm_vlan_ip_t * vlan_ip, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_ip_action_delete_async(bcm_vlan_ip_t * vlan_ip, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_ip_action_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_ip_action_get_async(bcm_vlan_ip_t * vlan_ip, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_ip_add_async(bcm_vlan_ip_t * vlan_ip, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_ip_delete_async(bcm_vlan_ip_t * vlan_ip, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_ip_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_mac_action_add_async(bcm_mac_t mac, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_mac_action_delete_async(bcm_mac_t mac, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_mac_action_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_mac_action_get_async(bcm_mac_t mac, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_mac_add_async(bcm_mac_t mac, bcm_vlan_t vid, int prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_mac_delete_async(bcm_mac_t mac, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_mac_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_mcast_flood_get_async(bcm_vlan_t vlan, bcm_vlan_mcast_flood_t * mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_mcast_flood_set_async(bcm_vlan_t vlan, bcm_vlan_mcast_flood_t mode, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_add_async(bcm_vlan_t vid, bcmx_lplist_t lplist, bcmx_lplist_t ubmp, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_create_async(bcmx_vlan_port_t * vlan_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_default_action_delete_async(bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_default_action_get_async(bcmx_lport_t port, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_default_action_set_async(bcmx_lport_t port, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_destroy_async(bcm_gport_t gport, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_egress_default_action_delete_async(bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_egress_default_action_get_async(bcmx_lport_t port, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_egress_default_action_set_async(bcmx_lport_t port, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_find_async(bcmx_vlan_port_t * vlan_port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_get_async(bcm_vlan_t vid, bcmx_lplist_t * lplist, bcmx_lplist_t * ubmp, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_protocol_action_add_async(bcmx_lport_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_protocol_action_delete_async(bcmx_lport_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_protocol_action_delete_all_async(bcmx_lport_t port, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_protocol_action_get_async(bcmx_lport_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_port_remove_async(bcm_vlan_t vid, bcmx_lplist_t lplist, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_queue_map_attach_async(bcm_vlan_t vlan, int qmid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_queue_map_attach_get_async(bcm_vlan_t vlan, int * qmid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_queue_map_create_async(uint32 flags, int * qmid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_queue_map_destroy_async(int qmid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_queue_map_destroy_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_queue_map_detach_async(bcm_vlan_t vlan, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_queue_map_detach_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_queue_map_get_async(int qmid, int pkt_pri, int cfi, int * queue, int * color, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_queue_map_set_async(int qmid, int pkt_pri, int cfi, int queue, int color, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_stat_enable_set_async(bcm_vlan_t vlan, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_stat_get_async(bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_stat_get32_async(bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_stat_multi_get_async(bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_stat_multi_get32_async(bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_stat_multi_set_async(bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_stat_multi_set32_async(bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_stat_set_async(bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_stat_set32_async(bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_stg_get_async(bcm_vlan_t vid, bcm_stg_t * stg_ptr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_stg_set_async(bcm_vlan_t vid, bcm_stg_t stg, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_action_add_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_action_delete_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_action_get_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_action_range_add_async(bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_action_range_delete_async(bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_action_range_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_action_range_get_async(bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_add_async(bcmx_lport_t port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_delete_async(bcmx_lport_t port, bcm_vlan_t old_vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_action_add_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_action_delete_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_action_get_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_add_async(bcmx_lport_t port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_delete_async(bcmx_lport_t port, bcm_vlan_t old_vid, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_get_async(bcmx_lport_t port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_stat_enable_set_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_stat_get_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_stat_get32_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_stat_multi_get_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_stat_multi_get32_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_stat_multi_set_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_stat_multi_set32_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_stat_set_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_egress_stat_set32_async(int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_get_async(bcmx_lport_t port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_range_add_async(bcmx_lport_t port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t new_vid, int int_prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_range_delete_async(bcmx_lport_t port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_range_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_range_get_async(bcmx_lport_t port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t * new_vid, int * int_prio, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_stat_enable_set_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int enable, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_stat_get_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_stat_get32_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_stat_multi_get_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_stat_multi_get32_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_stat_multi_set_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_stat_multi_set32_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_stat_set_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_translate_stat_set32_async(bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 val, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_vlan_vector_flags_set_async(bcm_vlan_vector_t vlan_vector, uint32 flags_mask, uint32 flags_value, bcmx_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcmx_wlan_client_add_async(bcmx_wlan_client_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_client_delete_async(bcm_mac_t mac, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_client_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_client_get_async(bcm_mac_t mac, bcmx_wlan_client_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_detach_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_init_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_port_add_async(bcmx_wlan_port_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_port_delete_async(bcm_gport_t wlan_port_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_port_delete_all_async(bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_port_get_async(bcm_gport_t wlan_port_id, bcmx_wlan_port_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_tunnel_initiator_create_async(bcmx_tunnel_initiator_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_tunnel_initiator_destroy_async(bcm_gport_t wlan_tunnel_id, bcmx_async_cb_t async_callback, void *async_cookie);
void	bcmx_wlan_tunnel_initiator_get_async(bcmx_tunnel_initiator_t * info, bcmx_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */

#endif	/* BCM_ASYNC_SUPPORT */
#endif	/* !_BCMX_ASYNC_H */
