# $Id: vsanity.soc 1.9 Broadcom SDK $
# $Copyright: Copyright 2012 Broadcom Corporation.
# This program is the proprietary software of Broadcom Corporation
# and/or its licensors, and may only be used, duplicated, modified
# or distributed pursuant to the terms and conditions of a separate,
# written license agreement executed between you and Broadcom
# (an "Authorized License").  Except as set forth in an Authorized
# License, Broadcom grants no license (express or implied), right
# to use, or waiver of any kind with respect to the Software, and
# Broadcom expressly reserves all rights in and to the Software
# and all intellectual property rights therein.  IF YOU HAVE
# NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
# IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
# ALL USE OF THE SOFTWARE.  
#  
# Except as expressly set forth in the Authorized License,
#  
# 1.     This program, including its structure, sequence and organization,
# constitutes the valuable trade secrets of Broadcom, and you shall use
# all reasonable efforts to protect the confidentiality thereof,
# and to use this information only in connection with your use of
# Broadcom integrated circuit products.
#  
# 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
# PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
# REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
# OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
# DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
# NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
# ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
# CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
# OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
# 
# 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
# BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
# INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
# ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
# TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
# THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
# WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
# ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
#
# Valkyrie Sanity
#
# Script to run all available tests as quickly as possible.
# For testing basic sanity of new drivers, simulators, chips, etc.
#

if $?BCM56620_A0 || $?BCM56620_A1 || $?BCM56620_B0 || $?BCM56620_B1 \
    'local BCM56620 1'
if $?BCM56624_A0 || $?BCM56624_A1 || $?BCM56624_B0 || $?BCM56624_B1 \
    'local BCM56624 1'
if $?BCM56626_A0 || $?BCM56626_A1 || $?BCM56626_B0 || $?BCM56626_B1 \
    'local BCM56626 1'
if $?BCM56628_A0 || $?BCM56628_A1 || $?BCM56628_B0 || $?BCM56628_B1 \
    'local BCM56628 1'
if $?BCM56629_A1 || $?BCM56629_B0 || $?BCM56629_B1 \
    'local BCM56629 1'
if $?BCM56680_A0 || $?BCM56680_A1 || $?BCM56680_B0 || $?BCM56680_B1 \
    'local BCM56680 1'
if $?BCM56684_A0 || $?BCM56684_A1 || $?BCM56684_B0 || $?BCM56684_B1 \
    'local BCM56684 1'
if $?BCM56686_B0 || $?BCM56686_B1 \
    'local BCM56686 1'

if $?BCM56620 || $?BCM56624 || $?BCM56626 || $?BCM56628 || $?BCM56629 \
    'echo "Please use trsanity.soc instead for Triumph!!"; \
     echo " "; \
     quit'

echo "testsuite: started: sanity"
rcload rc.soc
counter off
l2mode off

# We need to print out port status since any cabling effects results.
*:ps

if $?1 'local full_test 1'

# Avoid link messages while testing
linkscan off

init
init misc
init mmu

local done 'echo "   Done"'

# Set run command script not to fail on errors reported by commands
# this allows the script to continue if a test fails
set rcerror=false

# Set up test mode: don't stop on errors, show progress on each test
tm -stoponerror +progress
# Unselect all
ts -*

#Display some useful information
date
ver
soc

#Start Test
echo "Running PCI Compliance ..."
tr 2
$done

echo "Running PCI S-Channel Buf ..."
tr 4
$done

echo "Running Register reset defaults ..."
tr 1
$done

echo "Running Register read/write ..."
tr 3 mask64
$done

init soc; init misc; init mmu;
#Clean up after register read/write test.

rcload rc.soc
counter off
l2mode off
echo "Running CPU Benchmarks ..."
tr 21
$done
linkscan off

init soc
set rct=false

echo "Running Switching Memory Tests ..."
echo " ALTERNATE_EMIRROR_BITMAP";
tr 50 M=ALTERNATE_EMIRROR_BITMAP;
tr 51 M=ALTERNATE_EMIRROR_BITMAP;
tr 52 M=ALTERNATE_EMIRROR_BITMAP;
echo " CPU_COS_MAP";
tr 50 M=CPU_COS_MAP;
tr 51 M=CPU_COS_MAP;
tr 52 M=CPU_COS_MAP;
echo " CPU_COS_MAP_DATA_ONLY";
tr 50 M=CPU_COS_MAP_DATA_ONLY;
tr 51 M=CPU_COS_MAP_DATA_ONLY;
tr 52 M=CPU_COS_MAP_DATA_ONLY;
echo " CPU_COS_MAP_ONLY";
tr 50 M=CPU_COS_MAP_ONLY;
tr 51 M=CPU_COS_MAP_ONLY;
tr 52 M=CPU_COS_MAP_ONLY;
echo " CPU_TS_MAP";
tr 50 M=CPU_TS_MAP;
tr 51 M=CPU_TS_MAP;
tr 52 M=CPU_TS_MAP;
echo " DSCP_TABLE";
tr 50 M=DSCP_TABLE;
tr 51 M=DSCP_TABLE;
tr 52 M=DSCP_TABLE;
echo " E2E_HOL_STATUS";
tr 50 M=E2E_HOL_STATUS;
tr 51 M=E2E_HOL_STATUS;
tr 52 M=E2E_HOL_STATUS;
echo " EFP_COUNTER_TABLE";
tr 50 M=EFP_COUNTER_TABLE;
tr 51 M=EFP_COUNTER_TABLE;
tr 52 M=EFP_COUNTER_TABLE;
echo " EFP_METER_TABLE";
tr 50 M=EFP_METER_TABLE;
tr 51 M=EFP_METER_TABLE;
tr 52 M=EFP_METER_TABLE;
echo " EFP_POLICY_TABLE";
tr 50 M=EFP_POLICY_TABLE;
tr 51 M=EFP_POLICY_TABLE;
tr 52 M=EFP_POLICY_TABLE;
echo " EFP_TCAM";
tr 50 M=EFP_TCAM;
tr 51 M=EFP_TCAM;
tr 52 M=EFP_TCAM;
echo " EGR_DSCP_ECN_MAP";
tr 50 M=EGR_DSCP_ECN_MAP;
tr 51 M=EGR_DSCP_ECN_MAP;
tr 52 M=EGR_DSCP_ECN_MAP;
echo " EGR_DSCP_TABLE";
tr 50 M=EGR_DSCP_TABLE;
tr 51 M=EGR_DSCP_TABLE;
tr 52 M=EGR_DSCP_TABLE;
echo " EGR_EM_MTP_INDEX";
tr 50 M=EGR_EM_MTP_INDEX;
tr 51 M=EGR_EM_MTP_INDEX;
tr 52 M=EGR_EM_MTP_INDEX;
echo " EGR_ERSPAN";
tr 50 M=EGR_ERSPAN;
tr 51 M=EGR_ERSPAN;
tr 52 M=EGR_ERSPAN;
echo " EGR_IM_MTP_INDEX";
tr 50 M=EGR_IM_MTP_INDEX;
tr 51 M=EGR_IM_MTP_INDEX;
tr 52 M=EGR_IM_MTP_INDEX;
echo " EGR_IPFIX_DSCP_XLATE_TABLE";
tr 50 M=EGR_IPFIX_DSCP_XLATE_TABLE;
tr 51 M=EGR_IPFIX_DSCP_XLATE_TABLE;
tr 52 M=EGR_IPFIX_DSCP_XLATE_TABLE;
echo " EGR_IPFIX_EOP_BUFFER";
tr 50 M=EGR_IPFIX_EOP_BUFFER;
tr 51 M=EGR_IPFIX_EOP_BUFFER;
tr 52 M=EGR_IPFIX_EOP_BUFFER;
echo " EGR_IPFIX_EXPORT_FIFO";
tr 50 M=EGR_IPFIX_EXPORT_FIFO;
tr 51 M=EGR_IPFIX_EXPORT_FIFO;
tr 52 M=EGR_IPFIX_EXPORT_FIFO;
echo " EGR_IPFIX_IPV4_MASK_SET_A";
tr 50 M=EGR_IPFIX_IPV4_MASK_SET_A;
tr 51 M=EGR_IPFIX_IPV4_MASK_SET_A;
tr 52 M=EGR_IPFIX_IPV4_MASK_SET_A;
echo " EGR_IPFIX_IPV6_MASK_SET_A";
tr 50 M=EGR_IPFIX_IPV6_MASK_SET_A;
tr 51 M=EGR_IPFIX_IPV6_MASK_SET_A;
tr 52 M=EGR_IPFIX_IPV6_MASK_SET_A;
echo " EGR_IPFIX_PROFILE";
tr 50 M=EGR_IPFIX_PROFILE;
tr 51 M=EGR_IPFIX_PROFILE;
tr 52 M=EGR_IPFIX_PROFILE;
echo " EGR_IPFIX_SESSION_TABLE";
tr 50 M=EGR_IPFIX_SESSION_TABLE;
tr 51 M=EGR_IPFIX_SESSION_TABLE;
tr 52 M=EGR_IPFIX_SESSION_TABLE;
echo " EGR_IPMC";
tr 50 M=EGR_IPMC;
tr 51 M=EGR_IPMC;
tr 52 M=EGR_IPMC;
echo " EGR_IP_TUNNEL";
tr 50 M=EGR_IP_TUNNEL;
tr 51 M=EGR_IP_TUNNEL;
tr 52 M=EGR_IP_TUNNEL;
echo " EGR_IP_TUNNEL_IPV6";
tr 50 M=EGR_IP_TUNNEL_IPV6;
tr 51 M=EGR_IP_TUNNEL_IPV6;
tr 52 M=EGR_IP_TUNNEL_IPV6;
echo " EGR_IP_TUNNEL_MPLS";
tr 50 M=EGR_IP_TUNNEL_MPLS;
tr 51 M=EGR_IP_TUNNEL_MPLS;
tr 52 M=EGR_IP_TUNNEL_MPLS;
echo " EGR_L3_INTF";
tr 50 M=EGR_L3_INTF;
tr 51 M=EGR_L3_INTF;
tr 52 M=EGR_L3_INTF;
echo " EGR_L3_NEXT_HOP";
tr 50 M=EGR_L3_NEXT_HOP;
tr 51 M=EGR_L3_NEXT_HOP;
tr 52 M=EGR_L3_NEXT_HOP;
echo " EGR_MAC_DA_PROFILE";
tr 50 M=EGR_MAC_DA_PROFILE;
tr 51 M=EGR_MAC_DA_PROFILE;
tr 52 M=EGR_MAC_DA_PROFILE;
echo " EGRESS_MASK";
tr 50 M=EGRESS_MASK;
tr 51 M=EGRESS_MASK;
tr 52 M=EGRESS_MASK;
echo " EGR_MOD_MAP";
tr 50 M=EGR_MOD_MAP;
tr 51 M=EGR_MOD_MAP;
tr 52 M=EGR_MOD_MAP;
echo " EGR_MPLS_EXP_MAPPING_1";
tr 50 M=EGR_MPLS_EXP_MAPPING_1;
tr 51 M=EGR_MPLS_EXP_MAPPING_1;
tr 52 M=EGR_MPLS_EXP_MAPPING_1;
echo " EGR_MPLS_EXP_MAPPING_2";
tr 50 M=EGR_MPLS_EXP_MAPPING_2;
tr 51 M=EGR_MPLS_EXP_MAPPING_2;
tr 52 M=EGR_MPLS_EXP_MAPPING_2;
echo " EGR_MPLS_EXP_PRI_MAPPING";
tr 50 M=EGR_MPLS_EXP_PRI_MAPPING;
tr 51 M=EGR_MPLS_EXP_PRI_MAPPING;
tr 52 M=EGR_MPLS_EXP_PRI_MAPPING;
echo " EGR_MPLS_PRI_MAPPING";
tr 50 M=EGR_MPLS_PRI_MAPPING;
tr 51 M=EGR_MPLS_PRI_MAPPING;
tr 52 M=EGR_MPLS_PRI_MAPPING;
echo " EGR_MPLS_VC_AND_SWAP_LABEL_TABLE";
tr 50 M=EGR_MPLS_VC_AND_SWAP_LABEL_TABLE;
tr 51 M=EGR_MPLS_VC_AND_SWAP_LABEL_TABLE;
tr 52 M=EGR_MPLS_VC_AND_SWAP_LABEL_TABLE;
echo " EGR_PERQ_XMT_COUNTERS";
tr 50 M=EGR_PERQ_XMT_COUNTERS;
tr 51 M=EGR_PERQ_XMT_COUNTERS;
tr 52 M=EGR_PERQ_XMT_COUNTERS;
echo " EGR_PRI_CNG_MAP";
tr 50 M=EGR_PRI_CNG_MAP;
tr 51 M=EGR_PRI_CNG_MAP;
tr 52 M=EGR_PRI_CNG_MAP;
echo " EGR_PW_INIT_COUNTERS";
tr 50 M=EGR_PW_INIT_COUNTERS;
tr 51 M=EGR_PW_INIT_COUNTERS;
tr 52 M=EGR_PW_INIT_COUNTERS;
echo " EGR_VLAN";
tr 50 M=EGR_VLAN;
tr 51 M=EGR_VLAN;
tr 52 M=EGR_VLAN;
echo " EGR_VLAN_STG";
tr 50 M=EGR_VLAN_STG;
tr 51 M=EGR_VLAN_STG;
tr 52 M=EGR_VLAN_STG;
echo " EGR_VLAN_TAG_ACTION_PROFILE";
tr 50 M=EGR_VLAN_TAG_ACTION_PROFILE;
tr 51 M=EGR_VLAN_TAG_ACTION_PROFILE;
tr 52 M=EGR_VLAN_TAG_ACTION_PROFILE;
echo " EGR_VLAN_XLATE";
tr 50 M=EGR_VLAN_XLATE;
tr 51 M=EGR_VLAN_XLATE;
tr 52 M=EGR_VLAN_XLATE;
echo " EGR_VLAN_XLATE_SCRATCH";
tr 50 M=EGR_VLAN_XLATE_SCRATCH;
#tr 51 M=EGR_VLAN_XLATE_SCRATCH # test not supported on single-entry tables;
#tr 52 M=EGR_VLAN_XLATE_SCRATCH # test not supported on single-entry tables;
echo " EM_MTP_INDEX";
tr 50 M=EM_MTP_INDEX;
tr 51 M=EM_MTP_INDEX;
tr 52 M=EM_MTP_INDEX;
echo " ESM_RANGE_CHECK";
tr 50 M=ESM_RANGE_CHECK;
tr 51 M=ESM_RANGE_CHECK;
tr 52 M=ESM_RANGE_CHECK;
echo " ET_INST_OPC_TABLE";
tr 50 M=ET_INST_OPC_TABLE;
tr 51 M=ET_INST_OPC_TABLE;
tr 52 M=ET_INST_OPC_TABLE;
echo " EXT_IFP_ACTION_PROFILE";
tr 50 M=EXT_IFP_ACTION_PROFILE;
tr 51 M=EXT_IFP_ACTION_PROFILE;
tr 52 M=EXT_IFP_ACTION_PROFILE;
echo " FP_COUNTER_TABLE";
tr 50 M=FP_COUNTER_TABLE;
tr 51 M=FP_COUNTER_TABLE;
tr 52 M=FP_COUNTER_TABLE;
echo " FP_GLOBAL_MASK_TCAM";
tr 50 M=FP_GLOBAL_MASK_TCAM;
tr 51 M=FP_GLOBAL_MASK_TCAM;
tr 52 M=FP_GLOBAL_MASK_TCAM;
echo " FP_METER_TABLE";
tr 50 M=FP_METER_TABLE;
tr 51 M=FP_METER_TABLE;
tr 52 M=FP_METER_TABLE;
echo " FP_POLICY_TABLE";
tr 50 M=FP_POLICY_TABLE;
tr 51 M=FP_POLICY_TABLE;
tr 52 M=FP_POLICY_TABLE;
echo " FP_PORT_FIELD_SEL";
tr 50 M=FP_PORT_FIELD_SEL;
tr 51 M=FP_PORT_FIELD_SEL;
tr 52 M=FP_PORT_FIELD_SEL;
echo " FP_PORT_METER_MAP";
tr 50 M=FP_PORT_METER_MAP;
tr 51 M=FP_PORT_METER_MAP;
tr 52 M=FP_PORT_METER_MAP;
echo " FP_RANGE_CHECK";
tr 50 M=FP_RANGE_CHECK;
tr 51 M=FP_RANGE_CHECK;
tr 52 M=FP_RANGE_CHECK;
echo " FP_SLICE_KEY_CONTROL";
tr 50 M=FP_SLICE_KEY_CONTROL;
#tr 51 M=FP_SLICE_KEY_CONTROL # test not supported on single-entry tables;
#tr 52 M=FP_SLICE_KEY_CONTROL # test not supported on single-entry tables;
echo " FP_SLICE_MAP";
tr 50 M=FP_SLICE_MAP;
#tr 51 M=FP_SLICE_MAP # test not supported on single-entry tables;
#tr 52 M=FP_SLICE_MAP # test not supported on single-entry tables;
echo " FP_STORM_CONTROL_METERS";
tr 50 M=FP_STORM_CONTROL_METERS;
tr 51 M=FP_STORM_CONTROL_METERS;
tr 52 M=FP_STORM_CONTROL_METERS;
echo " FP_TCAM";
tr 50 M=FP_TCAM;
tr 51 M=FP_TCAM;
tr 52 M=FP_TCAM;
echo " UDF_OFFSET";
tr 50 M=UDF_OFFSET;
tr 51 M=UDF_OFFSET;
tr 52 M=UDF_OFFSET;
echo " HG_TRUNK_FAILOVER_SET";
tr 50 M=HG_TRUNK_FAILOVER_SET;
tr 51 M=HG_TRUNK_FAILOVER_SET;
tr 52 M=HG_TRUNK_FAILOVER_SET;
echo " IFP_REDIRECTION_PROFILE";
tr 50 M=IFP_REDIRECTION_PROFILE;
tr 51 M=IFP_REDIRECTION_PROFILE;
tr 52 M=IFP_REDIRECTION_PROFILE;
echo " IM_MTP_INDEX";
tr 50 M=IM_MTP_INDEX;
tr 51 M=IM_MTP_INDEX;
tr 52 M=IM_MTP_INDEX;
echo " ING_DVP_TABLE";
tr 50 M=ING_DVP_TABLE;
tr 51 M=ING_DVP_TABLE;
tr 52 M=ING_DVP_TABLE;
echo " ING_IPFIX_DSCP_XLATE_TABLE";
tr 50 M=ING_IPFIX_DSCP_XLATE_TABLE;
tr 51 M=ING_IPFIX_DSCP_XLATE_TABLE;
tr 52 M=ING_IPFIX_DSCP_XLATE_TABLE;
echo " ING_IPFIX_EOP_BUFFER";
tr 50 M=ING_IPFIX_EOP_BUFFER;
tr 51 M=ING_IPFIX_EOP_BUFFER;
tr 52 M=ING_IPFIX_EOP_BUFFER;
echo " ING_IPFIX_EXPORT_FIFO";
tr 50 M=ING_IPFIX_EXPORT_FIFO;
tr 51 M=ING_IPFIX_EXPORT_FIFO;
tr 52 M=ING_IPFIX_EXPORT_FIFO;
echo " ING_IPFIX_IPV4_MASK_SET_A";
tr 50 M=ING_IPFIX_IPV4_MASK_SET_A;
tr 51 M=ING_IPFIX_IPV4_MASK_SET_A;
tr 52 M=ING_IPFIX_IPV4_MASK_SET_A;
echo " ING_IPFIX_IPV4_MASK_SET_B";
tr 50 M=ING_IPFIX_IPV4_MASK_SET_B;
tr 51 M=ING_IPFIX_IPV4_MASK_SET_B;
tr 52 M=ING_IPFIX_IPV4_MASK_SET_B;
echo " ING_IPFIX_IPV6_MASK_SET_A";
tr 50 M=ING_IPFIX_IPV6_MASK_SET_A;
tr 51 M=ING_IPFIX_IPV6_MASK_SET_A;
tr 52 M=ING_IPFIX_IPV6_MASK_SET_A;
echo " ING_IPFIX_IPV6_MASK_SET_B";
tr 50 M=ING_IPFIX_IPV6_MASK_SET_B;
tr 51 M=ING_IPFIX_IPV6_MASK_SET_B;
tr 52 M=ING_IPFIX_IPV6_MASK_SET_B;
echo " ING_IPFIX_PROFILE";
tr 50 M=ING_IPFIX_PROFILE;
tr 51 M=ING_IPFIX_PROFILE;
tr 52 M=ING_IPFIX_PROFILE;
echo " ING_IPFIX_SESSION_TABLE";
tr 50 M=ING_IPFIX_SESSION_TABLE;
tr 51 M=ING_IPFIX_SESSION_TABLE;
tr 52 M=ING_IPFIX_SESSION_TABLE;
echo " ING_L3_NEXT_HOP";
tr 50 M=ING_L3_NEXT_HOP;
tr 51 M=ING_L3_NEXT_HOP;
tr 52 M=ING_L3_NEXT_HOP;
echo " ING_L3_NEXT_HOP_A";
tr 50 M=ING_L3_NEXT_HOP_A;
tr 51 M=ING_L3_NEXT_HOP_A;
tr 52 M=ING_L3_NEXT_HOP_A;
echo " ING_L3_NEXT_HOP_B";
tr 50 M=ING_L3_NEXT_HOP_B;
tr 51 M=ING_L3_NEXT_HOP_B;
tr 52 M=ING_L3_NEXT_HOP_B;
echo " ING_MOD_MAP";
tr 50 M=ING_MOD_MAP;
tr 51 M=ING_MOD_MAP;
tr 52 M=ING_MOD_MAP;
echo " ING_MPLS_EXP_MAPPING";
tr 50 M=ING_MPLS_EXP_MAPPING;
tr 51 M=ING_MPLS_EXP_MAPPING;
tr 52 M=ING_MPLS_EXP_MAPPING;
echo " ING_PRI_CNG_MAP";
tr 50 M=ING_PRI_CNG_MAP;
tr 51 M=ING_PRI_CNG_MAP;
tr 52 M=ING_PRI_CNG_MAP;
echo " ING_PW_TERM_COUNTERS";
tr 50 M=ING_PW_TERM_COUNTERS;
tr 51 M=ING_PW_TERM_COUNTERS;
tr 52 M=ING_PW_TERM_COUNTERS;
echo " ING_PW_TERM_SEQ_NUM";
tr 50 M=ING_PW_TERM_SEQ_NUM;
tr 51 M=ING_PW_TERM_SEQ_NUM;
tr 52 M=ING_PW_TERM_SEQ_NUM;
echo " ING_VLAN_RANGE";
tr 50 M=ING_VLAN_RANGE;
tr 51 M=ING_VLAN_RANGE;
tr 52 M=ING_VLAN_RANGE;
echo " ING_VLAN_TAG_ACTION_PROFILE";
tr 50 M=ING_VLAN_TAG_ACTION_PROFILE;
tr 51 M=ING_VLAN_TAG_ACTION_PROFILE;
tr 52 M=ING_VLAN_TAG_ACTION_PROFILE;
echo " INITIAL_ING_L3_NEXT_HOP";
tr 50 M=INITIAL_ING_L3_NEXT_HOP;
tr 51 M=INITIAL_ING_L3_NEXT_HOP;
tr 52 M=INITIAL_ING_L3_NEXT_HOP;
echo " INITIAL_L3_ECMP";
tr 50 M=INITIAL_L3_ECMP;
tr 51 M=INITIAL_L3_ECMP;
tr 52 M=INITIAL_L3_ECMP;
echo " INITIAL_L3_ECMP_COUNT";
tr 50 M=INITIAL_L3_ECMP_COUNT;
tr 51 M=INITIAL_L3_ECMP_COUNT;
tr 52 M=INITIAL_L3_ECMP_COUNT;
echo " IPORT_TABLE";
tr 50 M=IPORT_TABLE;
tr 51 M=IPORT_TABLE;
tr 52 M=IPORT_TABLE;
echo " IPV4_IN_IPV6_PREFIX_MATCH";
tr 50 M=IPV4_IN_IPV6_PREFIX_MATCH;
tr 51 M=IPV4_IN_IPV6_PREFIX_MATCH;
tr 52 M=IPV4_IN_IPV6_PREFIX_MATCH;
echo " IPV6_PROXY_ENABLE";
tr 50 M=IPV6_PROXY_ENABLE;
tr 51 M=IPV6_PROXY_ENABLE;
tr 52 M=IPV6_PROXY_ENABLE;
echo " L2MC";
tr 50 M=L2MC;
tr 51 M=L2MC;
tr 52 M=L2MC;
echo " L2_ENTRY";
tr 50 M=L2_ENTRY;
tr 51 M=L2_ENTRY;
tr 52 M=L2_ENTRY;
echo " L2_ENTRY_ONLY";
tr 50 M=L2_ENTRY_ONLY;
tr 51 M=L2_ENTRY_ONLY;
tr 52 M=L2_ENTRY_ONLY;
echo " L2_ENTRY_OVERFLOW";
tr 50 M=L2_ENTRY_OVERFLOW;
#tr 51 M=L2_ENTRY_OVERFLOW # test not supported on single-entry tables;
#tr 52 M=L2_ENTRY_OVERFLOW # test not supported on single-entry tables;
echo " L2_ENTRY_SCRATCH";
tr 50 M=L2_ENTRY_SCRATCH;
#tr 51 M=L2_ENTRY_SCRATCH # test not supported on single-entry tables;
#tr 52 M=L2_ENTRY_SCRATCH # test not supported on single-entry tables;
echo " L2_HITDA_ONLY";
tr 50 M=L2_HITDA_ONLY;
tr 51 M=L2_HITDA_ONLY;
tr 52 M=L2_HITDA_ONLY;
echo " L2_HITSA_ONLY";
tr 50 M=L2_HITSA_ONLY;
tr 51 M=L2_HITSA_ONLY;
tr 52 M=L2_HITSA_ONLY;
echo " L2_MOD_FIFO";
tr 50 M=L2_MOD_FIFO;
tr 51 M=L2_MOD_FIFO;
tr 52 M=L2_MOD_FIFO;
echo " L2_USER_ENTRY";
tr 50 M=L2_USER_ENTRY;
tr 51 M=L2_USER_ENTRY;
tr 52 M=L2_USER_ENTRY;
echo " L2_USER_ENTRY_DATA_ONLY";
tr 50 M=L2_USER_ENTRY_DATA_ONLY;
tr 51 M=L2_USER_ENTRY_DATA_ONLY;
tr 52 M=L2_USER_ENTRY_DATA_ONLY;
echo " L2_USER_ENTRY_ONLY";
tr 50 M=L2_USER_ENTRY_ONLY;
tr 51 M=L2_USER_ENTRY_ONLY;
tr 52 M=L2_USER_ENTRY_ONLY;
echo " L3_DEFIP";
tr 50 M=L3_DEFIP;
tr 51 M=L3_DEFIP;
tr 52 M=L3_DEFIP;
echo " L3_DEFIP_128";
tr 50 M=L3_DEFIP_128;
tr 51 M=L3_DEFIP_128;
tr 52 M=L3_DEFIP_128;
echo " L3_DEFIP_128_DATA_ONLY";
tr 50 M=L3_DEFIP_128_DATA_ONLY;
tr 51 M=L3_DEFIP_128_DATA_ONLY;
tr 52 M=L3_DEFIP_128_DATA_ONLY;
echo " L3_DEFIP_128_HIT_ONLY";
tr 50 M=L3_DEFIP_128_HIT_ONLY;
tr 51 M=L3_DEFIP_128_HIT_ONLY;
tr 52 M=L3_DEFIP_128_HIT_ONLY;
echo " L3_DEFIP_128_ONLY";
tr 50 M=L3_DEFIP_128_ONLY;
tr 51 M=L3_DEFIP_128_ONLY;
tr 52 M=L3_DEFIP_128_ONLY;
echo " L3_DEFIP_DATA_ONLY";
tr 50 M=L3_DEFIP_DATA_ONLY;
tr 51 M=L3_DEFIP_DATA_ONLY;
tr 52 M=L3_DEFIP_DATA_ONLY;
echo " L3_DEFIP_HIT_ONLY";
tr 50 M=L3_DEFIP_HIT_ONLY;
tr 51 M=L3_DEFIP_HIT_ONLY;
tr 52 M=L3_DEFIP_HIT_ONLY;
echo " L3_DEFIP_ONLY";
tr 50 M=L3_DEFIP_ONLY;
tr 51 M=L3_DEFIP_ONLY;
tr 52 M=L3_DEFIP_ONLY;
echo " L3_ECMP";
tr 50 M=L3_ECMP;
tr 51 M=L3_ECMP;
tr 52 M=L3_ECMP;
echo " L3_ECMP_COUNT";
tr 50 M=L3_ECMP_COUNT;
tr 51 M=L3_ECMP_COUNT;
tr 52 M=L3_ECMP_COUNT;
echo " L3_ENTRY_HIT_ONLY";
tr 50 M=L3_ENTRY_HIT_ONLY;
tr 51 M=L3_ENTRY_HIT_ONLY;
tr 52 M=L3_ENTRY_HIT_ONLY;
echo " L3_ENTRY_IPV4_MULTICAST";
tr 50 M=L3_ENTRY_IPV4_MULTICAST;
tr 51 M=L3_ENTRY_IPV4_MULTICAST;
tr 52 M=L3_ENTRY_IPV4_MULTICAST;
echo " L3_ENTRY_IPV4_MULTICAST_SCRATCH";
tr 50 M=L3_ENTRY_IPV4_MULTICAST_SCRATCH;
#tr 51 M=L3_ENTRY_IPV4_MULTICAST_SCRATCH # test not supported on single-entry tables;
#tr 52 M=L3_ENTRY_IPV4_MULTICAST_SCRATCH # test not supported on single-entry tables;
echo " L3_ENTRY_IPV4_UNICAST";
tr 50 M=L3_ENTRY_IPV4_UNICAST;
tr 51 M=L3_ENTRY_IPV4_UNICAST;
tr 52 M=L3_ENTRY_IPV4_UNICAST;
echo " L3_ENTRY_IPV4_UNICAST_SCRATCH";
tr 50 M=L3_ENTRY_IPV4_UNICAST_SCRATCH;
#tr 51 M=L3_ENTRY_IPV4_UNICAST_SCRATCH # test not supported on single-entry tables;
#tr 52 M=L3_ENTRY_IPV4_UNICAST_SCRATCH # test not supported on single-entry tables;
echo " L3_ENTRY_IPV6_MULTICAST";
tr 50 M=L3_ENTRY_IPV6_MULTICAST;
tr 51 M=L3_ENTRY_IPV6_MULTICAST;
tr 52 M=L3_ENTRY_IPV6_MULTICAST;
echo " L3_ENTRY_IPV6_MULTICAST_SCRATCH";
tr 50 M=L3_ENTRY_IPV6_MULTICAST_SCRATCH;
#tr 51 M=L3_ENTRY_IPV6_MULTICAST_SCRATCH # test not supported on single-entry tables;
#tr 52 M=L3_ENTRY_IPV6_MULTICAST_SCRATCH # test not supported on single-entry tables;
echo " L3_ENTRY_IPV6_UNICAST";
tr 50 M=L3_ENTRY_IPV6_UNICAST;
tr 51 M=L3_ENTRY_IPV6_UNICAST;
tr 52 M=L3_ENTRY_IPV6_UNICAST;
echo " L3_ENTRY_IPV6_UNICAST_SCRATCH";
tr 50 M=L3_ENTRY_IPV6_UNICAST_SCRATCH;
#tr 51 M=L3_ENTRY_IPV6_UNICAST_SCRATCH # test not supported on single-entry tables;
#tr 52 M=L3_ENTRY_IPV6_UNICAST_SCRATCH # test not supported on single-entry tables;
echo " L3_ENTRY_ONLY";
tr 50 M=L3_ENTRY_ONLY;
tr 51 M=L3_ENTRY_ONLY;
tr 52 M=L3_ENTRY_ONLY;
echo " L3_ENTRY_VALID_ONLY";
tr 50 M=L3_ENTRY_VALID_ONLY;
tr 51 M=L3_ENTRY_VALID_ONLY;
tr 52 M=L3_ENTRY_VALID_ONLY;
echo " L3_IIF";
tr 50 M=L3_IIF;
tr 51 M=L3_IIF;
tr 52 M=L3_IIF;
echo " L3_IPMC";
tr 50 M=L3_IPMC;
tr 51 M=L3_IPMC;
tr 52 M=L3_IPMC;
echo " L3_MTU_VALUES";
tr 50 M=L3_MTU_VALUES;
tr 51 M=L3_MTU_VALUES;
tr 52 M=L3_MTU_VALUES;
echo " L3_TUNNEL";
tr 50 M=L3_TUNNEL;
tr 51 M=L3_TUNNEL;
tr 52 M=L3_TUNNEL;
echo " LPORT";
tr 50 M=LPORT;
tr 51 M=LPORT;
tr 52 M=LPORT;
echo " PORT_MAC_BLOCK";
tr 50 M=PORT_MAC_BLOCK;
tr 51 M=PORT_MAC_BLOCK;
tr 52 M=PORT_MAC_BLOCK;
echo " AGING_CTR";
tr 50 M=AGING_CTR;
tr 51 M=AGING_CTR;
tr 52 M=AGING_CTR;
echo " AGING_EXP";
tr 50 M=AGING_EXP;
tr 51 M=AGING_EXP;
tr 52 M=AGING_EXP;
echo " CBPCELLHEADER";
tr 50 M=CBPCELLHEADER;
tr 51 M=CBPCELLHEADER;
tr 52 M=CBPCELLHEADER;
echo " CBPDATA0";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA0 $entry_cmd;
tr 51 M=CBPDATA0;
tr 52 M=CBPDATA0 $iter_cmd;
echo " CBPDATA1";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA1 $entry_cmd;
tr 51 M=CBPDATA1;
tr 52 M=CBPDATA1 $iter_cmd;
echo " CBPDATA2";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA2 $entry_cmd;
tr 51 M=CBPDATA2;
tr 52 M=CBPDATA2 $iter_cmd;
echo " CBPDATA3";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA3 $entry_cmd;
tr 51 M=CBPDATA3;
tr 52 M=CBPDATA3 $iter_cmd;
echo " CBPDATA4";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA4 $entry_cmd;
tr 51 M=CBPDATA4;
tr 52 M=CBPDATA4 $iter_cmd;
echo " CBPDATA5";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA5 $entry_cmd;
tr 51 M=CBPDATA5;
tr 52 M=CBPDATA5 $iter_cmd;
echo " CBPDATA6";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA6 $entry_cmd;
tr 51 M=CBPDATA6;
tr 52 M=CBPDATA6 $iter_cmd;
echo " CBPDATA7";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA7 $entry_cmd;
tr 51 M=CBPDATA7;
tr 52 M=CBPDATA7 $iter_cmd;
echo " CBPDATA8";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA8 $entry_cmd;
tr 51 M=CBPDATA8;
tr 52 M=CBPDATA8 $iter_cmd;
echo " CBPDATA9";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA9 $entry_cmd;
tr 51 M=CBPDATA9;
tr 52 M=CBPDATA9 $iter_cmd;
echo " CBPDATA10";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA10 $entry_cmd;
tr 51 M=CBPDATA10;
tr 52 M=CBPDATA10 $iter_cmd;
echo " CBPDATA11";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA11 $entry_cmd;
tr 51 M=CBPDATA11;
tr 52 M=CBPDATA11 $iter_cmd;
echo " CBPDATA12";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA12 $entry_cmd;
tr 51 M=CBPDATA12;
tr 52 M=CBPDATA12 $iter_cmd;
echo " CBPDATA13";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA13 $entry_cmd;
tr 51 M=CBPDATA13;
tr 52 M=CBPDATA13 $iter_cmd;
echo " CBPDATA14";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA14 $entry_cmd;
tr 51 M=CBPDATA14;
tr 52 M=CBPDATA14 $iter_cmd;
echo " CBPDATA15";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA15 $entry_cmd;
tr 51 M=CBPDATA15;
tr 52 M=CBPDATA15 $iter_cmd;
echo " CBPDATA16";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA16 $entry_cmd;
tr 51 M=CBPDATA16;
tr 52 M=CBPDATA16 $iter_cmd;
echo " CBPDATA17";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA17 $entry_cmd;
tr 51 M=CBPDATA17;
tr 52 M=CBPDATA17 $iter_cmd;
echo " CBPDATA18";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA18 $entry_cmd;
tr 51 M=CBPDATA18;
tr 52 M=CBPDATA18 $iter_cmd;
echo " CBPDATA19";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA19 $entry_cmd;
tr 51 M=CBPDATA19;
tr 52 M=CBPDATA19 $iter_cmd;
echo " CBPDATA20";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA20 $entry_cmd;
tr 51 M=CBPDATA20;
tr 52 M=CBPDATA20 $iter_cmd;
echo " CBPDATA21";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA21 $entry_cmd;
tr 51 M=CBPDATA21;
tr 52 M=CBPDATA21 $iter_cmd;
echo " CBPDATA22";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA22 $entry_cmd;
tr 51 M=CBPDATA22;
tr 52 M=CBPDATA22 $iter_cmd;
echo " CBPDATA23";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA23 $entry_cmd;
tr 51 M=CBPDATA23;
tr 52 M=CBPDATA23 $iter_cmd;
echo " CBPDATA24";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA24 $entry_cmd;
tr 51 M=CBPDATA24;
tr 52 M=CBPDATA24 $iter_cmd;
echo " CBPDATA25";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA25 $entry_cmd;
tr 51 M=CBPDATA25;
tr 52 M=CBPDATA25 $iter_cmd;
echo " CBPDATA26";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA26 $entry_cmd;
tr 51 M=CBPDATA26;
tr 52 M=CBPDATA26 $iter_cmd;
echo " CBPDATA27";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA27 $entry_cmd;
tr 51 M=CBPDATA27;
tr 52 M=CBPDATA27 $iter_cmd;
echo " CBPDATA28";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA28 $entry_cmd;
tr 51 M=CBPDATA28;
tr 52 M=CBPDATA28 $iter_cmd;
echo " CBPDATA29";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA29 $entry_cmd;
tr 51 M=CBPDATA29;
tr 52 M=CBPDATA29 $iter_cmd;
echo " CBPDATA30";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA30 $entry_cmd;
tr 51 M=CBPDATA30;
tr 52 M=CBPDATA30 $iter_cmd;
echo " CBPDATA31";
if !$?full_test \
    "local entry_cmd 'IE=1024'; \
     local iter_cmd 'ITER=1' "
tr 50 M=CBPDATA31 $entry_cmd;
tr 51 M=CBPDATA31;
tr 52 M=CBPDATA31 $iter_cmd;
echo " CBPPKTHEADER2";
tr 50 M=CBPPKTHEADER2;
tr 51 M=CBPPKTHEADER2;
tr 52 M=CBPPKTHEADER2;
echo " CBPPKTHEADER0_MEM0";
tr 50 M=CBPPKTHEADER0_MEM0;
tr 51 M=CBPPKTHEADER0_MEM0;
tr 52 M=CBPPKTHEADER0_MEM0;
echo " CBPPKTHEADER0_MEM1";
tr 50 M=CBPPKTHEADER0_MEM1;
tr 51 M=CBPPKTHEADER0_MEM1;
tr 52 M=CBPPKTHEADER0_MEM1;
echo " CBPPKTHEADER0_MEM2";
tr 50 M=CBPPKTHEADER0_MEM2;
tr 51 M=CBPPKTHEADER0_MEM2;
tr 52 M=CBPPKTHEADER0_MEM2;
echo " CBPPKTHEADER1_MEM0";
tr 50 M=CBPPKTHEADER1_MEM0;
tr 51 M=CBPPKTHEADER1_MEM0;
tr 52 M=CBPPKTHEADER1_MEM0;
echo " CBPPKTHEADER1_MEM1";
tr 50 M=CBPPKTHEADER1_MEM1;
tr 51 M=CBPPKTHEADER1_MEM1;
tr 52 M=CBPPKTHEADER1_MEM1;
echo " CBPPKTHEADER1_MEM2";
tr 50 M=CBPPKTHEADER1_MEM2;
tr 51 M=CBPPKTHEADER1_MEM2;
tr 52 M=CBPPKTHEADER1_MEM2;
echo " CBPPKTHEADERCPU";
tr 50 M=CBPPKTHEADERCPU;
tr 51 M=CBPPKTHEADERCPU;
tr 52 M=CBPPKTHEADERCPU;
echo " CCP";
tr 50 M=CCP;
tr 51 M=CCP;
tr 52 M=CCP;
echo " CELLCHK";
tr 50 M=CELLCHK;
tr 51 M=CELLCHK;
tr 52 M=CELLCHK;
echo " CELLLINK";
tr 50 M=CELLLINK;
tr 51 M=CELLLINK;
tr 52 M=CELLLINK;
echo " CFAP";
tr 50 M=CFAP;
tr 51 M=CFAP;
tr 52 M=CFAP;
echo " IPMC_GROUP0";
tr 50 M=IPMC_GROUP0;
tr 51 M=IPMC_GROUP0;
tr 52 M=IPMC_GROUP0;
echo " IPMC_GROUP1";
tr 50 M=IPMC_GROUP1;
tr 51 M=IPMC_GROUP1;
tr 52 M=IPMC_GROUP1;
echo " IPMC_GROUP2";
tr 50 M=IPMC_GROUP2;
tr 51 M=IPMC_GROUP2;
tr 52 M=IPMC_GROUP2;
echo " IPMC_GROUP3";
tr 50 M=IPMC_GROUP3;
tr 51 M=IPMC_GROUP3;
tr 52 M=IPMC_GROUP3;
echo " IPMC_GROUP4";
tr 50 M=IPMC_GROUP4;
tr 51 M=IPMC_GROUP4;
tr 52 M=IPMC_GROUP4;
echo " IPMC_GROUP5";
tr 50 M=IPMC_GROUP5;
tr 51 M=IPMC_GROUP5;
tr 52 M=IPMC_GROUP5;
echo " IPMC_GROUP6";
tr 50 M=IPMC_GROUP6;
tr 51 M=IPMC_GROUP6;
tr 52 M=IPMC_GROUP6;
echo " IPMC_GROUP7";
tr 50 M=IPMC_GROUP7;
tr 51 M=IPMC_GROUP7;
tr 52 M=IPMC_GROUP7;
echo " IPMC_GROUP8";
tr 50 M=IPMC_GROUP8;
tr 51 M=IPMC_GROUP8;
tr 52 M=IPMC_GROUP8;
echo " IPMC_VLAN";
tr 50 M=IPMC_VLAN;
tr 51 M=IPMC_VLAN;
tr 52 M=IPMC_VLAN;
echo " PFAP";
tr 50 M=PFAP;
tr 51 M=PFAP;
tr 52 M=PFAP;
echo " PKTLINK0";
tr 50 M=PKTLINK0;
tr 51 M=PKTLINK0;
tr 52 M=PKTLINK0;
echo " PKTLINK1";
tr 50 M=PKTLINK1;
tr 51 M=PKTLINK1;
tr 52 M=PKTLINK1;
echo " PKTLINK2";
tr 50 M=PKTLINK2;
tr 51 M=PKTLINK2;
tr 52 M=PKTLINK2;
echo " PKTLINK3";
tr 50 M=PKTLINK3;
tr 51 M=PKTLINK3;
tr 52 M=PKTLINK3;
echo " PKTLINK4";
tr 50 M=PKTLINK4;
tr 51 M=PKTLINK4;
tr 52 M=PKTLINK4;
echo " PKTLINK5";
tr 50 M=PKTLINK5;
tr 51 M=PKTLINK5;
tr 52 M=PKTLINK5;
echo " PKTLINK6";
tr 50 M=PKTLINK6;
tr 51 M=PKTLINK6;
tr 52 M=PKTLINK6;
echo " PKTLINK7";
tr 50 M=PKTLINK7;
tr 51 M=PKTLINK7;
tr 52 M=PKTLINK7;
echo " PKTLINK8";
tr 50 M=PKTLINK8;
tr 51 M=PKTLINK8;
tr 52 M=PKTLINK8;
echo " PKTLINK9";
tr 50 M=PKTLINK9;
tr 51 M=PKTLINK9;
tr 52 M=PKTLINK9;
echo " PKTLINK10";
tr 50 M=PKTLINK10;
tr 51 M=PKTLINK10;
tr 52 M=PKTLINK10;
echo " PKTLINK11";
tr 50 M=PKTLINK11;
tr 51 M=PKTLINK11;
tr 52 M=PKTLINK11;
echo " PKTLINK12";
tr 50 M=PKTLINK12;
tr 51 M=PKTLINK12;
tr 52 M=PKTLINK12;
echo " PKTLINK13";
tr 50 M=PKTLINK13;
tr 51 M=PKTLINK13;
tr 52 M=PKTLINK13;
echo " PKTLINK14";
tr 50 M=PKTLINK14;
tr 51 M=PKTLINK14;
tr 52 M=PKTLINK14;
echo " PKTLINK15";
tr 50 M=PKTLINK15;
tr 51 M=PKTLINK15;
tr 52 M=PKTLINK15;
echo " PKTLINK16";
tr 50 M=PKTLINK16;
tr 51 M=PKTLINK16;
tr 52 M=PKTLINK16;
echo " PKTLINK17";
tr 50 M=PKTLINK17;
tr 51 M=PKTLINK17;
tr 52 M=PKTLINK17;
echo " PKTLINK18";
tr 50 M=PKTLINK18;
tr 51 M=PKTLINK18;
tr 52 M=PKTLINK18;
echo " PKTLINK19";
tr 50 M=PKTLINK19;
tr 51 M=PKTLINK19;
tr 52 M=PKTLINK19;
echo " PKTLINK20";
tr 50 M=PKTLINK20;
tr 51 M=PKTLINK20;
tr 52 M=PKTLINK20;
echo " PKTLINK21";
tr 50 M=PKTLINK21;
tr 51 M=PKTLINK21;
tr 52 M=PKTLINK21;
echo " PKTLINK22";
tr 50 M=PKTLINK22;
tr 51 M=PKTLINK22;
tr 52 M=PKTLINK22;
echo " PKTLINK23";
tr 50 M=PKTLINK23;
tr 51 M=PKTLINK23;
tr 52 M=PKTLINK23;
echo " PKTLINK24";
tr 50 M=PKTLINK24;
tr 51 M=PKTLINK24;
tr 52 M=PKTLINK24;
echo " PKTLINK25";
tr 50 M=PKTLINK25;
tr 51 M=PKTLINK25;
tr 52 M=PKTLINK25;
echo " PKTLINK26";
tr 50 M=PKTLINK26;
tr 51 M=PKTLINK26;
tr 52 M=PKTLINK26;
echo " PKTLINK27";
tr 50 M=PKTLINK27;
tr 51 M=PKTLINK27;
tr 52 M=PKTLINK27;
echo " PKTLINK28";
tr 50 M=PKTLINK28;
tr 51 M=PKTLINK28;
tr 52 M=PKTLINK28;
echo " PKTLINK29";
tr 50 M=PKTLINK29;
tr 51 M=PKTLINK29;
tr 52 M=PKTLINK29;
echo " PKTLINK30";
tr 50 M=PKTLINK30;
tr 51 M=PKTLINK30;
tr 52 M=PKTLINK30;
echo " PKTLINK31";
tr 50 M=PKTLINK31;
tr 51 M=PKTLINK31;
tr 52 M=PKTLINK31;
echo " PKTLINK32";
tr 50 M=PKTLINK32;
tr 51 M=PKTLINK32;
tr 52 M=PKTLINK32;
echo " PKTLINK33";
tr 50 M=PKTLINK33;
tr 51 M=PKTLINK33;
tr 52 M=PKTLINK33;
echo " PKTLINK34";
tr 50 M=PKTLINK34;
tr 51 M=PKTLINK34;
tr 52 M=PKTLINK34;
echo " PKTLINK35";
tr 50 M=PKTLINK35;
tr 51 M=PKTLINK35;
tr 52 M=PKTLINK35;
echo " PKTLINK36";
tr 50 M=PKTLINK36;
tr 51 M=PKTLINK36;
tr 52 M=PKTLINK36;
echo " PKTLINK37";
tr 50 M=PKTLINK37;
tr 51 M=PKTLINK37;
tr 52 M=PKTLINK37;
echo " PKTLINK38";
tr 50 M=PKTLINK38;
tr 51 M=PKTLINK38;
tr 52 M=PKTLINK38;
echo " PKTLINK39";
tr 50 M=PKTLINK39;
tr 51 M=PKTLINK39;
tr 52 M=PKTLINK39;
echo " PKTLINK40";
tr 50 M=PKTLINK40;
tr 51 M=PKTLINK40;
tr 52 M=PKTLINK40;
echo " PKTLINK41";
tr 50 M=PKTLINK41;
tr 51 M=PKTLINK41;
tr 52 M=PKTLINK41;
echo " PKTLINK42";
tr 50 M=PKTLINK42;
tr 51 M=PKTLINK42;
tr 52 M=PKTLINK42;
echo " PKTLINK43";
tr 50 M=PKTLINK43;
tr 51 M=PKTLINK43;
tr 52 M=PKTLINK43;
echo " PKTLINK44";
tr 50 M=PKTLINK44;
tr 51 M=PKTLINK44;
tr 52 M=PKTLINK44;
echo " PKTLINK45";
tr 50 M=PKTLINK45;
tr 51 M=PKTLINK45;
tr 52 M=PKTLINK45;
echo " PKTLINK46";
tr 50 M=PKTLINK46;
tr 51 M=PKTLINK46;
tr 52 M=PKTLINK46;
echo " PKTLINK47";
tr 50 M=PKTLINK47;
tr 51 M=PKTLINK47;
tr 52 M=PKTLINK47;
echo " PKTLINK48";
tr 50 M=PKTLINK48;
tr 51 M=PKTLINK48;
tr 52 M=PKTLINK48;
echo " PKTLINK49";
tr 50 M=PKTLINK49;
tr 51 M=PKTLINK49;
tr 52 M=PKTLINK49;
echo " PKTLINK50";
tr 50 M=PKTLINK50;
tr 51 M=PKTLINK50;
tr 52 M=PKTLINK50;
echo " PKTLINK51";
tr 50 M=PKTLINK51;
tr 51 M=PKTLINK51;
tr 52 M=PKTLINK51;
echo " PKTLINK52";
tr 50 M=PKTLINK52;
tr 51 M=PKTLINK52;
tr 52 M=PKTLINK52;
echo " PKTLINK53";
tr 50 M=PKTLINK53;
tr 51 M=PKTLINK53;
tr 52 M=PKTLINK53;
echo " WRED_CFG_CELL";
tr 50 M=WRED_CFG_CELL;
tr 51 M=WRED_CFG_CELL;
tr 52 M=WRED_CFG_CELL;
echo " WRED_CFG_PACKET";
tr 50 M=WRED_CFG_PACKET;
tr 51 M=WRED_CFG_PACKET;
tr 52 M=WRED_CFG_PACKET;
echo " WRED_PORT_CFG_CELL";
tr 50 M=WRED_PORT_CFG_CELL;
tr 51 M=WRED_PORT_CFG_CELL;
tr 52 M=WRED_PORT_CFG_CELL;
echo " WRED_PORT_CFG_PACKET";
tr 50 M=WRED_PORT_CFG_PACKET;
tr 51 M=WRED_PORT_CFG_PACKET;
tr 52 M=WRED_PORT_CFG_PACKET;
echo " WRED_PORT_THD_0_CELL";
tr 50 M=WRED_PORT_THD_0_CELL;
tr 51 M=WRED_PORT_THD_0_CELL;
tr 52 M=WRED_PORT_THD_0_CELL;
echo " WRED_PORT_THD_0_PACKET";
tr 50 M=WRED_PORT_THD_0_PACKET;
tr 51 M=WRED_PORT_THD_0_PACKET;
tr 52 M=WRED_PORT_THD_0_PACKET;
echo " WRED_PORT_THD_1_CELL";
tr 50 M=WRED_PORT_THD_1_CELL;
tr 51 M=WRED_PORT_THD_1_CELL;
tr 52 M=WRED_PORT_THD_1_CELL;
echo " WRED_THD_1_PACKET";
tr 50 M=WRED_THD_1_PACKET;
tr 51 M=WRED_THD_1_PACKET;
tr 52 M=WRED_THD_1_PACKET;
echo " WRED_THD_0_CELL";
tr 50 M=WRED_THD_0_CELL;
tr 51 M=WRED_THD_0_CELL;
tr 52 M=WRED_THD_0_CELL;
echo " WRED_THD_0_PACKET";
tr 50 M=WRED_THD_0_PACKET;
tr 51 M=WRED_THD_0_PACKET;
tr 52 M=WRED_THD_0_PACKET;
echo " WRED_THD_1_CELL";
tr 50 M=WRED_THD_1_CELL;
tr 51 M=WRED_THD_1_CELL;
tr 52 M=WRED_THD_1_CELL;
echo " WRED_THD_1_PACKET";
tr 50 M=WRED_THD_1_PACKET;
tr 51 M=WRED_THD_1_PACKET;
tr 52 M=WRED_THD_1_PACKET;
echo " MODPORT_MAP_EM";
tr 50 M=MODPORT_MAP_EM;
tr 51 M=MODPORT_MAP_EM;
tr 52 M=MODPORT_MAP_EM;
echo " MODPORT_MAP_IM";
tr 50 M=MODPORT_MAP_IM;
tr 51 M=MODPORT_MAP_IM;
tr 52 M=MODPORT_MAP_IM;
echo " MODPORT_MAP_SW";
tr 50 M=MODPORT_MAP_SW;
tr 51 M=MODPORT_MAP_SW;
tr 52 M=MODPORT_MAP_SW;
echo " MPLS_ENTRY";
tr 50 M=MPLS_ENTRY;
tr 51 M=MPLS_ENTRY;
tr 52 M=MPLS_ENTRY;
echo " MPLS_ENTRY_SCRATCH";
tr 50 M=MPLS_ENTRY_SCRATCH;
#tr 51 M=MPLS_ENTRY_SCRATCH # test not supported on single-entry tables;
#tr 52 M=MPLS_ENTRY_SCRATCH # test not supported on single-entry tables;
echo " MPLS_STATION_TCAM";
tr 50 M=MPLS_STATION_TCAM;
tr 51 M=MPLS_STATION_TCAM;
tr 52 M=MPLS_STATION_TCAM;
echo " NONUCAST_TRUNK_BLOCK_MASK";
tr 50 M=NONUCAST_TRUNK_BLOCK_MASK;
tr 51 M=NONUCAST_TRUNK_BLOCK_MASK;
tr 52 M=NONUCAST_TRUNK_BLOCK_MASK;
echo " PORT_CBL_TABLE";
tr 50 M=PORT_CBL_TABLE;
tr 51 M=PORT_CBL_TABLE;
tr 52 M=PORT_CBL_TABLE;
echo " COS_MAP";
tr 50 M=COS_MAP;
tr 51 M=COS_MAP;
tr 52 M=COS_MAP;
echo " PORT_LAG_FAILOVER_SET";
tr 50 M=PORT_LAG_FAILOVER_SET;
tr 51 M=PORT_LAG_FAILOVER_SET;
tr 52 M=PORT_LAG_FAILOVER_SET;
echo " MAC_LIMIT_COUNT_TABLE";
tr 50 M=MAC_LIMIT_COUNT_TABLE;
tr 51 M=MAC_LIMIT_COUNT_TABLE;
tr 52 M=MAC_LIMIT_COUNT_TABLE;
echo " PORT_TRUNK_MAC_LIMIT_CONTROL_1";
tr 50 M=PORT_TRUNK_MAC_LIMIT_CONTROL_1;
tr 51 M=PORT_TRUNK_MAC_LIMIT_CONTROL_1;
tr 52 M=PORT_TRUNK_MAC_LIMIT_CONTROL_1;
echo " PORT";
tr 50 M=PORT;
tr 51 M=PORT;
tr 52 M=PORT;
echo " SOURCE_TRUNK_MAP";
tr 50 M=SOURCE_TRUNK_MAP;
tr 51 M=SOURCE_TRUNK_MAP;
tr 52 M=SOURCE_TRUNK_MAP;
echo " SOURCE_VP";
tr 50 M=SOURCE_VP;
tr 51 M=SOURCE_VP;
tr 52 M=SOURCE_VP;
echo " SRC_MODID_BLOCK";
tr 50 M=SRC_MODID_BLOCK;
tr 51 M=SRC_MODID_BLOCK;
tr 52 M=SRC_MODID_BLOCK;
echo " VLAN_STG";
tr 50 M=VLAN_STG;
tr 51 M=VLAN_STG;
tr 52 M=VLAN_STG;
echo " SYSTEM_CONFIG_TABLE";
tr 50 M=SYSTEM_CONFIG_TABLE;
tr 51 M=SYSTEM_CONFIG_TABLE;
tr 52 M=SYSTEM_CONFIG_TABLE;
echo " TCP_FN";
tr 50 M=TCP_FN;
tr 51 M=TCP_FN;
tr 52 M=TCP_FN;
echo " TOS_FN";
tr 50 M=TOS_FN;
tr 51 M=TOS_FN;
tr 52 M=TOS_FN;
echo " TRUNK32_CONFIG_TABLE";
tr 50 M=TRUNK32_CONFIG_TABLE;
tr 51 M=TRUNK32_CONFIG_TABLE;
tr 52 M=TRUNK32_CONFIG_TABLE;
echo " TRUNK32_PORT_TABLE";
tr 50 M=TRUNK32_PORT_TABLE;
tr 51 M=TRUNK32_PORT_TABLE;
tr 52 M=TRUNK32_PORT_TABLE;
echo " TRUNK_BITMAP";
tr 50 M=TRUNK_BITMAP;
tr 51 M=TRUNK_BITMAP;
tr 52 M=TRUNK_BITMAP;
echo " TRUNK_CBL_TABLE";
tr 50 M=TRUNK_CBL_TABLE;
tr 51 M=TRUNK_CBL_TABLE;
tr 52 M=TRUNK_CBL_TABLE;
echo " PORT_TRUNK_EGRESS";
tr 50 M=PORT_TRUNK_EGRESS;
tr 51 M=PORT_TRUNK_EGRESS;
tr 52 M=PORT_TRUNK_EGRESS;
echo " TRUNK_GROUP";
tr 50 M=TRUNK_GROUP;
tr 51 M=TRUNK_GROUP;
tr 52 M=TRUNK_GROUP;
echo " TTL_FN";
tr 50 M=TTL_FN;
tr 51 M=TTL_FN;
tr 52 M=TTL_FN;
echo " VFI";
tr 50 M=VFI;
tr 51 M=VFI;
tr 52 M=VFI;
echo " VFP_POLICY_TABLE";
tr 50 M=VFP_POLICY_TABLE;
tr 51 M=VFP_POLICY_TABLE;
tr 52 M=VFP_POLICY_TABLE;
echo " VFP_TCAM";
tr 50 M=VFP_TCAM;
tr 51 M=VFP_TCAM;
tr 52 M=VFP_TCAM;
echo " VLAN_COS_MAP";
tr 50 M=VLAN_COS_MAP;
tr 51 M=VLAN_COS_MAP;
tr 52 M=VLAN_COS_MAP;
echo " VLAN_MAC";
tr 50 M=VLAN_MAC;
tr 51 M=VLAN_MAC;
tr 52 M=VLAN_MAC;
echo " VLAN_MAC_SCRATCH";
tr 50 M=VLAN_MAC_SCRATCH;
#tr 51 M=VLAN_MAC_SCRATCH # test not supported on single-entry tables;
#tr 52 M=VLAN_MAC_SCRATCH # test not supported on single-entry tables;
echo " VLAN_OR_VFI_MAC_COUNT";
tr 50 M=VLAN_OR_VFI_MAC_COUNT;
tr 51 M=VLAN_OR_VFI_MAC_COUNT;
tr 52 M=VLAN_OR_VFI_MAC_COUNT;
echo " VLAN_OR_VFI_MAC_LIMIT";
tr 50 M=VLAN_OR_VFI_MAC_LIMIT;
tr 51 M=VLAN_OR_VFI_MAC_LIMIT;
tr 52 M=VLAN_OR_VFI_MAC_LIMIT;
echo " VLAN_PROFILE_2";
tr 50 M=VLAN_PROFILE_2;
tr 51 M=VLAN_PROFILE_2;
tr 52 M=VLAN_PROFILE_2;
echo " VLAN_PROFILE";
tr 50 M=VLAN_PROFILE;
tr 51 M=VLAN_PROFILE;
tr 52 M=VLAN_PROFILE;
echo " VLAN_PROTOCOL";
tr 50 M=VLAN_PROTOCOL;
tr 51 M=VLAN_PROTOCOL;
tr 52 M=VLAN_PROTOCOL;
echo " VLAN_PROTOCOL_DATA";
tr 50 M=VLAN_PROTOCOL_DATA;
tr 51 M=VLAN_PROTOCOL_DATA;
tr 52 M=VLAN_PROTOCOL_DATA;
echo " VLAN_SUBNET";
tr 50 M=VLAN_SUBNET;
tr 51 M=VLAN_SUBNET;
tr 52 M=VLAN_SUBNET;
echo " VLAN_SUBNET_DATA_ONLY";
tr 50 M=VLAN_SUBNET_DATA_ONLY;
tr 51 M=VLAN_SUBNET_DATA_ONLY;
tr 52 M=VLAN_SUBNET_DATA_ONLY;
echo " VLAN_SUBNET_ONLY";
tr 50 M=VLAN_SUBNET_ONLY;
tr 51 M=VLAN_SUBNET_ONLY;
tr 52 M=VLAN_SUBNET_ONLY;
echo " VLAN";
tr 50 M=VLAN;
tr 51 M=VLAN;
tr 52 M=VLAN;
echo " VLAN_XLATE";
tr 50 M=VLAN_XLATE;
tr 51 M=VLAN_XLATE;
tr 52 M=VLAN_XLATE;
echo " VLAN_XLATE_SCRATCH";
tr 50 M=VLAN_XLATE_SCRATCH;
#tr 51 M=VLAN_XLATE_SCRATCH # test not supported on single-entry tables;
#tr 52 M=VLAN_XLATE_SCRATCH # test not supported on single-entry tables;
$done

#Table DMA/Table SLAM
echo "Running Table DMA Tests ..."
echo " ALTERNATE_EMIRROR_BITMAP";
tr 71 M=ALTERNATE_EMIRROR_BITMAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=ALTERNATE_EMIRROR_BITMAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=ALTERNATE_EMIRROR_BITMAP S=0 C=0 TSE=T SLTH=F;
echo " CPU_COS_MAP";
tr 71 M=CPU_COS_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=CPU_COS_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=CPU_COS_MAP S=0 C=0 TSE=T SLTH=F;
echo " CPU_COS_MAP_DATA_ONLY";
tr 71 M=CPU_COS_MAP_DATA_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=CPU_COS_MAP_DATA_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=CPU_COS_MAP_DATA_ONLY S=0 C=0 TSE=T SLTH=F;
echo " CPU_COS_MAP_ONLY";
tr 71 M=CPU_COS_MAP_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=CPU_COS_MAP_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=CPU_COS_MAP_ONLY S=0 C=0 TSE=T SLTH=F;
echo " CPU_TS_MAP";
tr 71 M=CPU_TS_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=CPU_TS_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=CPU_TS_MAP S=0 C=0 TSE=T SLTH=F;
echo " DSCP_TABLE";
tr 71 M=DSCP_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=DSCP_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=DSCP_TABLE S=0 C=0 TSE=T SLTH=F;
echo " E2E_HOL_STATUS";
tr 71 M=E2E_HOL_STATUS S=0 C=0 TSE=F SLTH=T;
tr 71 M=E2E_HOL_STATUS S=0 C=0 TSE=T SLTH=T;
tr 71 M=E2E_HOL_STATUS S=0 C=0 TSE=T SLTH=F;
echo " EFP_COUNTER_TABLE";
tr 71 M=EFP_COUNTER_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EFP_COUNTER_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EFP_COUNTER_TABLE S=0 C=0 TSE=T SLTH=F;
echo " EFP_METER_TABLE";
tr 71 M=EFP_METER_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EFP_METER_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EFP_METER_TABLE S=0 C=0 TSE=T SLTH=F;
echo " EFP_POLICY_TABLE";
tr 71 M=EFP_POLICY_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=F;
echo " EFP_TCAM";
tr 71 M=EFP_TCAM S=0 C=0 TSE=F SLTH=T;
tr 71 M=EFP_TCAM S=0 C=0 TSE=T SLTH=T;
tr 71 M=EFP_TCAM S=0 C=0 TSE=T SLTH=F;
echo " EGR_DSCP_ECN_MAP";
tr 71 M=EGR_DSCP_ECN_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_DSCP_ECN_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_DSCP_ECN_MAP S=0 C=0 TSE=T SLTH=F;
echo " EGR_DSCP_TABLE";
tr 71 M=EGR_DSCP_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_DSCP_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_DSCP_TABLE S=0 C=0 TSE=T SLTH=F;
echo " EGR_EM_MTP_INDEX";
tr 71 M=EGR_EM_MTP_INDEX S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_EM_MTP_INDEX S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_EM_MTP_INDEX S=0 C=0 TSE=T SLTH=F;
echo " EGR_ERSPAN";
tr 71 M=EGR_ERSPAN S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_ERSPAN S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_ERSPAN S=0 C=0 TSE=T SLTH=F;
echo " EGR_IM_MTP_INDEX";
tr 71 M=EGR_IM_MTP_INDEX S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IM_MTP_INDEX S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IM_MTP_INDEX S=0 C=0 TSE=T SLTH=F;
echo " EGR_IPFIX_DSCP_XLATE_TABLE";
tr 71 M=EGR_IPFIX_DSCP_XLATE_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IPFIX_DSCP_XLATE_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IPFIX_DSCP_XLATE_TABLE S=0 C=0 TSE=T SLTH=F;
echo " EGR_IPFIX_EOP_BUFFER";
tr 71 M=EGR_IPFIX_EOP_BUFFER S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IPFIX_EOP_BUFFER S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IPFIX_EOP_BUFFER S=0 C=0 TSE=T SLTH=F;
echo " EGR_IPFIX_EXPORT_FIFO";
tr 71 M=EGR_IPFIX_EXPORT_FIFO S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IPFIX_EXPORT_FIFO S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IPFIX_EXPORT_FIFO S=0 C=0 TSE=T SLTH=F;
echo " EGR_IPFIX_IPV4_MASK_SET_A";
tr 71 M=EGR_IPFIX_IPV4_MASK_SET_A S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IPFIX_IPV4_MASK_SET_A S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IPFIX_IPV4_MASK_SET_A S=0 C=0 TSE=T SLTH=F;
echo " EGR_IPFIX_IPV6_MASK_SET_A";
tr 71 M=EGR_IPFIX_IPV6_MASK_SET_A S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IPFIX_IPV6_MASK_SET_A S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IPFIX_IPV6_MASK_SET_A S=0 C=0 TSE=T SLTH=F;
echo " EGR_IPFIX_PROFILE";
tr 71 M=EGR_IPFIX_PROFILE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IPFIX_PROFILE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IPFIX_PROFILE S=0 C=0 TSE=T SLTH=F;
echo " EGR_IPFIX_SESSION_TABLE";
tr 71 M=EGR_IPFIX_SESSION_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IPFIX_SESSION_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IPFIX_SESSION_TABLE S=0 C=0 TSE=T SLTH=F;
echo " EGR_IPMC";
tr 71 M=EGR_IPMC S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IPMC S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IPMC S=0 C=0 TSE=T SLTH=F;
echo " EGR_IP_TUNNEL";
tr 71 M=EGR_IP_TUNNEL S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IP_TUNNEL S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IP_TUNNEL S=0 C=0 TSE=T SLTH=F;
echo " EGR_IP_TUNNEL_IPV6";
tr 71 M=EGR_IP_TUNNEL_IPV6 S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IP_TUNNEL_IPV6 S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IP_TUNNEL_IPV6 S=0 C=0 TSE=T SLTH=F;
echo " EGR_IP_TUNNEL_MPLS";
tr 71 M=EGR_IP_TUNNEL_MPLS S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IP_TUNNEL_MPLS S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IP_TUNNEL_MPLS S=0 C=0 TSE=T SLTH=F;
echo " EGR_L3_INTF";
tr 71 M=EGR_L3_INTF S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_L3_INTF S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_L3_INTF S=0 C=0 TSE=T SLTH=F;
echo " EGR_L3_NEXT_HOP";
tr 71 M=EGR_L3_NEXT_HOP S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=F;
echo " EGR_MAC_DA_PROFILE";
tr 71 M=EGR_MAC_DA_PROFILE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_MAC_DA_PROFILE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_MAC_DA_PROFILE S=0 C=0 TSE=T SLTH=F;
echo " EGRESS_MASK";
tr 71 M=EGRESS_MASK S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGRESS_MASK S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGRESS_MASK S=0 C=0 TSE=T SLTH=F;
echo " EGR_MOD_MAP";
tr 71 M=EGR_MOD_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_MOD_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_MOD_MAP S=0 C=0 TSE=T SLTH=F;
echo " EGR_MPLS_EXP_MAPPING_1";
tr 71 M=EGR_MPLS_EXP_MAPPING_1 S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_MPLS_EXP_MAPPING_1 S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_MPLS_EXP_MAPPING_1 S=0 C=0 TSE=T SLTH=F;
echo " EGR_MPLS_EXP_MAPPING_2";
tr 71 M=EGR_MPLS_EXP_MAPPING_2 S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_MPLS_EXP_MAPPING_2 S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_MPLS_EXP_MAPPING_2 S=0 C=0 TSE=T SLTH=F;
echo " EGR_MPLS_EXP_PRI_MAPPING";
tr 71 M=EGR_MPLS_EXP_PRI_MAPPING S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_MPLS_EXP_PRI_MAPPING S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_MPLS_EXP_PRI_MAPPING S=0 C=0 TSE=T SLTH=F;
echo " EGR_MPLS_PRI_MAPPING";
tr 71 M=EGR_MPLS_PRI_MAPPING S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_MPLS_PRI_MAPPING S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_MPLS_PRI_MAPPING S=0 C=0 TSE=T SLTH=F;
echo " EGR_MPLS_VC_AND_SWAP_LABEL_TABLE";
tr 71 M=EGR_MPLS_VC_AND_SWAP_LABEL_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_MPLS_VC_AND_SWAP_LABEL_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_MPLS_VC_AND_SWAP_LABEL_TABLE S=0 C=0 TSE=T SLTH=F;
echo " EGR_PERQ_XMT_COUNTERS";
tr 71 M=EGR_PERQ_XMT_COUNTERS S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_PERQ_XMT_COUNTERS S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_PERQ_XMT_COUNTERS S=0 C=0 TSE=T SLTH=F;
echo " EGR_PRI_CNG_MAP";
tr 71 M=EGR_PRI_CNG_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=F;
echo " EGR_PW_INIT_COUNTERS";
tr 71 M=EGR_PW_INIT_COUNTERS S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_PW_INIT_COUNTERS S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_PW_INIT_COUNTERS S=0 C=0 TSE=T SLTH=F;
echo " EGR_VLAN";
tr 71 M=EGR_VLAN S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_VLAN S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_VLAN S=0 C=0 TSE=T SLTH=F;
echo " EGR_VLAN_STG";
tr 71 M=EGR_VLAN_STG S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_VLAN_STG S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_VLAN_STG S=0 C=0 TSE=T SLTH=F;
echo " EGR_VLAN_TAG_ACTION_PROFILE";
tr 71 M=EGR_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=T SLTH=F;
echo " EGR_VLAN_XLATE";
tr 71 M=EGR_VLAN_XLATE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_VLAN_XLATE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_VLAN_XLATE S=0 C=0 TSE=T SLTH=F;
echo " EGR_VLAN_XLATE_SCRATCH";
tr 71 M=EGR_VLAN_XLATE_SCRATCH S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_VLAN_XLATE_SCRATCH S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_VLAN_XLATE_SCRATCH S=0 C=0 TSE=T SLTH=F;
echo " EM_MTP_INDEX";
tr 71 M=EM_MTP_INDEX S=0 C=0 TSE=F SLTH=T;
tr 71 M=EM_MTP_INDEX S=0 C=0 TSE=T SLTH=T;
tr 71 M=EM_MTP_INDEX S=0 C=0 TSE=T SLTH=F;
echo " ESM_RANGE_CHECK";
tr 71 M=ESM_RANGE_CHECK S=0 C=0 TSE=F SLTH=T;
tr 71 M=ESM_RANGE_CHECK S=0 C=0 TSE=T SLTH=T;
tr 71 M=ESM_RANGE_CHECK S=0 C=0 TSE=T SLTH=F;
echo " ET_INST_OPC_TABLE";
tr 71 M=ET_INST_OPC_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=ET_INST_OPC_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=ET_INST_OPC_TABLE S=0 C=0 TSE=T SLTH=F;
echo " EXT_IFP_ACTION_PROFILE";
tr 71 M=EXT_IFP_ACTION_PROFILE S=0 C=0 TSE=F SLTH=T;
tr 71 M=EXT_IFP_ACTION_PROFILE S=0 C=0 TSE=T SLTH=T;
tr 71 M=EXT_IFP_ACTION_PROFILE S=0 C=0 TSE=T SLTH=F;
echo " FP_COUNTER_TABLE";
tr 71 M=FP_COUNTER_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=FP_COUNTER_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=FP_COUNTER_TABLE S=0 C=0 TSE=T SLTH=F;
echo " FP_GLOBAL_MASK_TCAM";
tr 71 M=FP_GLOBAL_MASK_TCAM S=0 C=0 TSE=F SLTH=T;
tr 71 M=FP_GLOBAL_MASK_TCAM S=0 C=0 TSE=T SLTH=T;
tr 71 M=FP_GLOBAL_MASK_TCAM S=0 C=0 TSE=T SLTH=F;
echo " FP_METER_TABLE";
tr 71 M=FP_METER_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=FP_METER_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=FP_METER_TABLE S=0 C=0 TSE=T SLTH=F;
echo " FP_POLICY_TABLE";
tr 71 M=FP_POLICY_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=FP_POLICY_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=FP_POLICY_TABLE S=0 C=0 TSE=T SLTH=F;
echo " FP_PORT_FIELD_SEL";
tr 71 M=FP_PORT_FIELD_SEL S=0 C=0 TSE=F SLTH=T;
tr 71 M=FP_PORT_FIELD_SEL S=0 C=0 TSE=T SLTH=T;
tr 71 M=FP_PORT_FIELD_SEL S=0 C=0 TSE=T SLTH=F;
echo " FP_PORT_METER_MAP";
tr 71 M=FP_PORT_METER_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=FP_PORT_METER_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=FP_PORT_METER_MAP S=0 C=0 TSE=T SLTH=F;
echo " FP_RANGE_CHECK";
tr 71 M=FP_RANGE_CHECK S=0 C=0 TSE=F SLTH=T;
tr 71 M=FP_RANGE_CHECK S=0 C=0 TSE=T SLTH=T;
tr 71 M=FP_RANGE_CHECK S=0 C=0 TSE=T SLTH=F;
echo " FP_SLICE_KEY_CONTROL";
tr 71 M=FP_SLICE_KEY_CONTROL S=0 C=0 TSE=F SLTH=T;
tr 71 M=FP_SLICE_KEY_CONTROL S=0 C=0 TSE=T SLTH=T;
tr 71 M=FP_SLICE_KEY_CONTROL S=0 C=0 TSE=T SLTH=F;
echo " FP_SLICE_MAP";
tr 71 M=FP_SLICE_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=FP_SLICE_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=FP_SLICE_MAP S=0 C=0 TSE=T SLTH=F;
echo " FP_STORM_CONTROL_METERS";
tr 71 M=FP_STORM_CONTROL_METERS S=0 C=0 TSE=F SLTH=T;
tr 71 M=FP_STORM_CONTROL_METERS S=0 C=0 TSE=T SLTH=T;
tr 71 M=FP_STORM_CONTROL_METERS S=0 C=0 TSE=T SLTH=F;
echo " FP_TCAM";
tr 71 M=FP_TCAM S=0 C=0 TSE=F SLTH=T;
tr 71 M=FP_TCAM S=0 C=0 TSE=T SLTH=T;
tr 71 M=FP_TCAM S=0 C=0 TSE=T SLTH=F;
echo " UDF_OFFSET";
tr 71 M=UDF_OFFSET S=0 C=0 TSE=F SLTH=T;
tr 71 M=UDF_OFFSET S=0 C=0 TSE=T SLTH=T;
tr 71 M=UDF_OFFSET S=0 C=0 TSE=T SLTH=F;
echo " HG_TRUNK_FAILOVER_SET";
tr 71 M=HG_TRUNK_FAILOVER_SET S=0 C=0 TSE=F SLTH=T;
tr 71 M=HG_TRUNK_FAILOVER_SET S=0 C=0 TSE=T SLTH=T;
tr 71 M=HG_TRUNK_FAILOVER_SET S=0 C=0 TSE=T SLTH=F;
echo " IFP_REDIRECTION_PROFILE";
tr 71 M=IFP_REDIRECTION_PROFILE S=0 C=0 TSE=F SLTH=T;
tr 71 M=IFP_REDIRECTION_PROFILE S=0 C=0 TSE=T SLTH=T;
tr 71 M=IFP_REDIRECTION_PROFILE S=0 C=0 TSE=T SLTH=F;
echo " IM_MTP_INDEX";
tr 71 M=IM_MTP_INDEX S=0 C=0 TSE=F SLTH=T;
tr 71 M=IM_MTP_INDEX S=0 C=0 TSE=T SLTH=T;
tr 71 M=IM_MTP_INDEX S=0 C=0 TSE=T SLTH=F;
echo " ING_DVP_TABLE";
tr 71 M=ING_DVP_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_DVP_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_DVP_TABLE S=0 C=0 TSE=T SLTH=F;
echo " ING_IPFIX_DSCP_XLATE_TABLE";
tr 71 M=ING_IPFIX_DSCP_XLATE_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_IPFIX_DSCP_XLATE_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_IPFIX_DSCP_XLATE_TABLE S=0 C=0 TSE=T SLTH=F;
echo " ING_IPFIX_EOP_BUFFER";
tr 71 M=ING_IPFIX_EOP_BUFFER S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_IPFIX_EOP_BUFFER S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_IPFIX_EOP_BUFFER S=0 C=0 TSE=T SLTH=F;
echo " ING_IPFIX_EXPORT_FIFO";
tr 71 M=ING_IPFIX_EXPORT_FIFO S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_IPFIX_EXPORT_FIFO S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_IPFIX_EXPORT_FIFO S=0 C=0 TSE=T SLTH=F;
echo " ING_IPFIX_IPV4_MASK_SET_A";
tr 71 M=ING_IPFIX_IPV4_MASK_SET_A S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_IPFIX_IPV4_MASK_SET_A S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_IPFIX_IPV4_MASK_SET_A S=0 C=0 TSE=T SLTH=F;
echo " ING_IPFIX_IPV4_MASK_SET_B";
tr 71 M=ING_IPFIX_IPV4_MASK_SET_B S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_IPFIX_IPV4_MASK_SET_B S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_IPFIX_IPV4_MASK_SET_B S=0 C=0 TSE=T SLTH=F;
echo " ING_IPFIX_IPV6_MASK_SET_A";
tr 71 M=ING_IPFIX_IPV6_MASK_SET_A S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_IPFIX_IPV6_MASK_SET_A S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_IPFIX_IPV6_MASK_SET_A S=0 C=0 TSE=T SLTH=F;
echo " ING_IPFIX_IPV6_MASK_SET_B";
tr 71 M=ING_IPFIX_IPV6_MASK_SET_B S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_IPFIX_IPV6_MASK_SET_B S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_IPFIX_IPV6_MASK_SET_B S=0 C=0 TSE=T SLTH=F;
echo " ING_IPFIX_PROFILE";
tr 71 M=ING_IPFIX_PROFILE S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_IPFIX_PROFILE S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_IPFIX_PROFILE S=0 C=0 TSE=T SLTH=F;
echo " ING_IPFIX_SESSION_TABLE";
tr 71 M=ING_IPFIX_SESSION_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_IPFIX_SESSION_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_IPFIX_SESSION_TABLE S=0 C=0 TSE=T SLTH=F;
echo " ING_L3_NEXT_HOP";
tr 71 M=ING_L3_NEXT_HOP S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=F;
echo " ING_L3_NEXT_HOP_A";
tr 71 M=ING_L3_NEXT_HOP_A S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_L3_NEXT_HOP_A S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_L3_NEXT_HOP_A S=0 C=0 TSE=T SLTH=F;
echo " ING_L3_NEXT_HOP_B";
tr 71 M=ING_L3_NEXT_HOP_B S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_L3_NEXT_HOP_B S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_L3_NEXT_HOP_B S=0 C=0 TSE=T SLTH=F;
echo " ING_MOD_MAP";
tr 71 M=ING_MOD_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_MOD_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_MOD_MAP S=0 C=0 TSE=T SLTH=F;
echo " ING_MPLS_EXP_MAPPING";
tr 71 M=ING_MPLS_EXP_MAPPING S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_MPLS_EXP_MAPPING S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_MPLS_EXP_MAPPING S=0 C=0 TSE=T SLTH=F;
echo " ING_PRI_CNG_MAP";
tr 71 M=ING_PRI_CNG_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=F;
echo " ING_PW_TERM_COUNTERS";
tr 71 M=ING_PW_TERM_COUNTERS S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_PW_TERM_COUNTERS S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_PW_TERM_COUNTERS S=0 C=0 TSE=T SLTH=F;
echo " ING_PW_TERM_SEQ_NUM";
tr 71 M=ING_PW_TERM_SEQ_NUM S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_PW_TERM_SEQ_NUM S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_PW_TERM_SEQ_NUM S=0 C=0 TSE=T SLTH=F;
echo " ING_VLAN_RANGE";
tr 71 M=ING_VLAN_RANGE S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_VLAN_RANGE S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_VLAN_RANGE S=0 C=0 TSE=T SLTH=F;
echo " ING_VLAN_TAG_ACTION_PROFILE";
tr 71 M=ING_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=T SLTH=F;
echo " INITIAL_ING_L3_NEXT_HOP";
tr 71 M=INITIAL_ING_L3_NEXT_HOP S=0 C=0 TSE=F SLTH=T;
tr 71 M=INITIAL_ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=T;
tr 71 M=INITIAL_ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=F;
echo " INITIAL_L3_ECMP";
tr 71 M=INITIAL_L3_ECMP S=0 C=0 TSE=F SLTH=T;
tr 71 M=INITIAL_L3_ECMP S=0 C=0 TSE=T SLTH=T;
tr 71 M=INITIAL_L3_ECMP S=0 C=0 TSE=T SLTH=F;
echo " INITIAL_L3_ECMP_COUNT";
tr 71 M=INITIAL_L3_ECMP_COUNT S=0 C=0 TSE=F SLTH=T;
tr 71 M=INITIAL_L3_ECMP_COUNT S=0 C=0 TSE=T SLTH=T;
tr 71 M=INITIAL_L3_ECMP_COUNT S=0 C=0 TSE=T SLTH=F;
echo " IPORT_TABLE";
tr 71 M=IPORT_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=IPORT_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=IPORT_TABLE S=0 C=0 TSE=T SLTH=F;
echo " IPV4_IN_IPV6_PREFIX_MATCH";
tr 71 M=IPV4_IN_IPV6_PREFIX_MATCH S=0 C=0 TSE=F SLTH=T;
tr 71 M=IPV4_IN_IPV6_PREFIX_MATCH S=0 C=0 TSE=T SLTH=T;
tr 71 M=IPV4_IN_IPV6_PREFIX_MATCH S=0 C=0 TSE=T SLTH=F;
echo " IPV6_PROXY_ENABLE";
tr 71 M=IPV6_PROXY_ENABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=IPV6_PROXY_ENABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=IPV6_PROXY_ENABLE S=0 C=0 TSE=T SLTH=F;
echo " L2MC";
tr 71 M=L2MC S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2MC S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2MC S=0 C=0 TSE=T SLTH=F;
echo " L2_ENTRY";
tr 71 M=L2_ENTRY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_ENTRY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_ENTRY S=0 C=0 TSE=T SLTH=F;
echo " L2_ENTRY_ONLY";
tr 71 M=L2_ENTRY_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_ENTRY_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_ENTRY_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L2_ENTRY_OVERFLOW";
tr 71 M=L2_ENTRY_OVERFLOW S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_ENTRY_OVERFLOW S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_ENTRY_OVERFLOW S=0 C=0 TSE=T SLTH=F;
echo " L2_ENTRY_SCRATCH";
tr 71 M=L2_ENTRY_SCRATCH S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_ENTRY_SCRATCH S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_ENTRY_SCRATCH S=0 C=0 TSE=T SLTH=F;
echo " L2_HITDA_ONLY";
tr 71 M=L2_HITDA_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_HITDA_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_HITDA_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L2_HITSA_ONLY";
tr 71 M=L2_HITSA_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_HITSA_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_HITSA_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L2_MOD_FIFO";
tr 71 M=L2_MOD_FIFO S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_MOD_FIFO S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_MOD_FIFO S=0 C=0 TSE=T SLTH=F;
echo " L2_USER_ENTRY";
tr 71 M=L2_USER_ENTRY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_USER_ENTRY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_USER_ENTRY S=0 C=0 TSE=T SLTH=F;
echo " L2_USER_ENTRY_DATA_ONLY";
tr 71 M=L2_USER_ENTRY_DATA_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_USER_ENTRY_DATA_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_USER_ENTRY_DATA_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L2_USER_ENTRY_ONLY";
tr 71 M=L2_USER_ENTRY_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_USER_ENTRY_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_USER_ENTRY_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L3_DEFIP";
tr 71 M=L3_DEFIP S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_DEFIP S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_DEFIP S=0 C=0 TSE=T SLTH=F;
echo " L3_DEFIP_128";
tr 71 M=L3_DEFIP_128 S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_DEFIP_128 S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_DEFIP_128 S=0 C=0 TSE=T SLTH=F;
echo " L3_DEFIP_128_DATA_ONLY";
tr 71 M=L3_DEFIP_128_DATA_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_DEFIP_128_DATA_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_DEFIP_128_DATA_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L3_DEFIP_128_HIT_ONLY";
tr 71 M=L3_DEFIP_128_HIT_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_DEFIP_128_HIT_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_DEFIP_128_HIT_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L3_DEFIP_128_ONLY";
tr 71 M=L3_DEFIP_128_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_DEFIP_128_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_DEFIP_128_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L3_DEFIP_DATA_ONLY";
tr 71 M=L3_DEFIP_DATA_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_DEFIP_DATA_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_DEFIP_DATA_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L3_DEFIP_HIT_ONLY";
tr 71 M=L3_DEFIP_HIT_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_DEFIP_HIT_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_DEFIP_HIT_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L3_DEFIP_ONLY";
tr 71 M=L3_DEFIP_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_DEFIP_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_DEFIP_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L3_ECMP";
tr 71 M=L3_ECMP S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ECMP S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ECMP S=0 C=0 TSE=T SLTH=F;
echo " L3_ECMP_COUNT";
tr 71 M=L3_ECMP_COUNT S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ECMP_COUNT S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ECMP_COUNT S=0 C=0 TSE=T SLTH=F;
echo " L3_ENTRY_HIT_ONLY";
tr 71 M=L3_ENTRY_HIT_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ENTRY_HIT_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ENTRY_HIT_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L3_ENTRY_IPV4_MULTICAST";
tr 71 M=L3_ENTRY_IPV4_MULTICAST S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ENTRY_IPV4_MULTICAST S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ENTRY_IPV4_MULTICAST S=0 C=0 TSE=T SLTH=F;
echo " L3_ENTRY_IPV4_MULTICAST_SCRATCH";
tr 71 M=L3_ENTRY_IPV4_MULTICAST_SCRATCH S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ENTRY_IPV4_MULTICAST_SCRATCH S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ENTRY_IPV4_MULTICAST_SCRATCH S=0 C=0 TSE=T SLTH=F;
echo " L3_ENTRY_IPV4_UNICAST";
tr 71 M=L3_ENTRY_IPV4_UNICAST S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ENTRY_IPV4_UNICAST S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ENTRY_IPV4_UNICAST S=0 C=0 TSE=T SLTH=F;
echo " L3_ENTRY_IPV4_UNICAST_SCRATCH";
tr 71 M=L3_ENTRY_IPV4_UNICAST_SCRATCH S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ENTRY_IPV4_UNICAST_SCRATCH S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ENTRY_IPV4_UNICAST_SCRATCH S=0 C=0 TSE=T SLTH=F;
echo " L3_ENTRY_IPV6_MULTICAST";
tr 71 M=L3_ENTRY_IPV6_MULTICAST S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ENTRY_IPV6_MULTICAST S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ENTRY_IPV6_MULTICAST S=0 C=0 TSE=T SLTH=F;
echo " L3_ENTRY_IPV6_MULTICAST_SCRATCH";
tr 71 M=L3_ENTRY_IPV6_MULTICAST_SCRATCH S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ENTRY_IPV6_MULTICAST_SCRATCH S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ENTRY_IPV6_MULTICAST_SCRATCH S=0 C=0 TSE=T SLTH=F;
echo " L3_ENTRY_IPV6_UNICAST";
tr 71 M=L3_ENTRY_IPV6_UNICAST S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ENTRY_IPV6_UNICAST S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ENTRY_IPV6_UNICAST S=0 C=0 TSE=T SLTH=F;
echo " L3_ENTRY_IPV6_UNICAST_SCRATCH";
tr 71 M=L3_ENTRY_IPV6_UNICAST_SCRATCH S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ENTRY_IPV6_UNICAST_SCRATCH S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ENTRY_IPV6_UNICAST_SCRATCH S=0 C=0 TSE=T SLTH=F;
echo " L3_ENTRY_ONLY";
tr 71 M=L3_ENTRY_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ENTRY_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ENTRY_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L3_ENTRY_VALID_ONLY";
tr 71 M=L3_ENTRY_VALID_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_ENTRY_VALID_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_ENTRY_VALID_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L3_IIF";
tr 71 M=L3_IIF S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_IIF S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_IIF S=0 C=0 TSE=T SLTH=F;
echo " L3_IPMC";
tr 71 M=L3_IPMC S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_IPMC S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_IPMC S=0 C=0 TSE=T SLTH=F;
echo " L3_MTU_VALUES";
tr 71 M=L3_MTU_VALUES S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_MTU_VALUES S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_MTU_VALUES S=0 C=0 TSE=T SLTH=F;
echo " L3_TUNNEL";
tr 71 M=L3_TUNNEL S=0 C=0 TSE=F SLTH=T;
tr 71 M=L3_TUNNEL S=0 C=0 TSE=T SLTH=T;
tr 71 M=L3_TUNNEL S=0 C=0 TSE=T SLTH=F;
echo " LPORT";
tr 71 M=LPORT S=0 C=0 TSE=F SLTH=T;
tr 71 M=LPORT S=0 C=0 TSE=T SLTH=T;
tr 71 M=LPORT S=0 C=0 TSE=T SLTH=F;
echo " PORT_MAC_BLOCK";
tr 71 M=PORT_MAC_BLOCK S=0 C=0 TSE=F SLTH=T;
tr 71 M=PORT_MAC_BLOCK S=0 C=0 TSE=T SLTH=T;
tr 71 M=PORT_MAC_BLOCK S=0 C=0 TSE=T SLTH=F;
echo " MODPORT_MAP_EM";
tr 71 M=MODPORT_MAP_EM S=0 C=0 TSE=F SLTH=T;
tr 71 M=MODPORT_MAP_EM S=0 C=0 TSE=T SLTH=T;
tr 71 M=MODPORT_MAP_EM S=0 C=0 TSE=T SLTH=F;
echo " MODPORT_MAP_IM";
tr 71 M=MODPORT_MAP_IM S=0 C=0 TSE=F SLTH=T;
tr 71 M=MODPORT_MAP_IM S=0 C=0 TSE=T SLTH=T;
tr 71 M=MODPORT_MAP_IM S=0 C=0 TSE=T SLTH=F;
echo " MODPORT_MAP_SW";
tr 71 M=MODPORT_MAP_SW S=0 C=0 TSE=F SLTH=T;
tr 71 M=MODPORT_MAP_SW S=0 C=0 TSE=T SLTH=T;
tr 71 M=MODPORT_MAP_SW S=0 C=0 TSE=T SLTH=F;
echo " MPLS_ENTRY";
tr 71 M=MPLS_ENTRY S=0 C=0 TSE=F SLTH=T;
tr 71 M=MPLS_ENTRY S=0 C=0 TSE=T SLTH=T;
tr 71 M=MPLS_ENTRY S=0 C=0 TSE=T SLTH=F;
echo " MPLS_ENTRY_SCRATCH";
tr 71 M=MPLS_ENTRY_SCRATCH S=0 C=0 TSE=F SLTH=T;
tr 71 M=MPLS_ENTRY_SCRATCH S=0 C=0 TSE=T SLTH=T;
tr 71 M=MPLS_ENTRY_SCRATCH S=0 C=0 TSE=T SLTH=F;
echo " MPLS_STATION_TCAM";
tr 71 M=MPLS_STATION_TCAM S=0 C=0 TSE=F SLTH=T;
tr 71 M=MPLS_STATION_TCAM S=0 C=0 TSE=T SLTH=T;
tr 71 M=MPLS_STATION_TCAM S=0 C=0 TSE=T SLTH=F;
echo " NONUCAST_TRUNK_BLOCK_MASK";
tr 71 M=NONUCAST_TRUNK_BLOCK_MASK S=0 C=0 TSE=F SLTH=T;
tr 71 M=NONUCAST_TRUNK_BLOCK_MASK S=0 C=0 TSE=T SLTH=T;
tr 71 M=NONUCAST_TRUNK_BLOCK_MASK S=0 C=0 TSE=T SLTH=F;
echo " PORT_CBL_TABLE";
tr 71 M=PORT_CBL_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=PORT_CBL_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=PORT_CBL_TABLE S=0 C=0 TSE=T SLTH=F;
echo " COS_MAP";
tr 71 M=COS_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=COS_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=COS_MAP S=0 C=0 TSE=T SLTH=F;
echo " PORT_LAG_FAILOVER_SET";
tr 71 M=PORT_LAG_FAILOVER_SET S=0 C=0 TSE=F SLTH=T;
tr 71 M=PORT_LAG_FAILOVER_SET S=0 C=0 TSE=T SLTH=T;
tr 71 M=PORT_LAG_FAILOVER_SET S=0 C=0 TSE=T SLTH=F;
echo " MAC_LIMIT_COUNT_TABLE";
tr 71 M=MAC_LIMIT_COUNT_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=MAC_LIMIT_COUNT_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=MAC_LIMIT_COUNT_TABLE S=0 C=0 TSE=T SLTH=F;
echo " PORT_TRUNK_MAC_LIMIT_CONTROL_1";
tr 71 M=PORT_TRUNK_MAC_LIMIT_CONTROL_1 S=0 C=0 TSE=F SLTH=T;
tr 71 M=PORT_TRUNK_MAC_LIMIT_CONTROL_1 S=0 C=0 TSE=T SLTH=T;
tr 71 M=PORT_TRUNK_MAC_LIMIT_CONTROL_1 S=0 C=0 TSE=T SLTH=F;
echo " PORT";
tr 71 M=PORT S=0 C=0 TSE=F SLTH=T;
tr 71 M=PORT S=0 C=0 TSE=T SLTH=T;
tr 71 M=PORT S=0 C=0 TSE=T SLTH=F;
echo " SOURCE_TRUNK_MAP";
tr 71 M=SOURCE_TRUNK_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=SOURCE_TRUNK_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=SOURCE_TRUNK_MAP S=0 C=0 TSE=T SLTH=F;
echo " SOURCE_VP";
tr 71 M=SOURCE_VP S=0 C=0 TSE=F SLTH=T;
tr 71 M=SOURCE_VP S=0 C=0 TSE=T SLTH=T;
tr 71 M=SOURCE_VP S=0 C=0 TSE=T SLTH=F;
echo " SRC_MODID_BLOCK";
tr 71 M=SRC_MODID_BLOCK S=0 C=0 TSE=F SLTH=T;
tr 71 M=SRC_MODID_BLOCK S=0 C=0 TSE=T SLTH=T;
tr 71 M=SRC_MODID_BLOCK S=0 C=0 TSE=T SLTH=F;
echo " VLAN_STG";
tr 71 M=VLAN_STG S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_STG S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_STG S=0 C=0 TSE=T SLTH=F;
echo " SYSTEM_CONFIG_TABLE";
tr 71 M=SYSTEM_CONFIG_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=SYSTEM_CONFIG_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=SYSTEM_CONFIG_TABLE S=0 C=0 TSE=T SLTH=F;
echo " TCP_FN";
tr 71 M=TCP_FN S=0 C=0 TSE=F SLTH=T;
tr 71 M=TCP_FN S=0 C=0 TSE=T SLTH=T;
tr 71 M=TCP_FN S=0 C=0 TSE=T SLTH=F;
echo " TOS_FN";
tr 71 M=TOS_FN S=0 C=0 TSE=F SLTH=T;
tr 71 M=TOS_FN S=0 C=0 TSE=T SLTH=T;
tr 71 M=TOS_FN S=0 C=0 TSE=T SLTH=F;
echo " TRUNK32_CONFIG_TABLE";
tr 71 M=TRUNK32_CONFIG_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=TRUNK32_CONFIG_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=TRUNK32_CONFIG_TABLE S=0 C=0 TSE=T SLTH=F;
echo " TRUNK32_PORT_TABLE";
tr 71 M=TRUNK32_PORT_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=TRUNK32_PORT_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=TRUNK32_PORT_TABLE S=0 C=0 TSE=T SLTH=F;
echo " TRUNK_BITMAP";
tr 71 M=TRUNK_BITMAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=TRUNK_BITMAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=TRUNK_BITMAP S=0 C=0 TSE=T SLTH=F;
echo " TRUNK_CBL_TABLE";
tr 71 M=TRUNK_CBL_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=TRUNK_CBL_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=TRUNK_CBL_TABLE S=0 C=0 TSE=T SLTH=F;
echo " PORT_TRUNK_EGRESS";
tr 71 M=PORT_TRUNK_EGRESS S=0 C=0 TSE=F SLTH=T;
tr 71 M=PORT_TRUNK_EGRESS S=0 C=0 TSE=T SLTH=T;
tr 71 M=PORT_TRUNK_EGRESS S=0 C=0 TSE=T SLTH=F;
echo " TRUNK_GROUP";
tr 71 M=TRUNK_GROUP S=0 C=0 TSE=F SLTH=T;
tr 71 M=TRUNK_GROUP S=0 C=0 TSE=T SLTH=T;
tr 71 M=TRUNK_GROUP S=0 C=0 TSE=T SLTH=F;
echo " TTL_FN";
tr 71 M=TTL_FN S=0 C=0 TSE=F SLTH=T;
tr 71 M=TTL_FN S=0 C=0 TSE=T SLTH=T;
tr 71 M=TTL_FN S=0 C=0 TSE=T SLTH=F;
echo " VFI";
tr 71 M=VFI S=0 C=0 TSE=F SLTH=T;
tr 71 M=VFI S=0 C=0 TSE=T SLTH=T;
tr 71 M=VFI S=0 C=0 TSE=T SLTH=F;
echo " VFP_POLICY_TABLE";
tr 71 M=VFP_POLICY_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=VFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=VFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=F;
echo " VFP_TCAM";
tr 71 M=VFP_TCAM S=0 C=0 TSE=F SLTH=T;
tr 71 M=VFP_TCAM S=0 C=0 TSE=T SLTH=T;
tr 71 M=VFP_TCAM S=0 C=0 TSE=T SLTH=F;
echo " VLAN_COS_MAP";
tr 71 M=VLAN_COS_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_COS_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_COS_MAP S=0 C=0 TSE=T SLTH=F;
echo " VLAN_MAC";
tr 71 M=VLAN_MAC S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_MAC S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_MAC S=0 C=0 TSE=T SLTH=F;
echo " VLAN_MAC_SCRATCH";
tr 71 M=VLAN_MAC_SCRATCH S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_MAC_SCRATCH S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_MAC_SCRATCH S=0 C=0 TSE=T SLTH=F;
echo " VLAN_OR_VFI_MAC_COUNT";
tr 71 M=VLAN_OR_VFI_MAC_COUNT S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_OR_VFI_MAC_COUNT S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_OR_VFI_MAC_COUNT S=0 C=0 TSE=T SLTH=F;
echo " VLAN_OR_VFI_MAC_LIMIT";
tr 71 M=VLAN_OR_VFI_MAC_LIMIT S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_OR_VFI_MAC_LIMIT S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_OR_VFI_MAC_LIMIT S=0 C=0 TSE=T SLTH=F;
echo " VLAN_PROFILE_2";
tr 71 M=VLAN_PROFILE_2 S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_PROFILE_2 S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_PROFILE_2 S=0 C=0 TSE=T SLTH=F;
echo " VLAN_PROFILE";
tr 71 M=VLAN_PROFILE S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_PROFILE S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_PROFILE S=0 C=0 TSE=T SLTH=F;
echo " VLAN_PROTOCOL";
tr 71 M=VLAN_PROTOCOL S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_PROTOCOL S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_PROTOCOL S=0 C=0 TSE=T SLTH=F;
echo " VLAN_PROTOCOL_DATA";
tr 71 M=VLAN_PROTOCOL_DATA S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_PROTOCOL_DATA S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_PROTOCOL_DATA S=0 C=0 TSE=T SLTH=F;
echo " VLAN_SUBNET";
tr 71 M=VLAN_SUBNET S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_SUBNET S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_SUBNET S=0 C=0 TSE=T SLTH=F;
echo " VLAN_SUBNET_DATA_ONLY";
tr 71 M=VLAN_SUBNET_DATA_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_SUBNET_DATA_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_SUBNET_DATA_ONLY S=0 C=0 TSE=T SLTH=F;
echo " VLAN_SUBNET_ONLY";
tr 71 M=VLAN_SUBNET_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_SUBNET_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_SUBNET_ONLY S=0 C=0 TSE=T SLTH=F;
echo " VLAN";
tr 71 M=VLAN S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN S=0 C=0 TSE=T SLTH=F;
echo " VLAN_XLATE";
tr 71 M=VLAN_XLATE S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_XLATE S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_XLATE S=0 C=0 TSE=T SLTH=F;
echo " VLAN_XLATE_SCRATCH";
tr 71 M=VLAN_XLATE_SCRATCH S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_XLATE_SCRATCH S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_XLATE_SCRATCH S=0 C=0 TSE=T SLTH=F;
$done

# Re-initialize to clean up of various read/wrires to MMU memories
set rct=true
rcload rc.soc
counter off
l2mode off
linkscan off

echo "Running counter width verification test ..."
tr 30
$done

echo "Running counter read/write test ..."
tr 31
$done

#L2/L3 hashing tests
echo "Running L2 insert/delete/lookup test ..."
tr 32
$done

echo "Running L2 overflow insert test ..."
tr 33
$done

echo "Running L2 hash test ..."
tr 34
$done

echo "Running L2 delete by port test ..."
tr 35
$done

echo "Running L2 delete by vlan test ..."
tr 36
$done

echo "Running IPV4 overflow insert test ..."
tr 87 IPMCEnable=False
tr 87 IPMCEnable=True
$done

echo "Running IPV6 hash test ..."
tr 88 IPMCEnable=False
tr 88 IPMCEnable=True
$done

echo "Running IPV6 overflow insert test ..."
tr 85 IPMCEnable=False
tr 85 IPMCEnable=True
$done

echo "Running IPV6 hash test ..."
tr 86 IPMCEnable=False
tr 86 IPMCEnable=True
$done

echo "Running VLAN translate overflow insert test ..."
tr 100

echo "Running VLAN translate hash tests ..."
tr 101 hash=0
tr 101 hash=1
tr 101 hash=2
tr 101 hash=3
tr 101 hash=4
tr 101 hash=5
$done

echo "Running Egress VLAN translate overflow insert test ..."
tr 102
$done

echo "Running Egress VLAN translate hash tests ..."
tr 103 hash=0
tr 103 hash=1
tr 103 hash=2
tr 103 hash=3
tr 103 hash=4
tr 103 hash=5
$done

echo "Running MPLS overflow insert test ..."
tr 104
$done

echo "Running MPLS hash tests ..."
tr 105 hash=0
tr 105 hash=1
tr 105 hash=2
tr 105 hash=3
tr 105 hash=4
tr 105 hash=5
$done

echo "Running MDIO Linkscan test"
tr 60 readcount=10000
$done

echo "Testing CPU DMA loopback ..."
tr 17 c=5
$done

echo "Testing CPU DMA, Scatter/Gather Reload ..."
tr 22
$done

echo "Testing CPU DMA, Scatter/Gather Simple ..."
tr 23
$done

echo "Testing CPU DMA, Scatter/Gather Random ..."
tr 24
$done

#MAC Loopback
if $?BCM56680 || $?BCM56684 \
    'echo "Testing MAC Loopback - 10 Mb/s all GE ports"; \
     tr 18 pbm=ge speed=10; \
     $done'

if $?BCM56680 || $?BCM56684 \
    'echo "Testing MAC Loopback - 100 Mb/s all GE ports"; \
     tr 18 pbm=ge speed=100; \
     $done'

if $?BCM56680 || $?BCM56684 \
    'echo "Testing MAC Loopback - 1000 Mb/s all GE ports"; \
     tr 18 pbm=ge speed=1000; \
     $done'

if $?BCM56680 || $?BCM56684 \
    'echo "Testing MAC Loopback - 2500 Mb/s all 2.5GE ports"; \
     tr 18 pbm=0xf81f0c0fc0fc speed=2500; \
     $done'

echo "Testing MAC Loopback - 10 Gb/s all XE ports"
tr 18 pbm=xe speed=10G
$done

echo "Testing MAC Loopback - 10 Gb/s all HG ports"
tr 18 pbm=hg speed=10G
$done

echo "Testing MAC Loopback - 12 Gb/s all HG ports"
tr 18 pbm=hg speed=12G
$done

#PHY Loopback
if $?BCM56680 || $?BCM56684 \
    'echo "Testing PHY Loopback - 1000 Mb/s all GE ports"; \
     tr 19 pbm=ge speed=1000; \
     $done'

if $?BCM56680 || $?BCM56684 \
    'echo "Testing PHY Loopback - 2500 Mb/s all GE ports"; \
     tr 19 pbm=ge speed=max; \
     $done'

echo "Testing PHY Loopback - 10 Gb/s all XE ports"
tr 19 pbm=xe speed=10G
$done

echo "Testing PHY Loopback - 10 Gb/s all HG ports"
tr 19 pbm=hg speed=10G
$done

echo "Testing PHY Loopback - 12 Gb/s all HG ports"
tr 19 pbm=hg speed=12G
$done

# Self External Loopback
#  If you have external self-loopback cables connected
#  before running this script, use:
#       setenv extSelf   1
#
if $?extSelf \
    'echo "Testing EXT Loopback - 2500 Mb/s all 2.5GE ports"; \
     tr 19 pbm=0xf81f0c0fc0fc speed=2500 ExtselfloopPBM=0xf81f0c0fc0fc; \
     $done'

if $?BCM56680 || $?BCM56684 \
    'echo "Running MAC loopback V2 on all ports ..."; \
     tr 48 smi=103 dmi=42 vlan=5 pi=0x11335577 sendm=single; \
     $done'

if $?BCM56680 || $?BCM56684 \
    'echo "Running PHY loopback V2 on all ports ..."; \
     tr 49 smi=52 dmi=83 vlan=23 pi=0x01204007; \
     $done'

#Internal snake Loopback 
if $?BCM56680 || $?BCM56684 \
    'echo "Running internal snake on all 2.5GE ports, MAC loopback ..."; \
     tr 39 pbm=0xf81f0c0fc0fc loopbackmode=mac snakepath=two speed=2500 AutoNeg=false; \
     $done'

if $?BCM56680 || $?BCM56684 \
    'echo "Running internal snake on all 2.5GE ports, PHY loopback ..."; \
    tr 39 pbm=0xf81f0c0fc0fc loopbackmode=phy snakepath=two speed=max AutoNeg=false; \
     $done'

if $?BCM56680 \
    'echo "Running internal snake on ports at 1G speed, MAC loopback ..."; \
    tr 39 loopbackmode=mac snakepath=two PBM=0x6 speed=1000 AutoNeg=false;   \
    $done'

if $?BCM56680 \
    'echo "Running internal snake on ports at 1G speed, PHY loopback ..."; \
    tr 39 loopbackmode=phy snakepath=two PBM=0x6 speed=1000 AutoNeg=false;   \
    $done'

#Traffic Test
if $?BCM56680 || $?BCM56684 \
    'echo "Running Traffic Test in MAC mode ..."; \
     tr 72 pbm=0xf81f0c0fc0fc RM=MAC; \
     $done'

if $?BCM56680 || $?BCM56684 \
    'echo "Running Traffic Test in PHY mode ..."; \
     tr 72 pbm=0xf81f0c0fc0fc RM=PHY; \
     $done'

#External Loopback
# If you have external loopback cables connected as follows
#        2-3   4-5   6-7  18-19 14-15 16-17
#       26-32 33-34 26-32 33-34 41-42 48-49
# Back panel HG ports: 28-29 30-31
#
# then you can enable this script to perform external loopback at
# different speeds.  Before running this script, use:
#       setenv ext1000 1
#       setenv ext2500 1
#       setenv extb10G 1
#       setenv extb12G 1
# or
#       setenv extall  1

#External Loopback on GE port
local ge_fwd 0x0
local ge_bwd 0x0
if $?BCM56680 || $?BCM56684 \
    'local ge_fwd 0x00501504054054; \
     local ge_bwd 0x00a80a080a80a8'

#External Loopback on back panel HG port
local hg_fwd 0x50000000
local hg_bwd 0xa0000000

if $?extall \
        "local ext1000 1; local ext2500 1; local extb10G 1"

if $?ext1000 \
    "echo Testing GE ports External Loopback - 1000 MB/s forward; \
     tr 20 tpbm=$ge_fwd di=1 speed=1000 count=10; \
     echo Testing GE ports External Loopback - 1000 MB/s reverse; \
     tr 20 tpbm=$ge_bwd di=-1 speed=1000 count=10"

if $?ext2500 \
    "echo Testing GE ports External Loopback - 2500 MB/s forward; \
     tr 20 tpbm=$ge_fwd di=1 speed=2500 count=10; \
     echo Testing GE ports External Loopback - 2500 MB/s reverse; \
     tr 20 tpbm=$ge_bwd di=-1 speed=2500 count=10"

if $?extb10G \
    "echo Testing Back Panel 10G ports External Loopback - 10 GB/s forward; \
     tr 20 tpbm=$hg_fwd di=1 speed=10G count=10; \
     echo Testing Back Panel 10G ports External Loopback - 10 GB/s reverse; \
     tr 20 tpbm=$hg_bwd di=-1 speed=10G count=10"

if $?extb12G \
    "echo Testing Back Panel 10G ports External Loopback - 12 GB/s forward; \
     tr 20 tpbm=$hg_fwd di=1 speed=12G count=10; \
     echo Testing Back Panel 10G ports External Loopback - 12 GB/s reverse; \
     tr 20 tpbm=$hg_bwd di=-1 speed=12G count=10"

# Show status
date
tl
local returnCode $?

echo Tests Complete.  Reinitializing ...
config refresh
rcload rc.soc
counter off
l2mode off

# We want to show the return code from the tl command which
# lists the results. The automated test infrastructure keys off of this
# value
echo "testsuite: finished: sanity: $returnCode"
