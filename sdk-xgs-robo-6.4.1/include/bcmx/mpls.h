/*
 * $Id: a5f3eb862032e8de21579d817512d9325c774264 $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCMX_MPLS_H__
#define __BCMX_MPLS_H__

#if defined(INCLUDE_L3)

#include <bcm/types.h>
#include <bcmx/bcmx.h>
#include <bcmx/lplist.h>
#include <bcmx/l3.h>
#include <bcm/mpls.h>

/* MPLS VPN Config Structure */
typedef bcm_mpls_vpn_config_t bcmx_mpls_vpn_config_t;

/* MPLS Port Structure */
typedef bcm_mpls_port_t bcmx_mpls_port_t;

/* MPLS Egress Label Structure */
typedef bcm_mpls_egress_label_t bcmx_mpls_egress_label_t;

/* MPLS Tunnel Switch Structure */
typedef bcm_mpls_tunnel_switch_t bcmx_mpls_tunnel_switch_t;

/* Initialize the MPLS VPN config structure. */
extern void bcmx_mpls_vpn_config_t_init(
    bcmx_mpls_vpn_config_t *info);

/* Initialize the MPLS port structure. */
extern void bcmx_mpls_port_t_init(
    bcmx_mpls_port_t *mpls_port);

/* Initialize the MPLS egress label structure. */
extern void bcmx_mpls_egress_label_t_init(
    bcmx_mpls_egress_label_t *label);

/* Initialize the MPLS tunnel switch structure. */
extern void bcmx_mpls_tunnel_switch_t_init(
    bcmx_mpls_tunnel_switch_t *info);

/* Initialize the MPLS subsystem. */
extern int bcmx_mpls_init(void);

/* Detach the MPLS software module. */
extern int bcmx_mpls_cleanup(void);

extern int bcmx_mpls_vpn_id_create(
    bcmx_mpls_vpn_config_t *info);

extern int bcmx_mpls_vpn_id_destroy(
    bcm_vpn_t vpn);

extern int bcmx_mpls_vpn_id_destroy_all(void);

extern int bcmx_mpls_vpn_id_get(
    bcm_vpn_t vpn, 
    bcmx_mpls_vpn_config_t *info);

/* Add a MPLS logical port to the specified VPN */
extern int bcmx_mpls_port_add(
    bcm_vpn_t vpn, 
    bcmx_mpls_port_t *mpls_port);

/* Delete the given MPLS logical port from the specified VPN */
extern int bcmx_mpls_port_delete(
    bcm_vpn_t vpn, 
    bcm_gport_t mpls_port_id);

extern int bcmx_mpls_port_delete_all(
    bcm_vpn_t vpn);

extern int bcmx_mpls_port_get(
    bcm_vpn_t vpn, 
    bcmx_mpls_port_t *mpls_port);

extern int bcmx_mpls_port_get_all(
    bcm_vpn_t vpn, 
    int port_max, 
    bcmx_mpls_port_t *port_array, 
    int *port_count);

extern int bcmx_mpls_tunnel_initiator_set(
    bcm_if_t intf, 
    int num_labels, 
    bcmx_mpls_egress_label_t *label_array);

extern int bcmx_mpls_tunnel_initiator_clear(
    bcm_if_t intf);

extern int bcmx_mpls_tunnel_initiator_clear_all(void);

extern int bcmx_mpls_tunnel_initiator_get(
    bcm_if_t intf, 
    int label_max, 
    bcmx_mpls_egress_label_t *label_array, 
    int *label_count);

extern int bcmx_mpls_tunnel_switch_add(
    bcmx_mpls_tunnel_switch_t *info);

extern int bcmx_mpls_tunnel_switch_delete(
    bcmx_mpls_tunnel_switch_t *info);

extern int bcmx_mpls_tunnel_switch_delete_all(void);

extern int bcmx_mpls_tunnel_switch_get(
    bcmx_mpls_tunnel_switch_t *info);

/* Create an MPLS EXP map instance. */
extern int bcmx_mpls_exp_map_create(
    uint32 flags, 
    int *exp_map_id);

/* Destroy an MPLS EXP map instance. */
extern int bcmx_mpls_exp_map_destroy(
    int exp_map_id);

/* 
 * Set the { internal priority, color }-to-EXP mapping in the specified
 * EXP map.
 */
extern int bcmx_mpls_exp_map_set(
    int exp_map_id, 
    bcm_mpls_exp_map_t *exp_map);

/* 
 * Get the { internal priority, color }-to-EXP mapping in the specified
 * EXP map.
 */
extern int bcmx_mpls_exp_map_get(
    int exp_map_id, 
    bcm_mpls_exp_map_t *exp_map);

extern int bcmx_mpls_label_stat_get(
    bcm_mpls_label_t label, 
    bcm_gport_t port, 
    bcm_mpls_stat_t stat, 
    uint64 *val);

extern int bcmx_mpls_label_stat_get32(
    bcm_mpls_label_t label, 
    bcm_gport_t port, 
    bcm_mpls_stat_t stat, 
    uint32 *val);

extern int bcmx_mpls_label_stat_clear(
    bcm_mpls_label_t label, 
    bcm_gport_t port, 
    bcm_mpls_stat_t stat);

#endif /* defined(INCLUDE_L3) */

#endif /* __BCMX_MPLS_H__ */
