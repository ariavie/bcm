/*
 * $Id: 35b24643548fe3c6813e68a043819363ec4351a3 $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_MIRROR_H__
#define __BCM_MIRROR_H__

#include <bcm/types.h>
#include <bcm/pkt.h>

/* Mirror modes for bcm_mirror_mode_set/get. */
#define BCM_MIRROR_DISABLE      0          /* Disable mirroring. */
#define BCM_MIRROR_L2           1          /* Enable mirroring. */
#define BCM_MIRROR_L2_L3        2          /* Deprecated. */

/* Flags for bcm_mirror_port_set/get. */
#define BCM_MIRROR_PORT_ENABLE      0x00000001 /* Enable mirroring. */
#define BCM_MIRROR_PORT_INGRESS     0x00000002 /* Ingress mirroring. */
#define BCM_MIRROR_PORT_EGRESS      0x00000004 /* Egress mirroring. */
#define BCM_MIRROR_PORT_EGRESS_TRUE 0x00000008 /* True egress mirroring. */
#define BCM_MIRROR_PORT_DEST_TRUNK  0x00000010 /* Parameter dest_port is a
                                                  trunk. */
#define BCM_MIRROR_PORT_EGRESS_ACL  0x00000020 /* Enable Egress Mirroring for
                                                  ACLs */

/* Flags for bcm_mirror_destination_create/traverse. */
#define BCM_MIRROR_DEST_REPLACE             (1 << 0)   /* Replace mirror
                                                          destination. */
#define BCM_MIRROR_DEST_WITH_ID             (1 << 1)   /* Mirror destination id
                                                          is valid. */
#define BCM_MIRROR_DEST_TUNNEL_L2           (1 << 2)   /* Mirrored packet should
                                                          be L2 tunneled. */
#define BCM_MIRROR_DEST_TUNNEL_IP_GRE       (1 << 3)   /* Mirrored packet should
                                                          be L3 GRE tunneled. */
#define BCM_MIRROR_DEST_PAYLOAD_UNTAGGED    (1 << 4)   /* Strip vlan tag from
                                                          mirrored packet. */
#define BCM_MIRROR_DEST_TUNNEL_TRILL        (1 << 5)   /* Mirrored packet should
                                                          be TRILL tunneled. */
#define BCM_MIRROR_DEST_TUNNEL_NIV          (1 << 6)   /* Mirrored packet should
                                                          be NIV tunneled. */
#define BCM_MIRROR_DEST_UPDATE_POLICER      (1 << 7)   /* update policer using
                                                          policer_id */
#define BCM_MIRROR_DEST_UPDATE_COUNTER      (1 << 8)   /* update counter using
                                                          stat_id */
#define BCM_MIRROR_DEST_DEST_MULTICAST      (1 << 9)   /* destination is ingress
                                                          multicast */
#define BCM_MIRROR_DEST_TUNNEL_WITH_ENCAP_ID (1 << 10)  /* Mirror destination
                                                          encap_id is valid */
#define BCM_MIRROR_DEST_TUNNEL_WITH_SPAN_ID (1 << 11)  /* Mirrored packet should
                                                          be with ERSPAN
                                                          encapsulation */
#define BCM_MIRROR_DEST_TUNNEL_RSPAN        (1 << 12)  /* Mirrored packet should
                                                          be RSPAN (VLAN)
                                                          tunneled */
#define BCM_MIRROR_DEST_INT_PRI_SET         (1 << 13)  /* Mirrored packet should
                                                          set with internal
                                                          priority */
#define BCM_MIRROR_DEST_TUNNEL_ETAG         (1 << 14)  /* Mirrored packet should
                                                          be ETAG tunneled. */
#define BCM_MIRROR_DEST_IS_SNOOP            (1 << 15)  /* Specify that the
                                                          destination type is a
                                                          snoop destination. */
#define BCM_MIRROR_DEST_IS_TRAP             (1 << 16)  /* Specify that the
                                                          destination is a trap
                                                          destination. */
#define BCM_MIRROR_DEST_EGRESS_ADD_ORIG_SYSTEM_HEADER (1 << 17)  /* The start of the
                                                          original packet system
                                                          header will be
                                                          included in the
                                                          outbound mirrored
                                                          packets. */

/* Flags for mirror NIV tunneling */
#define BCM_MIRROR_NIV_LOOP     1          /* Mirrored packet is a loop in NIV
                                              path */

/*  represents the options for the mirroring of packets */
typedef struct bcm_mirror_options_s {
    uint32 flags; 
    uint8 forward_strength; 
    uint8 copy_strength; 
} bcm_mirror_options_t;

/*   represents header updates of mirrored packets */
typedef struct bcm_mirror_pkt_header_updates_s {
    uint32 valid;                   /* Used to specify which fields to use for
                                       header changes. Possible values will be
                                       named BCM_MIRROR_PKT_HEADER_UPDATE_* */
    bcm_color_t color;              /* drop precedence */
    uint8 prio;                     /* the internal packet priority (traffic
                                       class before ingress mapping to cosq) */
    uint8 ecn_value;                /* ECN capable and congestion encoding */
    uint8 cnm_cancel;               /* Ignore Congestion Point (CNM) */
    uint32 trunk_hash_result;       /* LAG load balancing key */
    bcm_gport_t in_port;            /* 8b should be exposed? */
    uint16 vsq;                     /*  selects STF (statistics flow) VSQ */
    uint16 fabric_header_editing;   /* changes to the fabric headers */
} bcm_mirror_pkt_header_updates_t;

/* 
 * Mirror destination Structure
 * 
 * Contains information required for manipulating mirror destinations.
 */
typedef struct bcm_mirror_destination_s {
    bcm_gport_t mirror_dest_id;         /* Unique mirror destination and
                                           encapsulation identifier. */
    uint32 flags;                       /* See BCM_MIRROR_DEST_xxx flag
                                           definitions. */
    bcm_gport_t gport;                  /* Mirror destination. */
    uint8 version;                      /* IP header version. */
    uint8 tos;                          /* Traffic Class/Tos byte. */
    uint8 ttl;                          /* Hop limit. */
    bcm_ip_t src_addr;                  /* Tunnel source ip address (IPv4). */
    bcm_ip_t dst_addr;                  /* Tunnel destination ip address (IPv4). */
    bcm_ip6_t src6_addr;                /* Tunnel source ip address (IPv6). */
    bcm_ip6_t dst6_addr;                /* Tunnel destination ip address (IPv6). */
    uint32 flow_label;                  /* IPv6 header flow label field. */
    bcm_mac_t src_mac;                  /* L2 source mac address. */
    bcm_mac_t dst_mac;                  /* L2 destination mac address. */
    uint16 tpid;                        /* L2 header outer TPID. */
    bcm_vlan_t vlan_id;                 /* Vlan id. */
    bcm_trill_name_t trill_src_name;    /* TRILL source bridge nickname */
    bcm_trill_name_t trill_dst_name;    /* TRILL destination bridge nickname */
    int trill_hopcount;                 /* TRILL hop count */
    uint16 niv_src_vif;                 /* Source Virtual Interface of NIV tag */
    uint16 niv_dst_vif;                 /* Destination Virtual Interface of NIV
                                           tag */
    uint32 niv_flags;                   /* NIV flags BCM_MIRROR_NIV_XXX */
    uint16 gre_protocol;                /* L3 GRE header protocol */
    bcm_policer_t policer_id;           /* policer_id */
    int stat_id;                        /* stat_id */
    bcm_if_t encap_id;                  /* Encapsulation index */
    bcm_if_t tunnel_id;                 /* IP tunnel for encapsulation. Valid
                                           only if BCM_MIRROR_DEST_TUNNEL_IP_GRE
                                           is set */
    uint16 span_id;                     /* SPAN-ID. Valid only if
                                           BCM_MIRROR_DEST_TUNNEL_WITH_SPAN_ID
                                           is set */
    uint8 pkt_prio;                     /* L2 header PCP */
    uint32 sample_rate_dividend;        /* The probability of mirroring a packet
                                           is: sample_rate_dividend >=
                                           sample_rate_divisor ? 1 :
                                           sample_rate_dividend /
                                           sample_rate_divisor */
    uint32 sample_rate_divisor; 
    uint8 int_pri;                      /* Internal Priority */
    uint16 etag_src_vid;                /* Extended (source) port vlan id */
    uint16 etag_dst_vid;                /* Extended (destination) port vlan id */
    uint32 egress_sample_rate_dividend; /* The probability of outbound mirroring
                                           a packet from the destination is
                                           sample_rate_dividend >=
                                           sample_rate_divisor ? 1 :
                                           sample_rate_dividend /
                                           sample_rate_divisor */
    uint32 egress_sample_rate_divisor; 
    uint8 recycle_context;              /* recycle context of egress originating
                                           packets */
    uint16 packet_copy_size;            /*  If non zero, the copied packet will
                                           be truncated to the first
                                           packet_copy_size . Current supported
                                           values for DNX are 0, 64, 128, 192 */
    uint16 egress_packet_copy_size;     /* If non zero and the packet is copied
                                           from the egress, the packet will be
                                           truncated to the first
                                           packet_copy_size . Current supported
                                           values for DNX are 0, 256. */
    bcm_mirror_pkt_header_updates_t packet_control_updates; 
} bcm_mirror_destination_t;

/* Mirror destination callback function prototype. */
typedef int (*bcm_mirror_destination_traverse_cb)(
    int unit, 
    bcm_mirror_destination_t *mirror_dest, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the mirroring module to its initial configuration. */
extern int bcm_mirror_init(
    int unit);

/* Set the current mirroring mode for the device. */
extern int bcm_mirror_mode_set(
    int unit, 
    int mode);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize a bcm_mirror_options_t structure. */
extern void bcm_mirror_options_t_init(
    bcm_mirror_options_t *mirror_dest);

/* Initialize a bcm_mirror_pkt_header_updates_t  structure. */
extern void bcm_mirror_pkt_header_updates_t_init(
    bcm_mirror_pkt_header_updates_t *mirror_dest);

/* Initialize a bcm_bcm_mirror_destination_t structure. */
extern void bcm_mirror_destination_t_init(
    bcm_mirror_destination_t *mirror_dest);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a mirror (destination, encapsulation) pair. */
extern int bcm_mirror_destination_create(
    int unit, 
    bcm_mirror_destination_t *mirror_dest);

/* Get  mirror (destination, encapsulation) pair. */
extern int bcm_mirror_destination_get(
    int unit, 
    bcm_gport_t mirror_dest_id, 
    bcm_mirror_destination_t *mirror_dest);

/* Destroy a mirror (destination, encapsulation) pair. */
extern int bcm_mirror_destination_destroy(
    int unit, 
    bcm_gport_t mirror_dest_id);

/* Traverse installed mirror destinations. */
extern int bcm_mirror_destination_traverse(
    int unit, 
    bcm_mirror_destination_traverse_cb cb, 
    void *user_data);

/* Get the current mirroring mode for the device. */
extern int bcm_mirror_mode_get(
    int unit, 
    int *mode);

/* Set the mirror-to port for the device. */
extern int bcm_mirror_to_set(
    int unit, 
    bcm_port_t port);

/* Get the mirror-to port for the device. */
extern int bcm_mirror_to_get(
    int unit, 
    bcm_port_t *port);

/* Enable or Disable ingress mirroring for a port on the device. */
extern int bcm_mirror_ingress_set(
    int unit, 
    bcm_port_t port, 
    int val);

/* 
 * Get the ingress mirroring enabled/disabled status for a port on the
 * device.
 */
extern int bcm_mirror_ingress_get(
    int unit, 
    bcm_port_t port, 
    int *val);

/* Enable or Disable egress mirroring for a port on the device. */
extern int bcm_mirror_egress_set(
    int unit, 
    bcm_port_t port, 
    int val);

/* 
 * Get the egress mirroring enabled/disabled status for a port on the
 * device.
 */
extern int bcm_mirror_egress_get(
    int unit, 
    bcm_port_t port, 
    int *val);

/* Set the mirror-to port bitmap for the device. */
extern int bcm_mirror_to_pbmp_set(
    int unit, 
    bcm_port_t port, 
    bcm_pbmp_t pbmp);

/* Get the mirror-to port bitmap for the device. */
extern int bcm_mirror_to_pbmp_get(
    int unit, 
    bcm_port_t port, 
    bcm_pbmp_t *pbmp);

/* Set mirroring configuration for a port. */
extern int bcm_mirror_port_set(
    int unit, 
    bcm_port_t port, 
    bcm_module_t dest_mod, 
    bcm_port_t dest_port, 
    uint32 flags);

/* Get mirroring configuration for a port. */
extern int bcm_mirror_port_get(
    int unit, 
    bcm_port_t port, 
    bcm_module_t *dest_mod, 
    bcm_port_t *dest_port, 
    uint32 *flags);

/* Set VLAN for egressing mirrored packets on a port (RSPAN). */
extern int bcm_mirror_vlan_set(
    int unit, 
    bcm_port_t port, 
    uint16 tpid, 
    uint16 vlan);

/* Get VLAN for egressing mirrored packets on a port (RSPAN). */
extern int bcm_mirror_vlan_get(
    int unit, 
    bcm_port_t port, 
    uint16 *tpid, 
    uint16 *vlan);

/* bcm_mirror_port_dest_add */
extern int bcm_mirror_port_dest_add(
    int unit, 
    bcm_port_t port, 
    uint32 flags, 
    bcm_gport_t mirror_dest_id);

/* 
 * An extended version of bcm_mirror_port_dest_add using a
 * bcm_mirror_options_t argument
 */
extern int bcm_mirror_port_destination_add(
    int unit, 
    bcm_port_t port, 
    uint32 flags, 
    bcm_gport_t mirror_dest, 
    bcm_mirror_options_t options);

/* bcm_mirror_port_dest_delete */
extern int bcm_mirror_port_dest_delete(
    int unit, 
    bcm_port_t port, 
    uint32 flags, 
    bcm_gport_t mirror_dest_id);

/* bcm_mirror_port_dest_delete_all */
extern int bcm_mirror_port_dest_delete_all(
    int unit, 
    bcm_port_t port, 
    uint32 flags);

/* bcm_mirror_port_dest_get */
extern int bcm_mirror_port_dest_get(
    int unit, 
    bcm_port_t port, 
    uint32 flags, 
    int mirror_dest_size, 
    bcm_gport_t *mirror_dest, 
    int *mirror_dest_count);

/* 
 * An extended version of bcm_mirror_port_dest_get using a
 * bcm_mirror_options_t argument
 */
extern int bcm_mirror_port_destination_get(
    int unit, 
    bcm_port_t port, 
    uint32 flags, 
    int mirror_dest_size, 
    bcm_gport_t *mirror_dest, 
    int *mirror_dest_count, 
    bcm_mirror_options_t *options);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Backward compatibility. */
#define bcm_mirror_mode         bcm_mirror_mode_set 

#ifndef BCM_HIDE_DISPATCHABLE

/* Set mirroring configuration for a port-vlan. */
extern int bcm_mirror_port_vlan_set(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    bcm_gport_t destport, 
    uint32 flags);

/* Get mirroring configuration for a port-vlan. */
extern int bcm_mirror_port_vlan_get(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    bcm_gport_t *dest_port, 
    uint32 *flags);

/* mirror_port_vlan_dest_add */
extern int bcm_mirror_port_vlan_dest_add(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    uint32 flags, 
    bcm_gport_t destid);

/* 
 * An extended version of  mirror_port_vlan_dest_add using a
 * bcm_mirror_options_t argument
 */
extern int bcm_mirror_port_vlan_destination_add(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    uint32 flags, 
    bcm_gport_t destid, 
    bcm_mirror_options_t options);

/* bcm_mirror_port_vlan_dest_delete */
extern int bcm_mirror_port_vlan_dest_delete(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    uint32 flags, 
    bcm_gport_t destid);

/* bcm_mirror_port_dest_delete_all */
extern int bcm_mirror_port_vlan_dest_delete_all(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    uint32 flags);

/* bcm_mirror_port_vlan_dest_gett */
extern int bcm_mirror_port_vlan_dest_get(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    uint32 flags, 
    uint32 mirror_dest_size, 
    bcm_gport_t *destid, 
    uint32 *destcount);

/* 
 * An extended version bcm_mirror_port_vlan_dest_get of using a
 * bcm_mirror_options_t argument
 */
extern int bcm_mirror_port_vlan_destination_get(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    uint32 flags, 
    uint32 mirror_dest_size, 
    bcm_gport_t *destid, 
    uint32 *destcount, 
    bcm_mirror_options_t *options);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Mirror port Structure
 * 
 * Contains information required for mirror port settings.
 */
typedef struct bcm_mirror_port_info_s {
    bcm_gport_t mirror_system_id;   /* Unique mirror System identifier. */
} bcm_mirror_port_info_t;

/* Initialize a bcm_mirror_port_info_t structure. */
extern void bcm_mirror_port_info_t_init(
    bcm_mirror_port_info_t *info);

#ifndef BCM_HIDE_DISPATCHABLE

/* bcm_mirror_port_info_set */
extern int bcm_mirror_port_info_set(
    int unit, 
    bcm_port_t port, 
    uint32 flags, 
    bcm_mirror_port_info_t *info);

/* bcm_mirror_port_info_get */
extern int bcm_mirror_port_info_get(
    int unit, 
    bcm_port_t port, 
    uint32 flags, 
    bcm_mirror_port_info_t *info);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_MIRROR_H__ */
