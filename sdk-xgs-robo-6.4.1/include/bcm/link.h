/*
 * $Id: 8dc16122bef4ef22799c4f4affcbd436a01556e0 $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_LINK_H__
#define __BCM_LINK_H__

#include <sal/core/time.h>
#include <bcm/types.h>
#include <bcm/port.h>

/* bcm_linkscan_handler_t */
typedef void (*bcm_linkscan_handler_t)(
    int unit, 
    bcm_port_t port, 
    bcm_port_info_t *info);

/* bcm_linkscan_port_handler_t */
typedef int (*bcm_linkscan_port_handler_t)(
    int unit, 
    bcm_port_t port, 
    int *state);

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the link scanning subsystem. */
extern int bcm_linkscan_init(
    int unit);

/* Terminate linkscan on the specified unit. */
extern int bcm_linkscan_detach(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_LINKSCAN_INTERVAL_MIN   10000      

#ifndef BCM_HIDE_DISPATCHABLE

/* Enable and disabled link scanning, or set the polling interval. */
extern int bcm_linkscan_enable_set(
    int unit, 
    int us);

/* Enable and disabled link scanning, or set the polling interval. */
extern int bcm_linkscan_enable_get(
    int unit, 
    int *us);

/* Retrieve if linkscan managing a specified port. */
extern int bcm_linkscan_enable_port_get(
    int unit, 
    bcm_port_t port);

#endif /* BCM_HIDE_DISPATCHABLE */

/* bcm_linkscan_mode_e */
typedef enum bcm_linkscan_mode_e {
    BCM_LINKSCAN_MODE_NONE   = 0, 
    BCM_LINKSCAN_MODE_SW     = 1, 
    BCM_LINKSCAN_MODE_HW     = 2, 
    BCM_LINKSCAN_MODE_COUNT = 3 
} bcm_linkscan_mode_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Set the link scanning mode for a port. */
extern int bcm_linkscan_mode_set(
    int unit, 
    bcm_port_t port, 
    int mode);

/* Set the link scanning mode for a set of ports. */
extern int bcm_linkscan_mode_set_pbm(
    int unit, 
    bcm_pbmp_t pbm, 
    int mode);

/* Get the link scanning mode for a port. */
extern int bcm_linkscan_mode_get(
    int unit, 
    bcm_port_t port, 
    int *mode);

/* Register and unregister link notification callouts. */
extern int bcm_linkscan_register(
    int unit, 
    bcm_linkscan_handler_t f);

/* Register and unregister link notification callouts. */
extern int bcm_linkscan_unregister(
    int unit, 
    bcm_linkscan_handler_t f);

/* Register link status callout. */
extern int bcm_linkscan_port_register(
    int unit, 
    bcm_port_t port, 
    bcm_linkscan_port_handler_t f);

/* Unregister link status callout. */
extern int bcm_linkscan_port_unregister(
    int unit, 
    bcm_port_t port, 
    bcm_linkscan_port_handler_t f);

/* Wait for a set of links to recognize link up. */
extern int bcm_link_wait(
    int unit, 
    bcm_pbmp_t *pbm, 
    int us);

/* Force a transient link down event on a port. */
extern int bcm_link_change(
    int unit, 
    bcm_pbmp_t pbmp);

/* Check for a change in link status on each link. */
extern int bcm_linkscan_update(
    int unit, 
    bcm_pbmp_t pbm);

#if defined(BROADCOM_DEBUG)
/* bcm_linkscan_dump */
extern int bcm_linkscan_dump(
    int unit);
#endif

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_LINK_H__ */
