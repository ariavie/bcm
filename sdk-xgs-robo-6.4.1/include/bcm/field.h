/*
 * $Id: 2dd1b7232561decc7333480515aa238cf65a23f8 $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_FIELD_H__
#define __BCM_FIELD_H__

#include <bcm/types.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/rx.h>

/* Entry priority. */
#define BCM_FIELD_ENTRY_PRIO_HIGHEST    (0x7fffffff) /* Highest possible entry
                                                      priority in a group. */
#define BCM_FIELD_ENTRY_PRIO_DONT_CARE  BCM_FIELD_ENTRY_PRIO_LOWEST /* Default entry priority. */
#define BCM_FIELD_ENTRY_PRIO_LOWEST     (0)        /* Lowest possible entry
                                                      priority in a group. */

#define BCM_FIELD_ENTRY_PRIO_DEFAULT    BCM_FIELD_ENTRY_PRIO_LOWEST /* Default priority assigned
                                                      to new entries */

#define BCM_FIELD_EXTRACTION_FLAG_CONSTANT  (0x00000001) /* Indicates constant
                                                          value will be used
                                                          instead of qualifier
                                                          extraction */
#define BCM_FIELD_EXTRACTION_FLAG_DATA_FIELD (0x00000002) /* Indicates qualifier
                                                          specified is data
                                                          field ID instead of
                                                          bcmFieldQualify* */

/* bcm_field_stat_e */
typedef enum bcm_field_stat_e {
    bcmFieldStatBytes = 0,              /* Byte count of traffic of all colors. */
    bcmFieldStatPackets = 1,            /* Packet count of traffic of all
                                           colors. */
    bcmFieldStatDefault = bcmFieldStatPackets, /* Default stat mode. */
    bcmFieldStatGreenBytes = 2,         /* Byte count of green traffic. */
    bcmFieldStatGreenPackets = 3,       /* Packet count of green traffic. */
    bcmFieldStatYellowBytes = 4,        /* Byte count of yellow traffic. */
    bcmFieldStatYellowPackets = 5,      /* Packet count of yellow traffic. */
    bcmFieldStatRedBytes = 6,           /* Byte count of red traffic. */
    bcmFieldStatRedPackets = 7,         /* Packet count of red traffic. */
    bcmFieldStatNotGreenBytes = 8,      /* Byte count of not green traffic. */
    bcmFieldStatNotGreenPackets = 9,    /* Packet count of not green traffic. */
    bcmFieldStatNotYellowBytes = 10,    /* Byte count of not yellow traffic. */
    bcmFieldStatNotYellowPackets = 11,  /* Packet count of not yellow traffic. */
    bcmFieldStatNotRedBytes = 12,       /* Byte count of not red traffic. */
    bcmFieldStatNotRedPackets = 13,     /* Packet count of not red traffic. */
    bcmFieldStatAcceptedBytes = 14,     /* Byte count of accepted traffic of all
                                           colors. */
    bcmFieldStatAcceptedPackets = 15,   /* Packet count of accepted traffic of
                                           all colors. */
    bcmFieldStatAcceptedGreenBytes = 16, /* Byte count of accepted green traffic. */
    bcmFieldStatAcceptedGreenPackets = 17, /* Packet count of accepted green
                                           traffic. */
    bcmFieldStatAcceptedYellowBytes = 18, /* Byte count of accepted yellow
                                           traffic. */
    bcmFieldStatAcceptedYellowPackets = 19, /* Packet count of accepted yellow
                                           traffic. */
    bcmFieldStatAcceptedRedBytes = 20,  /* Byte count of accepted red traffic. */
    bcmFieldStatAcceptedRedPackets = 21, /* Packet count of accepted red traffic. */
    bcmFieldStatAcceptedNotGreenBytes = 22, /* Byte count of accepted not green
                                           traffic. */
    bcmFieldStatAcceptedNotGreenPackets = 23, /* Packet count of accepted not green
                                           traffic. */
    bcmFieldStatAcceptedNotYellowBytes = 24, /* Byte count of accepted not yellow
                                           traffic. */
    bcmFieldStatAcceptedNotYellowPackets = 25, /* Packet count of accepted not yellow
                                           traffic. */
    bcmFieldStatAcceptedNotRedBytes = 26, /* Byte count of accepted not red
                                           traffic. */
    bcmFieldStatAcceptedNotRedPackets = 27, /* Packet count of accepted not red
                                           traffic. */
    bcmFieldStatDroppedBytes = 28,      /* Byte count of dropped traffic of all
                                           colors. */
    bcmFieldStatDroppedPackets = 29,    /* Packet count of dropped traffic of
                                           all colors. */
    bcmFieldStatDroppedGreenBytes = 30, /* Byte count of dropped green traffic. */
    bcmFieldStatDroppedGreenPackets = 31, /* Packet count of dropped green
                                           traffic. */
    bcmFieldStatDroppedYellowBytes = 32, /* Byte count of dropped yellow traffic. */
    bcmFieldStatDroppedYellowPackets = 33, /* Packet count of dropped yellow
                                           traffic. */
    bcmFieldStatDroppedRedBytes = 34,   /* Byte count of dropped red traffic. */
    bcmFieldStatDroppedRedPackets = 35, /* Packet count of dropped red traffic. */
    bcmFieldStatDroppedNotGreenBytes = 36, /* Byte count of dropped not green
                                           traffic. */
    bcmFieldStatDroppedNotGreenPackets = 37, /* Packet count of dropped not green
                                           traffic. */
    bcmFieldStatDroppedNotYellowBytes = 38, /* Byte count of dropped not yellow
                                           traffic. */
    bcmFieldStatDroppedNotYellowPackets = 39, /* Packet count of dropped not yellow
                                           traffic. */
    bcmFieldStatDroppedNotRedBytes = 40, /* Byte count of dropped not red
                                           traffic. */
    bcmFieldStatDroppedNotRedPackets = 41, /* Packet count of dropped not red
                                           traffic. */
    bcmFieldStatOffset0Bytes = 42,      /* Byte count at configurable offset 0. */
    bcmFieldStatOffset0Packets = 43,    /* Packet count at configurable offset
                                           0. */
    bcmFieldStatOffset1Bytes = 44,      /* Byte count at configurable offset 1. */
    bcmFieldStatOffset1Packets = 45,    /* Packet count at configurable offset
                                           1. */
    bcmFieldStatOffset2Bytes = 46,      /* Byte count at configurable offset 2. */
    bcmFieldStatOffset2Packets = 47,    /* Packet count at configurable offset
                                           2. */
    bcmFieldStatOffset3Bytes = 48,      /* Byte count at configurable offset 3. */
    bcmFieldStatOffset3Packets = 49,    /* Packet count at configurable offset
                                           3. */
    bcmFieldStatOffset4Bytes = 50,      /* Byte count at configurable offset 4. */
    bcmFieldStatOffset4Packets = 51,    /* Packet count at configurable offset
                                           4. */
    bcmFieldStatOffset5Bytes = 52,      /* Byte count at configurable offset 5. */
    bcmFieldStatOffset5Packets = 53,    /* Packet count at configurable offset
                                           5. */
    bcmFieldStatOffset6Bytes = 54,      /* Byte count at configurable offset 6. */
    bcmFieldStatOffset6Packets = 55,    /* Packet count at configurable offset
                                           6. */
    bcmFieldStatOffset7Bytes = 56,      /* Byte count at configurable offset 7. */
    bcmFieldStatOffset7Packets = 57,    /* Packet count at configurable offset
                                           7. */
    bcmFieldStatCount = 58              /* Always Last. Not a usable value. */
} bcm_field_stat_t;

#define BCM_FIELD_STAT \
{ \
    "Bytes", \
    "Packets", \
    "GreenBytes", \
    "GreenPackets", \
    "YellowBytes", \
    "YellowPackets", \
    "RedBytes", \
    "RedPackets", \
    "NotGreenBytes", \
    "NotGreenPackets", \
    "NotYellowBytes", \
    "NotYellowPackets", \
    "NotRedBytes", \
    "NotRedPackets", \
    "AcceptedBytes", \
    "AcceptedPackets", \
    "AcceptedGreenBytes", \
    "AcceptedGreenPackets", \
    "AcceptedYellowBytes", \
    "AcceptedYellowPackets", \
    "AcceptedRedBytes", \
    "AcceptedRedPackets", \
    "AcceptedNotGreenBytes", \
    "AcceptedNotGreenPackets", \
    "AcceptedNotYellowBytes", \
    "AcceptedNotYellowPackets", \
    "AcceptedNotRedBytes", \
    "AcceptedNotRedPackets", \
    "DroppedBytes", \
    "DroppedPackets", \
    "DroppedGreenBytes", \
    "DroppedGreenPackets", \
    "DroppedYellowBytes", \
    "DroppedYellowPackets", \
    "DroppedRedBytes", \
    "DroppedRedPackets", \
    "DroppedNotGreenBytes", \
    "DroppedNotGreenPackets", \
    "DroppedNotYellowBytes", \
    "DroppedNotYellowPackets", \
    "DroppedNotRedBytes", \
    "DroppedNotRedPackets", \
    "Offset0Bytes", \
    "Offset0Packets", \
    "Offset1Bytes", \
    "Offset1Packets", \
    "Offset2Bytes", \
    "Offset2Packets", \
    "Offset3Bytes", \
    "Offset3Packets", \
    "Offset4Bytes", \
    "Offset4Packets", \
    "Offset5Bytes", \
    "Offset5Packets", \
    "Offset6Bytes", \
    "Offset6Packets", \
    "Offset7Bytes", \
    "Offset7Packets"  \
}

/* Packet content (data) qualification object flags. */
#define BCM_FIELD_DATA_QUALIFIER_WITH_ID    (1 << 0)   
#define BCM_FIELD_DATA_QUALIFIER_REPLACE    (1 << 1)   
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_IP4_OPTIONS_ADJUST (1 << 2)   
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_IP6_EXTENSIONS_ADJUST (1 << 3)   
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_GRE_OPTIONS_ADJUST (1 << 4)   
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_NEGATIVE (1 << 5)   /* The 'offset' field is
                                                          interpretated as
                                                          negative */
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_BIT_RES (1 << 6)   /* The 'offset' field is
                                                          computed with a bit
                                                          resolution */
#define BCM_FIELD_DATA_QUALIFIER_LENGTH_BIT_RES (1 << 7)   /* The 'length' field is
                                                          computed with a bit
                                                          resolution */
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_PREDEFINED (1 << 8)   /* The 'qualifier' field
                                                          is used instead of
                                                          'offset_base' */
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_FLEX_HASH (1 << 9)   /* The 'qualifier' field
                                                          is used to create flex
                                                          hash entry' */
#define BCM_FIELD_DATA_QUALIFIER_STAGE_LOOKUP (1 << 10)  /* The 'qualifier' field
                                                          is used to create for
                                                          Lookup Stage */

/* Packet content (data) qualification vlan tag format. */
#define BCM_FIELD_DATA_FORMAT_VLAN_TAG_ANY  (0xffff)   
#define BCM_FIELD_DATA_FORMAT_VLAN_NO_TAG   (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_VLAN_SINGLE_TAGGED (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_VLAN_DOUBLE_TAGGED (1 << 2)   

/* Packet content (data) qualification L2 header format. */
#define BCM_FIELD_DATA_FORMAT_L2_ANY    (0xffff)   
#define BCM_FIELD_DATA_FORMAT_L2_ETH_II (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_L2_SNAP   (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_L2_LLC    (1 << 2)   

/* Packet content (data) qualification L3 header version. */
#define BCM_FIELD_DATA_FORMAT_IP_ANY        (0xffff)   
#define BCM_FIELD_DATA_FORMAT_IP_NONE       (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_IP4           (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_IP6           (1 << 2)   
#define BCM_FIELD_DATA_FORMAT_IP4_WITH_OPTIONS (1 << 3)   
#define BCM_FIELD_DATA_FORMAT_IP6_WITH_OPTIONS (1 << 4)   

/* Packet content (data) qualification Mpls encapsulation. */
#define BCM_FIELD_DATA_FORMAT_MPLS_ANY      (0xffff)   
#define BCM_FIELD_DATA_FORMAT_MPLS_ONE_LABEL (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_MPLS_TWO_LABELS (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_MPLS_THREE_LABELS (1 << 2)   
#define BCM_FIELD_DATA_FORMAT_MPLS_FOUR_LABELS (1 << 3)   
#define BCM_FIELD_DATA_FORMAT_MPLS_FIVE_LABELS (1 << 4)   

/* Packet content (data) qualification FCoE encapsulation. */
#define BCM_FIELD_DATA_FORMAT_FIBRE_CHAN_ANY (0xffff)   
#define BCM_FIELD_DATA_FORMAT_FIBRE_CHAN    (1 << 0)   /* Standard fibre-channel
                                                          header */
#define BCM_FIELD_DATA_FORMAT_FIBRE_CHAN_ENCAP (1 << 1)   /* Encapsulation header */
#define BCM_FIELD_DATA_FORMAT_FIBRE_CHAN_VIRTUAL (1 << 2)   /* Virtual fabric tag
                                                          (VFT) header */
#define BCM_FIELD_DATA_FORMAT_FIBRE_CHAN_ROUTED (1 << 3)   /* Interfabric routing
                                                          (IFR) header */

/* Packet content (data) qualification Tunnel. */
#define BCM_FIELD_DATA_FORMAT_TUNNEL_ANY    (0xffff)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_NONE   (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_IP_IN_IP (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_GRE    (1 << 2)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_MPLS   (1 << 3)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_FCOE   (1 << 4)   /* Fibre Channel over
                                                          Ethernet (FCoE),
                                                          ethertype 0x8906 */
#define BCM_FIELD_DATA_FORMAT_TUNNEL_FCOE_INIT (1 << 5)   /* FCoE initialization
                                                          protocol (FIP),
                                                          ethertype 0x8914 */

/* Packet content (data) qualification Flags. */
#define BCM_FIELD_DATA_FORMAT_F_MASK        (0x3ff)    
#define BCM_FIELD_DATA_FORMAT_F_ENCAP_STACK (1 << 0)   /* Indicates incoming
                                                          packet is a Higig
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_NO_ENCAP_STACK (1 << 1)   /* Indicates incoming
                                                          packet is not a Higig
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_VNTAG       (1 << 2)   /* Indicates incoming
                                                          packet is a VNTAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_NO_VNTAG    (1 << 3)   /* Indicates incoming
                                                          packet is not a VNTAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_CNTAG       (1 << 4)   /* Indicates incoming
                                                          packet is a CNTAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_NO_CNTAG    (1 << 5)   /* Indicates incoming
                                                          packet is not a CNTAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_ETAG        (1 << 6)   /* Indicates incoming
                                                          packet is a ETAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_NO_ETAG     (1 << 7)   /* Indicates incoming
                                                          packet is not a ETAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_ICNM        (1 << 8)   /* Indicates incoming
                                                          packet is a ICNM
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_NO_ICNM     (1 << 9)   /* Indicates incoming
                                                          packet is not a ICNM
                                                          Packet */

/* bcm_field_data_offset_base_e */
typedef enum bcm_field_data_offset_base_e {
    bcmFieldDataOffsetBasePacketStart = 0, /* Offset provided from the beginning of
                                           a packet. */
    bcmFieldDataOffsetBaseOuterL3Header = 1, /* Offset provided from the beginning of
                                           outer L3 header. */
    bcmFieldDataOffsetBaseInnerL3Header = 2, /* Offset provided from the beginning of
                                           inner L3 header. */
    bcmFieldDataOffsetBaseOuterL4Header = 3, /* Offset provided from the beginning of
                                           outer L4 header.. */
    bcmFieldDataOffsetBaseInnerL4Header = 4, /* Offset provided from the beginning of
                                           inner L4 header. */
    bcmFieldDataOffsetBaseHigigHeader = 5, /* Offset provided from the beginning of
                                           Higig header. */
    bcmFieldDataOffsetBaseHigig2Header = 6, /* Offset provided from the beginning of
                                           Higig header. */
    bcmFieldDataOffsetBaseFcoeHeader = 7, /* Offset provided from the beginning of
                                           FCoE header. */
    bcmFieldDataOffsetBaseEndTag = 8,   /* Offset provided from the end of VLAN
                                           tags. */
    bcmFieldDataOffsetBaseL2Header = 9, /* Ethernet header. */
    bcmFieldDataOffsetBaseFirstHeader = 10, /* First header after Ethernet. */
    bcmFieldDataOffsetBaseSecondHeader = 11, /* Second header after Ethernet. */
    bcmFieldDataOffsetBaseThirdHeader = 12, /* Third header after Ethernet. */
    bcmFieldDataOffsetBaseMplsLabel1Header = 13, /* Offset provided from the beginning of
                                           the Mpls Label 1 header. */
    bcmFieldDataOffsetBaseMplsLabel2Header = 14, /* Offset provided from the beginning of
                                           the Mpls Label 2 header. */
    bcmFieldDataOffsetBaseMplsLabel3Header = 15, /* Offset provided from the beginning of
                                           the Mpls Label 3 header. */
    bcmFieldDataOffsetBaseInnerL2Header = 16, /* Offset provided from the beginning of
                                           inner L2 header. */
    bcmFieldDataOffsetBaseTrillHeader = 17, /* Offset provided from the beginning of
                                           Trill header. */
    bcmFieldDataOffsetBaseFourthHeader = 18, /* Fourth header after Ethernet. */
    bcmFieldDataOffsetBaseForwardingHeader = 19, /* Header used for the forwarding. */
    bcmFieldDataOffsetBaseNextForwardingHeader = 20, /* First header after the forwarding
                                           header. */
    bcmFieldDataOffsetBaseTrillPayload = 21, /* Offset provided from the beginning of
                                           Trill Payload. */
    bcmFieldDataOffsetBaseCount = 22    /* Always Last. Not a usable value. */
} bcm_field_data_offset_base_t;

#define BCM_FIELD_DATA_OFFSET_BASE \
{ \
    "bcmFieldDataOffsetBasePacketStart", \
    "bcmFieldDataOffsetBaseOuterL3Header", \
    "bcmFieldDataOffsetBaseInnerL3Header", \
    "bcmFieldDataOffsetBaseOuterL4Header", \
    "bcmFieldDataOffsetBaseInnerL4Header", \
    "bcmFieldDataOffsetBaseHigigHeader", \
    "bcmFieldDataOffsetBaseHigig2Header", \
    "bcmFieldDataOffsetBaseFcoeHeader", \
    "bcmFieldDataOffsetBaseEndTag", \
    "bcmFieldDataOffsetBaseL2Header", \
    "bcmFieldDataOffsetBaseFirstHeader", \
    "bcmFieldDataOffsetBaseSecondHeader", \
    "bcmFieldDataOffsetBaseThirdHeader", \
    "bcmFieldDataOffsetBaseMplsLabel1Header", \
    "bcmFieldDataOffsetBaseMplsLabel2Header", \
    "bcmFieldDataOffsetBaseMplsLabel3Header", \
    "bcmFieldDataOffsetBaseInnerL2Header", \
    "bcmFieldDataOffsetBaseTrillHeader", \
    "bcmFieldDataOffsetBaseFourthHeader", \
    "bcmFieldDataOffsetBaseForwardingHeader", \
    "bcmFieldDataOffsetBaseNextForwardingHeader", \
    "bcmFieldDataOffsetBaseTrillPayload"  \
}

/* Ethertype based DATA packet qualifier structure. */
typedef struct bcm_field_data_ethertype_s {
    int relative_offset;            /* Packet byte offset relative to qualifier
                                       byte offset. */
    bcm_port_ethertype_t ethertype; /* Ether type. */
    uint16 l2;                      /* Packet l2 format.
                                       (FIELD_DATA_FORMAT_L2_XXX) */
    uint16 vlan_tag;                /* vlan_tag_format.
                                       (FIELD_DATA_FORMAT_VLAN_XXX) */
    uint32 flags;                   /* Flags. (FIELD_DATA_FORMAT_F_XXX) */
} bcm_field_data_ethertype_t;

/* Ip protocol/Next header based DATA packet qualifier structure. */
typedef struct bcm_field_data_ip_protocol_s {
    int relative_offset;    /* Packet byte offset relative to qualifier byte
                               offset. */
    uint16 flags;           /* Packet ip header version.
                               (FIELD_DATA_FORMAT_IP_XXX) */
    uint8 ip;               /* Ip protocol id. */
    uint16 l2;              /* Packet l2 format. (FIELD_DATA_FORMAT_L2_XXX) */
    uint16 vlan_tag;        /* vlan_tag_format. (FIELD_DATA_FORMAT_VLAN_XXX) */
} bcm_field_data_ip_protocol_t;

/* Packet format based DATA qualifier specification structure. */
typedef struct bcm_field_data_packet_format_s {
    int relative_offset;        /* Packet byte offset relative to qualifier byte
                                   offset. */
    uint16 l2;                  /* Packet l2 format. (FIELD_DATA_FORMAT_L2_XXX) */
    uint16 vlan_tag;            /* vlan_tag_format. (FIELD_DATA_FORMAT_VLAN_XXX) */
    uint16 outer_ip;            /* Outer IP header
                                   version.(FIELD_DATA_FORMAT_IP_XXX) */
    uint16 inner_ip;            /* Inner IP header
                                   version.(FIELD_DATA_FORMAT_IP_XXX) */
    uint16 tunnel;              /* Tunnel.(FIELD_DATA_FORMAT_TUNNEL_XXX) */
    uint16 mpls;                /* Mpls labels.(FIELD_DATA_FORMAT_MPLS_XXX) */
    uint16 fibre_chan_outer;    /* Header
                                   type.(FIELD_DATA_FORMAT_FIBRE_CHAN_XXX) */
    uint16 fibre_chan_inner;    /* Header
                                   type.(FIELD_DATA_FORMAT_FIBRE_CHAN_XXX) */
    uint32 flags;               /* Flags. (FIELD_DATA_FORMAT_F_XXX) */
} bcm_field_data_packet_format_t;

/* Packet colors. */
#define BCM_FIELD_COLOR_PRESERVE    0          
#define BCM_FIELD_COLOR_GREEN       1          
#define BCM_FIELD_COLOR_YELLOW      2          
#define BCM_FIELD_COLOR_RED         3          
#define BCM_FIELD_COLOR_BLACK       4          

/* IPv4 Flags from RFC-791 (for bcm_field_qualify_IpFlags). */
#define BCM_FIELD_IPFLAGS_MF    0x1        /* More Fragments. */
#define BCM_FIELD_IPFLAGS_DF    0x2        /* Don't Fragment. */
#define BCM_FIELD_IPFLAGS_RF    0x4        /* Reserved. */
#define BCM_FIELD_IPFLAGS_MASK  0x7        /* All bits. */

/* TCP Control Flags from RFC-793 (for bcm_field_qualify_TcpControl). */
#define BCM_FIELD_TCPCONTROL_FIN    0x01       /* No more data. */
#define BCM_FIELD_TCPCONTROL_SYN    0x02       /* Sync seq numbers. */
#define BCM_FIELD_TCPCONTROL_RST    0x04       /* Reset connection. */
#define BCM_FIELD_TCPCONTROL_PSH    0x08       /* Push. */
#define BCM_FIELD_TCPCONTROL_ACK    0x10       /* Ack field valid. */
#define BCM_FIELD_TCPCONTROL_URG    0x20       /* Urgent field valid. */
#define BCM_FIELD_TCPCONTROL_R40    0x40       /* Reserved. */
#define BCM_FIELD_TCPCONTROL_R80    0x80       /* Reserved. */
#define BCM_FIELD_TCPCONTROL_MASK   0x3f       /* All non-reserved bits. */

/* IP Info (for bcm_field_qualify_IpInfo). */
#define BCM_FIELD_IP_HDR_OFFSET_ZERO    0x0001     
#define BCM_FIELD_IP_HDR_FLAGS_MF       0x0002     
#define BCM_FIELD_IP_CHECKSUM_OK        0x0004     
#define BCM_FIELD_IP_VERSION_ERR        0x0008     /* Error in the IP 'version'
                                                      field value */

/* 
 * Field Qualifier VlanFormat (for bcm_field_qualify_VlanFormat).
 * Used to qualify packets based on vlan tag format.
 */
#define BCM_FIELD_VLAN_FORMAT_OUTER_TAGGED  0x1        /* Outer tag present. */
#define BCM_FIELD_VLAN_FORMAT_INNER_TAGGED  0x2        /* Inner tag present. */
#define BCM_FIELD_VLAN_FORMAT_OUTER_TAGGED_VID_ZERO 0x4        /* Outer tag present and
                                                          vlan id is zero. */
#define BCM_FIELD_VLAN_FORMAT_INNER_TAGGED_VID_ZERO 0x8        /* Inner tag present and
                                                          vlan id is zero. */

/* Packet Resolution Values (for bcm_field_qualify_PacketRes). */
#define BCM_FIELD_PKT_RES_UNKNOWN       0x0        /* No resolution. */
#define BCM_FIELD_PKT_RES_CONTROL       0x1        /* Ethernet control (8808). */
#define BCM_FIELD_PKT_RES_BPDU          0x2        /* L2 cache BPDU bit. */
#define BCM_FIELD_PKT_RES_L2BC          0x3        /* L2 broadcast. */
#define BCM_FIELD_PKT_RES_L2UC          0x4        /* L2 unicast. */
#define BCM_FIELD_PKT_RES_L2UNKNOWN     0x5        /* Unknown L2 dest (DLF). */
#define BCM_FIELD_PKT_RES_L3MCUNKNOWN   0x6        /* Unknown L3 multicast. */
#define BCM_FIELD_PKT_RES_L3MCKNOWN     0x7        /* Known L3 multicast. */
#define BCM_FIELD_PKT_RES_L2MCKNOWN     0x8        /* Known L2 multicast. */
#define BCM_FIELD_PKT_RES_L2MCUNKNOWN   0x9        /* Unknown L2 multicast. */
#define BCM_FIELD_PKT_RES_L3UCKNOWN     0xa        /* Known L3 unicast. */
#define BCM_FIELD_PKT_RES_L3UCUNKNOWN   0xb        /* Unknown L3 unicast. */
#define BCM_FIELD_PKT_RES_MPLSKNOWN     0xc        /* Known MPLS packet   . */
#define BCM_FIELD_PKT_RES_MPLSL3KNOWN   0xd        /* Known MPLS L3 packet. */
#define BCM_FIELD_PKT_RES_MPLSL2KNOWN   0xe        /* Known MPLS L2 packet. */
#define BCM_FIELD_PKT_RES_MPLSUNKNOWN   0xf        /* Unknown MPLS packet . */
#define BCM_FIELD_PKT_RES_MIMKNOWN      0x10       /* Known MIM packet. */
#define BCM_FIELD_PKT_RES_MIMUNKNOWN    0x11       /* Unknown MIM packet . */
#define BCM_FIELD_PKT_RES_TRILLKNOWN    0x12       /* Known TRILL packet */
#define BCM_FIELD_PKT_RES_TRILLUNKNOWN  0x13       /* Unknown TRILL packet */
#define BCM_FIELD_PKT_RES_NIVKNOWN      0x14       /* Known NIV packet */
#define BCM_FIELD_PKT_RES_NIVUNKNOWN    0x15       /* Unknown NIV packet */
#define BCM_FIELD_PKT_RES_OAM           0x16       /* Packet hit OAM CFM LMEP */
#define BCM_FIELD_PKT_RES_BFD           0x17       /* Packet hit BFD session */
#define BCM_FIELD_PKT_RES_ICNM          0x18       /* Congestion notification */
#define BCM_FIELD_PKT_RES_IEEE1588      0x19       /* IEEE 1588 packet */
#define BCM_FIELD_PKT_RES_L2GREKNOWN    0x1a       /* Known L2 GRE packet */
#define BCM_FIELD_PKT_RES_VXLANKNOWN    0x1b       /* Known VxLan Packet */
#define BCM_FIELD_PKT_RES_FCOEKNOWN     0x1c       /* Known FCoE Packet */
#define BCM_FIELD_PKT_RES_FCOEUNKNOWN   0x1d       /* Unknown FCoE Packet */
#define BCM_FIELD_PKT_RES_LAST          (BCM_FIELD_PKT_RES_FCOEUNKNOWN) /* Must be >= highest valid
                                                      BCM_FIELD_PKT_RES_* */

/* 
 * Vlan Translation Lookup status values (for
 * bcm_field_qualify_VlanTranslationHit)
 */
#define BCM_FIELD_VXLT_LOOKUP_STATUS_NO_HIT 0x0        /* No Hit */
#define BCM_FIELD_VXLT_LOOKUP_STATUS_HIT    0x1        /* Hit(First or Second
                                                          Hit) */
#define BCM_FIELD_VXLT_LOOKUP_STATUS_FIRST_HIT 0x2        /* First Hit */
#define BCM_FIELD_VXLT_LOOKUP_STATUS_SECOND_HIT 0x3        /* Second Hit */

/* FibreChanZoneCheck values (for bcm_field_qualify_FibreChanZoneCheck) */
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_NOT_DONE 0x0        /* Zone Check Did Not
                                                          Take Place */
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_ALLOW 0x1        /* Allow + Hit */
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_MISS 0x2        /* Miss */
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_DENY 0x3        /* Deny + Hit */

/* Module header opcodes (for bcm_field_qualify_MHOpcode). */
#define BCM_FIELD_MHOPCODE_CONTROL          0          
#define BCM_FIELD_MHOPCODE_UNICAST          1          
#define BCM_FIELD_MHOPCODE_BROADCAST_DLF    2          
#define BCM_FIELD_MHOPCODE_MULTICAST        3          
#define BCM_FIELD_MHOPCODE_IPMULTICAST      4          

/* User-defined field maximums. */
#define BCM_FIELD_USER_MAX_UDF_NUM  1          /* UDF0 or UDF1. */
#define BCM_FIELD_USER_MAX_USER_NUM 3          /* Valid range: 0..3 */
#define BCM_FIELD_USER_NUM_UDFS     93         
#define BCM_FIELD_USER_FIELD_SIZE   4          /* Bytes per user_num. */
#define BCM_FIELD_USER_MAX_LENGTH   (1 << 5)   /* Number of bits. */

/* Meter select parameters. */
#define BCM_FIELD_METER_PEAK        1          
#define BCM_FIELD_METER_COMMITTED   2          

/* Metering modes for bcmFieldActionMeterConfig param0. */
#define BCM_FIELD_METER_MODE_DEFAULT        0x0        
#define BCM_FIELD_METER_MODE_FLOW           0x1        
#define BCM_FIELD_METER_MODE_trTCM_COLOR_BLIND 0x2        
#define BCM_FIELD_METER_MODE_trTCM_COLOR_AWARE 0x3        
#define BCM_FIELD_METER_MODE_srTCM_COLOR_BLIND 0x6        
#define BCM_FIELD_METER_MODE_srTCM_COLOR_AWARE 0x7        

/* Policy options for bcmFieldActionPrioPktNew param1. */
#define BCM_FIELD_SPCP_MARK_MAPPED          0x01       
#define BCM_FIELD_SPCP_MARK_USE_INNER_PCP   0x02       
#define BCM_FIELD_SPCP_MARK_USE_OUTER_PCP   0x04       
#define BCM_FIELD_SPCP_MARK_USE_PORT_DEFAULT 0x08       
#define BCM_FIELD_SPCP_MARK_MASK            0x0f       
#define BCM_FIELD_CPCP_MARK_MAPPED          0x10       
#define BCM_FIELD_CPCP_MARK_USE_INNER_PCP   0x20       
#define BCM_FIELD_CPCP_MARK_USE_OUTER_PCP   0x40       
#define BCM_FIELD_CPCP_MARK_USE_PORT_DEFAULT 0x80       
#define BCM_FIELD_CPCP_MARK_MASK            0xf0       

/* 
 * Policy options for bcmFieldActionInnerVlanNew and
 * bcmFieldActionOuterVlanNew param1.
 */
#define BCM_FIELD_TAG_AS_RECEIVED   0x01       
#define BCM_FIELD_TAG_AS_NORMALIZED 0x02       
#define BCM_FIELD_TAG_COPY          0x04       
#define BCM_FIELD_TAG_REMOVE        0x08       
#define BCM_FIELD_TAG_REPLACE       0x10       

/* 
 * Counter pair modes for bcmFieldActionUpdateCounter
 * 
 * Specifies increment mode for upper (counter_num=1) and lower
 * (counter_num=0) counter in the pair. For example: GREEN_YELLOW would
 * increment the upper counter for green packets and the lower counter
 * for yellow packets.
 * 
 * BCM_FIELD_COUNTER_MODE_BYTES can be ORd with any of the other values
 * to make the counter count bytes instead of packets.
 */
#define BCM_FIELD_COUNTER_MODE_NO_NO        0x0000     
#define BCM_FIELD_COUNTER_MODE_NO_YES       0x0001     
#define BCM_FIELD_COUNTER_MODE_YES_NO       0x0002     
#define BCM_FIELD_COUNTER_MODE_RED_NOTRED   0x0003     
#define BCM_FIELD_COUNTER_MODE_GREEN_NOTGREEN 0x0004     
#define BCM_FIELD_COUNTER_MODE_GREEN_RED    0x0005     
#define BCM_FIELD_COUNTER_MODE_GREEN_YELLOW 0x0006     
#define BCM_FIELD_COUNTER_MODE_RED_YELLOW   0x0007     
#define BCM_FIELD_COUNTER_MODE_BYTES_PACKETS 0x0008     /* Upper counter is
                                                          bytes; lower counter
                                                          is packets */
#define BCM_FIELD_COUNTER_MODE_GREEN        0x0010     
#define BCM_FIELD_COUNTER_MODE_YELLOW       0x0020     
#define BCM_FIELD_COUNTER_MODE_RED          0x0040     
#define BCM_FIELD_COUNTER_MODE_ALL          0x0070     
#define BCM_FIELD_COUNTER_MODE_PACKETS      0x0000     
#define BCM_FIELD_COUNTER_MODE_BYTES        0x0100     
#define BCM_FIELD_COUNTER_MODE_DEFAULT      BCM_FIELD_COUNTER_MODE_NO_YES 

/* Redirect ECMP hash key selection. */
#define BCM_FIELD_MULTIPATH_HASH_DISABLE    0x0        
#define BCM_FIELD_MULTIPATH_HASH_DIP        0x1        
#define BCM_FIELD_MULTIPATH_HASH_SIP        0x2        
#define BCM_FIELD_MULTIPATH_HASH_SIP_DIP    0x3        
#define BCM_FIELD_MULTIPATH_HASH_DST_SRC_L4_DIP_SIP 0x4        
#define BCM_FIELD_MULTIPATH_HASH_SRC_DST_L4_SIP_DIP 0x5        
#define BCM_FIELD_MULTIPATH_HASH_SRC_L4_SIP 0x6        
#define BCM_FIELD_MULTIPATH_HASH_DST_L4_DIP 0x7        

/* Filter types for bcmFieldActionFilters. */
#define BCM_FIELD_FILTER_LAG            0x1        /* LAG Filter overrides the
                                                      rule */
#define BCM_FIELD_FILTER_TAGGED         0x2        /* Tag Framing Filter
                                                      overrides the rule */
#define BCM_FIELD_FILTER_PORT_MASK      0x4        /* Port Mask Filter overrides
                                                      the rule */
#define BCM_FIELD_FILTER_STP            0x8        /* STP Filter overrides the
                                                      rule */
#define BCM_FIELD_FILTER_EAP            0x10       /* EAP Filter overrides the
                                                      rule */
#define BCM_FIELD_FILTER_INGRESS_VLAN   0x20       /* Ingress Vlan Filter
                                                      overrides the rule */
#define BCM_FIELD_FILTER_EGRESS_VLAN    0x40       /* Egress Vlan Filter
                                                      overrides the rule */
#define BCM_FIELD_FILTER_SA             0x80       /* Source address Filter
                                                      overrides the rule */
#define BCM_FIELD_FILTER_SA_DISABLED    0x100      /* Disable SA filtering */
#define BCM_FIELD_FILTER_ALL            0x1ff      

/* Policer use options for bcmFieldActionUsePolicerResult param0. */
#define BCM_FIELD_USE_POLICER_RESULT_INGRESS 0x01       /* Use policer result on
                                                          ingress */
#define BCM_FIELD_USE_POLICER_RESULT_EGRESS 0x02       /* Use policer result on
                                                          egress */

/* 
 * Global policer selection flag.
 * 
 * If policer ID passed to (bcm_field_entry_policer_attach) API
 * corresponds to global meters, below flag can be used to configure
 * highest priority to lookup table policer with respect to the priority
 * of the policers in other tables.
 */
#define BCM_FIELD_POLICER_GLOBAL_METER_USE_STAGE_LOOKUP_ACTION 0x01       /* Use lookup stage
                                                          policer */

/* Various packet header formats for qualification / preselection */
typedef enum bcm_field_header_format_e {
    bcmFieldHeaderFormatL2 = 0,         /* L2 packet (headers = L2) */
    bcmFieldHeaderFormatIp4 = 1,        /* IPv4 packet (headers = L2, IPv4, L4) */
    bcmFieldHeaderFormatIp4AnyL2L3 = 2, /* Any IPv4 packet (headers = L2, IPv4,
                                           Any) */
    bcmFieldHeaderFormatIp6 = 3,        /* IPv6 packet (headers = L2, IPv6, L4) */
    bcmFieldHeaderFormatIp6AnyL2L3 = 4, /* Any IPv6 packet (headers = L2, IPv6,
                                           Any) */
    bcmFieldHeaderFormatMplsLabel1 = 5, /* MPLS packet with one label (headers =
                                           L2, MPLS (1 label), L4) */
    bcmFieldHeaderFormatMplsLabel1AnyL2L3 = 6, /* Any MPLS packet with one label
                                           (headers = L2, MPLS (1 label), Any) */
    bcmFieldHeaderFormatMplsLabel2 = 7, /* MPLS packet with two labels (headers
                                           = L2, MPLS (2 labels), L4) */
    bcmFieldHeaderFormatMplsLabel2AnyL2L3 = 8, /* Any MPLS packet with two labels
                                           (headers = L2, MPLS (2 labels), Any) */
    bcmFieldHeaderFormatMplsLabel3 = 9, /* MPLS packet with three labels
                                           (headers = L2, MPLS (3 labels), L4) */
    bcmFieldHeaderFormatMplsLabel3AnyL2L3 = 10, /* Any MPLS packet with three labels
                                           (headers = L2, MPLS (3 labels), Any) */
    bcmFieldHeaderFormatTrill = 11,     /* Trill packet (headers = L2, Trill) */
    bcmFieldHeaderFormatEthEth = 12,    /* L2 over L2 packet (headers = L2, L2) */
    bcmFieldHeaderFormatEthTrillEth = 13, /* L2 over Trill packet (headers = L2,
                                           Trill, L2) */
    bcmFieldHeaderFormatIp4Ip4 = 14,    /* IPv4 over IPv4 packet (headers = L2,
                                           IPv4, IPv4) */
    bcmFieldHeaderFormatIp6Ip4 = 15,    /* IPv6 over IPv4 packet (headers = L2,
                                           IPv4, IPv6) */
    bcmFieldHeaderFormatIp4MplsLabel1 = 16, /* IPv4 over MPLS with one label
                                           (headers = L2, MPLS (one label),
                                           IPv4) */
    bcmFieldHeaderFormatIp4MplsLabel2 = 17, /* IPv4 over MPLS with two labels
                                           (headers = L2, MPLS (two labels),
                                           IPv4) */
    bcmFieldHeaderFormatIp4MplsLabel3 = 18, /* IPv4 over MPLS with three labels
                                           (headers = L2, MPLS (three labels),
                                           IPv4) */
    bcmFieldHeaderFormatIp6MplsLabel1 = 19, /* IPv6 over MPLS with one label
                                           (headers = L2, MPLS (one label),
                                           IPv6) */
    bcmFieldHeaderFormatIp6MplsLabel2 = 20, /* IPv6 over MPLS with two labels
                                           (headers = L2, MPLS (two labels),
                                           IPv6) */
    bcmFieldHeaderFormatIp6MplsLabel3 = 21, /* IPv6 over MPLS with three labels
                                           (headers = L2, MPLS (three labels),
                                           IPv6) */
    bcmFieldHeaderFormatEthMplsLabel1 = 22, /* L2 over MPLS with one label (headers
                                           = L2, MPLS (one label), L2) */
    bcmFieldHeaderFormatEthMplsLabel2 = 23, /* L2 over MPLS with two labels (headers
                                           = L2, MPLS (two labels), L2) */
    bcmFieldHeaderFormatEthMplsLabel3 = 24, /* L2 over MPLS with three labels
                                           (headers = L2, MPLS (three labels),
                                           L2) */
    bcmFieldHeaderFormatIp4EthMplsLabel1 = 25, /* IPv4 over L2 over MPLS with one label
                                           (headers = L2, MPLS (one label), L2,
                                           IPv4) */
    bcmFieldHeaderFormatIp4EthMplsLabel2 = 26, /* IPv4 over L2 over MPLS with two
                                           labels (headers = L2, MPLS (two
                                           labels), L2, IPv4) */
    bcmFieldHeaderFormatIp4EthMplsLabel3 = 27, /* IPv4 over L2 over MPLS with three
                                           labels (headers = L2, MPLS (three
                                           labels), L2, IPv4) */
    bcmFieldHeaderFormatTrafficManagement = 28, /* Traffic Management packet injected by
                                           an external Packet Processor */
    bcmFieldHeaderFormatEthIp4Eth = 29, /* L2 over IPv4 over L2 packet (headers
                                           = L2, IPv4, L2) */
    bcmFieldHeaderFormatFCoE = 30,      /* FCoE packet */
    bcmFieldHeaderFormatCount = 31      /* Always Last. Not a usable value. */
} bcm_field_header_format_t;

#define BCM_FIELD_HEADER_FORMAT \
{ \
    "L2", \
    "Ip4", \
    "Ip4AnyL2L3", \
    "Ip6", \
    "Ip6AnyL2L3", \
    "MplsLabel1", \
    "MplsLabel1AnyL2L3", \
    "MplsLabel2", \
    "MplsLabel2AnyL2L3", \
    "MplsLabel3", \
    "MplsLabel3AnyL2L3", \
    "Trill", \
    "EthEth", \
    "EthTrillEth", \
    "Ip4Ip4", \
    "Ip6Ip4", \
    "Ip4MplsLabel1", \
    "Ip4MplsLabel2", \
    "Ip4MplsLabel3", \
    "Ip6MplsLabel1", \
    "Ip6MplsLabel2", \
    "Ip6MplsLabel3", \
    "EthMplsLabel1", \
    "EthMplsLabel2", \
    "EthMplsLabel3", \
    "Ip4EthMplsLabel1", \
    "Ip4EthMplsLabel2", \
    "Ip4EthMplsLabel3", \
    "TrafficManagement", \
    "EthIp4Eth", \
    "FCoE"  \
}

/* 
 * Specifies a set of possible header formats for matching, for use with
 * bcmFieldQualifyHeaderFormatSet.
 */
typedef struct bcm_field_header_format_set_s {
    SHR_BITDCL w[_SHR_BITDCLSIZE(bcmFieldHeaderFormatCount)]; 
} bcm_field_header_format_set_t;

#define BCM_FIELD_HEADER_FORMAT_SET_INIT(hfset)  \
    sal_memset(&(hfset), 0, sizeof(bcm_field_header_format_set_t)) 

#define BCM_FIELD_HEADER_FORMAT_SET_ADD(hfset, hf)  SHR_BITSET(((hfset).w), (hf)) 

#define BCM_FIELD_HEADER_FORMAT_SET_REMOVE(hfset, hf)  SHR_BITCLR(((hfset).w), (hf)) 

#define BCM_FIELD_HEADER_FORMAT_SET_TEST(hfset, hf)  SHR_BITGET(((hfset).w), (hf)) 

/* Opaque handle to a field entry. */
typedef int bcm_field_entry_t;

/* Opaque handle to a field group. */
typedef int bcm_field_group_t;

/* 
 * Field Qualifiers
 * 
 * Field qualifiers are collected into qualifier sets (qsets), which are
 * used to allocate field groups.
 * 
 * Note: These are in order of their bit width. Do not change the order
 * or the field select code algorithm for wide-mode will get slower.
 */
typedef enum bcm_field_qualify_e {
    bcmFieldQualifySrcIp6 = 0,          /*  Source IPv6 Address. */
    bcmFieldQualifyDstIp6 = 1,          /*  Destination IPv6 Address. */
    bcmFieldQualifySrcIp6High = 2,      /*  Src. IPv6 Address (High/Upper 64
                                           bits). */
    bcmFieldQualifyDstIp6High = 3,      /*  Dest IPv6 Address (High/Upper 64
                                           bits). */
    bcmFieldQualifySrcIp6Low = 4,       /*  Src. IPv6 Address (Low/Lower 64
                                           bits). */
    bcmFieldQualifyDstIp6Low = 5,       /*  Dest IPv6 Address (Low/Lower 64
                                           bits). */
    bcmFieldQualifySrcMac = 6,          /*  Source L2 MAC Address. */
    bcmFieldQualifyDstMac = 7,          /*  Destination L2 MAC Address. */
    bcmFieldQualifySnap = 8,            /*  40: SNAP Header. */
    bcmFieldQualifySrcIp = 9,           /*  Source IPv4 Address. */
    bcmFieldQualifyDstIp = 10,          /*  Destination IPv4 Address. */
    bcmFieldQualifyLlc = 11,            /*  24: LLC Header. */
    bcmFieldQualifyInPort = 12,         /*  Single Input Port. */
    bcmFieldQualifyInPorts = 13,        /*  Input Port Bitmap. */
    bcmFieldQualifyOutPorts = 14,       /*  Output Port Bitmap. */
    bcmFieldQualifyDrop = 15,           /*  Packet is flagged to be dropped . */
    bcmFieldQualifyIp6FlowLabel = 16,   /*  IPv6 Flow Label. */
    bcmFieldQualifyOuterVlan = 17,      /*  Outer VLAN. */
    bcmFieldQualifyOuterVlanId = 18,    /*  Outer VLAN Id. */
    bcmFieldQualifyOuterVlanPri = 19,   /*  Outer VLAN priority. */
    bcmFieldQualifyOuterVlanCfi = 20,   /*  Outer VLAN Cfi. */
    bcmFieldQualifyInnerVlan = 21,      /*  Inner VLAN (double-tagged pkts
                                           only). */
    bcmFieldQualifyInnerVlanId = 22,    /*  Inner VLAN Id. */
    bcmFieldQualifyInnerVlanPri = 23,   /*  Inner VLAN priority. */
    bcmFieldQualifyInnerVlanCfi = 24,   /*  Inner VLAN Cfi. */
    bcmFieldQualifyLookupStatus = 25,   /*  DEPRECATED Lookup status
                                           (BCM_FIELD_LOOKUP_xxx). */
    bcmFieldQualifyRangeCheck = 26,     /*  TCP/UDP Port Range Check Results. */
    bcmFieldQualifyL4PortRangeCheck = bcmFieldQualifyRangeCheck, /* TCP/UDP Port Range Check Results */
    bcmFieldQualifyL4SrcPort = 27,      /*  TCP/UDP Source Port. */
    bcmFieldQualifyL4DstPort = 28,      /*  TCP/UDP Destination Port. */
    bcmFieldQualifyEtherType = 29,      /*  Ethernet Type. */
    bcmFieldQualifyIpProtocol = 30,     /*  IP Protocol Field. */
    bcmFieldQualifyIp6NextHeader = bcmFieldQualifyIpProtocol, /*  IPv6 Next Header/IP Protocol. */
    bcmFieldQualifyDSCP = 31,           /*  Diffserv Code Point. */
    bcmFieldQualifyTos = bcmFieldQualifyDSCP, /*  Tos - same as DSCP. */
    bcmFieldQualifyIp6TrafficClass = bcmFieldQualifyDSCP, /*  IPv6 Traffic Class. */
    bcmFieldQualifyTtl = 32,            /*  Time To Live/Hop Limit. */
    bcmFieldQualifyIp6HopLimit = bcmFieldQualifyTtl, /*  IPv6 Hop Limit. */
    bcmFieldQualifySrcModid = 33,       /*  Source Module ID (deprecated). */
    bcmFieldQualifySrcPortTgid = 34,    /*  Source Port/Trunk Group ID
                                           (deprecated). */
    bcmFieldQualifySrcPort = 35,        /*  Source Module ID and Port . */
    bcmFieldQualifySrcTrunk = 36,       /*  Source Trunk Group ID . */
    bcmFieldQualifySrcTrunkMemberGport = 37, /*  Source Trunk Member Port . */
    bcmFieldQualifyDstModid = 38,       /*  Destination Module ID (deprecated). */
    bcmFieldQualifyDstPortTgid = 39,    /*  Dest Port/Trunk Group ID
                                           (deprecated. */
    bcmFieldQualifyDstPort = 40,        /*  Destination Module ID and Port . */
    bcmFieldQualifyDstTrunk = 41,       /*  Destination Trunk Group ID . */
    bcmFieldQualifyTcpControl = 42,     /*  TCP Control Flags. */
    bcmFieldQualifyPacketRes = 43,      /*  Pkt resolution
                                           (BCM_FIELD_PKT_RES_xxx). */
    bcmFieldQualifyPacketFormat = 44,   /*  DEPRECATED Packet Format
                                           (BCM_FIELD_PKT_FMT_xxx). */
    bcmFieldQualifySrcClassL2 = 45,     /*  Source Class based on L2 lookup
                                           result. */
    bcmFieldQualifySrcClassL3 = 46,     /*  Source Class based on L3 lookup
                                           result. */
    bcmFieldQualifySrcClassField = 47,  /*  Source Class based on
                                           bcmFieldStageLookup result. */
    bcmFieldQualifyDstClassL2 = 48,     /*  Destination Class based on L2 lookup
                                           result. */
    bcmFieldQualifyDstClassL3 = 49,     /*  Destination Class based on L3 lookup
                                           result. */
    bcmFieldQualifyDstClassField = 50,  /*  Destination Class based on
                                           bcmFieldStageLookup result. */
    bcmFieldQualifyIpInfo = 51,         /*  IP Information (BCM_FIELD_IP_xxx). */
    bcmFieldQualifyIpProtocolCommon = 52, /*  3: Common IP protocols. */
    bcmFieldQualifyMHOpcode = 53,       /*  Module Header Opcode. */
    bcmFieldQualifyIpFlags = 54,        /*  IPv4 Flags. */
    bcmFieldQualifyInnerTpid = 55,      /*  2: Inner VLAN TPID. */
    bcmFieldQualifyOuterTpid = 56,      /*  2: Outer VLAN TPID. */
    bcmFieldQualifyInnerIpType = 57,    /*  Inner ip header IP Type
                                           (bcmFieldIpTypeXXX). */
    bcmFieldQualifyTunnelType = 58,     /*  TunnelType (bcmFieldTunnelXXX). */
    bcmFieldQualifyLoopbackType = 59,   /*  LoopbackType
                                           (bcmFieldLoopbackTypeXXX). */
    bcmFieldQualifyLoopback = 60,       /*  Packets forwarded through loopback
                                           interface. */
    bcmFieldQualifyIpType = 61,         /*  IP Type (bcmFieldIpTypeXXX). */
    bcmFieldQualifyForwardingType = 62, /*  Packet forwarding type
                                           (bcmFieldForwardingTypeXXX). */
    bcmFieldQualifyDecap = 63,          /*  Decapsulation occurred. */
    bcmFieldQualifyHiGig = 64,          /*  HiGig packet. */
    bcmFieldQualifyHiGigProxy = 65,     /*  HiGig proxy processing is enabled. */
    bcmFieldQualifyDstHiGig = 66,       /*  Packet being forwarded to higig
                                           port. */
    bcmFieldQualifyStage = 67,          /*  Field Processor pipeline stage. */
    bcmFieldQualifyStageIngress = 68,   /*  Field Processor pipeline ingress
                                           stage. */
    bcmFieldQualifyStageIngressSecurity = 69, /*  Field Processor ingress security
                                           stage. */
    bcmFieldQualifyStageIngressQoS = 70, /*  Field Processor ingress QOS stage. */
    bcmFieldQualifyStageLookup = 71,    /*  Field Processor pipeline lookup
                                           stage. */
    bcmFieldQualifyStageEgress = 72,    /*  Field Processor pipeline egress
                                           stage. */
    bcmFieldQualifyStageEgressSecurity = 73, /*  Field Processor egress security
                                           stage. */
    bcmFieldQualifyStageExternal = 74,  /*  Field Processor Rules in External
                                           slice. */
    bcmFieldQualifySrcIpEqualDstIp = 75, /*  Src IP == Dst IP. */
    bcmFieldQualifyEqualL4Port = 76,    /*  L4 Src Port == Dst Port. */
    bcmFieldQualifyTcpSequenceZero = 77, /*  Sequence number = 0. */
    bcmFieldQualifyTcpHeaderSize = 78,  /*  TCP Header Size. */
    bcmFieldQualifyInterfaceClassL2 = 79, /*  Vlan Class Id. */
    bcmFieldQualifyInterfaceClassL3 = 80, /*  L3 Interface Class Id. */
    bcmFieldQualifyInterfaceClassPort = 81, /*  Port Class Id. */
    bcmFieldQualifyL3Routable = 82,     /*  L3 routable bit for FB2. */
    bcmFieldQualifyIpFrag = 83,         /*  IP Fragment info. */
    bcmFieldQualifyVrf = 84,            /*  VRF Id for FB 2. */
    bcmFieldQualifyL3Ingress = 85,      /*  L3 ingress interface. */
    bcmFieldQualifyOutPort = 86,        /*  Single Output Port. */
    bcmFieldQualifyIp4 = 87,            /*  Qualify IpType == IPv4Any. */
    bcmFieldQualifyIp6 = 88,            /*  Qualify IpType == Ipv6Any. */
    bcmFieldQualifyL2Format = 89,       /*  Qualify on L2 header format. */
    bcmFieldQualifyVlanFormat = 90,     /*  Qualify on vlan tag format. */
    bcmFieldQualifyTranslatedVlanFormat = 91, /*  Qualify on translated vlan tag
                                           format. */
    bcmFieldQualifyExtensionHeaderType = 92, /*  Qualify on  Next Header Field in
                                           First Extension Header. */
    bcmFieldQualifyExtensionHeaderSubCode = 93, /*  Qualify on First byte after
                                           extentsion header length field. */
    bcmFieldQualifyExtensionHeader2Type = 94, /*  Qualify on  Next Header Field in
                                           Second Extension Header. */
    bcmFieldQualifyL4Ports = 95,        /*  Four bytes after L3 header are
                                           available. */
    bcmFieldQualifyMirrorCopy = 96,     /*  Qualify mirrored traffic. */
    bcmFieldQualifyTunnelTerminated = 97, /*  Qualify tunnel terminated traffic. */
    bcmFieldQualifyMplsTerminated = 98, /*  Qualify mpls terminated traffic. */
    bcmFieldQualifyInnerSrcIp = 99,     /*  Inner ip header source IPv6 Address. */
    bcmFieldQualifyInnerDstIp = 100,    /*  Inner ip header destination IPv6
                                           Address. */
    bcmFieldQualifyInnerSrcIp6 = 101,   /*  Inner ip header source IPv6 Address. */
    bcmFieldQualifyInnerDstIp6 = 102,   /*  Inner ip header destination IPv6
                                           Address. */
    bcmFieldQualifyInnerSrcIp6High = 103, /*  Inner ip header Src. IPv6 Address
                                           (High/Upper 64 bits). */
    bcmFieldQualifyInnerDstIp6High = 104, /*  Inner ip header Dest IPv6 Address
                                           (High/Upper 64 bits). */
    bcmFieldQualifyInnerTtl = 105,      /*  Inner ip header time To Live/Hop
                                           Limit. */
    bcmFieldQualifyInnerIp6HopLimit = bcmFieldQualifyInnerTtl, /*  Inner IPv6 header Hop Limit. */
    bcmFieldQualifyInnerTos = 106,      /*  Inner ip header diffserv Code Point. */
    bcmFieldQualifyInnerDSCP = bcmFieldQualifyInnerTos, /*  Inner DSCP */
    bcmFieldQualifyInnerIp6TrafficClass = bcmFieldQualifyInnerTos, /*  Inner IPv6 header Traffic Class. */
    bcmFieldQualifyInnerIpProtocol = 107, /*  Inner ip header IP Protocol Field. */
    bcmFieldQualifyInnerIp6NextHeader = bcmFieldQualifyInnerIpProtocol, /*  Inner Ip6 header  Next Header/IP
                                           Protocol. */
    bcmFieldQualifyInnerIpFrag = 108,   /*  Inner ip header IP Fragment info. */
    bcmFieldQualifyVlanTranslationHit = 109, /*  Vlan Translation table hit. */
    bcmFieldQualifyForwardingVlanValid = 110, /*  Forwarding vlan is valid. */
    bcmFieldQualifyIngressStpState = 111, /*  Ingress Vlan STG STP state. */
    bcmFieldQualifyL2SrcHit = 112,      /*  L2 Source lookup success. */
    bcmFieldQualifyL2SrcStatic = 113,   /*  L2 Source is static entry. */
    bcmFieldQualifyL2DestHit = 114,     /*  L2 Destination lookup success. */
    bcmFieldQualifyL2StationMove = 115, /*  L2 Source port mismatch. */
    bcmFieldQualifyL2CacheHit = 116,    /*  L2 Destination cache lookup sucess. */
    bcmFieldQualifyL3SrcHostHit = 117,  /*  L3 Source lookup host table hit. */
    bcmFieldQualifyL3DestHostHit = 118, /*  L3 Destination lookup host table
                                           hit. */
    bcmFieldQualifyL3DestRouteHit = 119, /*  L3 Destination lookup route table
                                           hit. */
    bcmFieldQualifyIpmcStarGroupHit = 120, /*  L3 Multicast lookup (Star,Group)
                                           hit. */
    bcmFieldQualifyDosAttack = 121,     /*  Denial of Service attack frame. */
    bcmFieldQualifyIpAuth = 122,        /*  IP Authenticated. */
    bcmFieldQualifyClassId = 123,       /*  internal use only. */
    bcmFieldQualifyBigIcmpCheck = 124,  /*  internal use only. */
    bcmFieldQualifyIcmpTypeCode = 125,  /*  internal use only. */
    bcmFieldQualifyIgmpTypeMaxRespTime = 126, /*  internal use only. */
    bcmFieldQualifyInnerIpProtocolCommon = 127, /*  Inner ip header IP Protocol Common
                                           Field. */
    bcmFieldQualifyInnerL4SrcPort = 128, /*  TCP/UDP Source Port. */
    bcmFieldQualifyInnerL4DstPort = 129, /*  TCP/UDP Destination Port. */
    bcmFieldQualifyInnerIp6FlowLabel = 130, /*  Inner IPv6 header Flow Label. */
    bcmFieldQualifyDstL3Egress = 131,   /*  Egress Object id. */
    bcmFieldQualifyDstMulticastGroup = 132, /*  Multicast Group id. */
    bcmFieldQualifySrcMplsGport = 133,  /*  Source Mpls gport. */
    bcmFieldQualifyDstMplsGport = 134,  /*  Destination Mpls gport. */
    bcmFieldQualifySrcMimGport = 135,   /*  Source Mim gport. */
    bcmFieldQualifyDstMimGport = 136,   /*  Destination Mim gport. */
    bcmFieldQualifySrcWlanGport = 137,  /*  Source Wlan gport. */
    bcmFieldQualifyDstWlanGport = 138,  /*  Destination Wlan gport. */
    bcmFieldQualifySrcModPortGport = 139, /*  Source module/port pair. */
    bcmFieldQualifySrcModuleGport = 140, /*  Source module. */
    bcmFieldQualifyColor = 141,         /*  Packet color. */
    bcmFieldQualifyIntPriority = 142,   /*  Internal priority. */
    bcmFieldQualifyForwardingVlanId = 143, /*  Forwarding vlan id. */
    bcmFieldQualifyVpn = 144,           /*  Vpn id. */
    bcmFieldQualifyFlowId = 145,        /*  Flow id. */
    bcmFieldQualifyInVPort = 146,       /*  Ingress virtual port id. */
    bcmFieldQualifyOutVPort = 147,      /*  Egress virtual port id. */
    bcmFieldQualifyFibreChanOuter = 148, /*  Outer Fibre Channel header type. */
    bcmFieldQualifyFibreChanInner = 149, /*  Inner Fibre Channel header type. */
    bcmFieldQualifyVnTag = 150,         /*  NIV VN tag. */
    bcmFieldQualifyCnTag = 151,         /*  QCN CN tag. */
    bcmFieldQualifyFabricQueueTag = 152, /*  Fabric queue tag. */
    bcmFieldQualifyMyStationHit = 153,  /*  MPLS My Station lookup table hit. */
    bcmFieldQualifyDstMultipath = 154,  /*  Destination Multipath ID. */
    bcmFieldQualifyL2PayloadFirstEightBytes = 155, /*  First eight bytes of L2 Payload. */
    bcmFieldQualifySrcVirtualPortValid = 156, /*  Source Virtual Port is valid. */
    bcmFieldQualifyDstL3EgressNextHops = 157, /*  Consecutive L3 Egress Next hops. */
    bcmFieldQualifyRecoverableDrop = 158, /*  Recoverable drop indication. */
    bcmFieldQualifyRepCopy = 159,       /*  Externally-replicated copy. */
    bcmFieldQualifyIpTunnelHit = 160,   /*  IP tunnel lookup hit. */
    bcmFieldQualifyMplsLabel1Hit = 161, /*  MPLS label 1 lookup hit. */
    bcmFieldQualifyTrillEgressRbridgeHit = 162, /*  TRILL egress Rbridge lookup hit. */
    bcmFieldQualifyL2GreSrcIpHit = 163, /*  Layer 2 GRE source IP address lookup
                                           hit. */
    bcmFieldQualifyMimSrcGportHit = 164, /*  MiM source port lookup hit. */
    bcmFieldQualifyMplsLabel2Hit = 165, /*  MPLS label 2 lookup hit. */
    bcmFieldQualifyTrillIngressRbridgeHit = 166, /*  TRILL ingress Rbridge lookup hit. */
    bcmFieldQualifyL2GreVfiHit = 167,   /*  Layer 2 GRE VFI lookup hit. */
    bcmFieldQualifyMimVfiHit = 168,     /*  MiM VFI lookup hit. */
    bcmFieldQualifyGenericAssociatedChannelLabelValid = 169, /*  MPLS GAL valid. */
    bcmFieldQualifyRouterAlertLabelValid = 170, /*  MPLS RAL valid. */
    bcmFieldQualifyDstIpLocal = 171,    /*  Dest IP is local. */
    bcmFieldQualifyNormalizeIpAddrs = 172, /*  Normalize IP addresses. */
    bcmFieldQualifyNormalizeMacAddrs = 173, /*  Normalize MAC addresses. */
    bcmFieldQualifyIpAddrsNormalized = 174, /*  IP addresses were normalized. */
    bcmFieldQualifyMacAddrsNormalized = 175, /*  MAC addresses were normalized. */
    bcmFieldQualifyMplsForwardingLabel = 176, /*  MPLS forwarding label. */
    bcmFieldQualifyMplsForwardingLabelTtl = 177, /*  TTL field of MPLS forwarding label. */
    bcmFieldQualifyMplsForwardingLabelBos = 178, /*  BOS field of MPLS forwarding label. */
    bcmFieldQualifyMplsForwardingLabelExp = 179, /*  EXP field of MPLS forwarding label. */
    bcmFieldQualifyMplsForwardingLabelId = 180, /*  ID field of MPLS forwarding label. */
    bcmFieldQualifyMplsControlWord = 181, /*  MPLS control word. */
    bcmFieldQualifyRtag7AHashUpper = 182, /*  Upper half of RTAG7 hash A result. */
    bcmFieldQualifyRtag7AHashLower = 183, /*  Lower half of RTAG7 hash A result. */
    bcmFieldQualifyRtag7BHashUpper = 184, /*  Upper half of RTAG7 hash B result. */
    bcmFieldQualifyRtag7BHashLower = 185, /*  Lower half of RTAG7 hash B result. */
    bcmFieldQualifyMplsForwardingLabelAction = 186, /*  MPLS forwarding label action. */
    bcmFieldQualifyMplsControlWordValid = 187, /*  MPLS control word valid. */
    bcmFieldQualifyEgressClass = 188,   /* Class assigned by next hop */
    bcmFieldQualifyEgressClassL3Interface = 189, /* Class assigned by egress interface */
    bcmFieldQualifyEgressClassTrill = 190, /* Class assigned by egress TRILL */
    bcmFieldQualifyEgressClassWlan = 191, /* Class assigned by egress WLAN */
    bcmFieldQualifyEgressClassL2Gre = 192, /* Class assigned by egress L2 GRE */
    bcmFieldQualifyLlidValue = 193,     /*  LLID value (2 bytes) in preamble. */
    bcmFieldQualifyCpuQueue = 194,      /*  CPU COS Queue value. */
    bcmFieldQualifyMpls = 195,          /* Qualify on MPLS packets */
    bcmFieldQualifySrcGport = 196,      /*  Source module/port pair or
                                           MPLS/MiM/WLAN/Niv port. */
    bcmFieldQualifyHeaderFormat = 197,  /* Qualify on header format */
    bcmFieldQualifyHeaderFormatSet = 198, /* Qualify on header format set */
    bcmFieldQualifyL2Learn = 199,       /* Set if L2 learning is enabled */
    bcmFieldQualifyPortOrientation = 200, /* Orientation in a Hub-Spoke topology
                                           (Hub or Spoke) */
    bcmFieldQualifyEcnValue = 201,      /* ECN Value */
    bcmFieldQualifyRxTrapCode = 202,    /* Rx Trap Id */
    bcmFieldQualifyPtch = 203,          /* Opaque attribute field of the
                                           Injected packets. Part of the PTCH
                                           header in 88650 */
    bcmFieldQualifyMplsBos = 204,       /* Qualify on packets whose header
                                           parsing reached the MPLS BoS label */
    bcmFieldQualifyRxTrapData = 205,    /* Rx Trap Data */
    bcmFieldQualifyPolicerIntPrio = 206, /* Internal priority for the policer */
    bcmFieldQualifyPacketTerminatedBytes = 207, /* Number of bytes terminated */
    bcmFieldQualifyBypassFilter = 208,  /* Qualify packets bypassing any
                                           filtering */
    bcmFieldQualifyReplicantAny = 209,  /* Qualify any Multicast packets */
    bcmFieldQualifyReplicantFirst = 210, /* First-replication copy of the packet */
    bcmFieldQualifyTrillEgressRbridge = 211, /* Egress RBridge Nickname */
    bcmFieldQualifyISid = 212,          /* I-SID (MAC-in-MAC lookup-id) */
    bcmFieldQualifyInterfaceClassProcessingPort = 213, /* Packet-processing Port Class ID */
    bcmFieldQualifyDstRpfGport = 214,   /* RPF destination (gport) for the RPF
                                           Check */
    bcmFieldQualifyTrunkHashResult = 215, /* Trunk Hash Result (i.e., the
                                           Load-balancing Key) */
    bcmFieldQualifyDhcp = 216,          /* Qualify DHCP packets */
    bcmFieldQualifySnoopCopy = 217,     /* Snooped traffic */
    bcmFieldQualifyForwardCopy = 218,   /* Forwarded traffic */
    bcmFieldQualifyInterfaceClassVPort = 219, /* Virtual Port Interface Class ID */
    bcmFieldQualifyVPortRangeCheck = 220, /* Virtual Port Range Check Results */
    bcmFieldQualifyPacketLengthRangeCheck = 221, /* Packet length Range Check Results */
    bcmFieldQualifyStageIngressVlanTranslation = 222, /* VLAN Translation stage */
    bcmFieldQualifyStageIngressTunnelTerminated = 223, /* Tunnel termination stage */
    bcmFieldQualifyStageIngressMplsTerminated = 224, /* MPLS Termination stage */
    bcmFieldQualifyStageIngressIpTunnel = 225, /* IP tunnel termination stage */
    bcmFieldQualifyStageIngressL2Src = 226, /* L2 Source lookup stage */
    bcmFieldQualifyStageIngressL2Dest = 227, /* L2 Destination lookup stage */
    bcmFieldQualifyStageIngressL3SrcRoute = 228, /* L3 Source Route lookup stage */
    bcmFieldQualifyStageIngressL3DestRoute = 229, /* L3 Destination Route lookup stage */
    bcmFieldQualifyStageIngressIpmc = 230, /* IP Multicast lookup stage */
    bcmFieldQualifyTunnelTerminatedHit = 231, /* Tunnel termination hit */
    bcmFieldQualifyMplsTerminatedHit = 232, /* MPLS Termination hit */
    bcmFieldQualifyL3SrcRouteHit = 233, /* L3 Source Route lookup hit */
    bcmFieldQualifyIpmcHit = 234,       /* IP Multicast lookup hit */
    bcmFieldQualifyVlanTranslationValue = 235, /* VLAN Translation lookup value */
    bcmFieldQualifyTunnelTerminatedValue = 236, /* Tunnel Termination lookup value */
    bcmFieldQualifyMplsTerminatedValue = 237, /* MPLS Termination lookup value */
    bcmFieldQualifyIpTunnelValue = 238, /* IP Tunnel Termination lookup value */
    bcmFieldQualifyL2SrcValue = 239,    /* L2 Source lookup value */
    bcmFieldQualifyL2DestValue = 240,   /* L2 Destination lookup value */
    bcmFieldQualifyL3SrcRouteValue = 241, /* L3 Source lookup value */
    bcmFieldQualifyL3DestRouteValue = 242, /* L3 Destination lookup value */
    bcmFieldQualifyIpmcValue = 243,     /* IP Multicast lookup value */
    bcmFieldQualifyLearnSrcMac = 244,   /* MAC Source Address learnt */
    bcmFieldQualifyLearnVlan = 245,     /* Vlan learnt */
    bcmFieldQualifyLearnSrcPort = 246,  /* Source Port learnt */
    bcmFieldQualifyPacketSize = 247,    /* Packet size in Bytes. */
    bcmFieldQualifyInnerSrcMac = 248,   /* Inner Source L2 MAC Address. */
    bcmFieldQualifyInnerDstMac = 249,   /* Inner Destination L2 MAC Address. */
    bcmFieldQualifyInnerEtherType = 250, /* Inner Ethernet Type */
    bcmFieldQualifyMplsLabel1 = 251,    /* MPLS Label 1 */
    bcmFieldQualifyMplsLabel1Ttl = 252, /* TTL field of the first MPLS Label */
    bcmFieldQualifyMplsLabel1Bos = 253, /* BoS field of the first MPLS Label */
    bcmFieldQualifyMplsLabel1Exp = 254, /* Exp field of the first MPLS Label */
    bcmFieldQualifyMplsLabel1Id = 255,  /* ID field of the first MPLS Label */
    bcmFieldQualifyMplsLabel2 = 256,    /* MPLS Label 2 */
    bcmFieldQualifyMplsLabel2Ttl = 257, /* TTL field of the second MPLS Label */
    bcmFieldQualifyMplsLabel2Bos = 258, /* BoS field of the second MPLS Label */
    bcmFieldQualifyMplsLabel2Exp = 259, /* Exp field of the second MPLS Label */
    bcmFieldQualifyMplsLabel2Id = 260,  /* ID field of the second MPLS Label */
    bcmFieldQualifyMplsLabel3 = 261,    /* MPLS Label 3 */
    bcmFieldQualifyMplsLabel3Ttl = 262, /* TTL field of the third MPLS Label */
    bcmFieldQualifyMplsLabel3Bos = 263, /* BoS field of the third MPLS Label */
    bcmFieldQualifyMplsLabel3Exp = 264, /* Exp field of the third MPLS Label */
    bcmFieldQualifyMplsLabel3Id = 265,  /* ID field of the third MPLS Label */
    bcmFieldQualifyCascadedKeyValue = 266, /* Value of key cascaded from prior
                                           group in cascade */
    bcmFieldQualifyMplsOuterLabelPop = 267, /* Qualifies MPLS Outer Label Popped
                                           Packets */
    bcmFieldQualifyMplsStationHitTunnelUnterminated = 268, /* Qualifies Mpls Station Hit Tunnel
                                           Unterminated Packets */
    bcmFieldQualifyIngressClassField = 269, /* Class Id assigned for packet by
                                           Ingress Stage */
    bcmFieldQualifyIngressInterfaceClassPort = 270, /* Class Id assigned for packet based on
                                           Ingress Port */
    bcmFieldQualifyExternalValue0 = 271, /* External lookup 0 value */
    bcmFieldQualifyExternalValue1 = 272, /* External lookup 1 value */
    bcmFieldQualifyExternalValue2 = 273, /* External lookup 2 value */
    bcmFieldQualifyExternalValue3 = 274, /* External lookup 3 value */
    bcmFieldQualifyExternalHit0 = 275,  /* External lookup 0 hit */
    bcmFieldQualifyExternalHit1 = 276,  /* External lookup 1 hit */
    bcmFieldQualifyExternalHit2 = 277,  /* External lookup 2 hit */
    bcmFieldQualifyExternalHit3 = 278,  /* External lookup 3 hit */
    bcmFieldQualifyVpnUnknownDstMacDstPort = 279, /* Destination for unknown-DA packets.
                                           Set per Vpn. */
    bcmFieldQualifyVxlanNetworkId = 280, /* Vxlan Network/Segment Id */
    bcmFieldQualifyVxlanFlags = 281,    /* VxLan header Flags */
    bcmFieldQualifyNatNeeded = 282,     /* Qualify packekts where NAT is needed */
    bcmFieldQualifyNatDstRealmId = 283, /* Qualify packets on Dst Realm Id */
    bcmFieldQualifyNatSrcRealmId = 284, /* Qualify packets on Src Realm Id */
    bcmFieldQualifyIcmpError = 285,     /* Qualifies any packet with ICMP Error */
    bcmFieldQualifyTunnelId = 286,      /* Tunnel Id */
    bcmFieldQualifyArpSenderIp4 = 287,  /* Sender IPv4 field of ARP header */
    bcmFieldQualifyArpTargetIp4 = 288,  /* Target IPv4 field of ARP header */
    bcmFieldQualifyArpOpcode = 289,     /* Opcode field of ARP header.Values set
                                           according to bcmFieldArpOpcode */
    bcmFieldQualifyTranslatedOuterVlan = 290, /* Translated Outer VLAN ID, Cfi,
                                           Priority */
    bcmFieldQualifyTranslatedOuterVlanId = 291, /* Translated Outer VLAN ID */
    bcmFieldQualifyTranslatedOuterVlanPri = 292, /* Translated Outer VLAN Priority */
    bcmFieldQualifyTranslatedOuterVlanCfi = 293, /* Translated Outer VLAN Cfi */
    bcmFieldQualifyTranslatedInnerVlan = 294, /* Translated Inner VLAN ID, Cfi,
                                           Priority */
    bcmFieldQualifyTranslatedInnerVlanId = 295, /* Translated Inner VLAN ID */
    bcmFieldQualifyTranslatedInnerVlanPri = 296, /* Translated Inner VLAN Priority */
    bcmFieldQualifyTranslatedInnerVlanCfi = 297, /* Translated Inner VLAN Cfi */
    bcmFieldQualifyConstantZero = 298,  /* Constant zero-value. Useful for
                                           Direct group mode. */
    bcmFieldQualifyConstantOne = 299,   /* Constant one-value. Useful for Direct
                                           group mode. */
    bcmFieldQualifyFibreChanRCtl = 300, /* Fibre Channel's R_Ctl (Routing
                                           Control) flags. */
    bcmFieldQualifyFibreChanFCtl = 301, /* Fibre Channel's F_Ctl (Frame Control)
                                           flags. */
    bcmFieldQualifyFibreChanCSCtl = 302, /* Fibre Channel's CS_Ctl (Class
                                           Specified Control) flags. */
    bcmFieldQualifyFibreChanDFCtl = 303, /* Fibre Channel's DF_Ctl (Data Field
                                           Control) flags. */
    bcmFieldQualifyFibreChanType = 304, /* Match an FP entry based on Fibre
                                           Channel's Type. */
    bcmFieldQualifyFibreChanSrcId = 305, /* Fibre Channel's Src Id */
    bcmFieldQualifyFibreChanDstId = 306, /* Fibre Channel's Dst Id. */
    bcmFieldQualifyFibreChanZoneCheck = 307, /* Fibre Channel's Zone Check Status
                                           (BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_xxx). */
    bcmFieldQualifyFibreChanSrcFpmaCheck = 308, /* Fibre Channel's Src FPMA Prefix Check
                                           Status. */
    bcmFieldQualifyFibreChanSrcBindCheck = 309, /* Fibre Channel's Src Bind Check
                                           Status. */
    bcmFieldQualifyFibreChanVFTVersion = 310, /* Fibre Channel's VFT version. */
    bcmFieldQualifyFibreChanVFTPri = 311, /* Fibre Channel's VFT Priority. */
    bcmFieldQualifyFibreChanVFTFabricId = 312, /* Fibre Channel's VFT Fabric Id. */
    bcmFieldQualifyFibreChanVFTHopCount = 313, /* Fibre Channel's VFT Hop Count. */
    bcmFieldQualifyFibreChanVFTVsanId = 314, /* Fibre Channel's VFT Internal VSAN ID. */
    bcmFieldQualifyFibreChanVFTVsanPri = 315, /* Fibre Channel's VFT VSAN Priority. */
    bcmFieldQualifyFibreChanVFTValid = 316, /* Fibre Channel's VFT header
                                           presence/validity. */
    bcmFieldQualifyFcoeSOF = 317,       /* Match an FP entry based on Fcoe SOF. */
    bcmFieldQualifyFcoeVersionIsZero = 318, /* FCoE Version Is Zero. */
    bcmFieldQualifyForwardingHeaderOffset = 319, /* Distance of the forwarding header
                                           from the start-of-packet. Unit:
                                           bytes. */
    bcmFieldQualifyL3SrcBind = 320,     /*  L3 source bind lookup success. */
    bcmFieldQualifyECid = 321,          /* E-CID base. Same as ExtenderPortVid. */
    bcmFieldQualifyIngressECid = 322,   /* Ingress E-CID base. */
    bcmFieldQualifyETag = 323,          /* E-Tag value. */
    bcmFieldQualifyIngressVPortBridgeDisable = 324, /* Ingress VPort Bridge same-interface
                                           disabled */
    bcmFieldQualifyHashValue = 325,     /* Hash value */
    bcmFieldQualifyIsEqualValue = 326,  /* Result value of the is-equal
                                           operation */
    bcmFieldQualifyStageHash = 327,     /* Hashing stage */
    bcmFieldQualifyUrpfMode = 328,      /* URPF mode according to
                                           bcm_field_urpf_mode_t */
    bcmFieldQualifyAppType = 329,       /*  Packet Application type
                                           (bcmFieldAppTypeXXX). */
    bcmFieldQualifySubportPktTag = 330, /* Ingress LLTAG. */
    bcmFieldQualifySrcVxlanGport = 331, /* Qualify vxlan source gport. */
    bcmFieldQualifyDstVxlanGport = 332, /*  Qualify vxlan destination gport. */
    bcmFieldQualifyOamMdl = 333,        /*  Qualify OAM Maintenance Domain
                                           Levels. */
    bcmFieldQualifyIntCongestionNotification = 334, /*  Qualify internal congestion
                                           notification value. */
    bcmFieldQualifySrcNivGport = 335,   /*  Source Niv gport. */
    bcmFieldQualifyDstNivGport = 336,   /*  Destination Niv gport. */
    bcmFieldQualifyDstGport = 337,      /*  Destination Niv port. */
    bcmFieldQualifyMirrorEgressDisabled = 338, /*  Egress Mirroring disabled. */
    bcmFieldQualifyBypassSrcMacFilter = 339, /*  Qualify packets bypassing Source MAC
                                           Address filtering. */
    bcmFieldQualifyRxTrapCodeForSnoop = 340, /*  Rx Trap code ID used for snoop. */
    bcmFieldQualifyIpmcStarGroupValue = 341, /*  L3 Multicast lookup (Star,Group)
                                           Value. */
    bcmFieldQualifyNativeVSwitch = 342, /*  Native-VSwitch (for
                                           Routing-over-overlay packets). */
    bcmFieldQualifyNativeVSwitchValid = 343, /*  Valid native-VSwitch (for
                                           Routing-over-overlay packets). */
    bcmFieldQualifyTrillIVersion = 344, /*  TRILL version field. */
    bcmFieldQualifyTrillIngressRbridge = 345, /*  Ingress Rbridge Nickname. */
    bcmFieldQualifyTrillMultiDestination = 346, /*  RILL Multi-destination field. */
    bcmFieldQualifyTrillOpLength = 347, /*  TRILL Options length field. */
    bcmFieldQualifyTrillHopCount = 348, /*  TRILL Hop count field . */
    bcmFieldQualifyTrillPayload = 349,  /*  Payload of TRILL header. */
    bcmFieldQualifyMplsForwardingLabelPayload = 350, /*  Payload of MPLS forwarding label. */
    bcmFieldQualifyIncomingIpIfClass = 351, /*  Incoming IP interface Class ID. */
    bcmFieldQualifyL2GreProtocolType = 352, /*  L2GRE Protocol type field . */
    bcmFieldQualifyL2GreVsid = 353,     /*  L2GRE Virtual Subnet ID field. */
    bcmFieldQualifyL2GreFlowId = 354,   /*  L2GRE Flow ID field. */
    bcmFieldQualifyMimVlanPri = 355,    /*  MAC-in-MAC VLAN Priority field. */
    bcmFieldQualifyMimVlanCfi = 356,    /*  MAC-in-MAC VLAN Cfi field. */
    bcmFieldQualifyFhei = 357,          /*  DNX FHEI header field. */
    bcmFieldQualifyFheiSize = 358,      /*  DNX FHEI header size in bytes. */
    bcmFieldQualifyEthernetOamHeaderBits0_31 = 359, /*  Ethernet OAM Header First 4 Bytes. */
    bcmFieldQualifyEthernetOamHeaderBits32_63 = 360, /*  Ethernet OAM Header Second 4 Bytes. */
    bcmFieldQualifyEthernetOamDstClassL2 = 361, /*  Ethernet OAM Destination Class based
                                           on L2 lookup result. */
    bcmFieldQualifyEthernetOamTxPktUPMEP = 362, /*  Ethernet OAM UP-MEP Tx Packet. */
    bcmFieldQualifyEthernetOamSrcPortLmStatPoolId = 363, /*  Ethernet OAM LM Stat PoolId based on
                                           SrcPort. */
    bcmFieldQualifyEthernetOamVxlt1LmStatPoolId = 364, /*  Ethernet OAM LM Stat PoolId based on
                                           1st Lookup in Vlan_Xlate table. */
    bcmFieldQualifyEthernetOamVxlt2LmStatPoolId = 365, /*  Ethernet OAM LM Stat PoolId based on
                                           2nd Lookup in Vlan_Xlate table. */
    bcmFieldQualifyEthernetOamSourceVPLmStatPoolId = 366, /*  Ethernet OAM LM Stat PoolId based on
                                           Source VP table. */
    bcmFieldQualifyEthernetOamInterfaceClassPort = 367, /*  Ethernet OAM Class Id assigned for
                                           packet based on Ingress Port. */
    bcmFieldQualifyEthernetOamClassVxlt1 = 368, /*  Ethernet OAM Class Id assigned for
                                           packet based on 1st Lookup in
                                           Vlan_Xlate table. */
    bcmFieldQualifyEthernetOamClassVxlt2 = 369, /*  Ethernet OAM Class Id assigned for
                                           packet based on 2nd Lookup in
                                           Vlan_Xlate table. */
    bcmFieldQualifyEthernetOamClassSourceVP = 370, /*  Ethernet OAM Class Id assigned for
                                           packet based on Source VP table. */
    bcmFieldQualifyEthernetOamClassVFI = 371, /*  Ethernet OAM Class Id assigned for
                                           packet based on VFI table. */
    bcmFieldQualifyMplsOamHeaderBits0_31 = 372, /*  Mpls OAM Header First 4 Bytes. */
    bcmFieldQualifyMplsOamHeaderBits32_63 = 373, /*  Mpls OAM Header Second 4 Bytes. */
    bcmFieldQualifyMplsOamGALLabelOnly = 374, /*  MPLS OAM packets having GAL Label
                                           Only. */
    bcmFieldQualifyMplsOamLmStatPoolId = 375, /*  MPLS OAM LM Stat PoolId based on
                                           MPLS_ENTRY table. */
    bcmFieldQualifyMplsOamGALExposed = 376, /*  MPLS OAM packets having GAL exposed. */
    bcmFieldQualifyMplsOamACH = 377,    /*  MPLS OAM ACH Header. */
    bcmFieldQualifyMplsOamControlPktType = 378, /*  MPLS OAM control packets based on
                                           Packet Type. */
    bcmFieldQualifyMplsOamClassMpls = 379, /*  MPLS OAM Class Id assigned for
                                           packet based on MPLS table. */
    bcmFieldQualifyOamHeaderBits0_31 = 380, /*  OAM Header First 4 Bytes. */
    bcmFieldQualifyOamHeaderBits32_63 = 381, /*  OAM Header Second 4 Bytes. */
    bcmFieldQualifyOamEgressClassVxlt = 382, /*  OAM Class Id assigned for packet
                                           based on EGR_VXLT table. */
    bcmFieldQualifyOamEgressClassPort = 383, /*  OAM Class Id assigned for packet
                                           based on Port table. */
    bcmFieldQualifyUdf = 384,           /* Qualify UDF selected data */
    bcmFieldQualifyOuterVlanActionRange = 385, /* compressed outer vlan tag */
    bcmFieldQualifyInnerVlanActionRange = 386, /* compressed inner vlan tag */
    bcmFieldQualifyCount = 387          /* Always Last. Not a usable value. */
} bcm_field_qualify_t;

#define BCM_FIELD_QUALIFY_STRINGS \
{ \
    "SrcIp6", \
    "DstIp6", \
    "SrcIp6High", \
    "DstIp6High", \
    "SrcIp6Low", \
    "DstIp6Low", \
    "SrcMac", \
    "DstMac", \
    "Snap", \
    "SrcIp", \
    "DstIp", \
    "Llc", \
    "InPort", \
    "InPorts", \
    "OutPorts", \
    "Drop", \
    "Ip6FlowLabel", \
    "OuterVlan", \
    "OuterVlanId", \
    "OuterVlanPri", \
    "OuterVlanCfi", \
    "InnerVlan", \
    "InnerVlanId", \
    "InnerVlanPri", \
    "InnerVlanCfi", \
    "LookupStatus", \
    "RangeCheck", \
    "L4SrcPort", \
    "L4DstPort", \
    "EtherType", \
    "IpProtocol", \
    "DSCP", \
    "Ttl", \
    "SrcModid", \
    "SrcPortTgid", \
    "SrcPort", \
    "SrcTrunk", \
    "SrcTrunkMemberGport", \
    "DstModid", \
    "DstPortTgid", \
    "DstPort", \
    "DstTrunk", \
    "TcpControl", \
    "PacketRes", \
    "PacketFormat", \
    "SrcClassL2", \
    "SrcClassL3", \
    "SrcClassField", \
    "DstClassL2", \
    "DstClassL3", \
    "DstClassField", \
    "IpInfo", \
    "IpProtocolCommon", \
    "MHOpcode", \
    "IpFlags", \
    "InnerTpid", \
    "OuterTpid", \
    "InnerIpType", \
    "TunnelType", \
    "LoopbackType", \
    "Loopback", \
    "IpType", \
    "ForwardingType", \
    "Decap", \
    "HiGig", \
    "HiGigProxy", \
    "DstHiGig", \
    "Stage", \
    "StageIngress", \
    "StageIngressSecurity", \
    "StageIngressQoS", \
    "StageLookup", \
    "StageEgress", \
    "StageEgressSecurity", \
    "StageExternal", \
    "SrcIpEqualDstIp", \
    "EqualL4Port", \
    "TcpSequenceZero", \
    "TcpHeaderSize", \
    "InterfaceClassL2", \
    "InterfaceClassL3", \
    "InterfaceClassPort", \
    "L3Routable", \
    "IpFrag", \
    "Vrf", \
    "L3Ingress", \
    "OutPort", \
    "Ip4", \
    "Ip6", \
    "L2Format", \
    "VlanFormat", \
    "TranslatedVlanFormat", \
    "ExtensionHeaderType", \
    "ExtensionHeaderSubCode", \
    "ExtensionHeader2Type", \
    "L4Ports", \
    "MirrorCopy", \
    "TunnelTerminated", \
    "MplsTerminated", \
    "InnerSrcIp", \
    "InnerDstIp", \
    "InnerSrcIp6", \
    "InnerDstIp6", \
    "InnerSrcIp6High", \
    "InnerDstIp6High", \
    "InnerTtl", \
    "InnerTos", \
    "InnerIpProtocol", \
    "InnerIpFrag", \
    "VlanTranslationHit", \
    "ForwardingVlanValid", \
    "IngressStpState", \
    "L2SrcHit", \
    "L2SrcStatic", \
    "L2DestHit", \
    "L2StationMove", \
    "L2CacheHit", \
    "L3SrcHostHit", \
    "L3DestHostHit", \
    "L3DestRouteHit", \
    "IpmcStarGroupHit", \
    "DosAttack", \
    "IpAuth", \
    "ClassId", \
    "BigIcmpCheck", \
    "IcmpTypeCode", \
    "IgmpTypeMaxRespTime", \
    "InnerIpProtocolCommon", \
    "InnerL4SrcPort", \
    "InnerL4DstPort", \
    "InnerIp6FlowLabel", \
    "DstL3Egress", \
    "DstMulticastGroup", \
    "SrcMplsGport", \
    "DstMplsGport", \
    "SrcMimGport", \
    "DstMimGport", \
    "SrcWlanGport", \
    "DstWlanGport", \
    "SrcModPortGport", \
    "SrcModuleGport", \
    "Color", \
    "IntPriority", \
    "ForwardingVlanId", \
    "Vpn", \
    "FlowId", \
    "InVPort", \
    "OutVPort", \
    "FibreChanOuter", \
    "FibreChanInner", \
    "VnTag", \
    "CnTag", \
    "FabricQueueTag", \
    "MyStationHit", \
    "DstMultipath", \
    "L2PayloadFirstEightBytes", \
    "SrcVirtualPortValid", \
    "DstL3EgressNextHops", \
    "RecoverableDrop", \
    "RepCopy", \
    "IpTunnelHit", \
    "MplsLabel1Hit", \
    "TrillEgressRbridgeHit", \
    "L2GreSrcIpHit", \
    "MimSrcGportHit", \
    "MplsLabel2Hit", \
    "TrillIngressRbridgeHit", \
    "L2GreVfiHit", \
    "MimVfiHit", \
    "GenericAssociatedChannelLabelValid", \
    "RouterAlertLabelValid", \
    "DstIpLocal", \
    "NormalizeIpAddrs", \
    "NormalizeMacAddrs", \
    "IpAddrsNormalized", \
    "MacAddrsNormalized", \
    "MplsForwardingLabel", \
    "MplsForwardingLabelTtl", \
    "MplsForwardingLabelBos", \
    "MplsForwardingLabelExp", \
    "MplsForwardingLabelId", \
    "MplsControlWord", \
    "Rtag7AHashUpper", \
    "Rtag7AHashLower", \
    "Rtag7BHashUpper", \
    "Rtag7BHashLower", \
    "MplsForwardingLabelAction", \
    "MplsControlWordValid", \
    "EgressClass", \
    "EgressClassL3Interface", \
    "EgressClassTrill", \
    "EgressClassWlan", \
    "EgressClassL2Gre", \
    "LlidValue", \
    "CpuQueue", \
    "Mpls", \
    "SrcGport", \
    "HeaderFormat", \
    "HeaderFormatSet", \
    "L2Learn", \
    "PortOrientation", \
    "EcnValue", \
    "RxTrapCode", \
    "Ptch", \
    "MplsBos", \
    "RxTrapData", \
    "PolicerIntPrio", \
    "PacketTerminatedBytes", \
    "BypassFilter", \
    "ReplicantAny", \
    "ReplicantFirst", \
    "TrillEgressRbridge", \
    "ISid", \
    "InterfaceClassProcessingPort", \
    "DstRpfGport", \
    "TrunkHashResult", \
    "Dhcp", \
    "SnoopCopy", \
    "ForwardCopy", \
    "InterfaceClassVPort", \
    "VPortRangeCheck", \
    "PacketLengthRangeCheck", \
    "StageIngressVlanTranslation", \
    "StageIngressTunnelTerminated", \
    "StageIngressMplsTerminated", \
    "StageIngressIpTunnel", \
    "StageIngressL2Src", \
    "StageIngressL2Dest", \
    "StageIngressL3SrcRoute", \
    "StageIngressL3DestRoute", \
    "StageIngressIpmc", \
    "TunnelTerminatedHit", \
    "MplsTerminatedHit", \
    "L3SrcRouteHit", \
    "IpmcHit", \
    "VlanTranslationValue", \
    "TunnelTerminatedValue", \
    "MplsTerminatedValue", \
    "IpTunnelValue", \
    "L2SrcValue", \
    "L2DestValue", \
    "L3SrcRouteValue", \
    "L3DestRouteValue", \
    "IpmcValue", \
    "LearnSrcMac", \
    "LearnVlan", \
    "LearnSrcPort", \
    "PacketSize", \
    "InnerSrcMac", \
    "InnerDstMac", \
    "InnerEtherType", \
    "MplsLabel1", \
    "MplsLabel1Ttl", \
    "MplsLabel1Bos", \
    "MplsLabel1Exp", \
    "MplsLabel1Id", \
    "MplsLabel2", \
    "MplsLabel2Ttl", \
    "MplsLabel2Bos", \
    "MplsLabel2Exp", \
    "MplsLabel2Id", \
    "MplsLabel3", \
    "MplsLabel3Ttl", \
    "MplsLabel3Bos", \
    "MplsLabel3Exp", \
    "MplsLabel3Id", \
    "CascadedKeyValue", \
    "MplsOuterLabelPop", \
    "MplsStationHitTunnelUnterminated", \
    "IngressClassField", \
    "IngressInterfaceClassPort", \
    "ExternalValue0", \
    "ExternalValue1", \
    "ExternalValue2", \
    "ExternalValue3", \
    "ExternalHit0", \
    "ExternalHit1", \
    "ExternalHit2", \
    "ExternalHit3", \
    "VpnUnknownDstMacDstPort", \
    "VxlanNetworkId", \
    "VxlanFlags", \
    "NatNeeded", \
    "NatDstRealmId", \
    "NatSrcRealmId", \
    "IcmpError", \
    "TunnelId", \
    "ArpSenderIp4", \
    "ArpTargetIp4", \
    "ArpOpcode", \
    "TranslatedOuterVlan", \
    "TranslatedOuterVlanId", \
    "TranslatedOuterVlanPri", \
    "TranslatedOuterVlanCfi", \
    "TranslatedInnerVlan", \
    "TranslatedInnerVlanId", \
    "TranslatedInnerVlanPri", \
    "TranslatedInnerVlanCfi", \
    "ConstantZero", \
    "ConstantOne", \
    "FibreChanRCtl", \
    "FibreChanFCtl", \
    "FibreChanCSCtl", \
    "FibreChanDFCtl", \
    "FibreChanType", \
    "FibreChanSrcId", \
    "FibreChanDstId", \
    "FibreChanZoneCheck", \
    "FibreChanSrcFpmaCheck", \
    "FibreChanSrcBindCheck", \
    "FibreChanVFTVersion", \
    "FibreChanVFTPri", \
    "FibreChanVFTFabricId", \
    "FibreChanVFTHopCount", \
    "FibreChanVFTVsanId", \
    "FibreChanVFTVsanPri", \
    "FibreChanVFTValid", \
    "FcoeSOF", \
    "FcoeVersionIsZero", \
    "ForwardingHeaderOffset", \
    "L3SrcBind", \
    "ECid", \
    "IngressECid", \
    "ETag", \
    "IngressVPortBridgeDisable", \
    "HashValue", \
    "IsEqualValue", \
    "StageHash", \
    "UrpfMode", \
    "AppType", \
    "SubportPktTag", \
    "SrcVxlanGport", \
    "DstVxlanGport", \
    "OamMdl", \
    "IntCongestionNotification", \
    "SrcNivGport", \
    "DstNivGport", \
    "DstGport", \
    "MirrorEgressDisabled", \
    "BypassSrcMacFilter", \
    "RxTrapCodeForSnoop", \
    "IpmcStarGroupValue", \
    "NativeVSwitch", \
    "NativeVSwitchValid", \
    "TrillIVersion", \
    "TrillIngressRbridge", \
    "TrillMultiDestination", \
    "TrillOpLength", \
    "TrillHopCount", \
    "TrillPayload", \
    "MplsForwardingLabelPayload", \
    "IncomingIpIfClass", \
    "L2GreProtocolType", \
    "L2GreVsid", \
    "L2GreFlowId", \
    "MimVlanPri", \
    "MimVlanCfi", \
    "Fhei", \
    "FheiSize", \
    "EthernetOamHeaderBits0_31", \
    "EthernetOamHeaderBits32_63", \
    "EthernetOamDstClassL2", \
    "EthernetOamTxPktUPMEP", \
    "EthernetOamSrcPortLmStatPoolId", \
    "EthernetOamVxlt1LmStatPoolId", \
    "EthernetOamVxlt2LmStatPoolId", \
    "EthernetOamSourceVPLmStatPoolId", \
    "EthernetOamInterfaceClassPort", \
    "EthernetOamClassVxlt1", \
    "EthernetOamClassVxlt2", \
    "EthernetOamClassSourceVP", \
    "EthernetOamClassVFI", \
    "MplsOamHeaderBits0_31", \
    "MplsOamHeaderBits32_63", \
    "MplsOamGALLabelOnly", \
    "MplsOamLmStatPoolId", \
    "MplsOamGALExposed", \
    "MplsOamACH", \
    "MplsOamControlPktType", \
    "MplsOamClassMpls", \
    "OamHeaderBits0_31", \
    "OamHeaderBits32_63", \
    "OamEgressClassVxlt", \
    "OamEgressClassPort", \
    "Udf", \
    "OuterVlanActionRange", \
    "InnerVlanActionRange"  \
}

/* 
 * Field Stage Type
 * 
 * Selects which pipeline stage an entry applies to.
 */
typedef enum bcm_field_stage_e {
    bcmFieldStageFirst = 0,         /* Earliest Field stage in device. */
    bcmFieldStageIngressEarly = 1,  /* Early Ingress Field stage. */
    bcmFieldStageIngressLate = 2,   /* Earie Ingress Field stage. */
    bcmFieldStageDefault = 3,       /* Default stage for device. */
    bcmFieldStageLast = 4,          /* Latest Field stage in device. */
    bcmFieldStageIngress = 5,       /* Ingress stage, when there is only one
                                       such. */
    bcmFieldStageEgress = 6,        /* Egress field stage */
    bcmFieldStageExternal = 7,      /* External field stage */
    bcmFieldStageHash = 8,          /* Hashing stage */
    bcmFieldStageCount = 9          /* Always Last. Not a usable value. */
} bcm_field_stage_t;

#define BCM_FIELD_STAGE_STRINGS \
{ \
    "First", \
    "IngressEarly", \
    "IngressLate", \
    "Default", \
    "Last", \
    "Ingress", \
    "Egress", \
    "External", \
    "Hash"  \
}

/* 
 * information related to the preselectors management advance mode per
 * stage.
 */
typedef struct bcm_field_stage_info_s {
    int field_presel_advanced_mode; /* is presel advanced mode enabled. */
    int field_presel_max_id;        /* the maximum presel id that can be defined
                                       for a new created program selector in
                                       advanced mode. */
} bcm_field_stage_info_t;

/* DATA qualifier object, used for creation of custom data qualifiers. */
typedef struct bcm_field_data_qualifier_s {
    int qual_id;                        /* Data qualifier id. */
    uint32 flags;                       /* Data qualifier flags
                                           BCM_FIELD_DATA_QUALIFIER_XXX. */
    bcm_field_data_offset_base_t offset_base; /* Offset base adjustment. */
    uint16 offset;                      /* Packet byte offset. */
    int length;                         /* Matched data byte length. */
    bcm_field_qualify_t qualifier;      /* Data qualifier based on a predefined
                                           qualifier. Used when
                                           BCM_FIELD_DATA_QUALIFIER_OFFSET_PREDEFINED
                                           is set. */
    bcm_field_stage_t stage;            /* Data qualifier stage (e.g. when based
                                           on predefined qualifiers). */
} bcm_field_data_qualifier_t;

#define BCM_FIELD_QUALIFY_MAX   (bcmFieldQualifyCount + BCM_FIELD_USER_NUM_UDFS) /* Must be >= bcmFieldQualifyCount. */

#define BCM_FIELD_QUALIFY_WIDTH_MAX 50         

#define BCM_FIELD_QSET_WIDTH_MAX    \
    ((BCM_FIELD_QUALIFY_WIDTH_MAX+1) * \
    bcmFieldQualifyCount + 1) 

#define BCM_FIELD_EXACT_MATCH_MASK  (~0)       /* Mask parameter value. */

/* 
 * Field Qualifier Decap.
 * 
 * Possible data values for bcm_field_qualify_decap().
 */
typedef enum bcm_field_decap_e {
    bcmFieldDecapNone = 0,          /* No Decap. */
    bcmFieldDecapL2Mpls = 1,        /* L2 MPLS Decap. */
    bcmFieldDecapL3Mpls = 2,        /* L3 MPLS Decap. */
    bcmFieldDecapOtherMPLS = 3,     /* non-L2 or L3 MPLS Decap. */
    bcmFieldDecapIpTunnel = 4,      /* IP Tunnel Decap. */
    bcmFieldDecapIpGreTunnel = 5,   /* IP GRE Tunnel Decap. */
    bcmFieldDecapIpUdpTunnel = 6,   /* IP UDP Tunnel Decap. */
    bcmFieldDecapIpPimTunnel = 7,   /* IP PIM Tunnel Decap. */
    bcmFieldDecapCount = 8          /* Always Last. Not a usable value. */
} bcm_field_decap_t;

#define BCM_FIELD_DECAP_STRINGS \
{ \
    "None", \
    "L2Mpls", \
    "L3Mpls", \
    "OtherMPLS", \
    "IpTunnel", \
    "IpGreTunnel", \
    "IpUdpTunnel", \
    "IpPimTunnel"  \
}

/* 
 * Field Qualifier Forwarding Type (for
 * bcm_field_qualify_ForwardingType).
 */
typedef enum bcm_field_ForwardingType_e {
    bcmFieldForwardingTypeAny = 0,      /* Don't care. */
    bcmFieldForwardingTypeL2 = 1,       /* L2 switching forwarding. */
    bcmFieldForwardingTypeL3 = 2,       /* L3 routing forwarding. */
    bcmFieldForwardingTypeL2Shared = 3, /* Shared vlan L2 forwarding. */
    bcmFieldForwardingTypeL2Independent = 4, /* Vlan based L2 forwarding. */
    bcmFieldForwardingTypeL2Vpn = 5,    /* VFI based L2 forwarding. */
    bcmFieldForwardingTypeL2VpnDirect = 6, /* L2 point to point vpn forwarding. */
    bcmFieldForwardingTypeL3Direct = 7, /* L3 predefined next hop forwarding. */
    bcmFieldForwardingTypeIp4Ucast = 8, /* IPv4 Unicast Routing forwarding. */
    bcmFieldForwardingTypeIp4Mcast = 9, /* IPv4 Multicast Routing forwarding. */
    bcmFieldForwardingTypeIp6Ucast = 10, /* IPv6 Unicast Routing forwarding. */
    bcmFieldForwardingTypeIp6Mcast = 11, /* IPv6 Multicast Routing forwarding. */
    bcmFieldForwardingTypeMpls = 12,    /* MPLS Switching forwarding. */
    bcmFieldForwardingTypeTrill = 13,   /* Trill forwarding. */
    bcmFieldForwardingTypeRxReason = 14, /* Forwarding according to a RxReason. */
    bcmFieldForwardingTypeTrafficManagement = 15, /* Traffic Management forwarding, when
                                           an external Packet Processor sets the
                                           forwarding decision. */
    bcmFieldForwardingTypeSnoop = 16,   /* Snooped packet. */
    bcmFieldForwardingTypeMplsLabel1 = 17, /* MPLS Switching forwarding according
                                           to the 1st label */
    bcmFieldForwardingTypeMplsLabel2 = 18, /* MPLS Switching forwarding according
                                           to the 2nd label */
    bcmFieldForwardingTypeMplsLabel3 = 19, /* MPLS Switching forwarding according
                                           to the 3rd label */
    bcmFieldForwardingTypeFCoE = 20,    /* Fiber Channel over Ethernet
                                           forwarding. */
    bcmFieldForwardingTypeCount = 21    /* Always Last. Not a usable value. */
} bcm_field_ForwardingType_t;

#define BCM_FIELD_FORWARDINGTYPE_STRINGS \
{ \
    "Any", \
    "L2", \
    "L3", \
    "L2Shared", \
    "L2Independent", \
    "L2Vpn", \
    "L2VpnDirect", \
    "L3Direct", \
    "Ip4Ucast", \
    "Ip4Mcast", \
    "Ip6Ucast", \
    "Ip6Mcast", \
    "Mpls", \
    "Trill", \
    "RxReason", \
    "TrafficManagement", \
    "Snoop", \
    "MplsLabel1", \
    "MplsLabel2", \
    "MplsLabel3", \
    "FCoE"  \
}

/* Field Qualifier Application Type (for bcm_field_qualify_AppType). */
typedef enum bcm_field_AppType_e {
    bcmFieldAppTypeAny = 0,             /* Don't care. */
    bcmFieldAppTypeL2 = 1,              /* L2 bridging. */
    bcmFieldAppTypeL2VpnDirect = 2,     /* Cross connect service. */
    bcmFieldAppTypeIp4Ucast = 3,        /* IPv4 Unicast Routing. */
    bcmFieldAppTypeIp4McastBidir = 4,   /* IPv4 Multicast BIDIR Routing. */
    bcmFieldAppTypeIp6Ucast = 5,        /* IPv6 Unicast Routing. */
    bcmFieldAppTypeIp6Mcast = 6,        /* IPv6 Multicast Routing forwarding. */
    bcmFieldAppTypeMpls = 7,            /* MPLS Switching forwarding. */
    bcmFieldAppTypeArp = 8,             /* ARP forwarding. */
    bcmFieldAppTypeTrillUcast = 9,      /* Trill Unicast forwarding. */
    bcmFieldAppTypeTrillMcast = 10,     /* Trill Multicast forwarding. */
    bcmFieldAppTypeL2TrillMcast = 11,   /* L2 Multicast after Trill termination. */
    bcmFieldAppTypeTrafficManagement = 12, /* Traffic Management forwarding, when
                                           an external Packet Processor sets the
                                           forwarding decision. */
    bcmFieldAppTypeMiM = 13,            /* MAC-in-MAC forwarding. */
    bcmFieldAppTypeL2MiM = 14,          /* L2 forwarding after MAC-in-MAC
                                           termination. */
    bcmFieldAppTypeIp4UcastRpf = 15,    /* IPv4 Unicast Routing (coupled to the
                                           RPF lookup). */
    bcmFieldAppTypeIp6UcastRpf = 16,    /* IPv6 Unicast Routing (coupled to the
                                           RPF lookup). */
    bcmFieldAppTypeIp4McastRpf = 17,    /* IPv4 Multicast Routing (coupled to
                                           the RPF lookup). */
    bcmFieldAppTypeCompIp4McastRpf = 18, /* Compatible IPv4 Multicast Routing
                                           (coupled to the RPF lookup). */
    bcmFieldAppTypeIp6McastRpf = 19,    /* IPv6 Multicast Routing (coupled to
                                           the RPF lookup). */
    bcmFieldAppTypeMplsCoupling = 20,   /* Coupling MPLS Switching. */
    bcmFieldAppTypeFCoE = 21,           /* FCoE without VFT and local D_ID. */
    bcmFieldAppTypeFCoETransit = 22,    /* Transit FCoE (bridging). */
    bcmFieldAppTypeFCoEVft = 23,        /* FCoE with VFT Routing. */
    bcmFieldAppTypeFCoERemote = 24,     /* FCoE without VFT and remote D_ID
                                           Routing. */
    bcmFieldAppTypeFCoEVftRemote = 25,  /* FCoE wth VFT and remote D_ID v. */
    bcmFieldAppTypeL2VpnExtended = 26,  /* Extended P2P forwarding. */
    bcmFieldAppTypeIp4MacSrcBind = 27,  /* IPV4-MAC Source bind. */
    bcmFieldAppTypeIp6MacSrcBind = 28,  /* IPV6-MAC Source bind. */
    bcmFieldAppTypeIp4SrcBind = 29,     /* IPV4 Source bind. */
    bcmFieldAppTypeIp6SrcBind = 30,     /* IPV6 Source bind. */
    bcmFieldAppTypeVplsGreIp = 31,      /* VPLS tunnel over GREoIP tunnel. */
    bcmFieldAppTypeFglTrillMcast = 32,  /* Fine-grained labeling Trill Multicast
                                           forwarding. */
    bcmFieldAppTypeCount = 33           /* Always Last. Not a usable value. */
} bcm_field_AppType_t;

#define BCM_FIELD_APPTYPE_STRINGS \
{ \
    "Any", \
    "L2", \
    "L2VpnDirect", \
    "Ip4Ucast", \
    "Ip4McastBidir", \
    "Ip6Ucast", \
    "Ip6Mcast", \
    "Mpls", \
    "Arp", \
    "TrillUcast", \
    "TrillMcast", \
    "L2TrillMcast", \
    "TrafficManagement", \
    "MiM", \
    "L2MiM", \
    "Ip4UcastRpf", \
    "Ip6UcastRpf", \
    "Ip4McastRpf", \
    "CompIp4McastRpf", \
    "Ip6McastRpf", \
    "MplsCoupling", \
    "FCoE", \
    "FCoETransit", \
    "FCoEVft", \
    "FCoERemote", \
    "FCoEVftRemote", \
    "L2VpnExtended", \
    "Ip4MacSrcBind", \
    "Ip6MacSrcBind", \
    "Ip4SrcBind", \
    "Ip6SrcBind", \
    "VplsGreIp", \
    "FglTrillMcast"  \
}

/* Field Qualifier LoopbackType (for bcm_field_qualify_LoopbackType). */
typedef enum bcm_field_LoopbackType_e {
    bcmFieldLoopbackTypeAny = 0,        /* Don't care. */
    bcmFieldLoopbackTypeMirror = 1,     /* Mirrored frames. */
    bcmFieldLoopbackTypeWlan = 2,       /* WLAN frames. */
    bcmFieldLoopbackTypeMim = 3,        /* Mac in Mac frames. */
    bcmFieldLoopbackTypeRedirect = 4,   /* Redirected frames. */
    bcmFieldLoopbackTypeTrillNetwork = 5, /* Trill network port loopback. */
    bcmFieldLoopbackTypeTrillAccess = 6, /* Trill access port loopback. */
    bcmFieldLoopbackTypeRegexMatch = 7, /* Regex NLF loopback packet. */
    bcmFieldLoopbackTypeMplsP2mp = 8,   /* MPLS P2MP second pass loopback
                                           packet. */
    bcmFieldLoopbackTypeQcn = 9,        /* QCN loopback packet. */
    bcmFieldLoopbackTypeWlanEncap = 10, /* WLAN ENCAP NLF loopback packet. */
    bcmFieldLoopbackTypeWlanEncapEncrypt = 11, /* WLAN ENCAP needs encryption loopback
                                           packet. */
    bcmFieldLoopbackTypeWlanDecap = 12, /* WLAN DECAP NLF loopback packet. */
    bcmFieldLoopbackTypePassThru = 13,  /* PassThru NLF loopback packet. */
    bcmFieldLoopbackTypeMplsExtendedLookup = 14, /* MPLS extended lookup packet. */
    bcmFieldLoopbackTypeL2Gre = 15,     /* L2 GRE loopback packet. */
    bcmFieldLoopbackTypeVxlan = 16,     /* Vxlan loopback packet. */
    bcmFieldLoopbackTypeCount = 17      /* Always Last. Not a usable value. */
} bcm_field_LoopbackType_t;

#define BCM_FIELD_LOOPBACKTYPE_STRINGS \
{ \
    "Any", \
    "Mirror", \
    "Wlan", \
    "Mim", \
    "Redirect", \
    "TrillNetwork", \
    "TrillAccess", \
    "RegexMatch", \
    "MplsP2mp", \
    "Qcn", \
    "WlanEncap", \
    "WlanEncapEncrypt", \
    "WlanDecap", \
    "PassThru", \
    "MplsExtendedLookup", \
    "L2Gre", \
    "Vxlan"  \
}

/* 
 * Field Qualifier FibreChan (for bcm_field_qualify_FibreChanOuter and
 * bcm_field_qualify_FibreChanInner).
 */
typedef enum bcm_field_FibreChan_e {
    bcmFieldFibreChanAny = 0,       /* Don't care. */
    bcmFieldFibreChan = 1,          /* Standard Fibre Channel header. */
    bcmFieldFibreChanEncap = 2,     /* Encapsulation (ENC) header. */
    bcmFieldFibreChanVirtual = 3,   /* Virtual fabric tag (VFT) header. */
    bcmFieldFibreChanRouted = 4,    /* Interfabric routing (IFR) header. */
    bcmFieldFibreChanCount = 5      /* Always Last. Not a usable value. */
} bcm_field_FibreChan_t;

#define BCM_FIELD_FIBRECHAN_STRINGS \
{ \
    "Any", \
    "bcmFieldFibreChan", \
    "Encap", \
    "Virtual", \
    "Routed"  \
}

/* Field Qualifier TunnelType (for bcm_field_qualify_TunnelType). */
typedef enum bcm_field_TunnelType_e {
    bcmFieldTunnelTypeAny = 0,          /* Don't care. */
    bcmFieldTunnelTypeIp = 1,           /* IP in IP, Istap, GRE. */
    bcmFieldTunnelTypeMpls = 2,         /* MPLS. */
    bcmFieldTunnelTypeMim = 3,          /* Mac in Mac. */
    bcmFieldTunnelTypeWlanWtpToAc = 4,  /* WLAN access point to access control. */
    bcmFieldTunnelTypeWlanAcToAc = 5,   /* WLAN access control to access
                                           control. */
    bcmFieldTunnelTypeAutoMulticast = 6, /* IPV4 Automatic multicast. */
    bcmFieldTunnelTypeTrill = 7,        /* Trill. */
    bcmFieldTunnelTypeL2Gre = 8,        /* L2 GRE. */
    bcmFieldTunnelTypeIp6 = 9,          /* IPv6 termination. */
    bcmFieldTunnelTypeMplsControlWord = 10, /* MPLS with Control Word terminated. */
    bcmFieldTunnelTypeMplsLabel2 = 11,  /* 2 MPLS labels terminated. */
    bcmFieldTunnelTypeMplsLabel2ControlWord = 12, /* 2 MPLS labels with Control Word
                                           terminated. */
    bcmFieldTunnelTypeMplsLabel3 = 13,  /* 3 MPLS labels terminated. */
    bcmFieldTunnelTypeMplsLabel3ControlWord = 14, /* 3 MPLS labels with Control Word
                                           terminated. */
    bcmFieldTunnelTypeVxlan = 15,       /* Vxlan Tunnel Packet. */
    bcmFieldTunnelTypeNone = 16,        /* L2 termination. */
    bcmFieldTunnelTypeCount = 17        /* Always Last. Not a usable value. */
} bcm_field_TunnelType_t;

#define BCM_FIELD_TUNNELTYPE_STRINGS \
{ \
    "Any", \
    "Ip", \
    "Mpls", \
    "Mim", \
    "WlanWtpToAc", \
    "WlanAcToAc", \
    "AutoMulticast", \
    "Trill", \
    "L2Gre", \
    "Ip6", \
    "MplsControlWord", \
    "MplsLabel2", \
    "MplsLabel2ControlWord", \
    "MplsLabel3", \
    "MplsLabel3ControlWord", \
    "Vxlan", \
    "None"  \
}

/* Field Qualifier IpType (for bcm_field_qualify_IpType). */
typedef enum bcm_field_IpType_e {
    bcmFieldIpTypeAny = 0,              /* Don't care. */
    bcmFieldIpTypeNonIp = 1,            /* Non-Ip packet. */
    bcmFieldIpTypeIpv4Not = 2,          /* Anything but IPv4 packets. */
    bcmFieldIpTypeIpv4NoOpts = 3,       /* IPv4 without options. */
    bcmFieldIpTypeIpv4WithOpts = 4,     /* IPv4 with options. */
    bcmFieldIpTypeIpv4Any = 5,          /* Any IPv4 packet. */
    bcmFieldIpTypeIpv6Not = 6,          /* Anything but IPv6 packets. */
    bcmFieldIpTypeIpv6NoExtHdr = 7,     /* IPv6 packet without any extension
                                           header. */
    bcmFieldIpTypeIpv6OneExtHdr = 8,    /* IPv6 packet with one extension
                                           header. */
    bcmFieldIpTypeIpv6TwoExtHdr = 9,    /* IPv6 packet with two or more
                                           extension headers. */
    bcmFieldIpTypeIpv6 = 10,            /* IPv6 packet. */
    bcmFieldIpTypeIp = 11,              /* IPv4 and IPv6 packets. */
    bcmFieldIpTypeArp = 12,             /* ARP/RARP. */
    bcmFieldIpTypeArpRequest = 13,      /* ARP Request. */
    bcmFieldIpTypeArpReply = 14,        /* ARP Reply. */
    bcmFieldIpTypeMplsUnicast = 15,     /* Mpls unicast frame (ethertype =
                                           0x8847). */
    bcmFieldIpTypeMplsMulticast = 16,   /* Mpls mcast frame   (ethertype =
                                           0x8848). */
    bcmFieldIpTypeTrill = 17,           /* Trill packet. */
    bcmFieldIpTypeMim = 18,             /* Mac-in-Mac frame. */
    bcmFieldIpTypeMpls = 19,            /* MPLS Packets. */
    bcmFieldIpTypeCfm = 20,             /* CFM Packets (0x8902). */
    bcmFieldIpTypeFCoE = 21,            /* Fiber Channel Packets (0x8906). */
    bcmFieldIpTypeCount = 22            /* Always Last. Not a usable value. */
} bcm_field_IpType_t;

#define BCM_FIELD_IPTYPE_STRINGS \
{ \
    "Any", \
    "NonIp", \
    "Ipv4Not", \
    "Ipv4NoOpts", \
    "Ipv4WithOpts", \
    "Ipv4Any", \
    "Ipv6Not", \
    "Ipv6NoExtHdr", \
    "Ipv6OneExtHdr", \
    "Ipv6TwoExtHdr", \
    "Ipv6", \
    "Ip", \
    "Arp", \
    "ArpRequest", \
    "ArpReply", \
    "MplsUnicast", \
    "MplsMulticast", \
    "Trill", \
    "Mim", \
    "Mpls", \
    "Cfm", \
    "FCoE"  \
}

/* 
 * Field Qualifier IpProtocolCommon (for
 * bcm_field_qualify_IpProtocolCommon).
 */
typedef enum bcm_field_IpProtocolCommon_e {
    bcmFieldIpProtocolCommonTcp = 0,    /* TCP Packets (6) */
    bcmFieldIpProtocolCommonUdp = 1,    /* UDP Packets (17) */
    bcmFieldIpProtocolCommonIgmp = 2,   /* IGMP Packets (2) */
    bcmFieldIpProtocolCommonIcmp = 3,   /* ICMP Packets (1) */
    bcmFieldIpProtocolCommonIp6Icmp = 4, /* IPv6 ICMP Packets (58) */
    bcmFieldIpProtocolCommonIp6HopByHop = 5, /* IPv6 Hop-by-Hop Packets (0) */
    bcmFieldIpProtocolCommonIpInIp = 6, /* IPv4 Payload Packets (4) */
    bcmFieldIpProtocolCommonTcpUdp = 7, /* TCP and UDP Packets (6 & 17) */
    bcmFieldIpProtocolCommonUnknown = 8, /* Not-standard IP Protocol. */
    bcmFieldIpProtocolCommonIp6InIp = 9, /* IPv6 (0x29) */
    bcmFieldIpProtocolCommonMplsInIp = 10, /* MPLS (0x89) */
    bcmFieldIpProtocolCommonCount = 11  /* Always Last. Not a usable value. */
} bcm_field_IpProtocolCommon_t;

#define BCM_FIELD_IPPROTOCOLCOMMON_STRINGS \
{ \
    "Tcp", \
    "Udp", \
    "Igmp", \
    "Icmp", \
    "Ip6Icmp", \
    "Ip6HopByHop", \
    "IpInIp", \
    "TcpUdp", \
    "Unknown", \
    "Ip6InIp", \
    "MplsInIp"  \
}

/* Field Qualifier IpFrag (for bcm_field_qualify_IpFrag). */
typedef enum bcm_field_IpFrag_e {
    bcmFieldIpFragNon = 0,          /* Non-fragmented packet. */
    bcmFieldIpFragFirst = 1,        /* First fragment of fragmented packet. */
    bcmFieldIpFragNonOrFirst = 2,   /* Non-fragmented or first fragment. */
    bcmFieldIpFragNotFirst = 3,     /* Not the first fragment. */
    bcmFieldIpFragAny = 4,          /* Any fragment of fragmented packet. */
    bcmFieldIpFragCount = 5         /* Always last. Not a usable value. */
} bcm_field_IpFrag_t;

/* Urpf mode */
typedef enum bcm_field_urpf_mode_e {
    bcmFieldUrpfLoose = 0,  /* Loose mode Unicast RPF. */
    bcmFieldUrpfStrict = 1, /* Strict mode Unicast RPF */
    bcmFieldUrpfCount = 2   /* Always Last. Not a usable value. */
} bcm_field_urpf_mode_t;

/* 
 * Field Qualifier L2Format (for bcm_field_qualify_L2Format).
 * Used to qualify packets based on L2 header format.
 */
typedef enum bcm_field_L2Format_e {
    bcmFieldL2FormatAny = 0,            /* Do not qualify on L2 format. */
    bcmFieldL2FormatEthII = 1,          /* Ethernet 2 (802.2). */
    bcmFieldL2FormatSnap = 2,           /* Sub-Network Access Protocol (SNAP). */
    bcmFieldL2FormatLlc = 3,            /* Logical Link Control. */
    bcmFieldL2Format802dot3 = 4,        /* 802.3 frame format. */
    bcmFieldL2FormatSnapPrivate = 5,    /* Sub-Network Access Protocol (SNAP).
                                           Vendor specific protocol. */
    bcmFieldL2FormatMiM = 6,            /* MAC-In-MAC. */
    bcmFieldL2FormatPPPoE = 7,          /* PPPoE frame. */
    bcmFieldL2FormatCount = 8           /* Always Last. Not a usable value. */
} bcm_field_L2Format_t;

#define BCM_FIELD_L2FORMAT_STRINGS \
{ \
    "Any", \
    "EthII", \
    "Snap", \
    "Llc", \
    "802dot3", \
    "SnapPrivate", \
    "MiM", \
    "PPPoE"  \
}

/* 
 * Field action olp_header_type (for bcmFieldActionOamOlpHeaderAdd).
 * Used to specify the type of the OLP header to be added.
 */
typedef enum bcm_field_olp_header_type_e {
    bcmFieldOlpHeaderTypeEthCC = 0,     /* OLP header is of type ETH-CC. */
    bcmFieldOlpHeaderTypeEthLmDm = 1,   /* OLP header is of type ETH-LM/DM. */
    bcmFieldOlpHeaderTypeEthOthers = 2, /* OLP header is of type
                                           ETH-Others(other than CC/LM/DM). */
    bcmFieldOlpHeaderTypeCount = 3      /* Always Last. Not a usable value. */
} bcm_field_olp_header_type_t;

#define BCM_FIELD_OLP_HEADER_TYPE_STRINGS \
{ \
    "EthCC", \
    "EthLmDm", \
    "EthOthers"  \
}

/* 
 * Field action oam_domain (for bcmFieldActionOamDomain).
 * Used to specify the OAM domain on which endpoints lookup has to be
 * done.
 */
typedef enum bcm_field_oam_domain_e {
    bcmFieldOamDomainCVlan = 0,         /* Endpoints configured on C-VLAN. */
    bcmFieldOamDomainSVlan = 1,         /* Endpoints configured on S-VLAN. */
    bcmFieldOamDomainDoubleVlan = 2,    /* Endpoints configured on S+C-VLAN. */
    bcmFieldOamDomainPbbTe = 3,         /* Endpoints configured on PBB-TE. */
    bcmFieldOamDomainCount = 4          /* Always Last. Not a usable value. */
} bcm_field_oam_domain_t;

#define BCM_FIELD_OAM_DOMAIN_STRINGS \
{ \
    "CVlan", \
    "SVlan", \
    "DoubleVlan", \
    "PbbTe"  \
}

/* LLC Header Format. */
typedef struct bcm_field_llc_header_s {
    uint8 dsap; 
    uint8 ssap; 
    uint8 control; 
} bcm_field_llc_header_t;

/* SNAP Header Format. */
typedef struct bcm_field_snap_header_s {
    uint32 org_code; 
    uint16 type; 
} bcm_field_snap_header_t;

/* 
 * Range Check.
 * 
 * bcm_field_range_create requires exactly one of SRCPORT or DSTPORT or
 * FIELD_RANGE_OUTER_VLAN or FIELD_RANGE_PACKET_LENGTH.
 */
#define BCM_FIELD_RANGE_SRCPORT         0x00000001 /* Check source port range */
#define BCM_FIELD_RANGE_DSTPORT         0x00000002 /* Check dest port range */
#define BCM_FIELD_RANGE_TCP             0x00000004 /* Check TCP port range */
#define BCM_FIELD_RANGE_UDP             0x00000008 /* Check UDP port range */
#define BCM_FIELD_RANGE_INVERT          0x00000010 /* Check for match outside
                                                      specified port range */
#define BCM_FIELD_RANGE_EXTERNAL        0x00000020 /* Create range checker on
                                                      External table (5661x
                                                      only) */
#define BCM_FIELD_RANGE_OUTER_VLAN      0x00000040 /* Check outer VLAN ID range */
#define BCM_FIELD_RANGE_INNER_VLAN      0x00000080 /* Check inner VLAN ID range */
#define BCM_FIELD_RANGE_PACKET_LENGTH   0x00000100 /* Check packet length range */
#define BCM_FIELD_RANGE_LOOKUP          0x00000200 /* Create range checker on
                                                      Lookup table */
#define BCM_FIELD_RANGE_OUT_VPORT       0x00000400 /* Check OutVPort range */

/* Opaque handle to a field range. */
typedef uint32 bcm_field_range_t;

/* Field udf_spec defines the locations of user-defined byte fields. */
typedef struct bcm_field_udf_spec_s {
    uint32 offset[384]; 
} bcm_field_udf_spec_t;

/* Field qset defines the set of fields used for lookup. */
typedef struct bcm_field_qset_s {
    SHR_BITDCL w[_SHR_BITDCLSIZE(BCM_FIELD_QUALIFY_MAX)]; 
    SHR_BITDCL udf_map[_SHR_BITDCLSIZE(BCM_FIELD_USER_NUM_UDFS)]; 
} bcm_field_qset_t;

#define BCM_FIELD_QSET_INIT(qset)  \
    sal_memset(&(qset), 0, sizeof(bcm_field_qset_t)) 

#define BCM_FIELD_QSET_ADD(qset, q)  SHR_BITSET(((qset).w), (q)) 

#define BCM_FIELD_QSET_REMOVE(qset, q)  SHR_BITCLR(((qset).w), (q)) 

#define BCM_FIELD_QSET_TEST(qset, q)  SHR_BITGET(((qset).w), (q)) 

/* 
 * Group Priority.
 * 
 * Numerically higher values are higher priority. Each priority value may
 * be used only once. BCM_FIELD_GROUP_PRIO_ANY can be used to have a
 * priority assigned automatically.
 */
#define BCM_FIELD_GROUP_PRIO_ANY    -0x7fffffff 

/* bcm_field_action_e */
typedef enum bcm_field_action_e {
    bcmFieldActionCosQNew = 0,          /* Change CoS Queue; param0: New CoS
                                           Queue. */
    bcmFieldActionCosQCpuNew = 1,       /* Change CoS Queue when CopyToCpu;
                                           param0: New CoS Queue. */
    bcmFieldActionVlanCosQNew = 2,      /* Change VLAN CoS Queue; param0: New
                                           CoS Queue. */
    bcmFieldActionUcastCosQNew = 3,     /* Change CoS Queue for unicast packets;
                                           param0: New CoS Queue. */
    bcmFieldActionMcastCosQNew = 4,     /* Change CoS Queue for multicast
                                           packets; param0: New CoS Queue. */
    bcmFieldActionPrioPktAndIntCopy = 5, /* Pkt & internal priority from inner
                                           tag. */
    bcmFieldActionPrioPktAndIntNew = 6, /* Pkt & internal priority from arg;
                                           param0: New priority. */
    bcmFieldActionPrioPktAndIntTos = 7, /* Pkt & internal priority from TOS
                                           field. */
    bcmFieldActionPrioPktAndIntCancel = 8, /* Override another rule. */
    bcmFieldActionPrioPktCopy = 9,      /* Pkt priority from inner tag. */
    bcmFieldActionPrioPktNew = 10,      /* Pkt priority from arg; param0: New
                                           priority. */
    bcmFieldActionPrioPktTos = 11,      /* Pkt priority from TOS field. */
    bcmFieldActionPrioPktCancel = 12,   /* Override another rule. */
    bcmFieldActionPrioIntCopy = 13,     /* Internal priority from inner tag. */
    bcmFieldActionPrioIntNew = 14,      /* Internal priority from arg; param0:
                                           New priority. */
    bcmFieldActionPrioIntTos = 15,      /* Internal priority from TOS field. */
    bcmFieldActionPrioIntCancel = 16,   /* Override another rule. */
    bcmFieldActionTosNew = 17,          /* Change TOS value in IP header;
                                           param0: New TOS value. */
    bcmFieldActionTosCopy = 18,         /* Copy priority from outer tag to IP
                                           hdr. */
    bcmFieldActionTosCancel = 19,       /* Override another rule. */
    bcmFieldActionDscpNew = 20,         /* Change DSCP value; param0: New DSCP
                                           value. */
    bcmFieldActionDscpCancel = 21,      /* Override another rule. */
    bcmFieldActionEcnNew = 22,          /* Change ECN value in IP header TOS;
                                           param0: New ECN value. */
    bcmFieldActionCopyToCpu = 23,       /* Copy to CPU. */
    bcmFieldActionCopyToCpuCancel = 24, /* Override another rule. */
    bcmFieldActionSwitchToCpuCancel = 25, /* Override switch logic copy-to-CPU. */
    bcmFieldActionSwitchToCpuReinstate = 26, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionTimeStampToCpu = 27,  /* Send a copy to cpu with timestamp and
                                           drop the packet */
    bcmFieldActionTimeStampToCpuCancel = 28, /* Override another action (don't
                                           copy,don't drop) */
    bcmFieldActionRedirectPort = 29,    /* Redirect Packet to single port;
                                           param0: Destination modid; param1:
                                           Destination port. */
    bcmFieldActionRedirect = bcmFieldActionRedirectPort, /* Same as bcmFieldActionRedirectPort. */
    bcmFieldActionRedirectTrunk = 30,   /* Redirect Packet to a trunk; param0:
                                           Destination trunk ID. */
    bcmFieldActionRedirectCancel = 31,  /* Override another rule. */
    bcmFieldActionRedirectPbmp = 32,    /* Replace port bitmap; param0:
                                           Destination port bitmap. */
    bcmFieldActionRedirectIpmc = 33,    /* Replace L3 multicast L3 & L2 bitmap;
                                           param0: IP Multicast Index. */
    bcmFieldActionRedirectMcast = 34,   /* Replace L2 multicast dest bitmap;
                                           param0: L2 Multicast Index. */
    bcmFieldActionRedirectVlan = 35,    /* Redirect to VLAN port bitmap. */
    bcmFieldActionRedirectBcastPbmp = 36, /* Replace L2 broadcast dest bitmap;
                                           param0: Destination port bitmap. */
    bcmFieldActionEgressMask = 37,      /* Apply egress mask; param0:
                                           Destination port bitmap mask. */
    bcmFieldActionEgressPortsAdd = 38,  /* Add additional egress ports; param0:
                                           Destination port bitmap. */
    bcmFieldActionDrop = 39,            /* Drop. */
    bcmFieldActionDropCancel = 40,      /* Override another rule. */
    bcmFieldActionMirrorOverride = 41,  /* Override any mirroring for packet. */
    bcmFieldActionMirrorIngress = 42,   /* Ingress mirror; param0: Dest modid;
                                           param1: Dest port/tgid. */
    bcmFieldActionMirrorEgress = 43,    /* Egress mirror; param0: Dest modid;
                                           param1: Dest port/tgid. */
    bcmFieldActionL3ChangeVlan = 44,    /* Change VLAN on L3-switched packets;
                                           param0: ECMP or next hop info. */
    bcmFieldActionL3ChangeVlanCancel = 45, /* Override another rule. */
    bcmFieldActionL3ChangeMacDa = 46,   /* Change MAC DA on L3-switched packets;
                                           param0: ECMP or next hop info. */
    bcmFieldActionL3ChangeMacDaCancel = 47, /* Override another rule; param0: Next
                                           hop table index. */
    bcmFieldActionL3Switch = 48,        /* L3-switch packet; param0: ECMP or
                                           next hop info. */
    bcmFieldActionL3SwitchCancel = 49,  /* Override another rule. */
    bcmFieldActionAddClassTag = 50,     /* Add Classification Tag. */
    bcmFieldActionDropPrecedence = 51,  /* Set Drop Precedence; param0:
                                           BCM_FIELD_COLOR_xxx. */
    bcmFieldActionRpDrop = 52,          /* Red Priority Drop. */
    bcmFieldActionRpDropCancel = 53,    /* Override another rule. */
    bcmFieldActionRpDropPrecedence = 54, /* Set Red Priority Drop Precedence;
                                           param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionRpCopyToCpu = 55,     /* Red Priority Copy to CPU. */
    bcmFieldActionRpCopyToCpuCancel = 56, /* Override another rule. */
    bcmFieldActionRpSwitchToCpuCancel = 57, /* Override switch logic copy-to-CPU. */
    bcmFieldActionRpSwitchToCpuReinstate = 58, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionRpTimeStampToCpu = 59, /* Send a copy to cpu with timestamp and
                                           drop the packet */
    bcmFieldActionRpTimeStampToCpuCancel = 60, /* Override another action (don't
                                           copy,don't drop) */
    bcmFieldActionRpDscpNew = 61,       /* Red packet change DSCP value; param0:
                                           New DSCP value. */
    bcmFieldActionRpDscpCancel = 62,    /* Override any changes to DSCP field. */
    bcmFieldActionRpEcnNew = 63,        /* Red packet change ECN value; param0:
                                           New ECN value. */
    bcmFieldActionRpOuterVlanPrioNew = 64, /* Red packet 802.1p priority from arg;
                                           param0: New priority. */
    bcmFieldActionRpInnerVlanPrioNew = 65, /* Red packet 802.1p priority from arg;
                                           param0: New priority. */
    bcmFieldActionRpOuterVlanCfiNew = 66, /* Red packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionRpInnerVlanCfiNew = 67, /* Red packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionRpPrioPktCopy = 68,   /* Red packet priority from inner tag. */
    bcmFieldActionRpPrioPktNew = 69,    /* Red packet priority from argument0;
                                           param0: New priority. */
    bcmFieldActionRpPrioPktTos = 70,    /* Red Packet priority from TOS field in
                                           IP header. */
    bcmFieldActionRpPrioPktCancel = 71, /* Override another rule. */
    bcmFieldActionRpCosQNew = 72,       /* Red packet change CoS Queue; param0:
                                           New CoS Queue. */
    bcmFieldActionRpVlanCosQNew = 73,   /* Red packet change VLAN CoSQ; param0:
                                           New CoS Queue. */
    bcmFieldActionRpUcastCosQNew = 74,  /* Red unicast packet change CoS Queue;
                                           param0: New CoS Queue. */
    bcmFieldActionRpMcastCosQNew = 75,  /* Red multicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    bcmFieldActionRpPrioPktAndIntCopy = 76, /* Red packet Packet & Internal priority
                                           from inner tag. */
    bcmFieldActionRpPrioPktAndIntNew = 77, /* Red packet Packet & Internal priority
                                           from param0; param0: New priority. */
    bcmFieldActionRpPrioPktAndIntTos = 78, /* Red packet Packet & Internal priority
                                           from TOS field. */
    bcmFieldActionRpPrioPktAndIntCancel = 79, /* Override any internal priority
                                           changes. */
    bcmFieldActionRpPrioIntCopy = 80,   /* Red packet internal priority from
                                           inner VLAN tag. */
    bcmFieldActionRpPrioIntNew = 81,    /* Red packet internal priority from an
                                           argument; param0: New priority. */
    bcmFieldActionRpPrioIntTos = 82,    /* Red packet internal priority from IP
                                           header  TOS field. */
    bcmFieldActionRpPrioIntCancel = 83, /* Red packet override any internal
                                           priority changes. */
    bcmFieldActionYpDrop = 84,          /* Yellow Priority Drop. */
    bcmFieldActionYpDropCancel = 85,    /* Override another rule. */
    bcmFieldActionYpDropPrecedence = 86, /* Set Yellow Priority Drop Precision;
                                           param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionYpCopyToCpu = 87,     /* Yellow Priority Copy to CPU. */
    bcmFieldActionYpCopyToCpuCancel = 88, /* Override another rule. */
    bcmFieldActionYpSwitchToCpuCancel = 89, /* Override switch logic copy-to-CPU. */
    bcmFieldActionYpSwitchToCpuReinstate = 90, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionYpTimeStampToCpu = 91, /* Send a copy to cpu with timestamp and
                                           drop the packet */
    bcmFieldActionYpTimeStampToCpuCancel = 92, /* Override another action (don't
                                           copy,don't drop) */
    bcmFieldActionYpDscpNew = 93,       /* Yellow packet change DSCP value;
                                           param0: New DSCP value. */
    bcmFieldActionYpDscpCancel = 94,    /* Override any changes to DSCP field. */
    bcmFieldActionYpEcnNew = 95,        /* Yellow packet change ECN value;
                                           param0: New ECN value. */
    bcmFieldActionYpOuterVlanPrioNew = 96, /* Yellow packet 802.1p priority from
                                           arg. */
    bcmFieldActionYpInnerVlanPrioNew = 97, /* Yellow packet 802.1p priority from
                                           arg; param0: New priority. */
    bcmFieldActionYpOuterVlanCfiNew = 98, /* Yellow packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionYpInnerVlanCfiNew = 99, /* Yellow packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionYpPrioPktCopy = 100,  /* Yellow packet priority from inner
                                           tag. */
    bcmFieldActionYpPrioPktNew = 101,   /* Yellow packet priority from param0;
                                           param0: New priority. */
    bcmFieldActionYpPrioPktTos = 102,   /* Yellow packet priority from TOS field
                                           in IP header. */
    bcmFieldActionYpPrioPktCancel = 103, /* Override another rule. */
    bcmFieldActionYpCosQNew = 104,      /* Yellow packet change CoS Queue;
                                           param0: New CoS Queue. */
    bcmFieldActionYpVlanCosQNew = 105,  /* Yellow packet change VLAN CoSQ;
                                           param0: New CoS Queue. */
    bcmFieldActionYpUcastCosQNew = 106, /* Yellow unicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    bcmFieldActionYpMcastCosQNew = 107, /* Yellow multicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    bcmFieldActionYpPrioPktAndIntCopy = 108, /* Yellow packet Packet & Internal
                                           priority from inner tag. */
    bcmFieldActionYpPrioPktAndIntNew = 109, /* Yellow packet Packet & Internal
                                           priority from param0; param0: New
                                           priority. */
    bcmFieldActionYpPrioPktAndIntTos = 110, /* Yellow packet Packet & Internal
                                           priority from TOS field. */
    bcmFieldActionYpPrioPktAndIntCancel = 111, /* Override any int priority changes. */
    bcmFieldActionYpPrioIntCopy = 112,  /* Yellow packet internal priority from
                                           inner VLAN tag. */
    bcmFieldActionYpPrioIntNew = 113,   /* Yellow packet internal priority from
                                           an argument; param0: New priority. */
    bcmFieldActionYpPrioIntTos = 114,   /* Yellow packet internal priority from
                                           IP header TOS field. */
    bcmFieldActionYpPrioIntCancel = 115, /* Yellow packet override any internal
                                           priority changes. */
    bcmFieldActionUpdateCounter = 116,  /* Update Counter; param0:
                                           BCM_FIELD_COUNTER_MODE_xxx. */
    bcmFieldActionMeterConfig = 117,    /* Meter configuration; param0:
                                           BCM_FIELD_METER_MODE_xxx; param1: if
                                           param0 == BCM_FIELD_METER_MODE_FLOW,
                                           this denotes BCM_FIELD_METER_PEAK(1)
                                           or BCM_FIELD_METER_COMMITTED(2). */
    bcmFieldActionColorIndependent = 118, /* Make L3SW_CHANGE_MACDA_OR_VLAN
                                           actions color independent. */
    bcmFieldActionClassDestSet = 119,   /* Set destination address lookup class
                                           ID. */
    bcmFieldActionClassSet = bcmFieldActionClassDestSet, /* Same as bcmFieldActionClassDestSet. */
    bcmFieldActionClassSourceSet = 120, /* Set source address lookup class ID. */
    bcmFieldActionVrfSet = 121,         /* Set VRF ID. */
    bcmFieldActionInnerVlanNew = 122,   /* Replace inner VLAN ID; param0: New
                                           inner VLAN ID. */
    bcmFieldActionInnerVlanPrioNew = 123, /* Replace inner VLAN tag priority;
                                           param0: New inner VLAN tag priority. */
    bcmFieldActionInnerVlanDelete = 124, /* Delete inner VLAN tag. */
    bcmFieldActionOuterVlanDelete = 125, /* Delete outer VLAN tag. */
    bcmFieldActionOuterVlanDeleteCancel = 126, /* Override previous outer VLAN tag
                                           delete. */
    bcmFieldActionInnerVlanAdd = 127,   /* Add a new Inner VLAN tag. */
    bcmFieldActionInnerVlanCfiNew = 128, /* Replace packet 802.1p CFI from arg. */
    bcmFieldActionOuterVlanNew = 129,   /* Replace outer VLAN ID; param0: New
                                           outer VLAN ID. */
    bcmFieldActionVlanNew = bcmFieldActionOuterVlanNew, /* Same as bcmFieldActionOuterVlanNew. */
    bcmFieldActionOuterVlanAdd = 130,   /* Add a new Outer VLAN tag. */
    bcmFieldActionVlanAdd = bcmFieldActionOuterVlanAdd, /* Same as bcmFieldActionOuterVlanAdd. */
    bcmFieldActionOuterVlanAddCancel = 131, /* Override previous outer VLAN tag add. */
    bcmFieldActionOuterVlanLookup = 132, /* Lookup outer VLAN tag. */
    bcmFieldActionVlanLookup = bcmFieldActionOuterVlanLookup, /* Same as
                                           bcmFieldActionOuterVlanLookup. */
    bcmFieldActionOuterVlanPrioNew = 133, /* Replace outer VLAN tag priority;
                                           param0: New outer VLAN tag priority. */
    bcmFieldActionOuterVlanCfiNew = 134, /* Replace packet 802.1p CFI from arg;
                                           param0: New CFI bit value; param0:
                                           New CFI bit value. */
    bcmFieldActionOuterTpidNew = 135,   /* Replace TPID in outer VLAN tag;
                                           param0: New tpid. */
    bcmFieldActionGpDrop = 136,         /* Green Priority Drop. */
    bcmFieldActionGpDropCancel = 137,   /* Override another rule. */
    bcmFieldActionGpDropPrecedence = 138, /* Set Green Priority Drop Precision;
                                           param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionGpCopyToCpu = 139,    /* Green Priority Copy to CPU. */
    bcmFieldActionGpCopyToCpuCancel = 140, /* Override another rule. */
    bcmFieldActionGpSwitchToCpuCancel = 141, /* Override switch logic copy-to-CPU. */
    bcmFieldActionGpSwitchToCpuReinstate = 142, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionGpTimeStampToCpu = 143, /* Send a copy to cpu with timestamp and
                                           drop the packet */
    bcmFieldActionGpTimeStampToCpuCancel = 144, /* Override another action (don't
                                           copy,don't drop) */
    bcmFieldActionGpDscpNew = 145,      /* Green packet change DSCP value;
                                           param0: New DSCP value. */
    bcmFieldActionGpDscpCancel = 146,   /* Override any changes to DSCP field. */
    bcmFieldActionGpEcnNew = 147,       /* Green packet change ECN value;
                                           param0: New ECN value. */
    bcmFieldActionGpTosPrecedenceNew = 148, /* Green packet change Tos byte
                                           precedence value; param0: New
                                           precedence value. */
    bcmFieldActionGpTosPrecedenceCopy = 149, /* Green packet copy Tos byte precedence
                                           from 802.1p priority. */
    bcmFieldActionGpOuterVlanPrioNew = 150, /* Green packet 802.1p priority from
                                           arg. */
    bcmFieldActionGpInnerVlanPrioNew = 151, /* Green packet 802.1p priority from
                                           arg; param0: New priority. */
    bcmFieldActionGpOuterVlanCfiNew = 152, /* Green packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionGpInnerVlanCfiNew = 153, /* Green packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionGpPrioPktCopy = 154,  /* Green packet priority from inner tag. */
    bcmFieldActionGpPrioPktNew = 155,   /* Green packet priority from param0;
                                           param0: New priority. */
    bcmFieldActionGpPrioPktTos = 156,   /* Green packet priority from TOS field
                                           in IP header. */
    bcmFieldActionGpPrioPktCancel = 157, /* Override another rule. */
    bcmFieldActionGpCosQNew = 158,      /* Green packet change CoS Queue;
                                           param0: New CoS Queue. */
    bcmFieldActionGpVlanCosQNew = 159,  /* Green packet change VLAN CoSQ;
                                           param0: New CoS Queue. */
    bcmFieldActionGpUcastCosQNew = 160, /* Green unicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    bcmFieldActionGpMcastCosQNew = 161, /* Green multicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    bcmFieldActionGpPrioPktAndIntCopy = 162, /* Green packet Packet & Internal
                                           priority from inner tag. */
    bcmFieldActionGpPrioPktAndIntNew = 163, /* Green packet Packet & Internal
                                           priority from param0; param0: New
                                           priority. */
    bcmFieldActionGpPrioPktAndIntTos = 164, /* Green packet Packet & Internal
                                           priority from TOS field. */
    bcmFieldActionGpPrioPktAndIntCancel = 165, /* Override any int priority changes. */
    bcmFieldActionGpPrioIntCopy = 166,  /* Green packet internal priority from
                                           inner VLAN tag. */
    bcmFieldActionGpPrioIntNew = 167,   /* Green packet internal priority from
                                           an argument; param0: New priority. */
    bcmFieldActionGpPrioIntTos = 168,   /* Green packet internal priority from
                                           IP header TOS field. */
    bcmFieldActionGpPrioIntCancel = 169, /* Green packet override any internal
                                           priority changes. */
    bcmFieldActionDoNotChangeTtl = 170, /* Do not decrement TTL. */
    bcmFieldActionDoNotCheckUrpf = 171, /* Do not check reverse path for unicast
                                           traffic. */
    bcmFieldActionDoNotCheckVlan = 172, /* Do not check VLAN membership and STG
                                           STP state. */
    bcmFieldActionDoNotLearn = 173,     /* Disable L2 learning. */
    bcmFieldActionIpFix = 174,          /* Record the packet regardless of port
                                           ipfix enable. */
    bcmFieldActionIpFixCancel = 175,    /* Record the packet action override. */
    bcmFieldActionIncomingMplsPortSet = 176, /* Assign incoming MPLS port. */
    bcmFieldActionNewTc = 177,          /* Assign new traffic class. */
    bcmFieldActionNewClassId = 178,     /* Assign new classfication ID. */
    bcmFieldActionLoopback = 179,       /* Forward the packet to the receiving
                                           port. */
    bcmFieldActionNewReasonCode = 180,  /* Assign new reasons for packet
                                           forwarded to CPU. */
    bcmFieldActionBypassStp = 181,      /* Bypass the STP port state filtering. */
    bcmFieldActionBypassEap = 182,      /* Bypass the 802.1x EAP port state
                                           filtering. */
    bcmFieldActionBypassVlan = 183,     /* Bypass VLAN checking. */
    bcmFieldActionRpRedirectPort = 184, /* Redirect red packet to single port;
                                           param0: Destination modid; param1:
                                           Destination port. */
    bcmFieldActionRpMirrorIngress = 185, /* Red packet ingress mirror; param0:
                                           Dest modid; param1: Dest port/tgid. */
    bcmFieldActionMultipathHash = 186,  /* ECMP Hash selection for
                                           bcmFieldActionL3Switch action. */
    bcmFieldActionIpfixRate = 187,      /* Set IPFIX flow rate meter; param0:
                                           rate id */
    bcmFieldActionOffloadRedirect = 188, /* Redirect packet to offload engine. */
    bcmFieldActionOffloadClassSet = 189, /* Set Class Id in offload engine
                                           redirected traffic. */
    bcmFieldActionOffloadDropIndication = 190, /* Set drop indicator in offload engine
                                           redirected traffic. */
    bcmFieldActionOamUpMep = 191,       /* Indicate UP MEP. */
    bcmFieldActionOamTx = 192,          /* Indicate TX direction OAM PDU or data
                                           packet. Used as MSB of
                                           FieldActionOamLmBasePtr'. */
    bcmFieldActionOamLmepMdl = 193,     /* MDL value for the LMEP. */
    bcmFieldActionOamServicePriMappingPtr = 194, /* Concatenated with the internal
                                           priority as index to LM packet
                                           counter. */
    bcmFieldActionOamLmBasePtr = 195,   /* Set base pointer to LM packet
                                           counter. */
    bcmFieldActionOamDmEnable = 196,    /* Enable OAM Delay Measurement. */
    bcmFieldActionOamLmEnable = 197,    /* Enable OAM Loss Measurement. */
    bcmFieldActionOamLmepEnable = 198,  /* Enable OAM loss/delay measurement. */
    bcmFieldActionOamPbbteLookupEnable = 199, /* Indicate SVP should be used as the
                                           key for LMEP lookup. */
    bcmFieldActionSrcMacNew = 200,      /* Replace source mac of the packet. */
    bcmFieldActionDstMacNew = 201,      /* Replace destination mac of the
                                           packet. */
    bcmFieldActionVnTagNew = 202,       /* Replace NIV VN tag if present, add if
                                           not present; param0: VN tag. */
    bcmFieldActionVnTagDelete = 203,    /* Delete NIV VN tag. */
    bcmFieldActionGpRedirectPort = 204, /* Redirect green packet to single port;
                                           param0: Destination modid; param1:
                                           Destination port. */
    bcmFieldActionGpMirrorIngress = 205, /* Green packet ingress mirror; param0:
                                           Dest modid; param1: Dest port/tgid. */
    bcmFieldActionVportNew = 206,       /* Replace/assign virtual port id. */
    bcmFieldActionVportSpcpNew = 207,   /* Replace/assign virtual port's spcp. */
    bcmFieldActionVportCpcpNew = 208,   /* Replace/assign virtual port's cpcp. */
    bcmFieldActionVportTcNew = 209,     /* Replace/assign virtual port's traffic
                                           class. */
    bcmFieldActionVportDpNew = 210,     /* Replace/assign virtual port's drop
                                           precedence. */
    bcmFieldActionRedirectVportPort = 211, /* Redirect Packet to single VportPort;
                                           param0: Destination vport; param1:
                                           Destination port. */
    bcmFieldActionMacDaKnown = 212,     /* Packet is not treated as a DLF type */
    bcmFieldActionFilters = 213,        /* Enable Filters to override the rule;
                                           param0: filter
                                           types(BCM_FIELD_FILTER_XXX) */
    bcmFieldActionFabricQueue = 214,    /* Enable ext header on hg ports. */
    bcmFieldActionCnmCancel = 215,      /* Do not generate QCN congestion
                                           notification message. */
    bcmFieldActionQcnUndo = bcmFieldActionCnmCancel, /* Do not perform a Congestion test on
                                           this packet (no QCN message can be
                                           generated) */
    bcmFieldActionDynamicHgTrunkCancel = 216, /* Disable dynamic HiGig trunking. */
    bcmFieldActionEgressMirrorDisable = 217, /* Disable Egress Mirror for matching
                                           packet. */
    bcmFieldActionMultipathHashAdditionalInfo = 218, /* Add additional information to
                                           matching packet's LAG/ECMP
                                           load-balancing hash calculation */
    bcmFieldActionDoNotModify = 219,    /* No modifications may be made to the
                                           packet. */
    bcmFieldActionMirrorEgressDisable = 220, /* Disable egress mirror; param0 = TRUE
                                           to disable, FALSE otherwise */
    bcmFieldActionOuterVlanCopyInner = 221, /* Copy the VLAN id from the inner tag
                                           to the outer. */
    bcmFieldActionOuterVlanPrioCopyInner = 222, /* Copy the 802.1p priority from the
                                           inner tag to the outer. */
    bcmFieldActionOuterVlanCfiCopyInner = 223, /* Copy the CFI bit from the inner tag
                                           to the outer. */
    bcmFieldActionInnerVlanCopyOuter = 224, /* Copy the VLAN id from the outer tag
                                           to the inner. */
    bcmFieldActionInnerVlanPrioCopyOuter = 225, /* Copy the 802.1p priority from the
                                           outer tag to the inner. */
    bcmFieldActionInnerVlanCfiCopyOuter = 226, /* Copy the CFI bit from the outer tag
                                           to the inner. */
    bcmFieldActionCompressSrcIp6 = 227, /* Map incoming IPv6 packet Source IP to
                                           ingress field processor IPv4 Source
                                           IP field. */
    bcmFieldActionCompressDstIp6 = 228, /* Map incoming IPv6 packet Destination
                                           IP to ingress field processor IPv4
                                           Destination IP field. */
    bcmFieldActionServicePoolIdNew = 229, /* Change Service Pool ID; param0: New
                                           Service Pool ID. */
    bcmFieldActionUseGlobalMeterColor = 230, /* Use service meters output color
                                           instead of CNG based colour as input
                                           packet color */
    bcmFieldActionRedirectEgrNextHop = 231, /* Redirect packet to next hop; param0:
                                           ECMP or next hop info. */
    bcmFieldActionTrunkLoadBalanceCancel = 232, /* Disable trunk load balancing */
    bcmFieldActionEcmpLoadBalanceCancel = 233, /* Disable ECMP group load balancing */
    bcmFieldActionDoNotOverride = 234,  /* Do not override actions */
    bcmFieldActionEgressClassSelect = 235, /* Select class to pass to EFP */
    bcmFieldActionHiGigClassSelect = 236, /* Select class for HiGig */
    bcmFieldActionOamDmTimeFormat = 237, /* Select time format for OAM delay
                                           measurement */
    bcmFieldActionOamLmDmSampleEnable = 238, /* Indicates if packet should be
                                           processed as an OAMPDU belonging to
                                           this MEP */
    bcmFieldActionOamTagStatusCheck = 239, 
    bcmFieldActionOamTunnelControl = 240, /* Select whether OAMPDU can either be
                                           in a tunnel that is terminated or not
                                           tunneled */
    bcmFieldActionRegex = 241,          /* Perform DPI */
    bcmFieldActionNoRegex = 242,        /* Do not perform DPI */
    bcmFieldActionStat0 = 243,          /* Update statistics (statId in param0)
                                           on entry hit.  See
                                           bcm_field_entry_stat_attach and
                                           related APIs. */
    bcmFieldActionStat = bcmFieldActionStat0, /* Alias for bcmFieldActionStat0 */
    bcmFieldActionPolicerLevel0 = 244,  /* Apply policer (policerId in param0)
                                           to traffic hitting this entry.  See
                                           bcm_field_entry_policer_attach and
                                           related APIs. */
    bcmFieldActionPolicerLevel1 = 245,  /* Apply policer (policerId in param0)
                                           to traffic hitting this entry.  See
                                           bcm_field_entry_policer_attach and
                                           related APIs. */
    bcmFieldActionPolicerGroup = 246,   /* Flag in ASETs to indicate group
                                           policer usage with the group */
    bcmFieldActionStatGroup = 247,      /* Flag in ASETs to indicate stat group
                                           usage with the group */
    bcmFieldActionVSQ = 248,            /* Assign matching packets to specified
                                           VSQ (param0). */
    bcmFieldActionIntPriorityAndDropPrecedence = 249, /* Change internal priority and drop
                                           precedence.  param0 = new internal
                                           priority.  param1 = new drop
                                           precedence */
    bcmFieldActionISQ = 250,            /* Assign matching packets to specified
                                           ISQ (param0). */
    bcmFieldActionTrap = 251,           /* Trap matched packets (treat them
                                           according to the speicified trap
                                           profile) */
    bcmFieldActionUsePolicerResult = 252, /* Specify/override where policer result
                                           will be used for matched packets. 
                                           See BCM_FIELD_USE_POLICER_RESULT_*
                                           for flags that go in param0. */
    bcmFieldActionStat1 = 253,          /* Secondary statistics update for
                                           matched packets (statId in param0) */
    bcmFieldActionStatTag = 254,        /* Assign statistics tag (such as for
                                           external statistics engine) to
                                           matched packets */
    bcmFieldActionSnoop = 255,          /* Snoop matched packets (treat them
                                           according to the specified snoop
                                           profile) */
    bcmFieldActionTtlSet = 256,         /* New TTL */
    bcmFieldActionIncomingIpIfSet = 257, /* Assign incoming IP interface */
    bcmFieldActionOrientationSet = 258, /* Set the new Orientation */
    bcmFieldActionTrunkHashKeySet = 259, /* Set the Trunk Hash Key */
    bcmFieldActionDstRpfGportNew = 260, /* Set the RPF Destination */
    bcmFieldActionDhcpPkt = 261,        /* Indicate whether the Packet is DHCP */
    bcmFieldActionSrcGportNew = 262,    /* Set the Source-Port */
    bcmFieldActionForwardingTypeNew = 263, /* Set the new Forwarding type */
    bcmFieldActionStartPacketStrip = 264, /* Strip the start-of-packet */
    bcmFieldActionSystemHeaderSet = 265, /* Modify a System Header */
    bcmFieldActionVSwitchNew = 266,     /* Replace Virtual Switch */
    bcmFieldActionLearnSrcMacNew = 267, /* Replace the learnt packet source MAC
                                           address */
    bcmFieldActionLearnSrcPortNew = 268, /* Replace the learnt packet source Port */
    bcmFieldActionLearnForwardingVlanIdNew = 269, /* Replace the learnt packet Forwarding
                                           Vlan ID */
    bcmFieldActionQosMapIdNew = 270,    /* Set the QoS map Id */
    bcmFieldActionVlanActionSetNew = 271, /* Modify the VLAN Action Set Id */
    bcmFieldActionVlanTranslationValueSet = 272, /* Set VLAN Translation lookup result */
    bcmFieldActionTunnelTerminatedValueSet = 273, /* Set Tunnel termination lookup result */
    bcmFieldActionMplsTerminatedValueSet = 274, /* Set MPLS termination lookup result */
    bcmFieldActionIpTunnelValueSet = 275, /* Set IP Tunnel termination lookup
                                           result */
    bcmFieldActionL2SrcValueSet = 276,  /* Set L2 Source lookup result */
    bcmFieldActionL2DestValueSet = 277, /* Set L2 Destination lookup result */
    bcmFieldActionL3SrcRouteValueSet = 278, /* Set L3 Source lookup result */
    bcmFieldActionL3DestRouteValueSet = 279, /* Set L3 Destination lookup result */
    bcmFieldActionIpmcValueSet = 280,   /* Set IP Multicast lookup result */
    bcmFieldActionCascadedKeyValueSet = 281, /* Set key value to cascade to later
                                           group for a packet */
    bcmFieldActionIngressGportSet = 282, /* Set a new ingress Gport
                                           (MPLS/Mim/WLAN) value. */
    bcmFieldActionExternalValue0Set = 283, /* Set External lookup 0 result */
    bcmFieldActionExternalValue1Set = 284, /* Set External lookup 1 result */
    bcmFieldActionExternalValue2Set = 285, /* Set External lookup 2 result */
    bcmFieldActionExternalValue3Set = 286, /* Set External lookup 3 result */
    bcmFieldActionNatCancel = 287,      /* Do Not perform NAT on this matching
                                           packet */
    bcmFieldActionNat = 288,            /* Perform NAT operation on the matching
                                           packet */
    bcmFieldActionNatEgressOverride = 289, /* Override NAT Egress information with
                                           the given Egress information for
                                           Trasnaltion */
    bcmFieldActionRegexActionCancel = 290, /* Suppress action taken by the Regex
                                           module for matching pkt. */
    bcmFieldActionPortPrioIntCosQNew = 291, /* Change CoS Queue; param0: Classifier
                                           ID param1: Queue offset. */
    bcmFieldActionRpPortPrioIntCosQNew = 292, /* Red packet change CoS Queue; param0:
                                           Classifier ID param1: Queue offset. */
    bcmFieldActionYpPortPrioIntCosQNew = 293, /*  Yellow packet change CoS Queue;
                                           param0: Classifier ID param1: Queue
                                           offset. */
    bcmFieldActionGpPortPrioIntCosQNew = 294, /* Green packet change CoS Queue;
                                           param0: Classifier ID param1: Queue
                                           offset. */
    bcmFieldActionYpMirrorIngress = 295, /* Yellow packet ingress mirror; param0:
                                           Dest modid; param1: Dest port/tgid. */
    bcmFieldActionYpRedirectPort = 296, /* Redirect yellow packet to single
                                           port; param0: Destination modid;
                                           param1: Destination port. */
    bcmFieldActionL2LearnLimitDropCancel = 297, /* Do not perform L2 over-limit-drop
                                           action */
    bcmFieldActionFibreChanSrcBindEnable = 298, /* Enable or Disable Source Bind Check
                                           for Fibre Chan packets */
    bcmFieldActionFibreChanFpmaPrefixCheckEnable = 299, /* Enable or Disable FPMA prefix check
                                           for Fibre Chan packets */
    bcmFieldActionFibreChanZoneCheckEnable = 300, /* Enable or Disable Zone Check for
                                           Fibre Chan packets */
    bcmFieldActionFibreChanVsanId = 301, /* VSAN Id generated via VFP. */
    bcmFieldActionFibreChanZoneCheckActionCancel = 302, /* To Accept or Ignore previously made
                                           Zone check result */
    bcmFieldActionFibreChanIntVsanPri = 303, /* New VSAN Priority. */
    bcmFieldActionLearnInVPortNew = 304, /* Replace the learnt packet InVPort. */
    bcmFieldActionOamDomain = 305,      /* Set the OAM domains on which the MEP
                                           lookups are done. param0 can be used
                                           to set first domain and param1 for
                                           second domain. */
    bcmFieldActionOamOlpHeaderAdd = 306, /* Add OLP  header for this packet -
                                           param0 to be used for passing the
                                           header type. */
    bcmFieldActionOamSessionId = 307,   /* OAM session Id to be used in OLP Rx
                                           header - param0 to be used for
                                           passing the session id. */
    bcmFieldActionOuterVlanCfiCancel = 308, /* Disable the CFI remarking of the
                                           outer vlan tag CFI bit. */
    bcmFieldActionInnerVlanPriCancel = 309, /* Disable the PCP remarking of the
                                           inner vlan tag priority bits. */
    bcmFieldActionPrioIntRemark = 310,  /* Assign a new packet internal priority
                                           for PCP or CFI remarking. */
    bcmFieldActionUseDefaultWred = 311, /* Use the discard settings from default
                                           WRED configuration */
    bcmFieldActionHashValueSet = 312,   /* Set Hash result */
    bcmFieldActionL3IngressSet = 313,   /* Assign L3 Ingress Interface value to
                                           packet. */
    bcmFieldActionInterfaceClassVPort = 314, /* Set the Virtual Port Interface Class
                                           ID . */
    bcmFieldActionIngSampleEnable = 315, /* Set the SFLOW Ingress Sampling. */
    bcmFieldActionEgrSampleEnable = 316, /* Set the SFLOW Egress Sampling. */
    bcmFieldActionHashSelect0 = 317,    /* Set the hash buckets bitmap for Hash
                                           key A. */
    bcmFieldActionHashSelect1 = 318,    /* Set the hash buckets bitmap for Hash
                                           key B. */
    bcmFieldActionTrunkResilientHashCancel = 319, /* Cancels the resilient hash on Trunk. */
    bcmFieldActionHgTrunkResilientHashCancel = 320, /* Cancels the resilient hash on HiGiG
                                           Trunk. */
    bcmFieldActionEcmpResilientHashCancel = 321, /* Cancels the resilient hash on ECMP. */
    bcmFieldActionUnmodifiedPacketRedirectPort = 322, /* Redirect Unmodified Packet to single
                                           port; param0: Destination Gport. */
    bcmFieldActionEtagNew = 323,        /* Replace Port Extender ETAG if
                                           present, add if not present; param0:
                                           ETAG. */
    bcmFieldActionEtagDelete = 324,     /* Delete Port Extender ETAG. */
    bcmFieldActionPfcClassNew = 325,    /* Change the PFC class of the packet;
                                           param0 : new PFC class value. */
    bcmFieldActionRpIntCongestionNotificationNew = 326, /* Replace the internal congestion
                                           notification value of red packet;
                                           param0: Internal congestion
                                           notification value. */
    bcmFieldActionYpIntCongestionNotificationNew = 327, /* Replace the internal congestion
                                           notification value of yellow packet;
                                           param0: Internal congestion
                                           notification value. */
    bcmFieldActionGpIntCongestionNotificationNew = 328, /* Replace the internal congestion
                                           notification value of green packet;
                                           param0: Internal congestion
                                           notification value. */
    bcmFieldActionRpHGCongestionClassNew = 329, /* Replace the value of CongestionClass
                                           field in Higig header for red packet;
                                           param0: CongestionClass value. */
    bcmFieldActionYpHGCongestionClassNew = 330, /* Replace the value of CongestionClass
                                           field in Higig header for yellow
                                           packet; param0: CongestionClass
                                           value. */
    bcmFieldActionGpHGCongestionClassNew = 331, /* Replace the value of CongestionClass
                                           field in Higig header for green
                                           packet; param0: CongestionClass
                                           value. */
    bcmFieldActionRedirDropPrecedence = 332, /* Set the redirect drop precedence of
                                           packets. param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    bcmFieldActionRpRedirDropPrecedence = 333, /* Set the redirect drop precedence of
                                           Red packets.
                                           param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    bcmFieldActionYpRedirDropPrecedence = 334, /* Set the redirect drop precedence of
                                           Yellow packets.
                                           param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    bcmFieldActionGpRedirDropPrecedence = 335, /* Set the redirect drop precedence of
                                           Green packets.
                                           param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    bcmFieldActionHiGigDstModuleGportNew = 336, /* Replace the value of DST_MODID field
                                           in Higig header ; param0: New
                                           Destination Module Id. */
    bcmFieldActionHiGigDstPortGportNew = 337, /* Replace the value of DST_PORT field
                                           in Higig header ; param0: New
                                           Destination Port Id. */
    bcmFieldActionHiGigDstGportNew = 338, /* Replace the value of DST_MODID and
                                           DST_PORT fields in Higig header ;
                                           param0: New Destination Gport. */
    bcmFieldActionGpHiGigDropPrecedenceNew = 339, /* Replace the value of Drop Precedence
                                           field in Higig header for Green
                                           Packets; param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionYpHiGigDropPrecedenceNew = 340, /* Replace the value of Drop Precedence
                                           field in Higig header for Yellow
                                           packets; param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionRpHiGigDropPrecedenceNew = 341, /* Replace the value of Drop Precedence
                                           field in Higig header for Red
                                           packets; param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionHiGigDropPrecedenceNew = 342, /* Replace the value of Drop Precedence
                                           field in Higig header for
                                           any(Green/Yellow/Red) packets;
                                           param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionGpHiGigIntPriNew = 343, /* Replace the value of Traffic Class
                                           field in Higig header for Green
                                           packets; param0: New Internal
                                           Priority. */
    bcmFieldActionYpHiGigIntPriNew = 344, /* Replace the value of Traffic Class
                                           field in Higig header for Yellow
                                           packets; param0: New Internal
                                           Priority. */
    bcmFieldActionRpHiGigIntPriNew = 345, /* Replace the value of Traffic Class
                                           field in Higig header for Red
                                           packets; param0: New Internal
                                           Priority. */
    bcmFieldActionHiGigIntPriNew = 346, /* Replace the value of Traffic Class
                                           field in Higig header for
                                           any(green/Yellow/Red) packet; param0:
                                           New Internal Priority. */
    bcmFieldActionLoopbackSrcModuleGportNew = 347, /* Replace the value of Sourece ModId
                                           field in Loopback header ; param0:
                                           New Source Module Id. */
    bcmFieldActionLoopbackSrcPortGportNew = 348, /* Replace the value of Source PortId
                                           field in Loopback header ; param0:
                                           New Source Port Id. */
    bcmFieldActionLoopbackSrcGportNew = 349, /* Replace the value of Source ModId and
                                           Source PortId fields in Loopback
                                           header ; param0: New Source Gport. */
    bcmFieldActionLoopbackCpuMasqueradePktProfileNew = 350, /* Replace the value of Packet Profile
                                           field in Loopback header ; param0:
                                           New Packet Profile. */
    bcmFieldActionLoopbackPacketProcessingPortNew = 351, /* Replace the value of Packet
                                           Processing port field in Loopback
                                           header ; param0: New Packet
                                           Processing Port. */
    bcmFieldActionLoopBackTypeNew = 352, /* Replace the value of Loopback Type
                                           field in Loopback header ; param0:
                                           Loopback Type
                                           (bcmFieldLoopbackTypeXXX). */
    bcmFieldActionRecoverableDropCancel = 353, /* Override drop decision taken by
                                           Protection switching logic */
    bcmFieldActionCount = 354           /* Always Last. Not a usable value. */
} bcm_field_action_t;

#define BCM_FIELD_ACTION_STRINGS \
{ \
    "CosQNew", \
    "CosQCpuNew", \
    "VlanCosQNew", \
    "UcastCosQNew", \
    "McastCosQNew", \
    "PrioPktAndIntCopy", \
    "PrioPktAndIntNew", \
    "PrioPktAndIntTos", \
    "PrioPktAndIntCancel", \
    "PrioPktCopy", \
    "PrioPktNew", \
    "PrioPktTos", \
    "PrioPktCancel", \
    "PrioIntCopy", \
    "PrioIntNew", \
    "PrioIntTos", \
    "PrioIntCancel", \
    "TosNew", \
    "TosCopy", \
    "TosCancel", \
    "DscpNew", \
    "DscpCancel", \
    "EcnNew", \
    "CopyToCpu", \
    "CopyToCpuCancel", \
    "SwitchToCpuCancel", \
    "SwitchToCpuReinstate", \
    "TimeStampToCpu", \
    "TimeStampToCpuCancel", \
    "RedirectPort", \
    "RedirectTrunk", \
    "RedirectCancel", \
    "RedirectPbmp", \
    "RedirectIpmc", \
    "RedirectMcast", \
    "RedirectVlan", \
    "RedirectBcastPbmp", \
    "EgressMask", \
    "EgressPortsAdd", \
    "Drop", \
    "DropCancel", \
    "MirrorOverride", \
    "MirrorIngress", \
    "MirrorEgress", \
    "L3ChangeVlan", \
    "L3ChangeVlanCancel", \
    "L3ChangeMacDa", \
    "L3ChangeMacDaCancel", \
    "L3Switch", \
    "L3SwitchCancel", \
    "AddClassTag", \
    "DropPrecedence", \
    "RpDrop", \
    "RpDropCancel", \
    "RpDropPrecedence", \
    "RpCopyToCpu", \
    "RpCopyToCpuCancel", \
    "RpSwitchToCpuCancel", \
    "RpSwitchToCpuReinstate", \
    "RpTimeStampToCpu", \
    "RpTimeStampToCpuCancel", \
    "RpDscpNew", \
    "RpDscpCancel", \
    "RpEcnNew", \
    "RpOuterVlanPrioNew", \
    "RpInnerVlanPrioNew", \
    "RpOuterVlanCfiNew", \
    "RpInnerVlanCfiNew", \
    "RpPrioPktCopy", \
    "RpPrioPktNew", \
    "RpPrioPktTos", \
    "RpPrioPktCancel", \
    "RpCosQNew", \
    "RpVlanCosQNew", \
    "RpUcastCosQNew", \
    "RpMcastCosQNew", \
    "RpPrioPktAndIntCopy", \
    "RpPrioPktAndIntNew", \
    "RpPrioPktAndIntTos", \
    "RpPrioPktAndIntCancel", \
    "RpPrioIntCopy", \
    "RpPrioIntNew", \
    "RpPrioIntTos", \
    "RpPrioIntCancel", \
    "YpDrop", \
    "YpDropCancel", \
    "YpDropPrecedence", \
    "YpCopyToCpu", \
    "YpCopyToCpuCancel", \
    "YpSwitchToCpuCancel", \
    "YpSwitchToCpuReinstate", \
    "YpTimeStampToCpu", \
    "YpTimeStampToCpuCancel", \
    "YpDscpNew", \
    "YpDscpCancel", \
    "YpEcnNew", \
    "YpOuterVlanPrioNew", \
    "YpInnerVlanPrioNew", \
    "YpOuterVlanCfiNew", \
    "YpInnerVlanCfiNew", \
    "YpPrioPktCopy", \
    "YpPrioPktNew", \
    "YpPrioPktTos", \
    "YpPrioPktCancel", \
    "YpCosQNew", \
    "YpVlanCosQNew", \
    "YpUcastCosQNew", \
    "YpMcastCosQNew", \
    "YpPrioPktAndIntCopy", \
    "YpPrioPktAndIntNew", \
    "YpPrioPktAndIntTos", \
    "YpPrioPktAndIntCancel", \
    "YpPrioIntCopy", \
    "YpPrioIntNew", \
    "YpPrioIntTos", \
    "YpPrioIntCancel", \
    "UpdateCounter", \
    "MeterConfig", \
    "ColorIndependent", \
    "ClassDestSet", \
    "ClassSourceSet", \
    "VrfSet", \
    "InnerVlanNew", \
    "InnerVlanPrioNew", \
    "InnerVlanDelete", \
    "OuterVlanDelete", \
    "OuterVlanDeleteCancel", \
    "InnerVlanAdd", \
    "InnerVlanCfiNew", \
    "OuterVlanNew", \
    "OuterVlanAdd", \
    "OuterVlanAddCancel", \
    "OuterVlanLookup", \
    "OuterVlanPrioNew", \
    "OuterVlanCfiNew", \
    "OuterTpidNew", \
    "GpDrop", \
    "GpDropCancel", \
    "GpDropPrecedence", \
    "GpCopyToCpu", \
    "GpCopyToCpuCancel", \
    "GpSwitchToCpuCancel", \
    "GpSwitchToCpuReinstate", \
    "GpTimeStampToCpu", \
    "GpTimeStampToCpuCancel", \
    "GpDscpNew", \
    "GpDscpCancel", \
    "GpEcnNew", \
    "GpTosPrecedenceNew", \
    "GpTosPrecedenceCopy", \
    "GpOuterVlanPrioNew", \
    "GpInnerVlanPrioNew", \
    "GpOuterVlanCfiNew", \
    "GpInnerVlanCfiNew", \
    "GpPrioPktCopy", \
    "GpPrioPktNew", \
    "GpPrioPktTos", \
    "GpPrioPktCancel", \
    "GpCosQNew", \
    "GpVlanCosQNew", \
    "GpUcastCosQNew", \
    "GpMcastCosQNew", \
    "GpPrioPktAndIntCopy", \
    "GpPrioPktAndIntNew", \
    "GpPrioPktAndIntTos", \
    "GpPrioPktAndIntCancel", \
    "GpPrioIntCopy", \
    "GpPrioIntNew", \
    "GpPrioIntTos", \
    "GpPrioIntCancel", \
    "DoNotChangeTtl", \
    "DoNotCheckUrpf", \
    "DoNotCheckVlan", \
    "DoNotLearn", \
    "IpFix", \
    "IpFixCancel", \
    "IncomingMplsPortSet", \
    "NewTc", \
    "NewClassId", \
    "Loopback", \
    "NewReasonCode", \
    "BypassStp", \
    "BypassEap", \
    "BypassVlan", \
    "RpRedirectPort", \
    "RpMirrorIngress", \
    "MultipathHash", \
    "IpfixRate", \
    "OffloadRedirect", \
    "OffloadClassSet", \
    "OffloadDropIndication", \
    "OamUpMep", \
    "OamTx", \
    "OamLmepMdl", \
    "OamServicePriMappingPtr", \
    "OamLmBasePtr", \
    "OamDmEnable", \
    "OamLmEnable", \
    "OamLmepEnable", \
    "OamPbbteLookupEnable", \
    "SrcMacNew", \
    "DstMacNew", \
    "VnTagNew", \
    "VnTagDelete", \
    "GpRedirectPort", \
    "GpMirrorIngress", \
    "VportNew", \
    "VportSpcpNew", \
    "VportCpcpNew", \
    "VportTcNew", \
    "VportDpNew", \
    "RedirectVportPort", \
    "MacDaKnown", \
    "Filters", \
    "FabricQueue", \
    "CnmCancel", \
    "DynamicHgTrunkCancel", \
    "EgressMirrorDisable", \
    "MultipathHashAdditionalInfo", \
    "DoNotModify", \
    "MirrorEgressDisable", \
    "OuterVlanCopyInner", \
    "OuterVlanPrioCopyInner", \
    "OuterVlanCfiCopyInner", \
    "InnerVlanCopyOuter", \
    "InnerVlanPrioCopyOuter", \
    "InnerVlanCfiCopyOuter", \
    "CompressSrcIp6", \
    "CompressDstIp6", \
    "ServicePoolIdNew", \
    "UseGlobalMeterColor", \
    "RedirectEgrNextHop", \
    "TrunkLoadBalanceCancel", \
    "EcmpLoadBalanceCancel", \
    "DoNotOverride", \
    "EgressClassSelect", \
    "HiGigClassSelect", \
    "OamDmTimeFormat", \
    "OamLmDmSampleEnable", \
    "OamTagStatusCheck", \
    "OamTunnelControl", \
    "Regex", \
    "NoRegex", \
    "Stat0", \
    "PolicerLevel0", \
    "PolicerLevel1", \
    "PolicerGroup", \
    "StatGroup", \
    "VSQ", \
    "IntPriorityAndDropPrecedence", \
    "ISQ", \
    "Trap", \
    "UsePolicerResult", \
    "Stat1", \
    "StatTag", \
    "Snoop", \
    "TtlSet", \
    "IncomingIpIfSet", \
    "OrientationSet", \
    "TrunkHashKeySet", \
    "DstRpfGportNew", \
    "DhcpPkt", \
    "SrcGportNew", \
    "ForwardingTypeNew", \
    "StartPacketStrip", \
    "SystemHeaderSet", \
    "VSwitchNew", \
    "LearnSrcMacNew", \
    "LearnSrcPortNew", \
    "LearnForwardingVlanIdNew", \
    "QosMapIdNew", \
    "VlanActionSetNew", \
    "VlanTranslationValueSet", \
    "TunnelTerminatedValueSet", \
    "MplsTerminatedValueSet", \
    "IpTunnelValueSet", \
    "L2SrcValueSet", \
    "L2DestValueSet", \
    "L3SrcRouteValueSet", \
    "L3DestRouteValueSet", \
    "IpmcValueSet", \
    "CascadedKeyValueSet", \
    "IngressGportSet", \
    "ExternalValue0Set", \
    "ExternalValue1Set", \
    "ExternalValue2Set", \
    "ExternalValue3Set", \
    "NatCancel", \
    "Nat", \
    "NatEgressOverride", \
    "RegexActionCancel", \
    "PortPrioIntCosQNew", \
    "RpPortPrioIntCosQNew", \
    "YpPortPrioIntCosQNew", \
    "GpPortPrioIntCosQNew", \
    "YpMirrorIngress", \
    "YpRedirectPort", \
    "L2LearnLimitDropCancel", \
    "FibreChanSrcBindEnable", \
    "FibreChanFpmaPrefixCheckEnable", \
    "FibreChanZoneCheckEnable", \
    "FibreChanVsanId", \
    "FibreChanZoneCheckActionCancel", \
    "FibreChanIntVsanPri", \
    "LearnInVPortNew", \
    "OamDomain", \
    "OamOlpHeaderAdd", \
    "OamSessionId", \
    "OuterVlanCfiCancel", \
    "InnerVlanPriCancel", \
    "PrioIntRemark", \
    "UseDefaultWred", \
    "HashValueSet", \
    "L3IngressSet", \
    "InterfaceClassVPort", \
    "IngSampleEnable", \
    "EgrSampleEnable", \
    "HashSelect0", \
    "HashSelect1", \
    "TrunkResilientHashCancel", \
    "HgTrunkResilientHashCancel", \
    "EcmpResilientHashCancel", \
    "UnmodifiedPacketRedirectPort", \
    "EtagNew", \
    "EtagDelete", \
    "PfcClassNew", \
    "RpIntCongestionNotificationNew", \
    "YpIntCongestionNotificationNew", \
    "GpIntCongestionNotificationNew", \
    "RpHGCongestionClassNew", \
    "YpHGCongestionClassNew", \
    "GpHGCongestionClassNew", \
    "RedirDropPrecedence", \
    "RpRedirDropPrecedence", \
    "YpRedirDropPrecedence", \
    "GpRedirDropPrecedence", \
    "HiGigDstModuleGportNew", \
    "HiGigDstPortGportNew", \
    "HiGigDstGportNew", \
    "GpHiGigDropPrecedenceNew", \
    "YpHiGigDropPrecedenceNew", \
    "RpHiGigDropPrecedenceNew", \
    "HiGigDropPrecedenceNew", \
    "GpHiGigIntPriNew", \
    "YpHiGigIntPriNew", \
    "RpHiGigIntPriNew", \
    "HiGigIntPriNew", \
    "LoopbackSrcModuleGportNew", \
    "LoopbackSrcPortGportNew", \
    "LoopbackSrcGportNew", \
    "LoopbackCpuMasqueradePktProfileNew", \
    "LoopbackPacketProcessingPortNew", \
    "LoopBackTypeNew", \
    "RecoverableDropCancel"  \
}

/* 
 * Used to specify the actions that can be taken by the entries in a
 * group
 */
typedef struct bcm_field_aset_s {
    SHR_BITDCL w[_SHR_BITDCLSIZE(bcmFieldActionCount)]; 
} bcm_field_aset_t;

#define BCM_FIELD_ASET_INIT(aset)  \
    sal_memset(&(aset), 0, sizeof(bcm_field_aset_t)) 

#define BCM_FIELD_ASET_ADD(aset, q)  SHR_BITSET(((aset).w), (q)) 

#define BCM_FIELD_ASET_REMOVE(aset, q)  SHR_BITCLR(((aset).w), (q)) 

#define BCM_FIELD_ASET_TEST(aset, q)  SHR_BITGET(((aset).w), (q)) 

#define BCM_FIELD_PRESEL_INIT(presel_set)  \
    sal_memset(&(presel_set), 0, sizeof(bcm_field_presel_set_t)) 

#define BCM_FIELD_PRESEL_ADD(presel_set, presel_id)  SHR_BITSET(((presel_set).w), (presel_id)) 

#define BCM_FIELD_PRESEL_REMOVE(presel_set, presel_id)  SHR_BITCLR(((presel_set).w), (presel_id)) 

#define BCM_FIELD_PRESEL_TEST(presel_set, presel_id)  SHR_BITGET(((presel_set).w), (presel_id)) 

#define BCM_FIELD_ACTION_WIDTH_MAX  48         

#define BCM_FIELD_ASET_WIDTH_MAX    \
    ((BCM_FIELD_ACTION_WIDTH_MAX+1) * \
    bcmFieldActionCount + 1) 

/* Parameter flags for bcmFieldActionFabricQueue action. */
#define BCM_FABRIC_QUEUE_CUSTOMER       (1 << 29)  /* Indicates the intended
                                                      application for the
                                                      SBX_QUEUE_TAG.0x0-Fabric
                                                      Interface Chip.0x1 Traffic
                                                      Manager. */
#define BCM_FABRIC_QUEUE_QOS_BASE       (1 << 30)  /* Offset to base queue
                                                      number from the QUEUE_MAP
                                                      Table. Index into
                                                      QUEUE_MAP Table is
                                                      DST_MODID, DST_PID. */
#define BCM_FABRIC_QUEUE_DEST_OFFSET    (1 << 31)  /*  Index into QUEUE_MAP
                                                      Table used for lookup. . */

/* Unit capabilities flags. */
#define BCM_FIELD_STAT_WIDE_MODE    (1 << 0)   /* Unit has wide-mode slices. */
#define BCM_FIELD_STAT_SLICE_EN     (1 << 1)   /* Enable/disable slice lookup. */
#define BCM_FIELD_STAT_COS_QUEUE    (1 << 2)   /* Unit has CoS Queue change
                                                  actions. */

/* This API is deprecated and no longer supported. */
typedef struct bcm_field_status_s {
    int group_total;    /* Total possible number of groups in unit. */
    int group_free;     /* Unused groups in unit. */
    uint32 flags;       /* Unit capabilities flags. */
} bcm_field_status_t;

/* 
 * Value for bcmFieldControlSharedVlanFieldSet.
 * 
 * When using shared VLAN feature, the shared VLAN ID can be used in
 * place of the packet's inner or outer vlan ID during packet
 * classification.
 */
#define BCM_FIELD_SHARED_VLAN_NONE  0          /* Do not use shared VLAN ID. */
#define BCM_FIELD_SHARED_VLAN_INNER 1          /* Use shared VLAN ID as inner
                                                  VLAN ID. */
#define BCM_FIELD_SHARED_VLAN_OUTER 2          /* Use shared VLAN ID as outer
                                                  VLAN ID. */

/* Field control elements. */
typedef enum bcm_field_control_e {
    bcmFieldControlStage = 0,           /* Select default Field Processor stage. */
    bcmFieldControlColorIndependent = 1, /* Default for color in/dependent. */
    bcmFieldControlUdfHigig0 = 2,       /* UDF_ID=7, has 1st word of Higig
                                           Packet (deprecated). */
    bcmFieldControlUdfHigig1 = 3,       /* UDF_ID=6, has 2nd word of Higig
                                           Packet (deprecated). */
    bcmFieldControlUdfHigig2 = 4,       /* UDF_ID=5, has 3rd word of Higig
                                           Packet (deprecated). */
    bcmFieldControlSharedVlanFieldSet = 5, /* Shared VLAN ID as inner/outer VLAN.
                                           See BCM_FIELD_SHARED_VLAN_xxx. */
    bcmFieldControlRedirectIngressVlanCheck = 6, /* Enable ingress vlan membership check
                                           for FP redirected traffic. */
    bcmFieldControlRedirectNonUcastTrunkResolve = 7, /* Enable uniform distribution of
                                           non-unicast FP redirected traffic. */
    bcmFieldControlRedirectExcludeSrcPort = 8, /* Exclude source port/trunk from FP
                                           redirection  destination. */
    bcmFieldControlRedirectPortFloodBlock = 9, /* Enable port flood blocking policy for
                                           FP redirected traffic. */
    bcmFieldControlRedirectVlanFloodBlock = 10, /* Enable vlan flood blocking policy for
                                           FP redirected traffic. */
    bcmFieldControlArpAsIp = 11,        /* Treat ARP packets as Ip. */
    bcmFieldControlRarpAsIp = 12,       /* Treat RARP packets as Ip. */
    bcmFieldControlIntraDoubleEnable = 13, /* Enable/Disable INTRA slice groups. */
    bcmFieldControlExternalUdfEnable = 14, /* Enable/Disable External UDF support. */
    bcmFieldControlRedirectNonUcastEtherTrunkResolve = 15, /* Enable uniform distribution of
                                           non-unicast FP redirected traffic
                                           over Ethernet Ports. */
    bcmFieldControlRedirectNonUcastFabricTrunkResolve = 16, /* Enable uniform distribution of
                                           non-unicast FP redirected traffic
                                           over HiGig Ports. */
    bcmFieldControlStatSyncEnable = 17, /* Field stat get api will sync up with
                                           hardware before returning the stat
                                           value. */
    bcmFieldControlCascadedKeyWidth = 18, /* Default width of key cascaded between
                                           groups */
    bcmFieldControlPolicerGroupSharingEnable = 19, /* Enable/Disable sharing of policer by
                                           field groups. */
    bcmFieldControlRedirectNextHopExcludeSrcPort = 20, /* Enable removal of system ingress port
                                           from port-bitmap for packets that
                                           have been Redirected to a Next-hop
                                           index by the IFP. */
    bcmFieldControlIngressLogicalPolicerPoolsMode = 21, /* Configure Logical Policer pool mode. */
    bcmFieldControlCount = 22           /* Always last. Not a usable value. */
} bcm_field_control_t;

#define BCM_FIELD_CONTROL_STRINGS \
{ \
    "Stage", \
    "ColorIndependent", \
    "UdfHigig0", \
    "UdfHigig1", \
    "UdfHigig2", \
    "SharedVlanFieldSet", \
    "RedirectIngressVlanCheck", \
    "RedirectNonUcastTrunkResolve", \
    "RedirectExcludeSrcPort", \
    "RedirectPortFloodBlock", \
    "RedirectVlanFloodBlock", \
    "ArpAsIp", \
    "RarpAsIp", \
    "IntraDoubleEnable", \
    "ExternalUdfEnable", \
    "RedirectNonUcastEtherTrunkResolve", \
    "RedirectNonUcastFabricTrunkResolve", \
    "StatSyncEnable", \
    "CascadedKeyWidth", \
    "PolicerGroupSharingEnable", \
    "RedirectNextHopExcludeSrcPort", \
    "IngressLogicalPolicerPoolsMode"  \
}

/* Field Group Status structure. */
typedef struct bcm_field_group_status_s {
    int prio_min;       /* Minimum priority within group. */
    int prio_max;       /* Maximum priority within group. */
    int entries_total;  /* Total possible entries in group. */
    int entries_free;   /* Unused entries in slice. */
    int counters_total; /* Total possible counters in slice. */
    int counters_free;  /* Unused counters in slice. */
    int meters_total;   /* Total meters in slice. */
    int meters_free;    /* Unused meters in slice. */
    int entry_count;    /* Number of entries in the group. */
    int counter_count;  /* Number of counters attached to group entries. */
    int meter_count;    /* Number of meters attached to group entries. */
} bcm_field_group_status_t;

/* Group Modes (single, double or triple wide). */
typedef enum bcm_field_group_mode_e {
    bcmFieldGroupModeSingle = 0,        /* Single-wide group. */
    bcmFieldGroupModeDouble = 1,        /* Double-wide group. */
    bcmFieldGroupModeTriple = 2,        /* Triple-wide group. */
    bcmFieldGroupModeQuad = 3,          /* Quad-wide group. */
    bcmFieldGroupModeAuto = 4,          /* Auto-expand group based on Qset
                                           (default). */
    bcmFieldGroupModeDirect = 5,        /* Direct group (no TCAM lookup). */
    bcmFieldGroupModeDirectExtraction = 6, /* Direct extraction (instead of TCAM)
                                           group. */
    bcmFieldGroupModeHashing = 7,       /* Hash function group - no entries are
                                           expected. */
    bcmFieldGroupModeExactMatch = 8,    /* Exact match group - partial masking
                                           is not supported. */
    bcmFieldGroupModeCount = 9          /* Always last. Not a usable value. */
} bcm_field_group_mode_t;

#define BCM_FIELD_GROUP_MODE_STRINGS \
{ \
    "Single", \
    "Double", \
    "Triple", \
    "Quad", \
    "Auto", \
    "Direct", \
    "DirectExtraction", \
    "Hashing", \
    "ExactMatch"  \
}

/* 
 * Ingress Policer Pool Modes (8x1024default, 16x512Contiguous,
 * 16x512Split).
 */
typedef enum bcm_field_ingress_policer_pools_e {
    bcmFieldIngressLogicalPolicerPools8x1024, /* 8 Meter pools with 1024 entries in
                                           each pool (Default Configuration). */
    bcmFieldIngressLogicalPolicerPools16x512Contiguous, /* 16 Meter pools with 512 entries in
                                           each pool in Contiguous mode. */
    bcmFieldIngressLogicalPolicerPools16x512Split, /* 16 Meter pools with 512 entries in
                                           each pool in Split mode. */
    bcmFieldIngressPolicerPoolsCount    /* Always last. Not a usable value. */
} bcm_field_ingress_policer_pools_t;

#define BCM_FIELD_INGRESS_POLICER_POOL_MODE_STRINGS \
{ \
    "bcmFieldIngressLogicalPolicerPools8x1024", \
    "bcmFieldIngressLogicalPolicerPools16x512Contiguous", \
    "bcmFieldIngressLogicalPolicerPools16x512Split"  \
}

#define bcmFieldGroupModeDefault    bcmFieldGroupModeAuto 

#define BCM_FIELD_GROUP_MODE_WIDTH_MAX  24         

/* Parameter for bcmFieldActionEgressClassSelect */
#define BCM_FIELD_EGRESS_CLASS_SELECT_PORT  0          
#define BCM_FIELD_EGRESS_CLASS_SELECT_SVP   1          
#define BCM_FIELD_EGRESS_CLASS_SELECT_L3_IIF 2          
#define BCM_FIELD_EGRESS_CLASS_SELECT_FIELD_SRC 3          
#define BCM_FIELD_EGRESS_CLASS_SELECT_FIELD_DST 4          
#define BCM_FIELD_EGRESS_CLASS_SELECT_L2_SRC 5          
#define BCM_FIELD_EGRESS_CLASS_SELECT_L2_DST 6          
#define BCM_FIELD_EGRESS_CLASS_SELECT_L3_SRC 7          
#define BCM_FIELD_EGRESS_CLASS_SELECT_L3_DST 8          
#define BCM_FIELD_EGRESS_CLASS_SELECT_VLAN  9          
#define BCM_FIELD_EGRESS_CLASS_SELECT_VRF   10         
#define BCM_FIELD_EGRESS_CLASS_SELECT_NEW   11         

/* Parameter for bcmFieldActionHiGigClassSelect */
#define BCM_FIELD_HIGIG_CLASS_SELECT_EGRESS 0          
#define BCM_FIELD_HIGIG_CLASS_SELECT_EGR_DVP 1          
#define BCM_FIELD_HIGIG_CLASS_SELECT_EGR_L3_INTERFACE 2          
#define BCM_FIELD_HIGIG_CLASS_SELECT_EGR_NEXT_HOP 3          
#define BCM_FIELD_HIGIG_CLASS_SELECT_PORT   4          

/* Paramter for bcmFieldActionOamDmTimeFormat */
#define BCM_FIELD_OAM_DM_TIME_FORMAT_IEEE1588 0          
#define BCM_FIELD_OAM_DM_TIME_FORMAT_NTP    1          

/* Parameter for bcmFieldActionOamTagStatusCheck */
#define BCM_FIELD_OAM_TAG_STATUS_OUTER_MASK (1 << 0)   
#define BCM_FIELD_OAM_TAG_STATUS_INNER_MASK (1 << 1)   
#define BCM_FIELD_OAM_TAG_STATUS_INNER_L2_OUTER_MASK (1 << 2)   
#define BCM_FIELD_OAM_TAG_STATUS_INNER_L2_INNER_MASK (1 << 3)   

/* Parameter for bcmFieldActionOamTunnelControl */
#define BCM_FIELD_OAM_TUNNEL_CONTROL_ANY    0          
#define BCM_FIELD_OAM_TUNNEL_CONTROL_NOT_TUNNELDED 1          

/* Group config create API optional flags. */
#define BCM_FIELD_GROUP_CREATE_WITH_ID      (1 << 0)   
#define BCM_FIELD_GROUP_CREATE_WITH_PORT    (1 << 1)   
#define BCM_FIELD_GROUP_CREATE_WITH_MODE    (1 << 2)   
#define BCM_FIELD_GROUP_CREATE_SMALL        (1 << 3)   
#define BCM_FIELD_GROUP_CREATE_LARGE        (1 << 4)   
#define BCM_FIELD_GROUP_CREATE_WITH_ASET    (1 << 5)   
#define BCM_FIELD_GROUP_CREATE_WITH_PRESELSET (1 << 6)   
#define BCM_FIELD_GROUP_CREATE_INSERTION_ORDER_LOOSE (1 << 7)   /* If set, do not apply
                                                          the rule where TCAM
                                                          entries with identical
                                                          priorities are ordered
                                                          in the TCAM according
                                                          to their insertion
                                                          order */
#define BCM_FIELD_GROUP_CREATE_IS_EQUAL     (1 << 8)   /* If set, the is-equal
                                                          result of this Field
                                                          group key and the
                                                          Field group
                                                          'group_ref' is set in
                                                          the
                                                          bcmFieldQualifyIsEqualValue
                                                          qualifier */
#define BCM_FIELD_GROUP_CREATE_SPARSE_ENTRY_PRIORITIES (1 << 9)   /* If set, the TCAM
                                                          shuffle algorithm
                                                          assumes only sparse
                                                          priorities assigned to
                                                          the Field group
                                                          entries */

#define BCM_FIELD_PRESEL_SEL_MAX    64         

/* Bitmap of all possible preselection specification IDs. */
typedef struct bcm_field_presel_set_s {
    SHR_BITDCL w[_SHR_BITDCLSIZE(BCM_FIELD_PRESEL_SEL_MAX)]; 
} bcm_field_presel_set_t;

/* 
 * Group configuration structure. Used to create a field group with
 * specific attributes.
 */
typedef struct bcm_field_group_config_s {
    uint32 flags;                       /* Group create flags
                                           BCM_FIELD_GROUP_CREATE_XXX. */
    bcm_field_qset_t qset;              /* Group qualifier set. */
    int priority;                       /* Group priority. */
    bcm_field_group_mode_t mode;        /* Group mode. */
    bcm_pbmp_t ports;                   /* Group member ports. */
    bcm_field_group_t group;            /* Group. */
    bcm_field_aset_t aset;              /* Group action set */
    bcm_field_presel_set_t preselset;   /* Group preselector set */
    bcm_field_presel_set_t group_ref;   /* Reference Field group for operation
                                           set by the Flag. */
    int max_entry_priorities;           /* Number of entries priorities in the
                                           group. 0 means unlimited. */
} bcm_field_group_config_t;

/* Description of a single extraction point. */
typedef struct bcm_field_extraction_field_s {
    uint32 flags;                   /* Flags for this extraction point */
    bcm_field_qualify_t qualifier;  /* BCM field qualifier ID (or
                                       bcmFieldQualifyCount is using constant
                                       value) */
    int lsb;                        /* Least significant bit to be extracted
                                       from qualifier */
    int bits;                       /* Number of bits to use, valid for both
                                       qualifier extraction and constant */
    int value;                      /* Constant value (if qualifier is
                                       bcmFieldQualifyCount) */
} bcm_field_extraction_field_t;

/* 
 * A single action, composed of possibly several extraction fields, for
 * an entry in a direct extraction group.
 */
typedef struct bcm_field_extraction_action_s {
    bcm_field_action_t action;  /* BCM field action ID of the action to be built
                                   by extraction */
    int bias;                   /* Bias value added to the final extracted value
                                   before using it as an argument to the action */
} bcm_field_extraction_action_t;

/* Field Qualifier Arp Opcode (for bcm_field_qualify_ArpOpcode). */
typedef enum bcm_field_ArpOpcode_e {
    bcmFieldArpOpcodeRequest = 0,   /* Request opcode. */
    bcmFieldArpOpcodeReply = 1,     /* Reply opcode. */
    bcmFieldArpOpcodeCount = 2      /* Always last; not a usable value. */
} bcm_field_ArpOpcode_t;

#define BCM_FIELD_FARPOPCODE_STRINGS \
{ \
    "Request", \
    "Reply"  \
}

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize field software subsystem. */
extern int bcm_field_init(
    int unit);

/* De-initialize field software subsystem. */
extern int bcm_field_detach(
    int unit);

/* Get a field control value. */
extern int bcm_field_control_get(
    int unit, 
    bcm_field_control_t control, 
    uint32 *state);

/* Set a field control value. */
extern int bcm_field_control_set(
    int unit, 
    bcm_field_control_t control, 
    uint32 state);

/* Get per-stage field information */
extern int bcm_field_stage_info_get(
    int unit, 
    bcm_field_stage_t stage, 
    bcm_field_stage_info_t *info);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initiaize UDF specification structure. */
extern void bcm_field_udf_spec_t_init(
    bcm_field_udf_spec_t *udf_spec);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a field group. */
extern int bcm_field_group_create(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_t *group);

/* Create a field group. */
extern int bcm_field_group_create_id(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_t group);

/* Enable or Disable Auto expansion of entries for a group. */
extern int bcm_field_group_expansion_enable_set(
    int unit, 
    bcm_field_group_t group, 
    int enable);

/* Get Auto expansion configuration for a group. */
extern int bcm_field_group_expansion_enable_get(
    int unit, 
    bcm_field_group_t group, 
    int *enable);

/* Create a field group. */
extern int bcm_field_group_create_mode(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t *group);

/* Create a field group. */
extern int bcm_field_group_create_mode_id(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t group);

/* Create a field group. */
extern int bcm_field_group_port_create_mode(
    int unit, 
    bcm_port_t port, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t *group);

/* Create a field group. */
extern int bcm_field_group_port_create_mode_id(
    int unit, 
    bcm_port_t port, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t group);

/* Create a field group. */
extern int bcm_field_group_ports_create_mode(
    int unit, 
    bcm_pbmp_t pbmp, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t *group);

/* Create a field group. */
extern int bcm_field_group_ports_create_mode_id(
    int unit, 
    bcm_pbmp_t pbmp, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t group);

/* Create a wlan field group. */
extern int bcm_field_group_wlan_create_mode(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t *group);

/* Create a wlan field group. */
extern int bcm_field_group_wlan_create_mode_id(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t group);

/* Get the mode of a group. */
extern int bcm_field_group_mode_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_group_mode_t *mode);

/* Create a field group with specific attributes. */
extern int bcm_field_group_config_create(
    int unit, 
    bcm_field_group_config_t *group_config);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize Field Group Config structure. */
extern void bcm_field_group_config_t_init(
    bcm_field_group_config_t *group_config);

/* FP group traverse callback function */
typedef int (*bcm_field_group_traverse_cb)(
    int unit, 
    bcm_field_group_t group, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Traverse all the fp groups in the system, calling a specified callback
 * for each one
 */
extern int bcm_field_group_traverse(
    int unit, 
    bcm_field_group_traverse_cb callback, 
    void *user_data);

/* 
 * Destroys field entries in the given group (both software object and
 * the actual hardware entry) before destroying the field group. Field
 * group sw object is also destroyed as well.
 */
extern int bcm_field_group_flush(
    int unit, 
    bcm_field_group_t group);

/* Change or retrieve the qualifiers for a field group. */
extern int bcm_field_group_set(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_qset_t qset);

/* Change or retrieve the qualifiers for a field group. */
extern int bcm_field_group_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_qset_t *qset);

/* Change or retrieve the actions for a field group. */
extern int bcm_field_group_action_set(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_aset_t aset);

/* Change or retrieve the actions for a field group. */
extern int bcm_field_group_action_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_aset_t *aset);

/* Deallocates a field group. */
extern int bcm_field_group_destroy(
    int unit, 
    bcm_field_group_t group);

/* Compress field group entries. */
extern int bcm_field_group_compress(
    int unit, 
    bcm_field_group_t group);

/* Set field group priority. */
extern int bcm_field_group_priority_set(
    int unit, 
    bcm_field_group_t group, 
    int priority);

/* Get field group priority. */
extern int bcm_field_group_priority_get(
    int unit, 
    bcm_field_group_t group, 
    int *priority);

/* Retrieve status of a specified field group. */
extern int bcm_field_group_status_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_group_status_t *status);

/* Set the group enable state. */
extern int bcm_field_group_enable_set(
    int unit, 
    bcm_field_group_t group, 
    int enable);

/* Get the group enable state. */
extern int bcm_field_group_enable_get(
    int unit, 
    bcm_field_group_t group, 
    int *enable);

/* Allocate a range checker with specified configuration. */
extern int bcm_field_range_create(
    int unit, 
    bcm_field_range_t *range, 
    uint32 flags, 
    bcm_l4_port_t min, 
    bcm_l4_port_t max);

/* 
 * Install all entries of a field group into the hardware tables (will
 * silently reinstall entries already in the hardware tables)
 */
extern int bcm_field_group_install(
    int unit, 
    bcm_field_group_t group);

/* 
 * Remove all entries of a field group from the hardware tables (will
 * silently ignore entries not in the hardware tables)
 */
extern int bcm_field_group_remove(
    int unit, 
    bcm_field_group_t group);

/* Allocate a range checker with specified configuration. */
extern int bcm_field_range_create_id(
    int unit, 
    bcm_field_range_t range, 
    uint32 flags, 
    bcm_l4_port_t min, 
    bcm_l4_port_t max);

/* 
 * Allocate a range checker with specified configuration associated with
 * an interface group.
 */
extern int bcm_field_range_group_create(
    int unit, 
    bcm_field_range_t *range, 
    uint32 flags, 
    bcm_l4_port_t min, 
    bcm_l4_port_t max, 
    bcm_if_group_t group);

/* 
 * Allocate a range checker with specified configuration associated with
 * an interface group.
 */
extern int bcm_field_range_group_create_id(
    int unit, 
    bcm_field_range_t range, 
    uint32 flags, 
    bcm_l4_port_t min, 
    bcm_l4_port_t max, 
    bcm_if_group_t group);

/* Retrieve parameters associated with an existing range checker. */
extern int bcm_field_range_get(
    int unit, 
    bcm_field_range_t range, 
    uint32 *flags, 
    bcm_l4_port_t *min, 
    bcm_l4_port_t *max);

/* Destroy a virtual range checker. */
extern int bcm_field_range_destroy(
    int unit, 
    bcm_field_range_t range);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize Field Data Qualifier structure. */
extern void bcm_field_data_qualifier_t_init(
    bcm_field_data_qualifier_t *data_qual);

/* Initialize ethertype based field data qualifier. */
extern void bcm_field_data_ethertype_t_init(
    bcm_field_data_ethertype_t *etype);

/* Initialize ip protocol based field data qualifier. */
extern void bcm_field_data_ip_protocol_t_init(
    bcm_field_data_ip_protocol_t *ip_protocol);

/* Initialize packet format based field data qualifier. */
extern void bcm_field_data_packet_format_t_init(
    bcm_field_data_packet_format_t *packet_format);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create an data/offset based qualifier. */
extern int bcm_field_data_qualifier_create(
    int unit, 
    bcm_field_data_qualifier_t *data_qualifier);

/* Return list of ids of defined data qualifiers, per standard API idiom. */
extern int bcm_field_data_qualifier_multi_get(
    int unit, 
    int qual_size, 
    int *qual_array, 
    int *qual_count);

/* Return configuration of given data qualifier. */
extern int bcm_field_data_qualifier_get(
    int unit, 
    int qual_id, 
    bcm_field_data_qualifier_t *qual);

/* Destroy an data/offset based qualifier. */
extern int bcm_field_data_qualifier_destroy(
    int unit, 
    int qual_id);

/* Delete all data/offset based qualifiers. */
extern int bcm_field_data_qualifier_destroy_all(
    int unit);

/* Add ethertype based offset to data qualifier object. */
extern int bcm_field_data_qualifier_ethertype_add(
    int unit, 
    int qual_id, 
    bcm_field_data_ethertype_t *etype);

/* Remove ethertype based offset from data qualifier object. */
extern int bcm_field_data_qualifier_ethertype_delete(
    int unit, 
    int qual_id, 
    bcm_field_data_ethertype_t *etype);

/* Add ip protocol based offset to data qualifier object. */
extern int bcm_field_data_qualifier_ip_protocol_add(
    int unit, 
    int qual_id, 
    bcm_field_data_ip_protocol_t *ip_protocol);

/* Remove ip protocol based offset from data qualifier object. */
extern int bcm_field_data_qualifier_ip_protocol_delete(
    int unit, 
    int qual_id, 
    bcm_field_data_ip_protocol_t *ip_protocol);

/* Add packet format based offset/s to data qualifier object. */
extern int bcm_field_data_qualifier_packet_format_add(
    int unit, 
    int qual_id, 
    bcm_field_data_packet_format_t *packet_format);

/* Remove packet format based offset/s from data qualifier object. */
extern int bcm_field_data_qualifier_packet_format_delete(
    int unit, 
    int qual_id, 
    bcm_field_data_packet_format_t *packet_format);

/* Add field data qualifier to group qset. */
extern int bcm_field_qset_data_qualifier_add(
    int unit, 
    bcm_field_qset_t *qset, 
    int qual_id);

/* Delete a field data qualifier from group qset. */
extern int bcm_field_qset_data_qualifier_delete(
    int unit, 
    bcm_field_qset_t *qset, 
    int qual_id);

/* Get field data qualifiers included in group qset. */
extern int bcm_field_qset_data_qualifier_get(
    int unit, 
    bcm_field_qset_t qset, 
    int qual_max, 
    int *qual_arr, 
    int *qual_count);

/* Create a blank field entry. */
extern int bcm_field_entry_create(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_entry_t *entry);

/* Create a blank field entry. */
extern int bcm_field_entry_create_id(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_entry_t entry);

/* Create a blank field entry. */
extern int bcm_field_entry_multi_get(
    int unit, 
    bcm_field_group_t group, 
    int entry_size, 
    bcm_field_entry_t *entry_array, 
    int *entry_count);

/* Destroy a field entry. */
extern int bcm_field_entry_destroy(
    int unit, 
    bcm_field_entry_t entry);

/* Destroy all field entries. */
extern int bcm_field_entry_destroy_all(
    int unit);

/* Create a copy of an existing field entry. */
extern int bcm_field_entry_copy(
    int unit, 
    bcm_field_entry_t src_entry, 
    bcm_field_entry_t *dst_entry);

/* Create a copy of an existing field entry. */
extern int bcm_field_entry_copy_id(
    int unit, 
    bcm_field_entry_t src_entry, 
    bcm_field_entry_t dst_entry);

/* Install a field entry into the hardware tables. */
extern int bcm_field_entry_install(
    int unit, 
    bcm_field_entry_t entry);

/* Re-install a field entry into the hardware tables. */
extern int bcm_field_entry_reinstall(
    int unit, 
    bcm_field_entry_t entry);

/* Remove a field entry from the hardware tables. */
extern int bcm_field_entry_remove(
    int unit, 
    bcm_field_entry_t entry);

/* Enable or Disable a field Entry in hardware table by toggling VALIDf. */
extern int bcm_field_entry_enable_set(
    int unit, 
    bcm_field_entry_t entry, 
    int enable_flag);

/* Get the Enable or Disable status of a field Entry. */
extern int bcm_field_entry_enable_get(
    int unit, 
    bcm_field_entry_t entry, 
    int *enable_flag);

/* Attach a policer to a field entry. */
extern int bcm_field_entry_policer_attach(
    int unit, 
    bcm_field_entry_t entry_id, 
    int level, 
    bcm_policer_t policer_id);

/* Detach a policer from a field entry. */
extern int bcm_field_entry_policer_detach(
    int unit, 
    bcm_field_entry_t entry_id, 
    int level);

/* Detach all policers from a field entry. */
extern int bcm_field_entry_policer_detach_all(
    int unit, 
    bcm_field_entry_t entry_id);

/* Get the policer(s) attached to a field entry. */
extern int bcm_field_entry_policer_get(
    int unit, 
    bcm_field_entry_t entry_id, 
    int level, 
    bcm_policer_t *policer_id);

/* Get/Set the priority for an entry within a group. */
extern int bcm_field_entry_prio_get(
    int unit, 
    bcm_field_entry_t entry, 
    int *prio);

/* Get/Set the priority for an entry within a group. */
extern int bcm_field_entry_prio_set(
    int unit, 
    bcm_field_entry_t entry, 
    int prio);

/* Invalidate HW FP entries that have not been replayed after warm boot. */
extern int bcm_field_resync(
    int unit);

/* Add qualifier objects to field group qset. */
extern int bcm_field_qset_id_multi_set(
    int unit, 
    bcm_field_qualify_t qualifier, 
    int num_objects, 
    int *object_list, 
    bcm_field_qset_t *qset);

/* Delete qualifier objects to field group qset. */
extern int bcm_field_qset_id_multi_delete(
    int unit, 
    bcm_field_qualify_t qualifier, 
    int num_objects, 
    int *object_list, 
    bcm_field_qset_t *qset);

/* Get qualifier objects added to the field group qset. */
extern int bcm_field_qset_id_multi_get(
    int unit, 
    bcm_field_qset_t qset, 
    bcm_field_qualify_t qualifier, 
    int max_objects, 
    int *object_list, 
    int *count_objects);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_FIELD_SEL_NOT_IN_TABLE  0xfff0     

#define BCM_FIELD_QUALIFY_PRESEL    0x40000000 /* OR with ID when calling
                                                  bcm_field_qualify_* functions
                                                  to indicate ID is a
                                                  preselector instead of an
                                                  entry */

#ifndef BCM_HIDE_DISPATCHABLE

/* Remove all qualifications from a field entry. */
extern int bcm_field_qualify_clear(
    int unit, 
    bcm_field_entry_t entry);

/* Add data field that the packet must match to trigger qualifier. */
extern int bcm_field_qualify_data(
    int unit, 
    bcm_field_entry_t eid, 
    int qual_id, 
    uint8 *data, 
    uint8 *mask, 
    uint16 length);

/* Add UDF data that the packet must match to trigger qualifier. */
extern int bcm_field_qualify_udf(
    int unit, 
    bcm_field_entry_t eid, 
    bcm_udf_id_t udf_id, 
    int length, 
    uint8 *data, 
    uint8 *mask);

/* Get UDF data that the packet configured to match on. */
extern int bcm_field_qualify_udf_get(
    int unit, 
    bcm_field_entry_t eid, 
    bcm_udf_id_t udf_id, 
    int max_length, 
    uint8 *data, 
    uint8 *mask, 
    int *actual_length);

/* Remove match criteria from a field processor entry. */
extern int bcm_field_qualifier_delete(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_qualify_t qual_id);

/* bcm_field_qualify_InPort */
extern int bcm_field_qualify_InPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t data, 
    bcm_port_t mask);

/* bcm_field_qualify_OutPort */
extern int bcm_field_qualify_OutPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t data, 
    bcm_port_t mask);

/* bcm_field_qualify_InPorts */
extern int bcm_field_qualify_InPorts(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t data, 
    bcm_pbmp_t mask);

/* bcm_field_qualify_OutPorts */
extern int bcm_field_qualify_OutPorts(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t data, 
    bcm_pbmp_t mask);

/* bcm_field_qualify_Drop */
extern int bcm_field_qualify_Drop(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_SrcPort */
extern int bcm_field_qualify_SrcPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t data_modid, 
    bcm_module_t mask_modid, 
    bcm_port_t data_port, 
    bcm_port_t mask_port);

/* bcm_field_qualify_SrcTrunk */
extern int bcm_field_qualify_SrcTrunk(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t data, 
    bcm_trunk_t mask);

/* 
 * Set match criteria for bcmFieldQualifySrcTrunkMemberGport
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_SrcTrunkMemberGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t data);

/* bcm_field_qualify_DstPort */
extern int bcm_field_qualify_DstPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t data_modid, 
    bcm_module_t mask_modid, 
    bcm_port_t data_port, 
    bcm_port_t mask_port);

/* bcm_field_qualify_DstTrunk */
extern int bcm_field_qualify_DstTrunk(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t data, 
    bcm_trunk_t mask);

/* bcm_field_qualify_InnerL4SrcPort */
extern int bcm_field_qualify_InnerL4SrcPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t data, 
    bcm_l4_port_t mask);

/* bcm_field_qualify_InnerL4DstPort */
extern int bcm_field_qualify_InnerL4DstPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t data, 
    bcm_l4_port_t mask);

/* bcm_field_qualify_L4SrcPort */
extern int bcm_field_qualify_L4SrcPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t data, 
    bcm_l4_port_t mask);

/* bcm_field_qualify_L4DstPort */
extern int bcm_field_qualify_L4DstPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t data, 
    bcm_l4_port_t mask);

/* bcm_field_qualify_OuterVlan */
extern int bcm_field_qualify_OuterVlan(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 *  Set match criteria for bcmFieldQualifyOuterVlanId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_OuterVlanId(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 *  Set match criteria for bcmFieldQualifyOuterVlanPri
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_OuterVlanPri(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Set match criteria for bcmFieldQualifyOuterVlanCfi
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_OuterVlanCfi(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerVlan */
extern int bcm_field_qualify_InnerVlan(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 *  Set match criteria for bcmFieldQualifyInnerVlanId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_InnerVlanId(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 *  Set match criteria for bcmFieldQualifyInnerVlanPri
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_InnerVlanPri(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Set match criteria for bcmFieldQualifyInnerVlanCfi
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_InnerVlanCfi(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_EtherType */
extern int bcm_field_qualify_EtherType(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* bcm_field_qualify_EqualL4Port */
extern int bcm_field_qualify_EqualL4Port(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 flag);

/* Add loopback field qualification to a field entry. */
extern int bcm_field_qualify_Loopback(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Add loopback type field qualification to a field entry. */
extern int bcm_field_qualify_LoopbackType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_LoopbackType_t loopback_type);

/* Add tunnel type field qualification to a field entry. */
extern int bcm_field_qualify_TunnelType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_TunnelType_t tunnel_type);

/* bcm_field_qualify_DstL3Egress */
extern int bcm_field_qualify_DstL3Egress(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t if_id);

/* bcm_field_qualify_DstMulticastGroup */
extern int bcm_field_qualify_DstMulticastGroup(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t group);

/* bcm_field_qualify_SrcMplsGport */
extern int bcm_field_qualify_SrcMplsGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mpls_port_id);

/* bcm_field_qualify_DstMplsGport */
extern int bcm_field_qualify_DstMplsGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mpls_port_id);

/* bcm_field_qualify_SrcMimGport */
extern int bcm_field_qualify_SrcMimGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mim_port_id);

/* bcm_field_qualify_DstMimGport */
extern int bcm_field_qualify_DstMimGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mim_port_id);

/* bcm_field_qualify_SrcWlanGport */
extern int bcm_field_qualify_SrcWlanGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t wlan_port_id);

/* bcm_field_qualify_DstWlanGport */
extern int bcm_field_qualify_DstWlanGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t wlan_port_id);

/* bcm_field_qualify_SrcVxlanGport */
extern int bcm_field_qualify_SrcVxlanGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t vxlan_port_id);

/* bcm_field_qualify_DstVxlanGport */
extern int bcm_field_qualify_DstVxlanGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t vxlan_port_id);

/* 
 * Set match criteria for bcmFieldQualifyIntPriority
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IntPriority(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Set match criteria for bcmFieldQualifyForwardingVlanId
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ForwardingVlanId(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 * Get match criteria for bcmFieldQualifyForwardingVlanId
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardingVlanId_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 * Set match criteria for bcmFieldQualifyVpn
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_Vpn(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vpn_t data, 
    bcm_vpn_t mask);

/* 
 * Get match criteria for bcmFieldQualifyVpn
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Vpn_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vpn_t *data, 
    bcm_vpn_t *mask);

/* 
 * Set match criteria for bcmFieldQualifyColor
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_Color(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 color);

/* 
 * Set match criteria for bcmFieldQualifySrcModPortGport
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_SrcModPortGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t data);

/* 
 * Set match criteria for bcmFieldQualifySrcModuleGport
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_SrcModuleGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t data);

/* bcm_field_qualify_IpProtocol */
extern int bcm_field_qualify_IpProtocol(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpInfo */
extern int bcm_field_qualify_IpInfo(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_PacketRes */
extern int bcm_field_qualify_PacketRes(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcIp */
extern int bcm_field_qualify_SrcIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_DstIp */
extern int bcm_field_qualify_DstIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_DSCP */
extern int bcm_field_qualify_DSCP(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Tos */
extern int bcm_field_qualify_Tos(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpFlags */
extern int bcm_field_qualify_IpFlags(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_TcpControl */
extern int bcm_field_qualify_TcpControl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_TcpSequenceZero */
extern int bcm_field_qualify_TcpSequenceZero(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 flag);

/* bcm_field_qualify_TcpHeaderSize */
extern int bcm_field_qualify_TcpHeaderSize(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Ttl */
extern int bcm_field_qualify_Ttl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_RangeCheck */
extern int bcm_field_qualify_RangeCheck(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_range_t range, 
    int invert);

/* bcm_field_qualify_SrcIp6 */
extern int bcm_field_qualify_SrcIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_DstIp6 */
extern int bcm_field_qualify_DstIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_SrcIp6High */
extern int bcm_field_qualify_SrcIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_SrcIpEqualDstIp */
extern int bcm_field_qualify_SrcIpEqualDstIp(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 flag);

/* bcm_field_qualify_DstIp6High */
extern int bcm_field_qualify_DstIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_DstIp6Low */
extern int bcm_field_qualify_DstIp6Low(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_SrcIp6Low */
extern int bcm_field_qualify_SrcIp6Low(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_Ip6NextHeader */
extern int bcm_field_qualify_Ip6NextHeader(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Ip6TrafficClass */
extern int bcm_field_qualify_Ip6TrafficClass(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerIp6FlowLabel */
extern int bcm_field_qualify_InnerIp6FlowLabel(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_Ip6FlowLabel */
extern int bcm_field_qualify_Ip6FlowLabel(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_Ip6HopLimit */
extern int bcm_field_qualify_Ip6HopLimit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_SrcMac */
extern int bcm_field_qualify_SrcMac(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t data, 
    bcm_mac_t mask);

/* bcm_field_qualify_DstMac */
extern int bcm_field_qualify_DstMac(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t data, 
    bcm_mac_t mask);

/* bcm_field_qualify_InnerIpType */
extern int bcm_field_qualify_InnerIpType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpType_t type);

/* bcm_field_qualify_ForwardingType */
extern int bcm_field_qualify_ForwardingType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_ForwardingType_t type);

/* bcm_field_qualify_AppType */
extern int bcm_field_qualify_AppType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_AppType_t type);

/* bcm_field_qualify_IpType */
extern int bcm_field_qualify_IpType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpType_t type);

/* bcm_field_qualify_L2Format */
extern int bcm_field_qualify_L2Format(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_L2Format_t type);

/* bcm_field_qualify_VlanFormat */
extern int bcm_field_qualify_VlanFormat(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_MHOpcode */
extern int bcm_field_qualify_MHOpcode(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Decap */
extern int bcm_field_qualify_Decap(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_decap_t decap);

/* Qualify on HiGig packets. */
extern int bcm_field_qualify_HiGig(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Qualify on HiGig destination packets. */
extern int bcm_field_qualify_DstHiGig(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Qualify on HiGig lookup packets. */
extern int bcm_field_qualify_HiGigProxy(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InterfaceClassPort */
extern int bcm_field_qualify_InterfaceClassPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_InterfaceClassL2 */
extern int bcm_field_qualify_InterfaceClassL2(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_InterfaceClassL3 */
extern int bcm_field_qualify_InterfaceClassL3(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcClassL2 */
extern int bcm_field_qualify_SrcClassL2(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcClassL3 */
extern int bcm_field_qualify_SrcClassL3(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcClassField */
extern int bcm_field_qualify_SrcClassField(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_DstClassL2 */
extern int bcm_field_qualify_DstClassL2(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_DstClassL3 */
extern int bcm_field_qualify_DstClassL3(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_DstClassField */
extern int bcm_field_qualify_DstClassField(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_DstMultipath */
extern int bcm_field_qualify_DstMultipath(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t mpintf);

/* bcm_field_qualify_DstMultipath_get */
extern int bcm_field_qualify_DstMultipath_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t *mpintf);

/* bcm_field_qualify_IpProtocolCommon */
extern int bcm_field_qualify_IpProtocolCommon(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpProtocolCommon_t protocol);

/* bcm_field_qualify_InnerIpProtocolCommon */
extern int bcm_field_qualify_InnerIpProtocolCommon(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpProtocolCommon_t protocol);

/* bcm_field_qualify_Snap */
extern int bcm_field_qualify_Snap(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_snap_header_t data, 
    bcm_field_snap_header_t mask);

/* bcm_field_qualify_Llc */
extern int bcm_field_qualify_Llc(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_llc_header_t data, 
    bcm_field_llc_header_t mask);

/* bcm_field_qualify_InnerTpid */
extern int bcm_field_qualify_InnerTpid(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 tpid);

/* bcm_field_qualify_OuterTpid */
extern int bcm_field_qualify_OuterTpid(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 tpid);

/* bcm_field_qualify_L3Routable */
extern int bcm_field_qualify_L3Routable(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpFrag */
extern int bcm_field_qualify_IpFrag(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpFrag_t frag_info);

/* bcm_field_qualify_Vrf */
extern int bcm_field_qualify_Vrf(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_L3Ingress */
extern int bcm_field_qualify_L3Ingress(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 intf_id, 
    uint32 mask);

/* bcm_field_qualify_ExtensionHeaderType */
extern int bcm_field_qualify_ExtensionHeaderType(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_ExtensionHeaderSubCode */
extern int bcm_field_qualify_ExtensionHeaderSubCode(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_ExtensionHeader2Type */
extern int bcm_field_qualify_ExtensionHeader2Type(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L4Ports */
extern int bcm_field_qualify_L4Ports(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_MirrorCopy */
extern int bcm_field_qualify_MirrorCopy(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_TunnelTerminated */
extern int bcm_field_qualify_TunnelTerminated(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_MplsTerminated */
extern int bcm_field_qualify_MplsTerminated(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerSrcIp */
extern int bcm_field_qualify_InnerSrcIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_InnerDstIp */
extern int bcm_field_qualify_InnerDstIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_InnerSrcIp6 */
extern int bcm_field_qualify_InnerSrcIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerDstIp6 */
extern int bcm_field_qualify_InnerDstIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerSrcIp6High */
extern int bcm_field_qualify_InnerSrcIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerDstIp6High */
extern int bcm_field_qualify_InnerDstIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerIp6HopLimit */
extern int bcm_field_qualify_InnerIp6HopLimit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerTtl */
extern int bcm_field_qualify_InnerTtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerTos */
extern int bcm_field_qualify_InnerTos(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerDSCP */
extern int bcm_field_qualify_InnerDSCP(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerIpProtocol */
extern int bcm_field_qualify_InnerIpProtocol(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerIp6NextHeader */
extern int bcm_field_qualify_InnerIp6NextHeader(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerIpFrag */
extern int bcm_field_qualify_InnerIpFrag(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpFrag_t frag_info);

/* bcm_field_qualify_DosAttack */
extern int bcm_field_qualify_DosAttack(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpmcStarGroupHit */
extern int bcm_field_qualify_IpmcStarGroupHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_MyStationHit */
extern int bcm_field_qualify_MyStationHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Match on first eight bytes of L2 payload */
extern int bcm_field_qualify_L2PayloadFirstEightBytes(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data1, 
    uint32 data2, 
    uint32 mask1, 
    uint32 mask2);

/* bcm_field_qualify_L3DestRouteHit */
extern int bcm_field_qualify_L3DestRouteHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L3DestHostHit */
extern int bcm_field_qualify_L3DestHostHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L3SrcHostHit */
extern int bcm_field_qualify_L3SrcHostHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2CacheHit */
extern int bcm_field_qualify_L2CacheHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2StationMove */
extern int bcm_field_qualify_L2StationMove(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2DestHit */
extern int bcm_field_qualify_L2DestHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2SrcStatic */
extern int bcm_field_qualify_L2SrcStatic(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2SrcHit */
extern int bcm_field_qualify_L2SrcHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IngressStpState */
extern int bcm_field_qualify_IngressStpState(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IngressVPortBridgeDisable */
extern int bcm_field_qualify_IngressVPortBridgeDisable(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyIngressVPortBridgeDisable
 * qualifier from the field entry.
 */
extern int bcm_field_qualify_IngressVPortBridgeDisable_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* bcm_field_qualify_ForwardingVlanValid */
extern int bcm_field_qualify_ForwardingVlanValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_SrcVirtualPortValid */
extern int bcm_field_qualify_SrcVirtualPortValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Set match criteria for bcmFieldQualifyDstL3EgressNextHops
 *                 qualifier in the field entry.
 */
extern int bcm_field_qualify_DstL3EgressNextHops(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_VlanTranslationHit */
extern int bcm_field_qualify_VlanTranslationHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpAuth */
extern int bcm_field_qualify_IpAuth(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_BigIcmpCheck */
extern int bcm_field_qualify_BigIcmpCheck(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 flag, 
    uint32 size);

/* bcm_field_qualify_IcmpTypeCode */
extern int bcm_field_qualify_IcmpTypeCode(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* bcm_field_qualify_IgmpTypeMaxRespTime */
extern int bcm_field_qualify_IgmpTypeMaxRespTime(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Set match criteria for bcmFieldQualifyTranslatedVlanFormat
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_TranslatedVlanFormat(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Add Fibre Channel outer header type field qualification to a field
 * entry.
 */
extern int bcm_field_qualify_FibreChanOuter(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_FibreChan_t fibre_chan_type);

/* 
 * Add Fibre Channel inner header type field qualification to a field
 * entry.
 */
extern int bcm_field_qualify_FibreChanInner(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_FibreChan_t fibre_chan_type);

/* bcm_field_qualify_VnTag */
extern int bcm_field_qualify_VnTag(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SubportPktTag */
extern int bcm_field_qualify_SubportPktTag(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* bcm_field_qualify_CnTag */
extern int bcm_field_qualify_CnTag(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_FabricQueueTag */
extern int bcm_field_qualify_FabricQueueTag(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyIntPriority
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IntPriority_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyColor
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Color_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *color);

/* 
 * Get match criteria for bcmFieldQualifySrcModPortGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcModPortGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *data);

/* 
 * Get match criteria for bcmFieldQualifySrcModuleGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcModuleGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *data);

/* Get loopback type field qualification from a field entry. */
extern int bcm_field_qualify_LoopbackType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_LoopbackType_t *loopback_type);

/* Get tunnel type field qualification from a field entry. */
extern int bcm_field_qualify_TunnelType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_TunnelType_t *tunnel_type);

/* 
 * Get match criteria for bcmFieldQualifyDstL3Egress
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstL3Egress_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t *if_id);

/* 
 * Get match criteria for bcmFieldQualifyDstMulticastGroup
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstMulticastGroup_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *group);

/* 
 * Get match criteria for bcmFieldQualifySrcMplsGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcMplsGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mpls_port_id);

/* 
 * Get match criteria for bcmFieldQualifyDstMplsGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstMplsGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mpls_port_id);

/* 
 * Get match criteria for bcmFieldQualifySrcMimGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcMimGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mim_port_id);

/* 
 * Get match criteria for bcmFieldQualifyDstMimGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstMimGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mim_port_id);

/* 
 * Get match criteria for bcmFieldQualifySrcWlanGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcWlanGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *wlan_port_id);

/* 
 * Get match criteria for bcmFieldQualifyDstWlanGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstWlanGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *wlan_port_id);

/* 
 * Get match criteria for bcmFieldQualifySrcVxlanGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcVxlanGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *vxlan_port_id);

/* 
 * Get match criteria for bcmFieldQualifyDstVxlanGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstVxlanGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *vxlan_port_id);

/* Get loopback field qualification from  a field entry. */
extern int bcm_field_qualify_Loopback_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t *data, 
    bcm_port_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyOutPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_OutPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t *data, 
    bcm_port_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInPorts
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InPorts_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t *data, 
    bcm_pbmp_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyOutPorts
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_OutPorts_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t *data, 
    bcm_pbmp_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyDrop
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Drop_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t *data_modid, 
    bcm_module_t *mask_modid, 
    bcm_port_t *data_port, 
    bcm_port_t *mask_port);

/* 
 * Get match criteria for bcmFieldQualifySrcTrunk
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcTrunk_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t *data, 
    bcm_trunk_t *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcTrunkMemberGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcTrunkMemberGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *data);

/* 
 * Get match criteria for bcmFieldQualifyDstPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t *data_modid, 
    bcm_module_t *mask_modid, 
    bcm_port_t *data_port, 
    bcm_port_t *mask_port);

/* 
 * Get match criteria for bcmFieldQualifyDstTrunk
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstTrunk_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t *data, 
    bcm_trunk_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerL4SrcPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerL4SrcPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t *data, 
    bcm_l4_port_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerL4DstPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerL4DstPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t *data, 
    bcm_l4_port_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyL4SrcPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L4SrcPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t *data, 
    bcm_l4_port_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyL4DstPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L4DstPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t *data, 
    bcm_l4_port_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyOuterVlan
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_OuterVlan_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Get match criteria for bcmFieldQualifyOuterVlanId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_OuterVlanId_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Get match criteria for bcmFieldQualifyOuterVlanPri
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_OuterVlanPri_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Get match criteria for bcmFieldQualifyOuterVlanCfi_get
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_OuterVlanCfi_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerVlan
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerVlan_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Get match criteria for bcmFieldQualifyInnerVlanId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerVlanId_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Get match criteria for bcmFieldQualifyInnerVlanPri
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerVlanPri_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Get match criteria for bcmFieldQualifyInnerVlanCfi_get
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerVlanCfi_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyEtherType
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_EtherType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Get match criteria for bcmFieldQualifyEqualL4Port
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_EqualL4Port_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *flag);

/* 
 * Get match criteria for bcmFieldQualifyIpProtocol
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpProtocol_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpInfo
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpInfo_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyPacketRes
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_PacketRes_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIp
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t *data, 
    bcm_ip_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIp
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t *data, 
    bcm_ip_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyTos
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Tos_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDSCP
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DSCP_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpFlags
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpFlags_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyTcpControl
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_TcpControl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyTcpSequenceZero
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_TcpSequenceZero_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *flag);

/* 
 * Get match criteria for bcmFieldQualifyTcpHeaderSize
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_TcpHeaderSize_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyTtl
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Ttl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyRangeCheck
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_RangeCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    int max_count, 
    bcm_field_range_t *range, 
    int *invert, 
    int *count);

/* 
 * Get match criteria for bcmFieldQualifySrcIp6
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIp6
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIp6High
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6High_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIpEqualDstIp
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIpEqualDstIp_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *flag);

/* 
 * Get match criteria for bcmFieldQualifyDstIp6High
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6High_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIp6Low
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6Low_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIp6Low
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6Low_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyIp6NextHeader
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Ip6NextHeader_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIp6TrafficClass
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Ip6TrafficClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerIp6FlowLabel
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIp6FlowLabel_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIp6FlowLabel
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Ip6FlowLabel_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIp6HopLimit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Ip6HopLimit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcMac
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcMac_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t *data, 
    bcm_mac_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstMac
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstMac_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t *data, 
    bcm_mac_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerIpType
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIpType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpType_t *type);

/* 
 * Get match criteria for bcmFieldQualifyForwardingType
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardingType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_ForwardingType_t *type);

/* 
 * Get match criteria for bcmFieldQualifyAppType
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_AppType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_AppType_t *type);

/* 
 * Get match criteria for bcmFieldQualifyIpType
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpType_t *type);

/* 
 * Get match criteria for bcmFieldQualifyL2Format
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2Format_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_L2Format_t *type);

/* 
 * Get match criteria for bcmFieldQualifyTranslatedVlanFormat
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_TranslatedVlanFormat_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyVlanFormat
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_VlanFormat_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyMHOpcode
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_MHOpcode_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstHiGig
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstHiGig_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGig
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGig_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigProxy
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigProxy_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInterfaceClassPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InterfaceClassPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInterfaceClassL2
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InterfaceClassL2_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInterfaceClassL3
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InterfaceClassL3_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcClassL2
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcClassL2_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcClassL3
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcClassL3_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcClassField
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcClassField_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstClassL2
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstClassL2_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstClassL3
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstClassL3_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstClassField
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstClassField_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpProtocolCommon
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpProtocolCommon_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpProtocolCommon_t *protocol);

/* 
 * Get match criteria for bcmFieldQualifyInnerIpProtocolCommon
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIpProtocolCommon_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpProtocolCommon_t *protocol);

/* 
 * Get match criteria for bcmFieldQualifySnap
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Snap_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_snap_header_t *data, 
    bcm_field_snap_header_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyLlc
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Llc_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_llc_header_t *data, 
    bcm_field_llc_header_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerTpid
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerTpid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *tpid);

/* 
 * Get match criteria for bcmFieldQualifyOuterTpid
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_OuterTpid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *tpid);

/* 
 * Get match criteria for bcmFieldQualifyL3Routable
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L3Routable_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpFrag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpFrag_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpFrag_t *frag_info);

/* 
 * Get match criteria for bcmFieldQualifyVrf
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Vrf_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL3Ingress
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L3Ingress_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyExtensionHeaderType
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ExtensionHeaderType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyExtensionHeaderSubCode
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ExtensionHeaderSubCode_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyExtensionHeader2Type
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ExtensionHeader2Type_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL4Ports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L4Ports_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyMirrorCopy
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_MirrorCopy_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyTunnelTerminated
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_TunnelTerminated_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyMplsTerminated
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_MplsTerminated_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerSrcIp
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerSrcIp_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t *data, 
    bcm_ip_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerDstIp
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerDstIp_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t *data, 
    bcm_ip_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerSrcIp6
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerSrcIp6_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerDstIp6
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerDstIp6_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerSrcIp6High
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerSrcIp6High_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerDstIp6High
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerDstIp6High_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerTtl
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerTtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerIp6HopLimit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIp6HopLimit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerTos
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerTos_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerDSCP
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerDSCP_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerIpProtocol
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIpProtocol_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerIp6NextHeader
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIp6NextHeader_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerIpFrag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIpFrag_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpFrag_t *frag_info);

/* 
 * Get match criteria for bcmFieldQualifyDosAttack
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DosAttack_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpmcStarGroupHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpmcStarGroupHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyMyStationHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_MyStationHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2PayloadFirstEightBytes
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2PayloadFirstEightBytes_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data1, 
    uint32 *data2, 
    uint32 *mask1, 
    uint32 *mask2);

/* 
 * Get match criteria for bcmFieldQualifyL3DestRouteHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L3DestRouteHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL3DestHostHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L3DestHostHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL3SrcHostHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L3SrcHostHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2CacheHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2CacheHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2StationMove
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2StationMove_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2DestHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2DestHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2SrcStatic
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2SrcStatic_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2SrcHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2SrcHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIngressStpState
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IngressStpState_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyForwardingVlanValid
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardingVlanValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcVirtualPortValid
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcVirtualPortValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstL3EgressNextHops
 *                 qualifier from the field entry.
 */
extern int bcm_field_qualify_DstL3EgressNextHops_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyVlanTranslationHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_VlanTranslationHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpAuth
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpAuth_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyBigIcmpCheck
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_BigIcmpCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *flag, 
    uint32 *size);

/* 
 * Get match criteria for bcmFieldQualifyIcmpTypeCode
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IcmpTypeCode_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIgmpTypeMaxRespTime
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IgmpTypeMaxRespTime_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Get Fibre Channel outer header type field qualification from a field
 * entry.
 */
extern int bcm_field_qualify_FibreChanOuter_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_FibreChan_t *fibre_chan_type);

/* 
 * Get Fibre Channel inner header type field qualification from a field
 * entry.
 */
extern int bcm_field_qualify_FibreChanInner_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_FibreChan_t *fibre_chan_type);

/* 
 * Get match criteria for bcmFieldQualifyVnTag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_VnTag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifySubportPktTag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SubportPktTag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Get match criteria for bcmFieldQualifyCnTag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_CnTag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyFabricQueueTag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_FabricQueueTag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* bcm_field_qualify_FlowId */
extern int bcm_field_qualify_FlowId(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* bcm_field_qualify_InVPort */
extern int bcm_field_qualify_InVPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_OutVPort */
extern int bcm_field_qualify_OutVPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InVPort32 */
extern int bcm_field_qualify_InVPort32(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_OutVPort32 */
extern int bcm_field_qualify_OutVPort32(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyFlowId
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_FlowId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInVPort
 *                qualifier from the field entry (8-bits).
 */
extern int bcm_field_qualify_InVPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyOutVPort
 *                qualifier from the field entry (8-bits).
 */
extern int bcm_field_qualify_OutVPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInVPort
 *                qualifier from the field entry (32-bits).
 */
extern int bcm_field_qualify_InVPort32_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyOutVPort
 *                qualifier from the field entry (32-bits).
 */
extern int bcm_field_qualify_OutVPort32_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* bcm_field_qualify_LlidValue */
extern int bcm_field_qualify_LlidValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get LLID value for bcmFieldQualifyLlidValue
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_LlidValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for RecoverableDrop
 *                qualifier.
 */
extern int bcm_field_qualify_RecoverableDrop(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for RecoverableDrop
 *                qualifier.
 */
extern int bcm_field_qualify_RecoverableDrop_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for RepCopy
 *                qualifier.
 */
extern int bcm_field_qualify_RepCopy(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for RepCopy
 *                qualifier.
 */
extern int bcm_field_qualify_RepCopy_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for IpTunnelHit
 *                qualifier.
 */
extern int bcm_field_qualify_IpTunnelHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for IpTunnelHit
 *                qualifier.
 */
extern int bcm_field_qualify_IpTunnelHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsLabel1Hit
 *                qualifier.
 */
extern int bcm_field_qualify_MplsLabel1Hit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsLabel1Hit
 *                qualifier.
 */
extern int bcm_field_qualify_MplsLabel1Hit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for TrillEgressRbridgeHit
 *                qualifier.
 */
extern int bcm_field_qualify_TrillEgressRbridgeHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for TrillEgressRbridgeHit
 *                qualifier.
 */
extern int bcm_field_qualify_TrillEgressRbridgeHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for L2GreSrcIpHit
 *                qualifier.
 */
extern int bcm_field_qualify_L2GreSrcIpHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for L2GreSrcIpHit
 *                qualifier.
 */
extern int bcm_field_qualify_L2GreSrcIpHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MimSrcGportHit
 *                qualifier.
 */
extern int bcm_field_qualify_MimSrcGportHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MimSrcGportHit
 *                qualifier.
 */
extern int bcm_field_qualify_MimSrcGportHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsLabel2Hit
 *                qualifier.
 */
extern int bcm_field_qualify_MplsLabel2Hit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsLabel2Hit
 *                qualifier.
 */
extern int bcm_field_qualify_MplsLabel2Hit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for TrillIngressRbridgeHit
 *                qualifier.
 */
extern int bcm_field_qualify_TrillIngressRbridgeHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for TrillIngressRbridgeHit
 *                qualifier.
 */
extern int bcm_field_qualify_TrillIngressRbridgeHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for L2GreVfiHit
 *                qualifier.
 */
extern int bcm_field_qualify_L2GreVfiHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for L2GreVfiHit
 *                qualifier.
 */
extern int bcm_field_qualify_L2GreVfiHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MimVfiHit
 *                qualifier.
 */
extern int bcm_field_qualify_MimVfiHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MimVfiHit
 *                qualifier.
 */
extern int bcm_field_qualify_MimVfiHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for GenericAssociatedChannelLabelValid
 *                qualifier.
 */
extern int bcm_field_qualify_GenericAssociatedChannelLabelValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for GenericAssociatedChannelLabelValid
 *                qualifier.
 */
extern int bcm_field_qualify_GenericAssociatedChannelLabelValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for RouterAlertLabelValid
 *                qualifier.
 */
extern int bcm_field_qualify_RouterAlertLabelValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for RouterAlertLabelValid
 *                qualifier.
 */
extern int bcm_field_qualify_RouterAlertLabelValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for DspIpLocal
 *                qualifier.
 */
extern int bcm_field_qualify_DstIpLocal(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for DspIpLocal
 *                qualifier.
 */
extern int bcm_field_qualify_DstIpLocal_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for IpAddrsNormalized
 *                qualifier.
 */
extern int bcm_field_qualify_IpAddrsNormalized(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for IpAddrsNormalized
 *                qualifier.
 */
extern int bcm_field_qualify_IpAddrsNormalized_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MacAddrsNormalized
 *                qualifier.
 */
extern int bcm_field_qualify_MacAddrsNormalized(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MacAddrsNormalized
 *                qualifier.
 */
extern int bcm_field_qualify_MacAddrsNormalized_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsForwardingLabel
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabel(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for MplsForwardingLabel
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabel_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for MplsForwardingLabelTtl
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelTtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsForwardingLabelTtl
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelTtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsForwardingLabelBos
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelBos(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsForwardingLabelBos
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelBos_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsForwardingLabelExp
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelExp(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsForwardingLabelExp
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelExp_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsForwardingLabelId
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelId(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for MplsForwardingLabelId
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for MplsControlWord
 *                qualifier.
 */
extern int bcm_field_qualify_MplsControlWord(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for MplsControlWord
 *                qualifier.
 */
extern int bcm_field_qualify_MplsControlWord_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for Rtag7AHashUpper
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7AHashUpper(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for Rtag7AHashUpper
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7AHashUpper_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for Rtag7AHashLower
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7AHashLower(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for Rtag7AHashLower
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7AHashLower_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for Rtag7BHashUpper
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7BHashUpper(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for Rtag7BHashUpper
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7BHashUpper_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for Rtag7BHashLower
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7BHashLower(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for Rtag7BHashLower
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7BHashLower_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for MplsForwardingLabelAction
 *                qualifier(8 bits).
 */
extern int bcm_field_qualify_MplsForwardingLabelAction(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsForwardingLabelAction
 *                qualifier(8 bits).
 */
extern int bcm_field_qualify_MplsForwardingLabelAction_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsForwardingLabelAction
 *                qualifier (32 bits).
 */
extern int bcm_field_qualify_MplsForwardingLabelAction32(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for MplsForwardingLabelAction
 *                qualifier (32 bits).
 */
extern int bcm_field_qualify_MplsForwardingLabelAction32_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for MplsControlWordValid
 *                qualifier.
 */
extern int bcm_field_qualify_MplsControlWordValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsControlWordValid
 *                qualifier.
 */
extern int bcm_field_qualify_MplsControlWordValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for EgressClass
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClass(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for EgressClass
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for EgressClassL3Interface
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassL3Interface(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for EgressClassL3Interface
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassL3Interface_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for EgressClassTrill
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassTrill(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for EgressClassTrill
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassTrill_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for EgressClassWlan
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassWlan(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for EgressClassWlan
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassWlan_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for EgressClassL2Gre
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassL2Gre(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for EgressClassL2Gre
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassL2Gre_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* Set match criteria for CpuQueue qualifier. */
extern int bcm_field_qualify_CpuQueue(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for CpuQueue qualifier. */
extern int bcm_field_qualify_CpuQueue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for SrcGport qualifier. */
extern int bcm_field_qualify_SrcGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id);

/* Get match criteria for SrcGport qualifier. */
extern int bcm_field_qualify_SrcGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id);

/* 
 * Set match for the header format indicated.  This qualifier is similar
 * to HeaderFormatSet, but this one allows only one matching header
 * format to be specified.
 */
extern int bcm_field_qualify_HeaderFormat(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_header_format_t header_format);

/* Get matching header format. */
extern int bcm_field_qualify_HeaderFormat_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_header_format_t *header_format);

/* 
 * Set match for the header formats included in the format_header_set. 
 * This qualifier is similar to HeaderFormat, but this qualifier allows
 * the caller to specify more than one header format to match.
 */
extern int bcm_field_qualify_HeaderFormatSet(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_header_format_set_t header_format_set);

/* Get matching header format set. */
extern int bcm_field_qualify_HeaderFormatSet_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_header_format_set_t *header_format_set);

/* Set match criteria for L2Learn qualifier. */
extern int bcm_field_qualify_L2Learn(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for L2Learn qualifier. */
extern int bcm_field_qualify_L2Learn_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for PortOrientation qualifier. */
extern int bcm_field_qualify_PortOrientation(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for PortOrientation qualifier. */
extern int bcm_field_qualify_PortOrientation_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for PortOrientation qualifier. */
extern int bcm_field_qualify_EcnValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for EcnValue qualifier. */
extern int bcm_field_qualify_EcnValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for RxTrapCode qualifier. */
extern int bcm_field_qualify_RxTrapCode(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_rx_trap_t data);

/* Get match criteria for RxTrapCode qualifier. */
extern int bcm_field_qualify_RxTrapCode_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_rx_trap_t *data);

/* Set match criteria for Ptch qualifier. */
extern int bcm_field_qualify_Ptch(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for Ptch qualifier. */
extern int bcm_field_qualify_Ptch_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MplsBos qualifier. */
extern int bcm_field_qualify_MplsBos(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MplsBos qualifier. */
extern int bcm_field_qualify_MplsBos_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for RxTrapData qualifier. */
extern int bcm_field_qualify_RxTrapData(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for RxTrapData qualifier. */
extern int bcm_field_qualify_RxTrapData_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for PolicerIntPrio qualifier. */
extern int bcm_field_qualify_PolicerIntPrio(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for PolicerIntPrio qualifier. */
extern int bcm_field_qualify_PolicerIntPrio_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for PacketTerminatedBytes qualifier. */
extern int bcm_field_qualify_PacketTerminatedBytes(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for PacketTerminatedBytes qualifier. */
extern int bcm_field_qualify_PacketTerminatedBytes_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for BypassFilter qualifier (8-bits). */
extern int bcm_field_qualify_BypassFilter(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for BypassFilter qualifier (8-bits). */
extern int bcm_field_qualify_BypassFilter_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for BypassFilter qualifier (32-bits). */
extern int bcm_field_qualify_BypassFilter32(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for BypassFilter qualifier (32-bits). */
extern int bcm_field_qualify_BypassFilter32_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for ReplicantAny qualifier. */
extern int bcm_field_qualify_ReplicantAny(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for ReplicantAny qualifier. */
extern int bcm_field_qualify_ReplicantAny_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for ReplicantFirst qualifier. */
extern int bcm_field_qualify_ReplicantFirst(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for ReplicantFirst qualifier. */
extern int bcm_field_qualify_ReplicantFirst_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for TrillEgressRbridge qualifier. */
extern int bcm_field_qualify_TrillEgressRbridge(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for TrillEgressRbridge qualifier. */
extern int bcm_field_qualify_TrillEgressRbridge_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for ISid qualifier. */
extern int bcm_field_qualify_ISid(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for ISid qualifier. */
extern int bcm_field_qualify_ISid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for InterfaceClassProcessingPort qualifier. */
extern int bcm_field_qualify_InterfaceClassProcessingPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for InterfaceClassProcessingPort qualifier. */
extern int bcm_field_qualify_InterfaceClassProcessingPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for DstRpfGport qualifier. */
extern int bcm_field_qualify_DstRpfGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t data);

/* Get match criteria for DstRpfGport qualifier. */
extern int bcm_field_qualify_DstRpfGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *data);

/* Set match criteria for TrunkHashResult qualifier. */
extern int bcm_field_qualify_TrunkHashResult(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for TrunkHashResult qualifier. */
extern int bcm_field_qualify_TrunkHashResult_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for Dhcp qualifier. */
extern int bcm_field_qualify_Dhcp(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for Dhcp qualifier. */
extern int bcm_field_qualify_Dhcp_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for SnoopCopy qualifier. */
extern int bcm_field_qualify_SnoopCopy(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for SnoopCopy qualifier. */
extern int bcm_field_qualify_SnoopCopy_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for ForwardCopy qualifier. */
extern int bcm_field_qualify_ForwardCopy(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for ForwardCopy qualifier. */
extern int bcm_field_qualify_ForwardCopy_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for InterfaceClassVPort qualifier. */
extern int bcm_field_qualify_InterfaceClassVPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for InterfaceClassVPort qualifier. */
extern int bcm_field_qualify_InterfaceClassVPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for L4PortRangeCheck qualifier. */
extern int bcm_field_qualify_L4PortRangeCheck(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_range_t range, 
    int invert);

/* Get match criteria for L4PortRangeCheck qualifier. */
extern int bcm_field_qualify_L4PortRangeCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    int max_count, 
    bcm_field_range_t *range, 
    int *invert, 
    int *count);

/* Set match criteria for VPortRangeCheck qualifier. */
extern int bcm_field_qualify_VPortRangeCheck(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_range_t range, 
    int invert);

/* 
 * Get match criteria for VPortRangeCheck
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_VPortRangeCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    int max_count, 
    bcm_field_range_t *range, 
    int *invert, 
    int *count);

/* Set match criteria for PacketLengthRangeCheck qualifier. */
extern int bcm_field_qualify_PacketLengthRangeCheck(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_range_t range, 
    int invert);

/* 
 * Get match criteria for PacketLengthRangeCheck
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_PacketLengthRangeCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    int max_count, 
    bcm_field_range_t *range, 
    int *invert, 
    int *count);

/* Set match criteria for TunnelTerminatedHit qualifier. */
extern int bcm_field_qualify_TunnelTerminatedHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for TunnelTerminatedHit qualifier. */
extern int bcm_field_qualify_TunnelTerminatedHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MplsTerminatedHit qualifier. */
extern int bcm_field_qualify_MplsTerminatedHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MplsTerminatedHit qualifier. */
extern int bcm_field_qualify_MplsTerminatedHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for L3SrcRouteHit qualifier. */
extern int bcm_field_qualify_L3SrcRouteHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for L3SrcRouteHit qualifier. */
extern int bcm_field_qualify_L3SrcRouteHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for IpmcHit qualifier. */
extern int bcm_field_qualify_IpmcHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for IpmcHit qualifier. */
extern int bcm_field_qualify_IpmcHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for VlanTranslationValue qualifier. */
extern int bcm_field_qualify_VlanTranslationValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for VlanTranslationValue qualifier. */
extern int bcm_field_qualify_VlanTranslationValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for TunnelTerminatedValue qualifier. */
extern int bcm_field_qualify_TunnelTerminatedValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for TunnelTerminatedValue qualifier. */
extern int bcm_field_qualify_TunnelTerminatedValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for MplsTerminatedValue qualifier. */
extern int bcm_field_qualify_MplsTerminatedValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for MplsTerminatedValue qualifier. */
extern int bcm_field_qualify_MplsTerminatedValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for IpTunnelValue qualifier. */
extern int bcm_field_qualify_IpTunnelValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for IpTunnelValue qualifier. */
extern int bcm_field_qualify_IpTunnelValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for L2SrcValue qualifier. */
extern int bcm_field_qualify_L2SrcValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for L2SrcValue qualifier. */
extern int bcm_field_qualify_L2SrcValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for L2DestValue qualifier. */
extern int bcm_field_qualify_L2DestValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for L2DestValue qualifier. */
extern int bcm_field_qualify_L2DestValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for L3SrcRouteValue qualifier. */
extern int bcm_field_qualify_L3SrcRouteValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for L3SrcRouteValue qualifier. */
extern int bcm_field_qualify_L3SrcRouteValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for L3DestRouteValue qualifier. */
extern int bcm_field_qualify_L3DestRouteValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for L3DestRouteValue qualifier. */
extern int bcm_field_qualify_L3DestRouteValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for IpmcValue qualifier. */
extern int bcm_field_qualify_IpmcValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for IpmcValue qualifier. */
extern int bcm_field_qualify_IpmcValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for CascadedKeyValue qualifier. */
extern int bcm_field_qualify_CascadedKeyValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for CascadedKeyValue qualifier. */
extern int bcm_field_qualify_CascadedKeyValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for IsEqualValue qualifier. */
extern int bcm_field_qualify_IsEqualValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for IsEqualValue qualifier. */
extern int bcm_field_qualify_IsEqualValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for LearnSrcMac qualifier. */
extern int bcm_field_qualify_LearnSrcMac(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t data, 
    bcm_mac_t mask);

/* Get match criteria for LearnSrcMac qualifier. */
extern int bcm_field_qualify_LearnSrcMac_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t *data, 
    bcm_mac_t *mask);

/* Set match criteria for LearnVlan qualifier. */
extern int bcm_field_qualify_LearnVlan(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* Get match criteria for LearnVlan qualifier. */
extern int bcm_field_qualify_LearnVlan_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* Set match criteria for LearnSrcPort qualifier. */
extern int bcm_field_qualify_LearnSrcPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t data);

/* Get match criteria for LearnSrcPort qualifier. */
extern int bcm_field_qualify_LearnSrcPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *data);

/* Set match criteria for PacketSize qualifier. */
extern int bcm_field_qualify_PacketSize(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for PacketSize qualifier. */
extern int bcm_field_qualify_PacketSize_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for InnerSrcMac qualifier. */
extern int bcm_field_qualify_InnerSrcMac(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t data, 
    bcm_mac_t mask);

/* Get match criteria for InnerSrcMac qualifier. */
extern int bcm_field_qualify_InnerSrcMac_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t *data, 
    bcm_mac_t *mask);

/* Set match criteria for InnerDstMac qualifier. */
extern int bcm_field_qualify_InnerDstMac(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t data, 
    bcm_mac_t mask);

/* Get match criteria for InnerDstMac qualifier. */
extern int bcm_field_qualify_InnerDstMac_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t *data, 
    bcm_mac_t *mask);

/* Set match criteria for InnerEtherType qualifier. */
extern int bcm_field_qualify_InnerEtherType(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* Get match criteria for InnerEtherType qualifier. */
extern int bcm_field_qualify_InnerEtherType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* Set match criteria for MplsLabel1 qualifier. */
extern int bcm_field_qualify_MplsLabel1(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for MplsLabel1 qualifier. */
extern int bcm_field_qualify_MplsLabel1_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for MplsLabel1Ttl qualifier. */
extern int bcm_field_qualify_MplsLabel1Ttl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MplsLabel1Ttl qualifier. */
extern int bcm_field_qualify_MplsLabel1Ttl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MplsLabel1Bos qualifier. */
extern int bcm_field_qualify_MplsLabel1Bos(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MplsLabel1Bos qualifier. */
extern int bcm_field_qualify_MplsLabel1Bos_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MplsLabel1Exp qualifier. */
extern int bcm_field_qualify_MplsLabel1Exp(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MplsLabel1Exp qualifier. */
extern int bcm_field_qualify_MplsLabel1Exp_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MplsLabel1Id qualifier. */
extern int bcm_field_qualify_MplsLabel1Id(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for MplsLabel1Id qualifier. */
extern int bcm_field_qualify_MplsLabel1Id_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for MplsLabel2 qualifier. */
extern int bcm_field_qualify_MplsLabel2(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for MplsLabel2 qualifier. */
extern int bcm_field_qualify_MplsLabel2_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for MplsLabel2Ttl qualifier. */
extern int bcm_field_qualify_MplsLabel2Ttl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MplsLabel2Ttl qualifier. */
extern int bcm_field_qualify_MplsLabel2Ttl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MplsLabel2Bos qualifier. */
extern int bcm_field_qualify_MplsLabel2Bos(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MplsLabel2Bos qualifier. */
extern int bcm_field_qualify_MplsLabel2Bos_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MplsLabel2Exp qualifier. */
extern int bcm_field_qualify_MplsLabel2Exp(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MplsLabel2Exp qualifier. */
extern int bcm_field_qualify_MplsLabel2Exp_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MplsLabel2Id qualifier. */
extern int bcm_field_qualify_MplsLabel2Id(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for MplsLabel2Id qualifier. */
extern int bcm_field_qualify_MplsLabel2Id_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for MplsLabel3 qualifier. */
extern int bcm_field_qualify_MplsLabel3(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for MplsLabel3 qualifier. */
extern int bcm_field_qualify_MplsLabel3_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for MplsLabel3Ttl qualifier. */
extern int bcm_field_qualify_MplsLabel3Ttl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MplsLabel3Ttl qualifier. */
extern int bcm_field_qualify_MplsLabel3Ttl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MplsLabel3Bos qualifier. */
extern int bcm_field_qualify_MplsLabel3Bos(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MplsLabel3Bos qualifier. */
extern int bcm_field_qualify_MplsLabel3Bos_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MplsLabel3Exp qualifier. */
extern int bcm_field_qualify_MplsLabel3Exp(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MplsLabel3Exp qualifier. */
extern int bcm_field_qualify_MplsLabel3Exp_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MplsLabel3Id qualifier. */
extern int bcm_field_qualify_MplsLabel3Id(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for MplsLabel3Id qualifier. */
extern int bcm_field_qualify_MplsLabel3Id_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Add an action to a field entry. */
extern int bcm_field_action_add(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    uint32 param0, 
    uint32 param1);

/* Delete an action from a field entry. */
extern int bcm_field_action_delete(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    uint32 param0, 
    uint32 param1);

/* Add an action to a field entry. */
extern int bcm_field_action_mac_add(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_mac_t mac);

/* Add an action to a field entry. */
extern int bcm_field_action_ports_add(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_pbmp_t pbmp);

/* 
 * Retrieve the parameters for an action previously added to a field
 * entry.
 */
extern int bcm_field_action_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    uint32 *param0, 
    uint32 *param1);

/* 
 * Retrieve the parameters for an action previously added to a field
 * entry.
 */
extern int bcm_field_action_mac_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_mac_t *mac);

/* 
 * Retrieve the parameters for an action previously added to a field
 * entry.
 */
extern int bcm_field_action_ports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_pbmp_t *pbmp);

/* 
 * Remove an action from a field entry.  Same as bcm_field_action_delete
 * for actions without parameters.
 */
extern int bcm_field_action_remove(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action);

/* Remove all actions from a field entry. */
extern int bcm_field_action_remove_all(
    int unit, 
    bcm_field_entry_t entry);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Clear a bcm_field_extraction_field_t to reasonable default values */
extern void bcm_field_extraction_field_t_init(
    bcm_field_extraction_field_t *action);

/* Clear a bcm_field_extraction_action_t to reasonable default values */
extern void bcm_field_extraction_action_t_init(
    bcm_field_extraction_action_t *action);

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Add an extraction action to a specified direct extraction entry.  Such
 * actions can be removed using bcm_field_action_remove.
 */
extern int bcm_field_direct_extraction_action_add(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_extraction_action_t action, 
    int count, 
    bcm_field_extraction_field_t *extractions);

/* Get an extraction action from a direct extraction entry */
extern int bcm_field_direct_extraction_action_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_extraction_action_t *action, 
    int max_count, 
    bcm_field_extraction_field_t *extractions, 
    int *actual_count);

/* Create stat collection entity. */
extern int bcm_field_stat_create(
    int unit, 
    bcm_field_group_t group, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    int *stat_id);

/* Create stat collection entity with specified ID. */
extern int bcm_field_stat_create_id(
    int unit, 
    bcm_field_group_t group, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    int stat_id);

/* Provide stat counter ids associated with given field group */
extern int bcm_field_stat_id_get(
    int unit, 
    bcm_field_group_t group, 
    uint32 stat_id, 
    uint32 *stat_counter_id);

/* Destroy stat collection entity. */
extern int bcm_field_stat_destroy(
    int unit, 
    int stat_id);

/* 
 * Get number of different statistics associated with stat collection
 * entity.
 */
extern int bcm_field_stat_size(
    int unit, 
    int stat_id, 
    int *stat_size);

/* Get enabled statistics for specific collection entity. */
extern int bcm_field_stat_config_get(
    int unit, 
    int stat_id, 
    int nstat, 
    bcm_field_stat_t *stat_arr);

/* Set 64 bit counter value for specific statistic type. */
extern int bcm_field_stat_set(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint64 value);

/* Set lower 32 bit counter value for specific statistic type. */
extern int bcm_field_stat_set32(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint32 value);

/* Set 64 bit counter value for all statistics types. */
extern int bcm_field_stat_all_set(
    int unit, 
    int stat_id, 
    uint64 value);

/* Set lower 32 bit counter value for all statistic types. */
extern int bcm_field_stat_all_set32(
    int unit, 
    int stat_id, 
    uint32 value);

/* Get 64 bit counter value for specific statistic type. */
extern int bcm_field_stat_get(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint64 *value);

/* Get 64 bit counter value for specific statistic type. */
extern int bcm_field_stat_sync_get(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint64 *value);

/* Get lower 32 bit counter value for specific statistic type. */
extern int bcm_field_stat_get32(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint32 *value);

/* Get lower 32 bit counter value for specific statistic type. */
extern int bcm_field_stat_sync_get32(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint32 *value);

/* Get 64 bit counter values for multiple statistic types. */
extern int bcm_field_stat_multi_get(
    int unit, 
    int stat_id, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    uint64 *value_arr);

/* Get lower 32 bit counter values for multiple statistic types. */
extern int bcm_field_stat_multi_get32(
    int unit, 
    int stat_id, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    uint32 *value_arr);

/* Attach statistics entity to Field Processor entry. */
extern int bcm_field_entry_stat_attach(
    int unit, 
    bcm_field_entry_t entry, 
    int stat_id);

/* Detach statistics entity from Field Processor entry. */
extern int bcm_field_entry_stat_detach(
    int unit, 
    bcm_field_entry_t entry, 
    int stat_id);

/* Get statistics entity attached to Field Processor entry. */
extern int bcm_field_entry_stat_get(
    int unit, 
    bcm_field_entry_t entry, 
    int *stat_id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize Field Qualifier LLC header structure. */
extern void bcm_field_llc_header_t_init(
    bcm_field_llc_header_t *llc_header);

/* Initialize Field Qualifier SNAP header structure. */
extern void bcm_field_snap_header_t_init(
    bcm_field_snap_header_t *snap_header);

/* Initialize the Field Qualifier Set structure. */
extern void bcm_field_qset_t_init(
    bcm_field_qset_t *qset);

/* Initialize the Field Action Set structure. */
extern void bcm_field_aset_t_init(
    bcm_field_aset_t *aset);

/* Initialize the Field Presel Set structure. */
extern void bcm_field_presel_set_t_init(
    bcm_field_presel_set_t *presel_set);

/* Initialize the Field Group Status structure. */
extern void bcm_field_group_status_t_init(
    bcm_field_group_status_t *fgroup);

#ifndef BCM_HIDE_DISPATCHABLE

#if defined(BROADCOM_DEBUG)
/* Show current software state of the field module. */
extern int bcm_field_show(
    int unit, 
    const char *pfx);
#endif

#if defined(BROADCOM_DEBUG)
/* Show contents of a field entry. */
extern int bcm_field_entry_dump(
    int unit, 
    bcm_field_entry_t entry);
#endif

#if defined(BROADCOM_DEBUG)
/* Show contents of a field group. */
extern int bcm_field_group_dump(
    int unit, 
    bcm_field_group_t group);
#endif

#endif /* BCM_HIDE_DISPATCHABLE */

/* SDK 5.2.0 backward compatibility. */
#define bcmFieldQualifyOutVlan  bcmFieldQualifyOuterVlan 
#define bcmFieldQualifyInVlan   bcmFieldQualifyInnerVlan 

/* SDK 5.2.0 backward compatibility. */
#define bcm_field_qualify_OutVlan   bcm_field_qualify_OuterVlan 
#define bcm_field_qualify_InVlan    bcm_field_qualify_InnerVlan 

#ifndef BCM_HIDE_DISPATCHABLE

/* Attach counters entries to a field group */
extern int bcm_field_stat_attach(
    int unit, 
    bcm_field_group_t group, 
    uint32 stat_counter_id, 
    uint32 *stat_id);

/* Detach counters entries to a field group. */
extern int bcm_field_stat_detach(
    int unit, 
    uint32 stat_id);

/* Get counter statistic values for a field entity */
extern int bcm_field_stat_counter_get(
    int unit, 
    uint32 stat_id, 
    bcm_field_stat_t stat, 
    uint32 num_entries, 
    uint32 *counter_indexes, 
    bcm_stat_value_t *counter_values);

/* Get counter statistic values for a field entity */
extern int bcm_field_stat_counter_sync_get(
    int unit, 
    uint32 stat_id, 
    bcm_field_stat_t stat, 
    uint32 num_entries, 
    uint32 *counter_indexes, 
    bcm_stat_value_t *counter_values);

/* Set counter statistic values for a field entity */
extern int bcm_field_stat_counter_set(
    int unit, 
    uint32 stat_id, 
    bcm_field_stat_t stat, 
    uint32 num_entries, 
    uint32 *counter_indexes, 
    bcm_stat_value_t *counter_values);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Opaque handle to a field presel. */
typedef int bcm_field_presel_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a preselection specification. */
extern int bcm_field_presel_create(
    int unit, 
    bcm_field_presel_t *presel_id);

/* Create a preselection specification using a specific ID. */
extern int bcm_field_presel_create_id(
    int unit, 
    bcm_field_presel_t presel_id);

/* Destroy a preselection specification. */
extern int bcm_field_presel_destroy(
    int unit, 
    bcm_field_presel_t presel_id);

/* Associate a set of preselectors with a group. */
extern int bcm_field_group_presel_set(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_presel_set_t *presel);

/* Get the set of preselectors associated with a group. */
extern int bcm_field_group_presel_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_presel_set_t *presel);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Field entry operation structure. */
typedef struct bcm_field_entry_oper_s {
    uint32 flags;               /* Entry operation BCM_FIELD_ENTRY_OPER_XXX. */
    bcm_field_entry_t entry_id; /* Entry identifier. */
} bcm_field_entry_oper_t;

/* Parameter for bcm_field_entry_oper_t. */
#define BCM_FIELD_ENTRY_OPER_BACKUP     (1 << 0)   /* Backup up an entry
                                                      configuration. */
#define BCM_FIELD_ENTRY_OPER_RESTORE    (1 << 1)   /* Restore backed up entry
                                                      configuration. */
#define BCM_FIELD_ENTRY_OPER_CLEANUP    (1 << 2)   /* Free resources used by
                                                      back entry. */
#define BCM_FIELD_ENTRY_OPER_MASK       (0x7)      /* Mask of valid entry
                                                      operations supported. */

/* Initialize field entry operation structure. */
extern void bcm_field_entry_oper_t_init(
    bcm_field_entry_oper_t *entry_oper);

#ifndef BCM_HIDE_DISPATCHABLE

/* Perform operation on a field processor entry. */
extern int bcm_field_entry_operation(
    int unit, 
    bcm_field_entry_oper_t *entry_oper);

/* Perform operation on a field processor entry. */
extern int bcm_field_qualify_data_get(
    int unit, 
    bcm_field_entry_t eid, 
    int qual_id, 
    uint16 length_max, 
    uint8 *data, 
    uint8 *mask, 
    uint16 *length);

extern int bcm_field_range_multi_create(
    int unit, 
    bcm_field_range_t *range_id, 
    uint32 create_flags, 
    int count, 
    uint32 *range_flags, 
    uint32 *min_value, 
    uint32 *max_value);

extern int bcm_field_range_multi_get(
    int unit, 
    bcm_field_range_t range_id, 
    int max_count, 
    uint32 *range_flags, 
    uint32 *minimum_value, 
    uint32 *maxamum_value, 
    int *actual_count);

/* 
 * Set match criteria for bcmFieldQualifyMplsOuterLabelPop
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_MplsOuterLabelPop(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyMplsOuterLabelPop
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_MplsOuterLabelPop_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for
 *                bcmFieldQualifyMplsStationHitTunnelUnterminated
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_MplsStationHitTunnelUnterminated(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for
 *                bcmFieldQualifyMplsStationHitTunnelUnterminated
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_MplsStationHitTunnelUnterminated_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyIngressClassField
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IngressClassField(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyIngressClassField
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IngressClassField_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for bcmFieldQualifyIngressInterfaceClassPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IngressInterfaceClassPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyIngressInterfaceClassPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IngressInterfaceClassPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for bcmFieldQualifyExternalValue0
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalValue0(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* 
 * Get match criteria for bcmFieldQualifyExternalValue0
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalValue0_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* 
 * Set match criteria for bcmFieldQualifyExternalValue1
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalValue1(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* 
 * Get match criteria for bcmFieldQualifyExternalValue1
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalValue1_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* 
 * Set match criteria for bcmFieldQualifyExternalValue2
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalValue2(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* 
 * Get match criteria for bcmFieldQualifyExternalValue2
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalValue2_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* 
 * Set match criteria for bcmFieldQualifyExternalValue3
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalValue3(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* 
 * Get match criteria for bcmFieldQualifyExternalValue3
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalValue3_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* 
 * Set match criteria for bcmFieldQualifyExternalHit0
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalHit0(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyExternalHit0
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalHit0_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyExternalHit1
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalHit1(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyExternalHit1
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalHit1_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyExternalHit2
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalHit2(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyExternalHit2
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalHit2_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyExternalHit3
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalHit3(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyExternalHit3
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ExternalHit3_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyVpnUnknownDstMacDstPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_VpnUnknownDstMacDstPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id);

/* 
 * Get match criteria for bcmFieldQualifyVpnUnknownDstMacDstPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_VpnUnknownDstMacDstPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id);

/* 
 *  Set match criteria for bcmFieldQualifyVxlanNetworkId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_VxlanNetworkId(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyVxlanNetworkId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_VxlanNetworkId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyVxlanFlags
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_VxlanFlags(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyVxlanFlags
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_VxlanFlags_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyNatNeeded
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatNeeded(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyNatNeeded
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatNeeded_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyNatDstRealmId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatDstRealmId(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyNatDstRealmId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatDstRealmId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyNatSrcRealmId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatSrcRealmId(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyNatSrcRealmId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatSrcRealmId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyIcmpError
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_IcmpError(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyIcmpError
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_IcmpError_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyTunnelId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_TunnelId(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyTunnelId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_TunnelId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyArpSenderIp4
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_ArpSenderIp4(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyArpSenderIp4
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_ArpSenderIp4_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyArpTargetIp4
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_ArpTargetIp4(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyArpTargetIp4
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_ArpTargetIp4_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyArpOpcode
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_ArpOpcode(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_ArpOpcode_t data);

/* 
 *  Get match criteria for bcmFieldQualifyArpOpcode
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_ArpOpcode_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_ArpOpcode_t *data);

/* 
 *  Set match criteria for bcmFieldQualifyTranslatedOuterVlan
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_TranslatedOuterVlan(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 * Get match criteria for bcmFieldQualifyTranslatedOuterVlan
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_TranslatedOuterVlan_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Set match criteria for bcmFieldQualifyTranslatedOuterVlanId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_TranslatedOuterVlanId(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 *  Get match criteria for bcmFieldQualifyTranslatedOuterVlanId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_TranslatedOuterVlanId_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Set match criteria for bcmFieldQualifyTranslatedOuterVlanPri
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_TranslatedOuterVlanPri(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyTranslatedOuterVlanPri
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_TranslatedOuterVlanPri_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyTranslatedOuterVlanCfi
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_TranslatedOuterVlanCfi(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyTranslatedOuterVlanCfi_get
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_TranslatedOuterVlanCfi_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyTranslatedInnerVlan
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_TranslatedInnerVlan(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 * Get match criteria for bcmFieldQualifyTranslatedInnerVlan
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_TranslatedInnerVlan_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Set match criteria for bcmFieldQualifyTranslatedInnerVlanId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_TranslatedInnerVlanId(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 *  Get match criteria for bcmFieldQualifyTranslatedInnerVlanId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_TranslatedInnerVlanId_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Set match criteria for bcmFieldQualifyTranslatedInnerVlanPri
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_TranslatedInnerVlanPri(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyTranslatedInnerVlanPri
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_TranslatedInnerVlanPri_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyTranslatedInnerVlanCfi
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_TranslatedInnerVlanCfi(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyTranslatedInnerVlanCfi_get
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_TranslatedInnerVlanCfi_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanRCtl
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanRCtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanRCtl
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanRCtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanFCtl
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanFCtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanFCtl
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanFCtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanCSCtl
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanCSCtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanCSCtl
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanCSCtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanDFCtl
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanDFCtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanDFCtl
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDFCtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanType
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanType(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanType
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanSrcId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcId(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanSrcId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanDstId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanDstId(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanDstId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDstId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTVersion
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVersion(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTVersion
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVersion_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTPri
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTPri(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTPri
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTPri_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTFabricId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTFabricId(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTFabricId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTFabricId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTHopCount
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTHopCount(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTHopCount
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTHopCount_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTVsanId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVsanId(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTVsanId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVsanId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTVsanPri
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVsanPri(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTVsanPri
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVsanPri_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFcoeSOF
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FcoeSOF(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFcoeSOF
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeSOF_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanZoneCheck
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanZoneCheck(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanZoneCheck
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanZoneCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanSrcFpmaCheck
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcFpmaCheck(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanSrcFpmaCheck
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcFpmaCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanSrcBindCheck
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcBindCheck(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanSrcBindCheck
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcBindCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFcoeVersionIsZero
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FcoeVersionIsZero(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFcoeVersionIsZero
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeVersionIsZero_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTValid
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTValid
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyForwardingHeaderOffset
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_ForwardingHeaderOffset(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_data_offset_base_t base_header, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyForwardingHeaderOffset
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardingHeaderOffset_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_data_offset_base_t *base_header, 
    uint32 *data, 
    uint32 *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef enum bcm_field_orientation_e {
    bcmFieldOrientationNetwork = 0, /* Network orientation (hub) */
    bcmFieldOrientationAccess = 1,  /* Access orientation (spoke) */
    bcmFieldOrientationCount = 2    /* Always Last. Not a usable value. */
} bcm_field_orientation_t;

typedef enum bcm_field_start_packet_strip_e {
    bcmFieldStartToConfigurableStrip = 0, /* Configurable size of number of bytes
                                           to strip, according to param1. */
    bcmFieldStartToL2Strip = 1,         /* Remove the start-of-packet up to the
                                           L2 header. */
    bcmFieldStartToFwdStrip = 2,        /* Remove the start-of-packet up to the
                                           Forwarding header. */
    bcmFieldStartToFwdNextStrip = 3,    /* Remove the start-of-packet up to the
                                           header following the Forwarding
                                           header. */
    bcmFieldStartStripCount = 4         /* Always Last. Not a usable value. */
} bcm_field_start_packet_strip_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Set qualification on a particular stage.  This feature is normally
 * used for preselectors.
 */
extern int bcm_field_qualify_Stage(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_stage_t data);

/* Get stage qualifier information. */
extern int bcm_field_qualify_Stage_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_stage_t *data);

/* bcm_field_qualify_L3SrcBind */
extern int bcm_field_qualify_L3SrcBind(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyL3SrcBind
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L3SrcBind_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* bcm_field_qualify_ECid */
extern int bcm_field_qualify_ECid(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyECid
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ECid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* bcm_field_qualify_IngressECid */
extern int bcm_field_qualify_IngressECid(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyIngressECid
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IngressECid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* bcm_field_qualify_ETag */
extern int bcm_field_qualify_ETag(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* 
 * Get match criteria for bcmFieldQualifyETag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ETag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef enum bcm_field_system_header_e {
    bcmFieldSystemHeaderPphEei = 0, /* EEI extension of the PPH (Packet
                                       Processing Header) */
    bcmFieldSystemHeaderCount = 1   /* Always Last. Not a usable value. */
} bcm_field_system_header_t;

/* Multi-range flags */
#define BCM_FIELD_RANGE_MULTI_WITH_ID   0x00000001 /* Range Id is provided */
#define BCM_FIELD_RANGE_MULTI_REPLACE   0x00000002 /* Replace exsiting range */

/* VXLAN Flags from IETF Draft(for bcm_field_qualify_VxlanFlags). */
#define BCM_FIELD_VXLAN_VNI_VALID   0x8        /* VXLAN Network ID (VNI)- Valid */

/* FCOE zone check action types. */
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_NOP 0          
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_DISABLE 1          
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_ENABLE 2          

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Set match criteria for bcmFieldQualifyOamMdl
 *                 qualifier from the field entry
 */
extern int bcm_field_qualify_OamMdl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyOamMdl
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_OamMdl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for IntCongestionNotification qualifier. */
extern int bcm_field_qualify_IntCongestionNotification(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for IntCongestionNotification qualifier. */
extern int bcm_field_qualify_IntCongestionNotification_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* bcm_field_qualify_SrcNivGport */
extern int bcm_field_qualify_SrcNivGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t niv_port_id);

/* bcm_field_qualify_DstNivGport */
extern int bcm_field_qualify_DstNivGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t niv_port_id);

/* 
 * Get match criteria for bcmFieldQualifySrcNivGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcNivGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *niv_port_id);

/* 
 * Get match criteria for bcmFieldQualifyDstNivGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstNivGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *niv_port_id);

/* Set match criteria for DstGport qualifier. */
extern int bcm_field_qualify_DstGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id);

/* Get match criteria for DstGport qualifier. */
extern int bcm_field_qualify_DstGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id);

/* Set match criteria for MirrorEgressDisabled qualifier. */
extern int bcm_field_qualify_MirrorEgressDisabled(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MirrorEgressDisabled qualifier. */
extern int bcm_field_qualify_MirrorEgressDisabled_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for BypassSrcMacFilter qualifier. */
extern int bcm_field_qualify_BypassSrcMacFilter(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for BypassSrcMacFilter qualifier. */
extern int bcm_field_qualify_BypassSrcMacFilter_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for RxTrapCodeForSnoop qualifier. */
extern int bcm_field_qualify_RxTrapCodeForSnoop(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for RxTrapCodeForSnoop qualifier. */
extern int bcm_field_qualify_RxTrapCodeForSnoop_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for IpmcStarGroupValue qualifier. */
extern int bcm_field_qualify_IpmcStarGroupValue(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for IpmcStarGroupValue qualifier. */
extern int bcm_field_qualify_IpmcStarGroupValue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for NativeVSwitch qualifier. */
extern int bcm_field_qualify_NativeVSwitch(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* Get match criteria for NativeVSwitch qualifier. */
extern int bcm_field_qualify_NativeVSwitch_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* Set match criteria for NativeVSwitchValid qualifier. */
extern int bcm_field_qualify_NativeVSwitchValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for NativeVSwitchValid qualifier. */
extern int bcm_field_qualify_NativeVSwitchValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for TrillIVersion qualifier. */
extern int bcm_field_qualify_TrillIVersion(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for TrillIVersion qualifier. */
extern int bcm_field_qualify_TrillIVersion_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for TrillIngressRbridge qualifier. */
extern int bcm_field_qualify_TrillIngressRbridge(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* Get match criteria for TrillIngressRbridge qualifier. */
extern int bcm_field_qualify_TrillIngressRbridge_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* Set match criteria for TrillMultiDestination qualifier. */
extern int bcm_field_qualify_TrillMultiDestination(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for TrillMultiDestination qualifier. */
extern int bcm_field_qualify_TrillMultiDestination_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for TrillOpLength qualifier. */
extern int bcm_field_qualify_TrillOpLength(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for TrillOpLength qualifier. */
extern int bcm_field_qualify_TrillOpLength_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for TrillHopCount qualifier. */
extern int bcm_field_qualify_TrillHopCount(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for TrillHopCount qualifier. */
extern int bcm_field_qualify_TrillHopCount_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for TrillPayload qualifier. */
extern int bcm_field_qualify_TrillPayload(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for TrillPayload qualifier. */
extern int bcm_field_qualify_TrillPayload_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for MplsForwardingLabelPayload qualifier. */
extern int bcm_field_qualify_MplsForwardingLabelPayload(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for MplsForwardingLabelPayload qualifier. */
extern int bcm_field_qualify_MplsForwardingLabelPayload_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for IncomingIpIfClass qualifier. */
extern int bcm_field_qualify_IncomingIpIfClass(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for IncomingIpIfClass qualifier. */
extern int bcm_field_qualify_IncomingIpIfClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for L2GreProtocolType qualifier. */
extern int bcm_field_qualify_L2GreProtocolType(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* Get match criteria for L2GreProtocolType qualifier. */
extern int bcm_field_qualify_L2GreProtocolType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* Set match criteria for L2GreVsid qualifier. */
extern int bcm_field_qualify_L2GreVsid(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for L2GreVsid qualifier. */
extern int bcm_field_qualify_L2GreVsid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for L2GreFlowId qualifier. */
extern int bcm_field_qualify_L2GreFlowId(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for L2GreFlowId qualifier. */
extern int bcm_field_qualify_L2GreFlowId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MimVlanPri qualifier. */
extern int bcm_field_qualify_MimVlanPri(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MimVlanPri qualifier. */
extern int bcm_field_qualify_MimVlanPri_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for MimVlanCfi qualifier. */
extern int bcm_field_qualify_MimVlanCfi(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for MimVlanCfi qualifier. */
extern int bcm_field_qualify_MimVlanCfi_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for Fhei qualifier. */
extern int bcm_field_qualify_Fhei(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* Get match criteria for Fhei qualifier. */
extern int bcm_field_qualify_Fhei_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

/* Set match criteria for FheiSize qualifier. */
extern int bcm_field_qualify_FheiSize(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for FheiSize qualifier. */
extern int bcm_field_qualify_FheiSize_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for OuterVlanActionRange qualifier. */
extern int bcm_field_qualify_OuterVlanActionRange(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* Get match criteria for OuterVlanActionRange qualifier. */
extern int bcm_field_qualify_OuterVlanActionRange_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* Set match criteria for InnerVlanActionRange qualifier. */
extern int bcm_field_qualify_InnerVlanActionRange(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* Get match criteria for InnerVlanActionRange qualifier. */
extern int bcm_field_qualify_InnerVlanActionRange_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* Set match criteria for ClassId qualifier. */
extern int bcm_field_qualify_ClassId(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for ClassId qualifier. */
extern int bcm_field_qualify_ClassId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_FIELD_H__ */
