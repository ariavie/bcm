/*
 * $Id: 76b7b594d1043a753efc18c5b23a6b46b022704c $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_IPMC_H__
#define __BCM_IPMC_H__

#if defined(INCLUDE_L3)

#include <bcm/types.h>
#include <bcm/l3.h>

/* IPMC address type. */
typedef struct bcm_ipmc_addr_s {
    bcm_ip_t s_ip_addr;                 /* IPv4 Source address. */
    bcm_ip_t mc_ip_addr;                /* IPv4 Destination address. */
    bcm_ip6_t s_ip6_addr;               /* IPv6 Source address. */
    bcm_ip6_t mc_ip6_addr;              /* IPv6 Destination address. */
    bcm_vlan_t vid;                     /* VLAN identifier. */
    bcm_vrf_t vrf;                      /* Virtual Router Instance. */
    bcm_cos_t cos;                      /* COS based on dst IP multicast addr. */
    int ts;                             /* Source port or TGID bit. */
    int port_tgid;                      /* Source port or TGID. */
    int v;                              /* Valid bit. */
    int mod_id;                         /* Module ID. */
    bcm_multicast_t group;              /* Use this index to program IPMC table
                                           for XGS chips based on flags value.
                                           For SBX chips it is the Multicast
                                           Group index */
    uint32 flags;                       /* See BCM_IPMC_XXX flag definitions. */
    int lookup_class;                   /* Classification lookup class ID. */
    bcm_fabric_distribution_t distribution_class; /* Fabric Distribution Class. */
    bcm_if_t l3a_intf;                  /* L3 interface associated with route. */
    int rp_id;                          /* Rendezvous point ID. */
} bcm_ipmc_addr_t;

/* IPMC address flags. */
#define BCM_IPMC_KEEP_ENTRY                 0x00000001 /* Internal use. */
#define BCM_IPMC_HIT                        0x00000002 /* On get, indicates if
                                                          L3 hit is on for
                                                          entry. */
#define BCM_IPMC_SOURCE_PORT_NOCHECK        0x00000004 /* Do not source port
                                                          check this entry (XGS
                                                          only). */
#define BCM_IPMC_DISABLED                   0x00000008 /* Add entry in disabled
                                                          state. */
#define BCM_IPMC_REPLACE                    0x00000010 /* Replace an existing
                                                          entry. */
#define BCM_IPMC_IP6                        0x00000020 /* IPv6 support. */
#define BCM_IPMC_HIT_CLEAR                  0x00000040 /* Clear hit bit. */
#define BCM_IPMC_SETPRI                     0x00000080 /* Pick up new priority
                                                          (XGS3 only). */
#define BCM_IPMC_PROXY_IP6                  0x00000100 /* IPv6 Proxy MC egress
                                                          ports on XGS2. */
#define BCM_IPMC_ADD_DISABLED               BCM_IPMC_DISABLED 
#define BCM_IPMC_USE_FABRIC_DISTRIBUTION    0x00000400 /* Use specified fabric
                                                          distribution class. */
#define BCM_IPMC_COPYTOCPU                  0x00000800 /* When set, Copy the
                                                          packet to CPU. */
#define BCM_IPMC_POST_LOOKUP_RPF_CHECK      0x00001000 /* When set, perform RPF
                                                          check. */
#define BCM_IPMC_RPF_FAIL_DROP              0x00002000 /* Drop packet on RPF
                                                          failure. */
#define BCM_IPMC_RPF_FAIL_TOCPU             0x00004000 /* Copy packets to CPU on
                                                          RPF failure. */

/* Invalid value for rendezvous point ID parameter. */
#define BCM_IPMC_RP_ID_INVALID  -1         /* Invalid rendezvous point ID */

/* IPMC counters structure. */
typedef struct bcm_ipmc_counters_s {
    uint64 rmca;    /* Received L2 multicast frame. */
    uint64 tmca;    /* Transmit L2 multicast packet counter. */
    uint64 imbp;    /* Number of IPMC packets bridged. */
    uint64 imrp;    /* Number of IPMC packets routed. */
    uint64 rimdr;   /* Number of IPMC dropped in ingress. */
    uint64 timdr;   /* Number of IPMC dropped in egress. */
} bcm_ipmc_counters_t;

/* bcm_ipmc_traverse_cb */
typedef int (*bcm_ipmc_traverse_cb)(
    int unit, 
    bcm_ipmc_addr_t *info, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the BCM IPMC subsystem. */
extern int bcm_ipmc_init(
    int unit);

/* Detach the BCM IPMC subsystem. */
extern int bcm_ipmc_detach(
    int unit);

/* Enable/disable IPMC support. */
extern int bcm_ipmc_enable(
    int unit, 
    int enable);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize a bcm_ipmc_addr_t/bcmx_ipmc_addr_t. */
extern void bcm_ipmc_addr_t_init(
    bcm_ipmc_addr_t *data);

#ifndef BCM_HIDE_DISPATCHABLE

/* Add new IPMC group. */
extern int bcm_ipmc_add(
    int unit, 
    bcm_ipmc_addr_t *data);

/* Find info of an IPMC group. */
extern int bcm_ipmc_find(
    int unit, 
    bcm_ipmc_addr_t *data);

/* Remove IPMC group. */
extern int bcm_ipmc_remove(
    int unit, 
    bcm_ipmc_addr_t *data);

/* Remove all IPMC groups. */
extern int bcm_ipmc_remove_all(
    int unit);

/* Reinitialize/clear the egress IP multicast configuration. */
extern int bcm_ipmc_egress_port_init(
    int unit);

/* Configure the IP Multicast egress properties. */
extern int bcm_ipmc_egress_port_set(
    int unit, 
    bcm_port_t port, 
    const bcm_mac_t mac, 
    int untag, 
    bcm_vlan_t vid, 
    int ttl_threshold);

/* Get the egress IP multicast configuration properties. */
extern int bcm_ipmc_egress_port_get(
    int unit, 
    bcm_port_t port, 
    bcm_mac_t mac, 
    int *untag, 
    bcm_vlan_t *vid, 
    int *ttl_threshold);

/* Get the combined IP multicast statistics. */
extern int bcm_ipmc_counters_get(
    int unit, 
    bcm_port_t port, 
    bcm_ipmc_counters_t *counters);

/* 
 * Provides maximum IPMC index that this fabric can handle
 * (BCM5670/BCM5675).
 */
extern int bcm_ipmc_bitmap_max_get(
    int unit, 
    int *max_index);

/* Set the IPMC forwarding port bitmap (BCM5670/BCM5675). */
extern int bcm_ipmc_bitmap_set(
    int unit, 
    int ipmc_idx, 
    bcm_port_t port, 
    bcm_pbmp_t pbmp);

/* Get the IPMC forwarding port bitmap (BCM5670/BCM5675). */
extern int bcm_ipmc_bitmap_get(
    int unit, 
    int ipmc_idx, 
    bcm_port_t port, 
    bcm_pbmp_t *pbmp);

/* Remove IPMC forwarding port bitmap (BCM5670/BCM5675). */
extern int bcm_ipmc_bitmap_del(
    int unit, 
    int ipmc_idx, 
    bcm_port_t port, 
    bcm_pbmp_t pbmp);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize an IPMC counters structure (XGS3). */
extern void bcm_ipmc_counters_t_init(
    bcm_ipmc_counters_t *ipmc_counter);

#ifndef BCM_HIDE_DISPATCHABLE

/* Age unused ipmc table entries. */
extern int bcm_ipmc_age(
    int unit, 
    uint32 flags, 
    bcm_ipmc_traverse_cb age_cb, 
    void *user_data);

/* 
 * Traverse through the ipmc table and run callback at each valid ipmc
 * entry.
 */
extern int bcm_ipmc_traverse(
    int unit, 
    uint32 flags, 
    bcm_ipmc_traverse_cb cb, 
    void *user_data);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Rendezvous point flags. */
#define BCM_IPMC_RP_WITH_ID     0x00000001 /* Rendezvous point ID is provided. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a rendezvous point */
extern int bcm_ipmc_rp_create(
    int unit, 
    uint32 flags, 
    int *rp_id);

/* Destroy a rendezvous point */
extern int bcm_ipmc_rp_destroy(
    int unit, 
    int rp_id);

/* Set active ingress L3 interfaces for a rendezvous point */
extern int bcm_ipmc_rp_set(
    int unit, 
    int rp_id, 
    int intf_count, 
    bcm_if_t *intf_array);

/* Get active ingress L3 interfaces for a rendezvous point */
extern int bcm_ipmc_rp_get(
    int unit, 
    int rp_id, 
    int intf_max, 
    bcm_if_t *intf_array, 
    int *intf_count);

/* Add an active ingress L3 interface for a rendezvous point */
extern int bcm_ipmc_rp_add(
    int unit, 
    int rp_id, 
    bcm_if_t intf_id);

/* Delete an active ingress L3 interface for a rendezvous point */
extern int bcm_ipmc_rp_delete(
    int unit, 
    int rp_id, 
    bcm_if_t intf_id);

/* Delete all active ingress L3 interfaces for a rendezvous point */
extern int bcm_ipmc_rp_delete_all(
    int unit, 
    int rp_id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* IPMC address range info. */
typedef struct bcm_ipmc_range_s {
    uint32 flags;               /* BCM_IPMC_RANGE_xxx flags. */
    int priority;               /* Priority. */
    bcm_ip_t mc_ip_addr;        /* IPv4 group address. */
    bcm_ip_t mc_ip_addr_mask;   /* IPv4 group address mask. */
    bcm_ip6_t mc_ip6_addr;      /* IPv6 group address. */
    bcm_ip6_t mc_ip6_addr_mask; /* IPv6 group address mask. */
    bcm_vrf_t vrf;              /* Virtual router instance. */
    bcm_vrf_t vrf_mask;         /* Virtual router instance mask. */
    int rp_id;                  /* Rendezvous Point ID */
} bcm_ipmc_range_t;

/* Flags for bcm_ipmc_range APIs. */
#define BCM_IPMC_RANGE_WITH_ID      (1 << 0)   /* Use the specified range ID. */
#define BCM_IPMC_RANGE_REPLACE      (1 << 1)   /* Replace an existing range. */
#define BCM_IPMC_RANGE_IP6          (1 << 2)   /* IPv6 group address range is
                                                  valid. */
#define BCM_IPMC_RANGE_PIM_BIDIR    (1 << 3)   /* Packets matching this range
                                                  are subject to PIM-BIDIR
                                                  processing. */

/* Initialize bcm_ipmc_range_t structure. */
extern void bcm_ipmc_range_t_init(
    bcm_ipmc_range_t *range);

#ifndef BCM_HIDE_DISPATCHABLE

/* Add an IPMC group address range. */
extern int bcm_ipmc_range_add(
    int unit, 
    int *range_id, 
    bcm_ipmc_range_t *range);

/* Delete an IPMC group address range. */
extern int bcm_ipmc_range_delete(
    int unit, 
    int range_id);

/* Clear all IPMC group address ranges. */
extern int bcm_ipmc_range_delete_all(
    int unit);

/* Get IPMC group address range info. */
extern int bcm_ipmc_range_get(
    int unit, 
    int range_id, 
    bcm_ipmc_range_t *range);

/* Get max number of IPMC group address ranges supported. */
extern int bcm_ipmc_range_size_get(
    int unit, 
    int *size);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Ipmc statistics maintained per IPMC group. */
typedef enum bcm_ipmc_stat_e {
    bcmIpmcInPackets = 0,   /* Packets that ingress on the IPMC group. */
    bcmIpmcInBytes = 1      /* Bytes that ingress on the IPMC group. */
} bcm_ipmc_stat_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Attach counters entries to the given IPMC group. */
extern int bcm_ipmc_stat_attach(
    int unit, 
    bcm_ipmc_addr_t *info, 
    uint32 stat_counter_id);

/* Detach counters entries to the given IPMC group. */
extern int bcm_ipmc_stat_detach(
    int unit, 
    bcm_ipmc_addr_t *info);

/* Get the specified counter statistic for an IPMC group. */
extern int bcm_ipmc_stat_counter_get(
    int unit, 
    bcm_ipmc_addr_t *info, 
    bcm_ipmc_stat_t stat, 
    uint32 num_entries, 
    uint32 *counter_indexes, 
    bcm_stat_value_t *counter_values);

/* Get the specified counter statistic for an IPMC group. */
extern int bcm_ipmc_stat_counter_sync_get(
    int unit, 
    bcm_ipmc_addr_t *info, 
    bcm_ipmc_stat_t stat, 
    uint32 num_entries, 
    uint32 *counter_indexes, 
    bcm_stat_value_t *counter_values);

/* Set the specified counter statistic for an IPMC group. */
extern int bcm_ipmc_stat_counter_set(
    int unit, 
    bcm_ipmc_addr_t *info, 
    bcm_ipmc_stat_t stat, 
    uint32 num_entries, 
    uint32 *counter_indexes, 
    bcm_stat_value_t *counter_values);

/* Get 64-bit counter value for multiple IPMC group statistic types. */
extern int bcm_ipmc_stat_multi_get(
    int unit, 
    bcm_ipmc_addr_t *info, 
    int nstat, 
    bcm_ipmc_stat_t *stat_arr, 
    uint64 *value_arr);

/* 
 * Get lower 32-bit counter value for multiple IPMC group statistic
 * types.
 */
extern int bcm_ipmc_stat_multi_get32(
    int unit, 
    bcm_ipmc_addr_t *info, 
    int nstat, 
    bcm_ipmc_stat_t *stat_arr, 
    uint32 *value_arr);

/* Set 64-bit counter value for multiple IPMC group statistic types. */
extern int bcm_ipmc_stat_multi_set(
    int unit, 
    bcm_ipmc_addr_t *info, 
    int nstat, 
    bcm_ipmc_stat_t *stat_arr, 
    uint64 *value_arr);

/* 
 * Set lower 32-bit counter value for multiple IPMC group statistic
 * types.
 */
extern int bcm_ipmc_stat_multi_set32(
    int unit, 
    bcm_ipmc_addr_t *info, 
    int nstat, 
    bcm_ipmc_stat_t *stat_arr, 
    uint32 *value_arr);

/* Provide stat counter ids associated with given IPMC group. */
extern int bcm_ipmc_stat_id_get(
    int unit, 
    bcm_ipmc_addr_t *info, 
    bcm_ipmc_stat_t stat, 
    uint32 *stat_counter_id);

#endif /* defined(INCLUDE_L3) */

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_IPMC_H__ */
