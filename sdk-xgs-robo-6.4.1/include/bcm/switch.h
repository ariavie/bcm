/*
 * $Id: 5ff1c166cd5da2a49cb11c9d4687ec69d498636f $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_SWITCH_H__
#define __BCM_SWITCH_H__

#include <bcm/port.h>
#include <bcm/error.h>
#include <bcm/field.h>
#include <shared/switch.h>

/* Switch controls. */
typedef enum bcm_switch_control_e {
    bcmSwitchHgHdrErrToCpu = 0,         /* Higig Header Error to CPU. */
    bcmSwitchClassTagPacketsToCpu = 1,  /* HG2 packets with a PPD header of 1. */
    bcmSwitchIpmcTunnelToCpu = 2,       /* IPMC tunnel packet to CPU. */
    bcmSwitchStationMoveOverLearnLimitToCpu = 3, /* Station movement over MAC learn limit
                                           to CPU. */
    bcmSwitchMcastUnknownErrToCpu = 4,  /* MC unknown Index Error to CPU. */
    bcmSwitchLearnLimitPriority = 5,    /* Priority for MAC limit exceeds to
                                           CPU. */
    bcmSwitchControlOpcodePriority = 6, /* Control Op Code priority. */
    bcmSwitchCpuProtoBpduPriority = 7,  /* Priority for BPDUs to CPU. */
    bcmSwitchCpuProtoArpPriority = 8,   /* Priority for ARP/ND packets to CPU. */
    bcmSwitchCpuProtoIgmpPriority = 9,  /* Priority for IGMP/MLD packets to CPU. */
    bcmSwitchCpuProtoDhcpPriority = 10, /* Priority for DHCP packets to CPU. */
    bcmSwitchCpuProtoIpmcReservedPriority = 11, /* Priority for IPv4/IPv6 multicast
                                           packets to CPU. */
    bcmSwitchCpuProtoIpOptionsPriority = 12, /* Priority for IPv4/IPv6 packets with
                                           options or IPv6 packets with 0 len.
                                           Payload/jumbo option to CPU. */
    bcmSwitchCpuProtoExceptionsPriority = 13, /* Priority for IPv4/IPv6 packets with
                                           TTL=1 to CPU. */
    bcmSwitchCpuProtocolPrio = 14,      /* Priority used for BPDUs to CPU. */
    bcmSwitchCpuUnknownPrio = 15,       /* Priority for unknown SA or DA to CPU. */
    bcmSwitchCpuSamplePrio = 16,        /* Priority for sFlow sample to CPU. */
    bcmSwitchCpuDefaultPrio = 17,       /* Priority for all other packets to
                                           CPU. */
    bcmSwitchL2StaticMoveToCpu = 18,    /* Port movement of static L2 addr. */
    bcmSwitchUnknownIpmcToCpu = 19,     /* Send unknown IP multicasts to CPU. */
    bcmSwitchUnknownMcastToCpu = 20,    /* Send unknown multicasts to CPU. */
    bcmSwitchUnknownUcastToCpu = 21,    /* Send DLF packets to CPU. */
    bcmSwitchNonIpL3ErrToCpu = 22,      /* Non-IP packets w/DA of my router MAC
                                           to CPU. */
    bcmSwitchL3HeaderErrToCpu = 23,     /* Invalid checksum, TTL 0, etc. */
    bcmSwitchUnknownVlanToCpu = 24,     /* Packet VLAN not in VLAN table. */
    bcmSwitchUnknownL3SrcToCpu = 25,    /* SIP not found in L3 table. */
    bcmSwitchUnknownL3DestToCpu = 26,   /* DIP not found in L3/LPM tables. */
    bcmSwitchIpmcPortMissToCpu = 27,    /* Incoming port not in IPMC entry. */
    bcmSwitchIpmcErrorToCpu = 28,       /* IPMC pkt has header err or TTL=0. */
    bcmSwitchVCLabelMissToCpu = 29,     /* Send VC mismatch packet to CPU. */
    bcmSwitchSourceRouteToCpu = 30,     /* Send multicast SA packet to CPU. */
    bcmSwitchSampleIngressRandomSeed = 31, /* SFlow ingress RNG seed. */
    bcmSwitchSampleEgressRandomSeed = 32, /* SFlow egress RNG seed. */
    bcmSwitchCpuFpCopyPrio = 33,        /* Priority used for FP copy to CPU. */
    bcmSwitchCpuIcmpRedirectPrio = 34,  /* Priority for ICMP to CPU. */
    bcmSwitchCpuMtuFailPrio = 35,       /* Priority for MTU failure to CPU. */
    bcmSwitchCpuMirrorPrio = 36,        /* Priority for packets mirrored to CPU. */
    bcmSwitchCpuLookupFpCopyPrio = 37,  /* Priority for Lookup FP copy to SPU. */
    bcmSwitchL2NonStaticMoveToCpu = 38, /* L2 w/non-static addr to CPU. */
    bcmSwitchV6L3ErrToCpu = 39,         /* Invalid IPv6 packets to CPU. */
    bcmSwitchV6L3DstMissToCpu = 40,     /* IPv6 unknown dest packets to CPU. */
    bcmSwitchV6L3LocalLinkDrop = 41,    /* Drop IPv6 with link local sources. */
    bcmSwitchV4L3ErrToCpu = 42,         /* Invalid IPv6 packets to CPU. */
    bcmSwitchV4L3DstMissToCpu = 43,     /* IPv6 unknown dest packets to CPU. */
    bcmSwitchTunnelErrToCpu = 44,       /* Invalid tunnel packets to CPU. */
    bcmSwitchMartianAddrToCpu = 45,     /* Martian packets to CPU. */
    bcmSwitchMartianAddr = 46,          /* Enable/Disable Martian packet check. */
    bcmSwitchL3UcTtlErrToCpu = 47,      /* L3 unicast w/invalid TTL to CPU. */
    bcmSwitchL3SlowpathToCpu = 48,      /* Slowpath packets to CPU. */
    bcmSwitchIpmcTtlErrToCpu = 49,      /* IPMC packets w/invalid TTL to CPU. */
    bcmSwitchDosAttackToCpu = 50,       /* Denial of Service attacks to CPU. */
    bcmSwitchDosAttackSipEqualDip = 51, /* Enable SIP=DIP checking. */
    bcmSwitchDosAttackMinTcpHdrSize = 52, /* Header length for min TCP header
                                           checking. */
    bcmSwitchDosAttackV4FirstFrag = 53, /* Enable IPv4 First Frag checking. */
    bcmSwitchDosAttackTcpFlags = 54,    /* Enable TCP flag checking. */
    bcmSwitchDosAttackL4Port = 55,      /* Enable L4 port number checking. */
    bcmSwitchDosAttackTcpFrag = 56,     /* Enable TCP fragment checking. */
    bcmSwitchDosAttackIcmp = 57,        /* Enable ICMP size checK for v4 and v6. */
    bcmSwitchDosAttackIcmpV4 = 58,      /* Enable ICMPv4 size check. */
    bcmSwitchDosAttackIcmpV6 = 59,      /* Enable ICMPv6 size check. */
    bcmSwitchDosAttackIcmpPktOversize = 60, /* Max pkt size for ICMP size check. */
    bcmSwitchDosAttackMACSAEqualMACDA = 61, /* MACSA == MACDA check. */
    bcmSwitchDosAttackIcmpV6PingSize = 62, /* Max pkt size for v6 ping check. */
    bcmSwitchDosAttackIcmpFragments = 63, /* Fragmented ICMP packets check. */
    bcmSwitchDosAttackTcpOffset = 64,   /* TCP Header offset equals to 1 check. */
    bcmSwitchDosAttackUdpPortsEqual = 65, /* UDP packets where SPORT = DROP. */
    bcmSwitchDosAttackTcpPortsEqual = 66, /* TCP packets where SPORT = DROP. */
    bcmSwitchDosAttackTcpFlagsSF = 67,  /* TCP packets with SYN & FIN bits
                                           enabled. */
    bcmSwitchDosAttackTcpFlagsFUP = 68, /* TCP packets with FIN, URG, PSH bits
                                           set and sequence number equals 0. */
    bcmSwitchDosAttackTcpHdrPartial = 69, /* TCP packets with not full TCP header. */
    bcmSwitchDosAttackPingFlood = 70,   /* Enable ping flood checking. */
    bcmSwitchDosAttackSynFlood = 71,    /* Enable SYN flood checking. */
    bcmSwitchDosAttackTcpSmurf = 72,    /* Enable TCP smurf checking. */
    bcmSwitchDosAttackTcpXMas = 73,     /* SeqNum, Fin,Urg,Psh equal 0. */
    bcmSwitchDosAttackL3Header = 74,    /* Ipv4/6 header length checks. */
    bcmSwitchIcmpRedirectToCpu = 75,    /* ICMP redirect To CPU. */
    bcmSwitchMplsSequenceErrToCpu = 76, /* MPLS Sequence number check failure to
                                           CPU. */
    bcmSwitchMplsLabelMissToCpu = 77,   /* MPLS label lookup miss to CPU. */
    bcmSwitchMplsTtlErrToCpu = 78,      /* MPLS Header TTL used value is 0 or 1. */
    bcmSwitchMplsInvalidL3PayloadToCpu = 79, /* MPLS L3 payload invalid. */
    bcmSwitchMplsInvalidActionToCpu = 80, /* Invalid action / comnination of
                                           actions. */
    bcmSwitchSharedVlanMismatchToCpu = 81, /* Private VLAN VID mismatch. */
    bcmSwitchL3SrcUrpfErrToCpu = 82,    /* Invalid L3 uRPF SIP to CPU. */
    bcmSwitchGreKeyToVlan = 83,         /* Enable system configuration for GRE
                                           enhancement (including GRE.key). */
    bcmSwitchArpReplyToCpu = 84,        /* ARP replies to CPU. */
    bcmSwitchArpReplyDrop = 85,         /* ARP replies dropped. */
    bcmSwitchArpRequestToCpu = 86,      /* ARP requests to CPU. */
    bcmSwitchArpRequestDrop = 87,       /* ARP requests dropped. */
    bcmSwitchArpReplyMyStationL2ToCPU = 88, /* Only APR reply packets with My MAC
                                           should be sent to CPU */
    bcmSwitchNdPktToCpu = 89,           /* ND packets to CPU. */
    bcmSwitchNdPktDrop = 90,            /* ND packets dropped. */
    bcmSwitchMcastFloodBlocking = 91,   /* Current PFM rule is applied when
                                           IGMP/MLD/MC/ReservedMC packet flooded
                                           to VLAN. */
    bcmSwitchIgmpPktToCpu = 92,         /* IGMP packets to CPU. */
    bcmSwitchIgmpToCPU = bcmSwitchIgmpPktToCpu, /* Legacy support for IGMP packets to
                                           CPU. */
    bcmSwitchIgmpPktDrop = 93,          /* IGMP packets dropped. */
    bcmSwitchDhcpPktToCpu = 94,         /* DHCP packets to CPU. */
    bcmSwitchDhcpPktDrop = 95,          /* DHCP packets dropped. */
    bcmSwitchMldPktToCpu = 96,          /* MLD packets to CPU. */
    bcmSwitchMldPktDrop = 97,           /* MLD packets dropped. */
    bcmSwitchV4ResvdMcPktToCpu = 98,    /* IPv4 reserved MC packets to CPU. */
    bcmSwitchV4ResvdMcPktDrop = 99,     /* IPv4 reserved MC packets dropped. */
    bcmSwitchV4ResvdMcPktFlood = 100,   /* IPv4 reserved MC packets flooded to
                                           VLAN. */
    bcmSwitchV6ResvdMcPktToCpu = 101,   /* IPv6 reserved MC packets to CPU. */
    bcmSwitchV6ResvdMcPktDrop = 102,    /* IPv6 reserved MC packets dropped. */
    bcmSwitchV6ResvdMcPktFlood = 103,   /* IPv6 reserved MC packets flooded to
                                           VLAN. */
    bcmSwitchIgmpReportLeaveToCpu = 104, /* IGMP report/leave messages to CPU. */
    bcmSwitchIgmpReportLeaveDrop = 105, /* IGMP report/leave messages dropped. */
    bcmSwitchIgmpReportLeaveFlood = 106, /* IGMP report/leave messages flooded to
                                           VLAN. */
    bcmSwitchIgmpQueryToCpu = 107,      /* IGMP query messages to CPU. */
    bcmSwitchIgmpQueryDrop = 108,       /* IGMP query messages dropped. */
    bcmSwitchIgmpQueryFlood = 109,      /* IGMP query messages flooded to VLAN. */
    bcmSwitchIgmpUnknownToCpu = 110,    /* IGMP unknown messages to CPU. */
    bcmSwitchIgmpUnknownDrop = 111,     /* IGMP unknown messages dropped. */
    bcmSwitchIgmpUnknownFlood = 112,    /* IGMP unknown messages flooded to
                                           VLAN. */
    bcmSwitchMldReportDoneToCpu = 113,  /* MLD report/done messages to CPU. */
    bcmSwitchMldReportDoneDrop = 114,   /* MLD report/done messages dropped. */
    bcmSwitchMldReportDoneFlood = 115,  /* MLD report/done messages flooded to
                                           VLAN. */
    bcmSwitchMldQueryToCpu = 116,       /* MLD query messages to CPU. */
    bcmSwitchMldQueryDrop = 117,        /* MLD query messages dropped. */
    bcmSwitchMldQueryFlood = 118,       /* MLD query messages flooded to VLAN. */
    bcmSwitchIpmcV4RouterDiscoveryToCpu = 119, /* IPv4 Router discovery messages to
                                           CPU. */
    bcmSwitchIpmcV4RouterDiscoveryDrop = 120, /* IPv4 Router discovery messages
                                           dropped. */
    bcmSwitchIpmcV4RouterDiscoveryFlood = 121, /* IPv4 Router discovery messages
                                           flooded to VLAN. */
    bcmSwitchIpmcV6RouterDiscoveryToCpu = 122, /* IPv6 Router discovery messages to
                                           CPU. */
    bcmSwitchIpmcV6RouterDiscoveryDrop = 123, /* IPv6 Router discovery messages
                                           dropped. */
    bcmSwitchIpmcV6RouterDiscoveryFlood = 124, /* IPv6 Router discovery messages
                                           flooded to VLAN. */
    bcmSwitchDirectedMirroring = 125,   /* Enable directed mirroring mode. */
    bcmSwitchPktAge = 126,              /* Chip-wide packet age time, msec. */
    bcmSwitchMcastFloodDefault = 127,   /* VLAN Multicast flood control. */
    bcmSwitchParityErrorToCpu = 128,    /* Lookup parity error. */
    bcmSwitchL3MtuFailToCpu = 129,      /* L3 MTU check failure. */
    bcmSwitchMeterAdjust = 130,         /* Meter/Rate control with overhead on
                                           wire accounted for per packet. */
    bcmSwitchCounterAdjust = 131,       /* Counter compensation. */
    bcmSwitchMeterAdjustInterframeGap = 132, /* Indicate the size in Bytes of the IFG
                                           in Header-compensation for policer. */
    bcmSwitchHashL2 = 133,              /* Hash Select for L2. */
    bcmSwitchHashL3 = 134,              /* Hash Select for L3. */
    bcmSwitchHashMultipath = 135,       /* Hash Select for Multipath. */
    bcmSwitchHashControl = 136,         /* Hash Control of fields. */
    bcmSwitchFieldMultipathHashSelect = 137, /* Hash Select for FP
                                           bcmFieldActionL3Switch. */
    bcmSwitchFieldMultipathHashSeed = 138, /* Hash Seed for FP
                                           bcmFieldActionL3Switch. */
    bcmSwitchMirrorStackMode = 139,     /* Select BCM56504, 5670 or 5675-A0
                                           style stacking. */
    bcmSwitchMirrorSrcModCheck = 140,   /* Source modid check in BCM56504 style
                                           of mirroring. */
    bcmSwitchMirrorUnmarked = 141,      /* Send mirror packets as simple
                                           unicast. */
    bcmSwitchDestPortHGTrunk = 142,     /* Enable to use dest port in HiGig
                                           trunking. */
    bcmSwitchColorSelect = 143,         /* Choose color selection source. */
    bcmSwitchModuleLoopback = 144,      /* Allow local module ingress. */
    bcmSwitchSrcModBlockMirrorCopy = 145, /* Source modid blocking for BCM5670
                                           compatibility. */
    bcmSwitchSrcModBlockMirrorOnly = 146, /* Source modid blocking for BCM5675-A0
                                           compatibility. */
    bcmSwitchHashSeed0 = 147,           /* BCM56700/56800/56580 hash seeds. */
    bcmSwitchHashSeed1 = 148,           /* For enhanced hashing algoithm. */
    bcmSwitchHashField0PreProcessEnable = 149, /* Enable pre-processing for enhanced
                                           hash mode 0. */
    bcmSwitchHashField1PreProcessEnable = 150, /* Enable pre-processing for enhanced
                                           hash mode 1. */
    bcmSwitchHashField0Config = 151,    /* BCM56700/56800/56580 enhanced hash
                                           mode 0 config. */
    bcmSwitchHashField0Config1 = 152,   /* BCM56840 enhanced hash mode 0 config
                                           1. */
    bcmSwitchHashField1Config = 153,    /* BCM56700/56800/56580 enhanced hash
                                           mode 1 config. */
    bcmSwitchHashField1Config1 = 154,   /* BCM56840 enhanced hash mode 1 config
                                           1. */
    bcmSwitchMacroFlowHashFieldConfig = 155, /* Enhanced hash macro flow mode config. */
    bcmSwitchHashSelectControl = 156,   /* BCM56700/56800/56580 field selection
                                           control. */
    bcmSwitchHashIP4Field0 = 157,       /* BCM56700/56800/56580 enhanced hash
                                           field. */
    bcmSwitchHashIP4Field1 = 158,       /* Selections for IPv4 packets. */
    bcmSwitchHashIP4TcpUdpField0 = 159, /* BCM56840 enhanced hash field. */
    bcmSwitchHashIP4TcpUdpField1 = 160, /* Selections for IPv4 TCP/UDP packets. */
    bcmSwitchHashIP4TcpUdpPortsEqualField0 = 161, /* BCM56840 enhanced hash field. */
    bcmSwitchHashIP4TcpUdpPortsEqualField1 = 162, /* Selections for IPv4 TCP/UDP packets
                                           with source L4 port equals to
                                           destination L4 port. */
    bcmSwitchHashIP6Field0 = 163,       /* BCM56700/56800/56580 enhanced hash
                                           field. */
    bcmSwitchHashIP6Field1 = 164,       /* Selections for IPv6 packets. */
    bcmSwitchHashIP6TcpUdpField0 = 165, /* BCM56840 enhanced hash field. */
    bcmSwitchHashIP6TcpUdpField1 = 166, /* Selections for IPv6 TCP/UDP packets. */
    bcmSwitchHashIP6TcpUdpPortsEqualField0 = 167, /* BCM56840 enhanced hash field. */
    bcmSwitchHashIP6TcpUdpPortsEqualField1 = 168, /* Selections for IPv6 TCP/UDP packets
                                           with source L4 port equals to
                                           destination L4 port. */
    bcmSwitchHashL2Field0 = 169,        /* BCM56700/56800/56580 enhanced hash
                                           field. */
    bcmSwitchHashL2Field1 = 170,        /* Selections for L2 packets. */
    bcmSwitchHashMPLSField0 = 171,      /* BCM56700/56800/56580 enhanced hash
                                           field. */
    bcmSwitchHashMPLSField1 = 172,      /* Selections for MPLS packets. */
    bcmSwitchHashFCOEField0 = 173,      /* BCM56840 enhanced hash field. */
    bcmSwitchHashFCOEField1 = 174,      /* Selections for FCOE packets. */
    bcmSwitchHashL2TrillField0 = 175,   /* BCM56840 enhanced hash field. */
    bcmSwitchHashL2TrillField1 = 176,   /* Selections for L2 payload Trill
                                           packets. */
    bcmSwitchHashL3TrillField0 = 177,   /* BCM56840 enhanced hash field. */
    bcmSwitchHashL3TrillField1 = 178,   /* Selections for L3 payload Trill
                                           packets. */
    bcmSwitchHashTrillTunnelField0 = 179, /* BCM56840 enhanced hash field. */
    bcmSwitchHashTrillTunnelField1 = 180, /* Selections Trill tunnel packets. */
    bcmSwitchHashHG2UnknownField0 = 181, /* BCM56700/56800/56580 enhanced hash
                                           field. */
    bcmSwitchHashHG2UnknownField1 = 182, /* Selections for HiGig2 packets. */
    bcmSwitchHashField0OverlayCntagRpidEnable = 183, /* Selections for CNTAG, RPID fields. */
    bcmSwitchHashField1OverlayCntagRpidEnable = 184, /* Selections for CNTAG, RPID fields. */
    bcmSwitchHashHg2PktFieldsEnable = 185, /* Selections for HiGig2 packets. */
    bcmSwitchHashField0Ip6FlowLabel = 186, /* Selections for IPV6 packets. */
    bcmSwitchHashField1Ip6FlowLabel = 187, /* Selections for IPV6 packets. */
    bcmSwitchHashUseFlowSelTrunkUc = 188, /* Enable/Disable flow based hashing for
                                           Trunk. */
    bcmSwitchHashUseFlowSelEcmp = 189,  /* Enable/Disable flow based hashing for
                                           ECMP. */
    bcmSwitchTrunkHashSet0UnicastOffset = 190, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchTrunkHashSet1UnicastOffset = 191, /* Selections for unicast trunking. */
    bcmSwitchTrunkHashSet0NonUnicastOffset = 192, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchTrunkHashSet1NonUnicastOffset = 193, /* Selections for non-unicast trunking. */
    bcmSwitchTrunkFailoverHashOffset = 194, /* Enhanced hash selections for trunk
                                           failover. */
    bcmSwitchFabricTrunkHashSet0UnicastOffset = 195, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchFabricTrunkHashSet1UnicastOffset = 196, /* Selections for unicast fabric
                                           trunking. */
    bcmSwitchFabricTrunkHashSet0NonUnicastOffset = 197, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchFabricTrunkHashSet1NonUnicastOffset = 198, /* Selections for non-unicast fabric
                                           trunking. */
    bcmSwitchFabricTrunkFailoverHashOffset = 199, /* Enhanced hash selections for fabric
                                           trunk failover. */
    bcmSwitchFabricTrunkDynamicHashOffset = 200, /* Enhanced hash selections for fabric
                                           trunk dynamic load balancing. */
    bcmSwitchLoadBalanceHashSet0UnicastOffset = 201, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchLoadBalanceHashSet1UnicastOffset = 202, /* Selections for unicast load
                                           balancing. */
    bcmSwitchLoadBalanceHashSet0NonUnicastOffset = 203, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchLoadBalanceHashSet1NonUnicastOffset = 204, /* Selections for non-unicast load
                                           balancing. */
    bcmSwitchMacroFlowHashMinOffset = 205, /* Minimum offset value to be used in
                                           offset table. */
    bcmSwitchMacroFlowHashMaxOffset = 206, /* Maximum offset value to be used in
                                           offset table. */
    bcmSwitchMacroFlowHashStrideOffset = 207, /* Offset increment to be used for
                                           populating offset table. */
    bcmSwitchUniformUcastTrunkDistribution = 208, /* Uniform unicast trunk distribution on
                                           trunk with non power of 2 trunk
                                           ports. */
    bcmSwitchUniformFabricTrunkDistribution = 209, /* Uniform Higig trunk distribution on
                                           trunk with non power of 2 trunk
                                           ports. */
    bcmSwitchECMPHashSet0Offset = 210,  /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchECMPHashSet1Offset = 211,  /* Selections for ECMP. */
    bcmSwitchCpuToCpuEnable = 212,      /* Enable copying packets from CMIC to
                                           CPU. */
    bcmSwitchIgmpUcastEnable = 213,     /* Enable unicast packets with IGMP
                                           payload. */
    bcmSwitchMldUcastEnable = 214,      /* Enable unicast packets with MLD
                                           payload. */
    bcmSwitchIgmpReservedMcastEnable = 215, /* IGMP packets with reserved MC address
                                           threated as IGMP. */
    bcmSwitchMldReservedMcastEnable = 216, /* MLD packets with reserved MC address
                                           threated as MLD. */
    bcmSwitchMldDirectAttachedOnly = 217, /* Stricter checks for MLD packets are
                                           enable. */
    bcmSwitchPortEgressBlockL2 = 218,   /* Apply egress mask port blocking on L2
                                           traffic. */
    bcmSwitchPortEgressBlockL3 = 219,   /* Apply egress mask port blocking on L3
                                           traffic. */
    bcmSwitchBpduInvalidVlanDrop = 220, /* BPDU packets are dropped upon invalid
                                           VLAN. */
    bcmSwitchMirrorInvalidVlanDrop = 221, /* Mirror-to-port packets are dropped
                                           upon invalid VLAN. */
    bcmSwitchMirrorPktChecksEnable = 222, /* Enable/Disable all packet checks for
                                           mirror packets. */
    bcmSwitchRemoteLearnTrust = 223,    /* Honor the DONOT_LEARN bit in HiGig
                                           header. */
    bcmSwitchSourceMacZeroDrop = 224,   /* Packets with MACSA of all zeros are
                                           dropped. */
    bcmSwitchIpmcGroupMtu = 225,        /* For ingress MTU check for all IPMC
                                           groups. */
    bcmSwitchModuleType = 226,          /* Set Switch module type. */
    bcmSwitchBpduToCPU = 227,           /* ROBO for all BPDU to CPU. */
    bcmSwitch8021xToCPU = 228,          /* ROBO for MAC SEC to CPU. */
    bcmSwitchBcstToCPU = 229,           /* ROBO Broadcast to CPU. */
    bcmSwitchL3EgressMode = 230,        /* Enable advanced egress management. */
    bcmSwitchL3DefipMultipathCountUpdate = 231, /* Enable control to update L3-DEFIP
                                           ECMP-COUNT */
    bcmSwitchL3IngressMode = 232,       /* Enable advanced Ingress-interface
                                           management. */
    bcmSwitchL3HostAsRouteReturnValue = 233, /* Enable control to return value, when
                                           prefix added to Route table during
                                           L3HostAdd. */
    bcmSwitchSourceModBlockUcast = 234, /* Apply source modid block on unicast
                                           packets only. */
    bcmSwitchSourceModBlockControlOpcode = 235, /* Apply source modid block on system
                                           control packets. */
    bcmSwitchEgressBlockUcast = 236,    /* Apply egress mask on unicast packets
                                           only. */
    bcmSwitchAlternateStoreForward = 237, /* Alternate Store and Forward. */
    bcmSwitchWarmBoot = 238,            /* Set Warm boot state. */
    bcmSwitchStableSelect = 239,        /* Select the storage (or stable)
                                           location for Level 2 Warm Boot. */
    bcmSwitchStableSize = 240,          /* Select the storage (or stable) size
                                           (bytes) for Level 2 Warm Boot. */
    bcmSwitchStableUsed = 241,          /* Query the storage (or stable) usage
                                           (bytes) for Level 2 Warm Boot. */
    bcmSwitchStableConsistent = 242,    /* Query the storage (or stable) for
                                           whether state is believed consistent
                                           with hardware (API completed prior to
                                           warmboot). */
    bcmSwitchControlSync = 243,         /* Force a sync of the Level 2 warm boot
                                           state on demand. */
    bcmSwitchControlAutoSync = 244,     /* Perform a sync of the Level 2 warm
                                           boot state after every API. */
    bcmSwitchCallbackAbortOnError = 245, /* Abort if a callback returns an error
                                           code. */
    bcmSwitchUnknownIpmcAsMcast = 246,  /* Threat unknown IPMC as L2 Mcast. */
    bcmSwitchTunnelUnknownIpmcDrop = 247, /* Drop unknown IPMC for incomming
                                           tunnel. */
    bcmSwitchDhcpLearn = 248,           /* Do not learn MACSA of DHCP packet. */
    bcmSwitchIpmcTtl1ToCpu = 249,       /* Copy L3 Mcast with TTL 1 to CPU. */
    bcmSwitchL3UcastTtl1ToCpu = 250,    /* Copy L3 Ucast with TTL 1 to CPU. */
    bcmSwitchDosAttackFlagZeroSeqZero = 251, /* Null scan. */
    bcmSwitchHgHdrExtLengthEnable = 252, /* Use HiGig+ HDR_EXT_LEN field. */
    bcmSwitchDosAttackSynFrag = 253,    /* Drop TCP SYN packet with source port
                                           0-1023 for the first segment. */
    bcmSwitchIp4McastL2DestCheck = 254, /* Check MACDA and IPv4 DIP address
                                           match. */
    bcmSwitchIp6McastL2DestCheck = 255, /* Check MACDA and IPv6 DIP address
                                           match. */
    bcmSwitchL3InterfaceUrpfEnable = 256, /* Enable URPF per VLAN/L3-IIF for
                                           unicast packets. */
    bcmSwitchL3TunnelUrpfMode = 257,    /* RPF mode for unicast tunneled
                                           packets. */
    bcmSwitchL3TunnelUrpfDefaultRoute = 258, /* Enable URPF default gateway check for
                                           unicast tunneled packets. */
    bcmSwitchL3UrpfFailToCpu = 259,     /* Enable trap URPF fail packets to CPU. */
    bcmSwitchL3UrpfRouteEnable = 260,   /* Enable route lookup for URPF check. */
    bcmSwitchL3UrpfRouteEnableExternal = 261, /* Enable External(only) route lookup
                                           for URPF check. */
    bcmSwitchL3UrpfMode = 262,          /* Port rpf mode for unicast packets. */
    bcmSwitchL3UrpfDefaultRoute = 263,  /* Enable URPF default gateway check. */
    bcmSwitchIngressRateLimitIncludeIFG = 264, /* Add bytes to ingress rate limiting
                                           for IFG. */
    bcmSwitchRateLimitLinear = 265,     /* Use linear limits for shaping and
                                           egress metering. */
    bcmSwitchHashL2Dual = 266,          /* Secondary Hash Select for L2. */
    bcmSwitchHashL3Dual = 267,          /* Secondary Hash Select for L3. */
    bcmSwitchHashDualMoveDepth = 268,   /* Maximum moves in dual hash mode. */
    bcmSwitchHashDualMoveDepthL2 = 269, /* Maximum moves in dual hash mode for
                                           L2 tables. */
    bcmSwitchHashDualMoveDepthL3 = 270, /* Maximum moves in dual hash mode for
                                           L3 tables. */
    bcmSwitchHashDualMoveDepthVlan = 271, /* Maximum moves in dual hash mode for
                                           vlan tables. */
    bcmSwitchHashDualMoveDepthMpls = 272, /* Maximum moves in dual hash mode for
                                           mpls tables. */
    bcmSwitchHashDualMoveDepthEgressVlan = 273, /* Maximum moves in dual hash mode for
                                           egress vlan tables. */
    bcmSwitchHashDualMoveDepthWlanPort = 274, /* Maximum moves in dual hash mode for
                                           WLAN port table. */
    bcmSwitchHashDualMoveDepthWlanClient = 275, /* Maximum moves in dual hash mode for
                                           WLAN client table. */
    bcmSwitchHashMultiMoveDepth = 276,  /* Maximum moves in multi hash mode. */
    bcmSwitchHashMultiMoveDepthL2 = 277, /* Maximum moves in multi hash mode for
                                           L2 tables. */
    bcmSwitchHashMultiMoveDepthL3 = 278, /* Maximum moves in multi hash mode for
                                           L3 tables. */
    bcmSwitchHashMultiMoveDepthVlan = 279, /* Maximum moves in multi hash mode for
                                           vlan tables. */
    bcmSwitchHashMultiMoveDepthMpls = 280, /* Maximum moves in multi hash mode for
                                           mpls tables. */
    bcmSwitchHashMultiMoveDepthEgressVlan = 281, /* Maximum moves in multi hash mode for
                                           egress vlan tables. */
    bcmSwitchHashL2DualLeastFull = 282, /* Use least full bank in dual hash L2
                                           tables. */
    bcmSwitchHashL3DualLeastFull = 283, /* Use least full bank in dual hash L3
                                           tables. */
    bcmSwitchHashMPLSDualLeastFull = 284, /* Use least full bank in dual hash MPLS
                                           tables. */
    bcmSwitchSharedVlanEnable = 285,    /* Enable shared vlan. */
    bcmSwitchSharedVlanL2McastEnable = 286, /* Use shared vlan for L2 mcast pkt. */
    bcmSwitchIpmcReplicationSharing = 287, /* IPMC replication uses lists. */
    bcmSwitchIpmcReplicationAvailabilityThreshold = 288, /* IPMC replication table available
                                           space threshold. */
    bcmSwitchVrfMax = 289,              /* Maximum VRF ID for the device. */
    bcmSwitchFailoverStackTrunk = 290,  /* Trunk failover support for Stack
                                           ports. */
    bcmSwitchFailoverEtherTrunk = 291,  /* Trunk failover support for Ether
                                           ports. */
    bcmSwitchClassBasedMoveFailPktToCpu = 292, /* Class based check fail pkt to cpu. */
    bcmSwitchClassBasedMoveFailPktDrop = 293, /* Drop class based check fail pkt. */
    bcmSwitchHgHdrMcastFlood = 294,     /* Flood control value in Higig Header. */
    bcmSwitchHgHdrMcastFloodOverride = 295, /* Use flood control value in Higig
                                           header. */
    bcmSwitchHgHdrIpMcastFlood = 296,   /* IPMC flood control value in Higig
                                           header. */
    bcmSwitchHgHdrIpMcastFloodOverride = 297, /* Use IPMC flood ctrl value in Higig
                                           header. */
    bcmSwitchSTPBlockedFieldBypass = 298, /* Disable FP when STP state is blocked. */
    bcmSwitchL2PortBlocking = 299,      /* Enable selective port blocking per
                                           MAC address. */
    bcmSwitchHashIpfixIngress = 300,    /* Hash Select for Ingress IPFIX. */
    bcmSwitchHashIpfixIngressDual = 301, /* Secondary Hash Select for Ingress
                                           IPFIX. */
    bcmSwitchHashIpfixEgress = 302,     /* Hash Select for Egress IPFIX. */
    bcmSwitchHashIpfixEgressDual = 303, /* Secondary Hash Select for Egress
                                           IPFIX. */
    bcmSwitchHashMPLS = 304,            /* Hash Select for MPLS entry. */
    bcmSwitchHashMPLSDual = 305,        /* Secondary Hash Select for MPLS entry. */
    bcmSwitchForceForwardFabricTrunk = 306, /* Fabric trunk resolution in force
                                           forward mode. */
    bcmSwitchUseGport = 307,            /* Enable GPORT format for
                                           destination/source representation. */
    bcmSwitchHgHdrMcastVlanRange = 308, /* HIGIG2 broadcast index range */
    bcmSwitchHgHdrMcastL2Range = 309,   /* HIGIG2 multicast index range */
    bcmSwitchHgHdrMcastL3Range = 310,   /* HIGIG2 IPMC index range */
    bcmSwitchMcastL2Range = 311,        /* Multicast index range */
    bcmSwitchMcastL3Range = 312,        /* IPMC index range */
    bcmSwitchHashWlanPort = 313,        /* Hash Select for Wlan SVP entry. */
    bcmSwitchHashWlanPortDual = 314,    /* Secondary hash Select for Wlan SVP
                                           entry. */
    bcmSwitchHashWlanClient = 315,      /* Hash select for Wlan client database
                                           entry */
    bcmSwitchHashWlanClientDual = 316,  /* Secondary hash select for Wlan client
                                           database entry */
    bcmSwitchWlanClientAuthorizeAll = 317, /* Authorize all wlan clients, disable
                                           wlan client lookup */
    bcmSwitchWlanClientUnauthToCpu = 318, /* Unauthorized WLAN client's packets to
                                           CPU. */
    bcmSwitchWlanClientRoamedOutErrorToCpu = 319, /* Roamed out WLAN client's packets to
                                           CPU. */
    bcmSwitchWlanClientSrcMacMissToCpu = 320, /* WLAN client with source MAC miss:
                                           packets to CPU. */
    bcmSwitchWlanClientDstMacMissToCpu = 321, /* WLAN client with destination MAC
                                           miss: packets to CPU. */
    bcmSwitchOamHeaderErrorToCpu = 322, /* Packets with error in the OAM header
                                           to CPU. */
    bcmSwitchOamUnknownVersionToCpu = 323, /* Packets with unknown OAM version to
                                           CPU. */
    bcmSwitchOamUnknownVersionDrop = 324, /* Packets with unknown OAM version
                                           Dropped. */
    bcmSwitchOamUnexpectedPktToCpu = 325, /* OAM Packets with unexpected MDL to
                                           CPU. */
    bcmSwitchOamCcmToCpu = 326,         /* CCM with unexpected MEPID or Interval
                                           to CPU. */
    bcmSwitchOamXconCcmToCpu = 327,     /* CCM with low MDL or unexpected MAID
                                           to CPU. */
    bcmSwitchOamXconOtherToCpu = 328,   /* Other than CCM OAM PDUs with low MDL
                                           to CPU. */
    bcmSwitchL3SrcBindFailToCpu = 329,  /* Packets with L3 source bind table
                                           miss to CPU. */
    bcmSwitchTunnelIp4IdShared = 330,   /* Share the IPv4 ID space across
                                           tunnels. */
    bcmSwitchHashRegexAction = 331,     /* Hash Select for Regex Action entries. */
    bcmSwitchHashRegexActionDual = 332, /* Secondary hash Select for Regex
                                           Action entries. */
    bcmSwitchKeepEgressRtHdr = 333,     /* Leave SBX Egress Route Header on
                                           packets for a given port. */
    bcmSwitchCpuCopyDestination = 334,  /* Destination for CPU bound packets. */
    bcmSwitchCpuProtoTimeSyncPrio = 335, /* Priority for Time-Sync packets to
                                           CPU. */
    bcmSwitchCpuProtoMmrpPrio = 336,    /* Priority for MMRP packets to CPU. */
    bcmSwitchCpuProtoSrpPrio = 337,     /* Priority for SRP packets to CPU. */
    bcmSwitchTimeSyncPktToCpu = 338,    /* Time-Sync protocol packets to CPU. */
    bcmSwitchTimeSyncPktDrop = 339,     /* Time-Sync protocol packets dropped. */
    bcmSwitchTimeSyncPktFlood = 340,    /* Time-Sync protocol packets flooded to
                                           VLAN. */
    bcmSwitchMmrpPktToCpu = 341,        /* MMRP protocol packets to CPU. */
    bcmSwitchMmrpPktDrop = 342,         /* MMRP protocol packets dropped. */
    bcmSwitchMmrpPktFlood = 343,        /* MMRP protocol packets flooded to
                                           VLAN. */
    bcmSwitchSrpPktToCpu = 344,         /* SRP protocol packets to CPU. */
    bcmSwitchSrpPktDrop = 345,          /* SRP protocol packets dropped. */
    bcmSwitchSrpPktFlood = 346,         /* SRP protocol packets flooded to VLAN. */
    bcmSwitchSRPEthertype = 347,        /* Set SRP protocol ethertype to match. */
    bcmSwitchMMRPEthertype = 348,       /* Set MMRP ethertype to match. */
    bcmSwitchTimeSyncEthertype = 349,   /* Set Timing and Sync protocol
                                           ethertype to match. */
    bcmSwitchFcoeEtherType = 350,       /* Set FCOE protocol ethertype to match. */
    bcmSwitchSRPDestMacOui = 351,       /* Set SRP protocol MAC upper 3 bytes to
                                           match. */
    bcmSwitchMMRPDestMacOui = 352,      /* Set MMRP protocol MAC upper 3 bytes
                                           to match. */
    bcmSwitchTimeSyncDestMacOui = 353,  /* Set Timnig and Sync protocol MAC
                                           upper 3 bytes to match. */
    bcmSwitchSRPDestMacNonOui = 354,    /* Set SRP protocol MAC lower 3 bytes to
                                           match. */
    bcmSwitchMMRPDestMacNonOui = 355,   /* Set MMRP protocol MAC lower 3 bytes
                                           to match. */
    bcmSwitchTimeSyncDestMacNonOui = 356, /* Set Timnig and Sync protocol MAC lowe
                                           3 bytes to match. */
    bcmSwitchTimeSyncMessageTypeBitmap = 357, /* Set Timnig and Sync protocol message
                                           bitmap to match. */
    bcmSwitchTimeSyncClassAPktPrio = 358, /* Set Priority for the Class A. */
    bcmSwitchTimeSyncClassBPktPrio = 359, /* Set Priority for the Class B. */
    bcmSwitchTimeSyncClassAExeptionPktPrio = 360, /* Set Remapping Priority for exeption
                                           packets in the Class
                                           A. */
    bcmSwitchTimeSyncClassBExeptionPktPrio = 361, /* Set Remapping Priority for exeption
                                           packets in the Class B. */
    bcmSwitchL2McastAllRouterPortsAddEnable = 362, /* Add all-router ports to every L2
                                           multicast entry. */
    bcmSwitchBypassMode = 363,          /* Omit some switching features to
                                           decrease traffic latency. */
    bcmSwitchIpmcSameVlanL3Route = 364, /* Enable forwarding of known IPMC
                                           packets to the incoming vlan . */
    bcmSwitchAutoQueues = 365,          /* Queues are prealllocated at init
                                           time. */
    bcmSwitchFieldCache = 366,          /* Enable caching of Rule table or field
                                           entries */
    bcmSwitchFieldCommit = 367,         /* Flush the cached Rule table or field
                                           entries to hardware */
    bcmSwitchIpmcCache = 368,           /* Enable caching of IP Multicast S,G
                                           entries */
    bcmSwitchIpmcCommit = 369,          /* Flush the cached IP Multicast table
                                           entries to hardware */
    bcmSwitchL2Cache = 370,             /* Enable caching of MAC address entries */
    bcmSwitchL2Commit = 371,            /* Flush the cached MAC address table to
                                           hardware */
    bcmSwitchL2AgeDelete = 372,         /* Enables deletition of MAC addresses
                                           during aging scan */
    bcmSwitchL2AgeScan = 373,           /* Scan all MAC addresses and decrement
                                           age-status */
    bcmSwitchL3HostCache = 374,         /* Enable caching of L3 Host table
                                           entries */
    bcmSwitchL3HostCommit = 375,        /* Flush the cached L3 Host table to
                                           hardware */
    bcmSwitchL3RouteCache = 376,        /* Enable caching of L3 Route table
                                           entries */
    bcmSwitchL3RouteCommit = 377,       /* Flush the cached L3 Route table to
                                           hardware */
    bcmSwitchL2InvalidCtlToCpu = 378,   /* Packets with invalid L2 control
                                           fields to CPU. */
    bcmSwitchInvalidGreToCpu = 379,     /* Packets with invalid GRE fields to
                                           CPU */
    bcmSwitchHashL2MPLSField0 = 380,    /* L2 MPLS enhanced hash field */
    bcmSwitchHashL2MPLSField1 = 381,    /* L2 MPLS enhanced hash field */
    bcmSwitchHashL3MPLSField0 = 382,    /* L3 MPLS enhanced hash field */
    bcmSwitchHashL3MPLSField1 = 383,    /* L3 MPLS enhanced hash field */
    bcmSwitchHashMPLSTunnelField0 = 384, /* MPLS tunnel enhanced hash field */
    bcmSwitchHashMPLSTunnelField1 = 385, /* MPLS tunnel enhanced hash field */
    bcmSwitchHashMIMTunnelField0 = 386, /* MIM tunnel enhanced hash field */
    bcmSwitchHashMIMTunnelField1 = 387, /* MIM tunnel enhanced hash field */
    bcmSwitchHashMIMField0 = 388,       /* MIM enhanced hash field */
    bcmSwitchHashMIMField1 = 389,       /* MIM enhanced hash field */
    bcmSwitchStgInvalidToCpu = 390,     /* Packets with STG state of egress port
                                           is not in forwarding state to CPU */
    bcmSwitchVlanTranslateEgressMissToCpu = 391, /* Packets with VLAN translation talbe
                                           missed when it is expected to hit to
                                           CPU. */
    bcmSwitchL3PktErrToCpu = 392,       /* Packets with IP length field is
                                           longer than the actual packet length
                                           to CPU. */
    bcmSwitchMtuFailureToCpu = 393,     /* Packets with L2 MTU Failure to CPU. */
    bcmSwitchSrcKnockoutToCpu = 394,    /* Packets with Split horizon or SVP
                                           pruning (SVP==DVP) failure to CPU. */
    bcmSwitchWlanTunnelMismatchToCpu = 395, /* Packets with incoming WLAN SVP did
                                           not arrive on the expected tunnel to
                                           CPU. */
    bcmSwitchWlanTunnelMismatchDrop = 396, /* Drop packets with incoming WLAN SVP
                                           did not arrive on the expected
                                           tunnel. */
    bcmSwitchWlanPortMissToCpu = 397,   /* WLAN packets that have a SVP miss to
                                           CPU. */
    bcmSwitchUnknownVlanToCpuCosq = 398, /* VLAN copy to CPU COS. */
    bcmSwitchStgInvalidToCpuCosq = 399, /* STG copy to CPU COS. */
    bcmSwitchVlanTranslateEgressMissToCpuCosq = 400, /* VLAN translate miss copy to CPU COS. */
    bcmSwitchTunnelErrToCpuCosq = 401,  /* Tunnel Error to CPU COS. */
    bcmSwitchL3HeaderErrToCpuCosq = 402, /* L3 Header Error to CPU COS. */
    bcmSwitchL3PktErrToCpuCosq = 403,   /* L3 Pkt Error to CPU COS. */
    bcmSwitchIpmcTtlErrToCpuCosq = 404, /* TTL drop copy to CPU COS. */
    bcmSwitchMtuFailureToCpuCosq = 405, /* MTU failure copy to CPU COS. */
    bcmSwitchHgHdrErrToCpuCosq = 406,   /* HIGIG error copy to CPU COS. */
    bcmSwitchSrcKnockoutToCpuCosq = 407, /* Split horizon or SVP failure to CPU
                                           COS. */
    bcmSwitchWlanTunnelMismatchToCpuCosq = 408, /* WLAN move to CPU COS. */
    bcmSwitchWlanPortMissToCpuCosq = 409, /* WLAN SVP miss to CPU COS. */
    bcmSwitchIpfixRateViolationDataInsert = 410, /* Allow insert when rate violation is
                                           detected. */
    bcmSwitchIpfixRateViolationPersistent = 411, /* Keep rate violation status
                                           persistent. */
    bcmSwitchHashVlanTranslate = 412,   /* Hash Select for VLAN translate. */
    bcmSwitchHashVlanTranslateDual = 413, /* Secondary Hash Select for VLAN
                                           translate. */
    bcmSwitchHashEgressVlanTranslate = 414, /* Hash Select for Egress VLAN
                                           translate. */
    bcmSwitchHashEgressVlanTranslateDual = 415, /* Secondary Hash Select for Egress VLAN
                                           translate. */
    bcmSwitchLayeredQoSResolution = 416, /* Enable layered QoS resolution mode. */
    bcmSwitchCustomerQueuing = 417,     /* Enable customer domain queuing. */
    bcmSwitchCosqStatThreshold = 418,   /* Sets Statistics Threshold to ACE-TCE
                                           Mode */
    bcmSwitchCosqStatInterval = 419,    /* Sets background ejection Statistics
                                           Interval */
    bcmSwitchEncapErrorToCpu = 420,     /* Encapsulation Error to CPU */
    bcmSwitchMplsPortIndependentLowerRange1 = 421, /* Port Independent Lower MPLS Label for
                                           Range-1 */
    bcmSwitchMplsPortIndependentUpperRange1 = 422, /* Port Independent Upper MPLS Label for
                                           Range-1 */
    bcmSwitchMplsPortIndependentLowerRange2 = 423, /* Port Independent Lower MPLS Label for
                                           Range-2 */
    bcmSwitchMplsPortIndependentUpperRange2 = 424, /* Port Independent Upper MPLS Label for
                                           Range-2 */
    bcmSwitchMirrorEgressTrueColorSelect = 425, /* Color override selection for egress
                                           true mirroring */
    bcmSwitchMirrorEgressTruePriority = 426, /* Priority override selection for
                                           egress true mirroring */
    bcmSwitchPFCClass0Queue = 427,      /* Queue to suspend when a Priority Flow
                                           Control class 0 packet is received. */
    bcmSwitchPFCClass1Queue = 428,      /* Queue to suspend when a Priority Flow
                                           Control class 1 packet is received. */
    bcmSwitchPFCClass2Queue = 429,      /* Queue to suspend when a Priority Flow
                                           Control class 2 packet is received. */
    bcmSwitchPFCClass3Queue = 430,      /* Queue to suspend when a Priority Flow
                                           Control class 3 packet is received. */
    bcmSwitchPFCClass4Queue = 431,      /* Queue to suspend when a Priority Flow
                                           Control class 4 packet is received. */
    bcmSwitchPFCClass5Queue = 432,      /* Queue to suspend when a Priority Flow
                                           Control class 5 packet is received. */
    bcmSwitchPFCClass6Queue = 433,      /* Queue to suspend when a Priority Flow
                                           Control class 6 packet is received. */
    bcmSwitchPFCClass7Queue = 434,      /* Queue to suspend when a Priority Flow
                                           Control class 7 packet is received. */
    bcmSwitchPFCClass0McastQueue = 435, /* Multicast queue to suspend when a
                                           Priority Flow Control class 0 packet
                                           is received. */
    bcmSwitchPFCClass1McastQueue = 436, /* Multicast queue to suspend when a
                                           Priority Flow Control class 1 packet
                                           is received. */
    bcmSwitchPFCClass2McastQueue = 437, /* Multicast queue to suspend when a
                                           Priority Flow Control class 2 packet
                                           is received. */
    bcmSwitchPFCClass3McastQueue = 438, /* Multicast queue to suspend when a
                                           Priority Flow Control class 3 packet
                                           is received. */
    bcmSwitchPFCClass4McastQueue = 439, /* Multicast queue to suspend when a
                                           Priority Flow Control class 4 packet
                                           is received. */
    bcmSwitchPFCClass5McastQueue = 440, /* Multicast queue to suspend when a
                                           Priority Flow Control class 5 packet
                                           is received. */
    bcmSwitchPFCClass6McastQueue = 441, /* Multicast queue to suspend when a
                                           Priority Flow Control class 6 packet
                                           is received. */
    bcmSwitchPFCClass7McastQueue = 442, /* Multicast queue to suspend when a
                                           Priority Flow Control class 7 packet
                                           is received. */
    bcmSwitchPFCClass0DestmodQueue = 443, /* Destination module queue to suspend
                                           when a Priority Flow Control class 0
                                           packet is received. */
    bcmSwitchPFCClass1DestmodQueue = 444, /* Destination module queue to suspend
                                           when a Priority Flow Control class 1
                                           packet is received. */
    bcmSwitchPFCClass2DestmodQueue = 445, /* Destination module queue to suspend
                                           when a Priority Flow Control class 2
                                           packet is received. */
    bcmSwitchPFCClass3DestmodQueue = 446, /* Destination module queue to suspend
                                           when a Priority Flow Control class 3
                                           packet is received. */
    bcmSwitchPFCClass4DestmodQueue = 447, /* Destination module queue to suspend
                                           when a Priority Flow Control class 4
                                           packet is received. */
    bcmSwitchPFCClass5DestmodQueue = 448, /* Destination module queue to suspend
                                           when a Priority Flow Control class 5
                                           packet is received. */
    bcmSwitchPFCClass6DestmodQueue = 449, /* Destination module queue to suspend
                                           when a Priority Flow Control class 6
                                           packet is received. */
    bcmSwitchPFCClass7DestmodQueue = 450, /* Destination module queue to suspend
                                           when a Priority Flow Control class 7
                                           packet is received. */
    bcmSwitchPFCQueue0Class = 451,      /* Priority Flow Control class for COS
                                           queue 0. */
    bcmSwitchPFCQueue1Class = 452,      /* Priority Flow Control class for COS
                                           queue 1. */
    bcmSwitchPFCQueue2Class = 453,      /* Priority Flow Control class for COS
                                           queue 2. */
    bcmSwitchPFCQueue3Class = 454,      /* Priority Flow Control class for COS
                                           queue 3. */
    bcmSwitchPFCQueue4Class = 455,      /* Priority Flow Control class for COS
                                           queue 4. */
    bcmSwitchPFCQueue5Class = 456,      /* Priority Flow Control class for COS
                                           queue 5. */
    bcmSwitchPFCQueue6Class = 457,      /* Priority Flow Control class for COS
                                           queue 6. */
    bcmSwitchPFCQueue7Class = 458,      /* Priority Flow Control class for COS
                                           queue 7. */
    bcmSwitchReserveLowL3InterfaceId = 459, /* Set the lower inclusive bounds of the
                                           L3 Interfaces.  Get will return the
                                           lowest value supported by the device.
                                            Setting 0 will remove the reserved
                                           range. */
    bcmSwitchReserveHighL3InterfaceId = 460, /* Set the higher inclusive bounds of
                                           the L3 Interfaces.  Get will return
                                           the lowest value supported by the
                                           device.  Setting 0 will remove the
                                           reserved range. */
    bcmSwitchReserveLowL3EgressId = 461, /* Set the lower inclusive bounds of the
                                           L3 Egress object.  Get will return
                                           the lowest value supported by the
                                           device.  Setting 0 will remove the
                                           reserved range. */
    bcmSwitchReserveHighL3EgressId = 462, /* Set the higher inclusive bounds of
                                           the L3 Egress object.  Get will
                                           return the lowest value supported by
                                           the device.  Setting 0 will remove
                                           the reserved range. */
    bcmSwitchReserveLowVlanPort = 463,  /* Set the lower inclusive bounds of the
                                           vlan gport resources.  Get will
                                           return the lowest value supported by
                                           the device.  Setting 0 will remove
                                           the reserved range */
    bcmSwitchReserveHighVlanPort = 464, /* Set the highest inclusive bounds of
                                           the vlan gport resources.  Get will
                                           return the highest value supported by
                                           the device.  Setting 0 will remove
                                           the reserved range */
    bcmSwitchReserveLowMplsPort = 465,  /* Set the lower inclusive bounds of the
                                           mpls gport resources.  Get will
                                           return the lowest value supported by
                                           the device.  Setting 0 will remove
                                           the reserved range */
    bcmSwitchReserveHighMplsPort = 466, /* Set the highest inclusive bounds of
                                           the mpls gport resources.  Get will
                                           return the highest value supported by
                                           the device.  Setting 0 will remove
                                           the reserved range */
    bcmSwitchReserveLowMimPort = 467,   /* Set the lower inclusive bounds of the
                                           mim gport resources.  Get will return
                                           the lowest value supported by the
                                           device.  Setting 0 will remove the
                                           reserved range */
    bcmSwitchReserveHighMimPort = 468,  /* Set the highest inclusive bounds of
                                           the mim gport resources.  Get will
                                           return the highest value supported by
                                           the device.  Setting 0 will remove
                                           the reserved range */
    bcmSwitchReserveLowEncap = 469,     /* Set the lower inclusive bounds of the
                                           Encap ID resources used internally by
                                           gports.  Get will return the lowest
                                           value supported by the device. 
                                           Setting 0 will remove the reserved
                                           range */
    bcmSwitchReserveHighEncap = 470,    /* Set the highest inclusive bounds of
                                           the Encap ID resources used
                                           internally by gports.  Get will
                                           return the highest value supported by
                                           the device.  Setting 0 will remove
                                           the reserved range */
    bcmSwitchReserveLowL2Egress = 471,  /* Set the lower inclusive bounds of the
                                           L2 Encap ID resources.  Get will
                                           return the lowest value supported by
                                           the device.  Setting 0 will remove
                                           the reserved range */
    bcmSwitchReserveHighL2Egress = 472, /* Set the highest inclusive bounds of
                                           the L2 Encap ID resources.  Get will
                                           return the highest value supported by
                                           the device.  Setting 0 will remove
                                           the reserved range */
    bcmSwitchReserveLowVpn = 473,       /* Set the lower inclusive bounds of the
                                           VPN ID resources.  Get will return
                                           the lowest value supported by the
                                           device.  Setting 0 will remove the
                                           reserved range */
    bcmSwitchReserveHighVpn = 474,      /* Set the highest inclusive bounds of
                                           the VPN ID resources.  Get will
                                           return the highest value supported by
                                           the device.  Setting 0 will remove
                                           the reserved range */
    bcmSwitchReserveLowFailoverId = 475, /* Set the lower inclusive bounds of
                                           failover object.  Get will return the
                                           lowest value supported by the device.
                                            Setting 0 will remove the reserved
                                           range */
    bcmSwitchReserveHighFailoverId = 476, /* Set the higher inclusive bounds of
                                           failover object.  Get will return the
                                           lowest value supported by the device.
                                            Setting 0 will remove the reserved
                                           range */
    bcmSwitchReserveLowOamEndPointId = 477, /* Set the lower inclusive bounds of OAM
                                           endpoint.  Get will return the lowest
                                           value supported by the device. 
                                           Setting 0 will remove the reserved
                                           range */
    bcmSwitchReserveHighOamEndPointId = 478, /* Set the higher inclusive bounds of
                                           OAM endpoin.  Get will return the
                                           lowest value supported by the device.
                                            Setting 0 will remove the reserved
                                           range */
    bcmSwitchReserveLowOamGroupId = 479, /* Set the lower inclusive bounds of OAM
                                           Group.  Get will return the lowest
                                           value supported by the device. 
                                           Setting 0 will remove the reserved
                                           range */
    bcmSwitchReserveHighOamGroupId = 480, /* Set the higher inclusive bounds of
                                           OAM Group.  Get will return the
                                           lowest value supported by the device.
                                            Setting 0 will remove the reserved
                                           range */
    bcmSwitchSnapNonZeroOui = 481,      /* Decode SNAP packets with non-zero OUI
                                           for protocol-based VLAN */
    bcmSwitchSynchronousPortClockSource = 482, /* Set ITU-T G.8261/8262 synchronous
                                           ethernet recovered clock source. 
                                           Setting -1 selects in free-run mode
                                           (no recovered clock). Get returns the
                                           current value. */
    bcmSwitchSynchronousPortClockSourceBkup = 483, /* Set ITU-T G.8261/8262 synchronous
                                           ethernet recovered backup clock
                                           source.  Get returns the current
                                           value. */
    bcmSwitchSynchronousPortClockSourceDivCtrl = 484, /* Set ITU-T G.8261/8262 synchronous
                                           ethernet recovered clock source. 
                                           Setting -1 selects the divide by five
                                           logic. Get returns the current value. */
    bcmSwitchSynchronousPortClockSourceBkupDivCtrl = 485, /* Set ITU-T G.8261/8262 synchronous
                                           ethernet recovered backup clock
                                           source.  Setting -1 selects the
                                           divide by five logic. Get returns the
                                           current value. */
    bcmSwitchL2HitClear = 486,          /* Clear L2 source and destination hit
                                           bits when set to 1 */
    bcmSwitchL2SrcHitClear = 487,       /* Clear L2 source hit bits when set to
                                           1 */
    bcmSwitchL2DstHitClear = 488,       /* Clear L2 destination hit bits when
                                           set to 1 */
    bcmSwitchL3HostHitClear = 489,      /* Clear L3 host hit bits when set to 1 */
    bcmSwitchL3RouteHitClear = 490,     /* Clear L3 route hit bits when set to 1 */
    bcmSwitchIpmcSameVlanPruning = 491, /* Allow both L2 and L3 copies of a
                                           packet to go out on a physical port
                                           if it happens to be a member of both
                                           the L2 and L3 bitmaps of the
                                           replication group. */
    bcmSwitchGvrpToCpu = 492,           /* Management port is the destinatino
                                           port of GVRP frame when set to 1 */
    bcmSwitchGmrpToCpu = 493,           /* Management port is the destinatino
                                           port of GMRP frame when set to 1 */
    bcmSwitchL2McIdxRetType = 494,      /* When set to 1, L2 multicast API will
                                           return multicast index as
                                           bcm_multicast_t instead of hardware
                                           multicast index. */
    bcmSwitchL3McIdxRetType = 495,      /* When set to 1, IP multicast API will
                                           return multicast index as
                                           bcm_multicast_t instead of hardware
                                           multicast index. */
    bcmSwitchMcastSaDrop = 496,         /* Drop the packet if the SA is mcast
                                           address. */
    bcmSwitchJumboFrameDrop = 497,      /* Drop the Jumbo frame. */
    bcmSwitchDroppedJumboFrameDisLearn = 498, /* No learn on the dropped Jumbo frame. */
    bcmSwitchRangeErrDrop = 499,        /* Drop the range error frame. */
    bcmSwitchDroppedRangeErrDisLearn = 500, /* No learn on the dropped range error
                                           frame. */
    bcmSwitchArpDhcpToCpu = 501,        /* Set both ARP and DHCP to CPU. */
    bcmSwitchIgmpMldToCpu = 502,        /* Set the snooping mode on both IGMP
                                           and MLD together. */
    bcmSwitchLinkDownInfoSkip = 503,    /* Skip port information gathering
                                           during linkdown event
                                           notification */
    bcmSwitchDestMacZeroDrop = 504,     /* Packets with MACDA of all zeros are
                                           dropped. */
    bcmSwitchL2SourceDiscardMoveToCpu = 505, /* SRC MAC discard configuration to CPU */
    bcmSwitchNivEthertype = 506,        /* Set ethertype field in VNTAG */
    bcmSwitchNivPrioDropToCpu = 507,    /* NIV priority admittance drop to CPU */
    bcmSwitchNivInterfaceMissToCpu = 508, /* NIV forwarding lookup miss to CPU */
    bcmSwitchNivRpfFailToCpu = 509,     /* NIV RPF check fail to CPU */
    bcmSwitchNivTagInvalidToCpu = 510,  /* Invalid VNTAG to CPU */
    bcmSwitchNivTagDropToCpu = 511,     /* VNTAG present to CPU */
    bcmSwitchNivUntagDropToCpu = 512,   /* VNTAG not present to CPU */
    bcmSwitchEEEPipelineTime = 513,     /* Time (in system clock cycles) for MAC
                                           to ensure that the egress pipeline is
                                           empty prior to the assertion of the
                                           LPI control signal. */
    bcmSwitchEEEGlobalCongestionThreshold = 514, /* If this threshold is exceeded, EEE is
                                           disabled for all ports. */
    bcmSwitchFiltersControlModes = 515, /* For the configuration on varies
                                           filter bypass control items. */
    bcmSwitchFiltersControlList = 516,  /* For get only to report the supported
                                           filter bypass control items. */
    bcmSwitchLedFuncGrp0 = 517,         /* Set LED functions combination group0 */
    bcmSwitchLedFuncGrp1 = 518,         /* FSet LED functions combination group1 */
    bcmSwitchLedFuncGrpSelect = 519,    /* Select the working LED function
                                           combination group */
    bcmSwitchLedMode = 520,             /* Assign the port based LED mode.(Off |
                                           On | Blink | Auto) */
    bcmSwitchPortBasedQos = 521,        /* The ingress priority for a frame is
                                           decided upon ingress port */
    bcmSwitchRemoteCpuSchanEnable = 522, /* Enables SCHAN requests for Remote CPU
                                           feature */
    bcmSwitchRemoteCpuFromCpuEnable = 523, /* Enables recieving packets from CPU
                                           for Remote CPU feature */
    bcmSwitchRemoteCpuToCpuEnable = 524, /* Enables sending packet to CPU for
                                           Remote CPU feature */
    bcmSwitchRemoteCpuCmicEnable = 525, /* Enables CMIC requests for Remote CPU
                                           feature */
    bcmSwitchRemoteCpuMatchLocalMac = 526, /* Local MAC addresses matching for
                                           Remote CPU feature */
    bcmSwitchRemoteCpuMatchVlan = 527,  /* VLAN matching for Remote CPU feature */
    bcmSwitchRemoteCpuVlan = 528,       /* VLAN tag to be inserted into Remote
                                           CPU packets */
    bcmSwitchRemoteCpuTpid = 529,       /* TPID tag to be inserted into Remote
                                           CPU packets */
    bcmSwitchRemoteCpuSignature = 530,  /* Unique Signature for Remote CPU
                                           packets */
    bcmSwitchRemoteCpuForceScheduling = 531, /* Remote CPU packets are forced to have
                                           COS value */
    bcmSwitchRemoteCpuToCpuDestPortAllReasons = 532, /* Remote CPU packets to be forwarded
                                           for all directed reasons */
    bcmSwitchRemoteCpuToCpuDestMacAllReasons = 533, /* Remote CPU packets to be forwarded
                                           for all reasons */
    bcmSwitchRxRedirectPktReasons = 534, /* All forwarding reasons for normal
                                           packets */
    bcmSwitchRxRedirectPktReasonsExtended = 535, /* All extended forwarding reasons for
                                           normal packets */
    bcmSwitchRxRedirectHigigPktReasons = 536, /* All forwarding reasons for higig
                                           packets */
    bcmSwitchRxRedirectHigigPktReasonsExtended = 537, /* All extended forwarding reasons for
                                           higig packets */
    bcmSwitchRxRedirectTruncatedPktReasons = 538, /* All forwarding reasons for truncated
                                           packets */
    bcmSwitchRxRedirectTruncatedPktReasonsExtended = 539, /* All extended forwarding reasons for
                                           truncated packets */
    bcmSwitchRxRedirectPktCos = 540,    /* All forwarding COS queue bitmap for
                                           normal packets */
    bcmSwitchRxRedirectPktCosExtended = 541, /* All extended forwarding COS queue
                                           bitmap for normal packets */
    bcmSwitchRemoteCpuLocalMacOui = 542, /* Higher 3 bytes of Local MAC address
                                           used for Remote CPU */
    bcmSwitchRemoteCpuLocalMacNonOui = 543, /* Lower 3 bytes of Local MAC address
                                           used for Remote CPU */
    bcmSwitchRemoteCpuDestMacOui = 544, /* Higher 3 bytes of Destination MAC
                                           address used for Remote CPU */
    bcmSwitchRemoteCpuDestMacNonOui = 545, /* Lower 3 bytes of Destination MAC
                                           address used for Remote CPU */
    bcmSwitchRemoteCpuEthertype = 546,  /* Remote CPU ethertype */
    bcmSwitchRemoteCpuDestPort = 547,   /* Remote CPU will direct raw data
                                           packets with SOBMH header to a given
                                           port */
    bcmSwitchRemoteCpuHigigDestPort = 548, /* Remote CPU will direct raw data
                                           packets with Higig header to a given
                                           port */
    bcmSwitchRemoteCpuTcMappingMacOui = 549, /* Higher 3 bytes of Destination MAC
                                           address used to match received ToCPU
                                           packets */
    bcmSwitchRemoteCpuTcMappingMacNonOui = 550, /* Lower 3 bytes of Destination MAC
                                           address used to match received ToCPU
                                           packets */
    bcmSwitchRemoteCpuTcMappingEthertype = 551, /* Ethertype used to match received
                                           ToCPU packets */
    bcmSwitchServiceTpidReplace = 552,  /* Replace TPID in Service Delimiting
                                           SD-TAG */
    bcmSwitchEgressPktAge = 553,        /* Chip-wide egress packet age time,
                                           msec. */
    bcmSwitchFabricTrunkDynamicSampleRate = 554, /* Number of times average port egressed
                                           bytes and queued bytes are computed
                                           in a second */
    bcmSwitchFabricTrunkDynamicEgressBytesExponent = 555, /* The exponent used in the calculation
                                           of exponentially weighted moving
                                           average of port egressed bytes */
    bcmSwitchFabricTrunkDynamicQueuedBytesExponent = 556, /* The exponent used in the calculation
                                           of exponentially weighted moving
                                           average of port queued bytes */
    bcmSwitchFabricTrunkDynamicEgressBytesDecreaseReset = 557, /* If set, the average port egressed
                                           bytes is updated with the sampled
                                           value if the sampled value is less
                                           than the average */
    bcmSwitchFabricTrunkDynamicQueuedBytesDecreaseReset = 558, /* If set, the average port queued bytes
                                           is updated with the sampled value if
                                           the sampled value is less than the
                                           average */
    bcmSwitchFabricTrunkDynamicEgressBytesMinThreshold = 559, /* The minimum threshold, in mbps, used
                                           to quantize average port egressed
                                           bytes */
    bcmSwitchFabricTrunkDynamicEgressBytesMaxThreshold = 560, /* The maximum threshold, in mbps, used
                                           to quantize average port egressed
                                           bytes */
    bcmSwitchFabricTrunkDynamicQueuedBytesMinThreshold = 561, /* The minimum threshold, in bytes, used
                                           to quantize average port queued bytes */
    bcmSwitchFabricTrunkDynamicQueuedBytesMaxThreshold = 562, /* The maximum threshold, in bytes, used
                                           to quantize average port queued bytes */
    bcmSwitchMacLowPower = 563,         /* Enable switch low power mode and set
                                           the low power frequency, Khz */
    bcmSwitchCongestionCntag = 564,     /* Enable/Disable CN-TAG processing */
    bcmSwitchCongestionCntagEthertype = 565, /* Ethertype for CN-TAG */
    bcmSwitchCongestionCnm = 566,       /* Enable/Disable congestion
                                           notification message handling */
    bcmSwitchCongestionCnmEthertype = 567, /* Ethertype for congestion notification
                                           message */
    bcmSwitchCongestionNotificationIdHigh = 568, /* Device identifier for contructing
                                           congestion point identifier */
    bcmSwitchCongestionNotificationIdLow = 569, /* Port identifier for constructing
                                           congestion point identifier */
    bcmSwitchCongestionNotificationIdQueue = 570, /* Queue mode of the congestion point
                                           identifier. When set to 0 use
                                           congestion managed queue id,
                                           otherwise use queue number */
    bcmSwitchCongestionUseOuterTpid = 571, /* Outer TPID to be used for congestion
                                           notification message */
    bcmSwitchCongestionUseOuterVlan = 572, /* Outer vlan to be used for congestion
                                           notification message */
    bcmSwitchCongestionUseOuterPktPri = 573, /* Outer priority to be used for
                                           congestion notification message */
    bcmSwitchCongestionUseOuterCfi = 574, /* Outer CFI to be used for congestion
                                           notification message */
    bcmSwitchCongestionUseInnerPktPri = 575, /* Inner priority to be used for
                                           congestion notification message */
    bcmSwitchCongestionUseInnerCfi = 576, /* Inner CFI to be used for congestion
                                           notification message */
    bcmSwitchCongestionMissingCntag = 577, /* Choose the CNM generation behavior
                                           when congestion notification
                                           threshold is reached but the incoming
                                           sampled packet does not have CN-TAG */
    bcmSwitchCongestionExcludeReplications = 578, /* Take the replicated packets in
                                           account during the congestion test */
    bcmSwitchMiMDefaultSVP = 579,       /* Enable MiM termination lookup miss
                                           packets to be forwarded using default
                                           SVP */
    bcmSwitchMiMDefaultSVPValue = 580,  /* Default SVP  for Mac-in-Mac */
    bcmSwitchEgressDroppedReportZeroLength = 581, /* Enable egress pipeline to report zero
                                           length for dropped packets */
    bcmSwitchLoadBalanceHashSelect = 582, /* Selects which hash function to use
                                           for Load Balance computation */
    bcmSwitchTrillEthertype = 583,      /* Set TRILL Ethertype field. Value of
                                           uint16 type */
    bcmSwitchTrillISISEthertype = 584,  /* Set TRILL ISIS Ethertype field. Value
                                           of uint16 type */
    bcmSwitchTrillISISDestMacOui = 585, /* Set TRILL All_ISIS_Rbridge MAC upper
                                           3 bytes to match. */
    bcmSwitchTrillBroadcastDestMacOui = 586, /* Set TRILL ALL_Rbridge MAC upper 3
                                           bytes to match. */
    bcmSwitchTrillEndStationDestMacOui = 587, /* Set TRILL ALL_ESADI MAC upper 3 bytes
                                           to match. */
    bcmSwitchTrillISISDestMacNonOui = 588, /* Set TRILL ALL_ISIS_Rbridge MAC lower
                                           3 bytes to match. */
    bcmSwitchTrillBroadcastDestMacNonOui = 589, /* Set TRILL ALL_Rbridge MAC lower 3
                                           bytes to match. */
    bcmSwitchTrillEndStationDestMacNonOui = 590, /* Set TRILL ALL_ESADI MAC lower 3 bytes
                                           to match. */
    bcmSwitchTrillMinTtl = 591,         /* Set minimum TTL for Egress and
                                           Transit TRILL Rbridge. */
    bcmSwitchTrillTtlCheckEnable = 592, /* Enable TTL check for Egress TRILL
                                           Rbridge. */
    bcmSwitchTrillTtlErrToCpu = 593,    /* Copy TRILL TTL failure packets to
                                           CPU. */
    bcmSwitchTrillHeaderErrToCpu = 594, /* Copy TRILL Header Error frame to CPU. */
    bcmSwitchTrillMismatchToCpu = 595,  /* Copy TRILL mismatch error frame to
                                           CPU. */
    bcmSwitchTrillNameMissToCpu = 596,  /* Copy TRILL Rbridge lookup failure to
                                           CPU. */
    bcmSwitchTrillRpfFailToCpu = 597,   /* Copy TRILL RPF check fail to CPU. */
    bcmSwitchTrillOptionsToCpu = 598,   /* Copy header Options to CPU. */
    bcmSwitchTrillNameErrDrop = 599,    /* Set Drop setting for TRILL packets
                                           with Ingress-name equal to
                                           Egress-name. */
    bcmSwitchTrillRpfFailDrop = 600,    /* Set Drop setting for TRILL multicast
                                           packets that fail RPF check. */
    bcmSwitchTrillHeaderVersionErrDrop = 601, /* Set Drop Setting for TRILL frames
                                           received with a non-zero Version
                                           field. */
    bcmSwitchTrillNameMissDrop = 602,   /* Set Drop setting for TRILL Ingress
                                           RBridge nickname lookup failure. */
    bcmSwitchTrillAdjacencyFailDrop = 603, /* Set Drop setting for TRILL adjacency
                                           failure. */
    bcmSwitchTrillHeaderErrDrop = 604,  /* Set Drop Setting for TRILL header
                                           error. */
    bcmSwitchUdpPktActionEnable = 605,  /* Enable additional actions for UDP
                                           packets */
    bcmSwitchUdpPktRedirectPbmp = 606,  /* Replace the destination port bitmap
                                           of UDP packets */
    bcmSwitchUdpPktCopyToPbmp = 607,    /* Add the destination port bitmap of
                                           UDP packets */
    bcmSwitchUdpPktNewTc = 608,         /* Change the Traffic Class value of UDP
                                           packets */
    bcmSwitchL3TunnelIpV4ModeOnly = 609, /* Set L3 Tunnel to IPV4 mode only */
    bcmSwitchL3SrcHitEnable = 610,      /* Enables/Disables source hit bit
                                           lookup update in the L3 table */
    bcmSwitchL2DstHitEnable = 611,      /* Enables/Disables destination hit bit
                                           lookup update in the L2 table */
    bcmSwitchWESPProtocolEnable = 612,  /* Enables/Disables parsing into WESP
                                           payload */
    bcmSwitchWESPProtocol = 613,        /* WESP protocol number */
    bcmSwitchReservedMcastLearn = 614,  /* Enables/Disables source MAC address
                                           learning of reserved multicast
                                           packets */
    bcmSwitchIp6CompressEnable = 615,   /* Enables/Disables IPv6 compression
                                           support in the VFP table */
    bcmSwitchIp6CompressDefaultOffset = 616, /* Set the offset value used to extract
                                           26-bits from the IPv6 address field
                                           of IPv6 packet */
    bcmSwitchStableSaveLongIds = 617,   /* When saving FP information to storage
                                           for level-2 warm boot, save full
                                           entity ids (i.e. not compact) */
    bcmSwitchGportAnyDefaultL2Learn = 618, /* Set default cml_value for Any Gport
                                           type. */
    bcmSwitchGportAnyDefaultL2Move = 619, /* Set default cml_station_move value
                                           for Any Gport type */
    bcmSwitchIngParseL2TunnelTermDipSipSelect = 620, /* Controls the values used to populate
                                           the DIP+SIP containers for
                                           L2-tunnel-terminated packets */
    bcmSwitchIngParseL3L4IPv4 = 621,    /* Enable parsing of IPv4 L3/L4 headers */
    bcmSwitchIngParseL3L4IPv6 = 622,    /* Enable parsing of IPv6 L3/L4 headers */
    bcmSwitchL2LearnMode = 623,         /* Learning Mode */
    bcmSwitchSetWredJitterMask = 624,   /* Set WRED Jitter value */
    bcmSwitchSetMplsEntropyLabelTtl = 625, /* Set MPLS Entropy-Label TTL value */
    bcmSwitchSetMplsEntropyLabelPri = 626, /* Set MPLS Entropy-Label PRI value */
    bcmSwitchSetMplsEntropyLabelOffset = 627, /* Set MPLS Entropy-Label Hash Offset */
    bcmSwitchPonOamFailsafeState = 628, /* Enables/Disables MPCP fail safe */
    bcmSwitchEquipmentAlarmState = 629, /* Set equipment alarm report state */
    bcmSwitchPowerAlarmState = 630,     /* Set power alarm report state */
    bcmSwitchBatteryMissingAlarmState = 631, /* Set battery missing alarm report
                                           state */
    bcmSwitchBatteryFailureAlarmState = 632, /* Set battery failure alarm report
                                           state */
    bcmSwitchBatteryVoltLowAlarmState = 633, /* Set battery volt low alarm report
                                           state */
    bcmSwitchBatteryVoltLowAlarmReportThreshold = 634, /* Set battery volt low alarm report
                                           threshold */
    bcmSwitchBatteryVoltLowAlarmClearThreshold = 635, /* Set battery volt low alarm clear
                                           threshold */
    bcmSwitchPhysicalIntrusionAlarmState = 636, /* Set physical instrusion alarm report
                                           state */
    bcmSwitchSelfTestFailureAlarmState = 637, /* Set self test failure alarm report
                                           state */
    bcmSwitchPonIfSwitchAlarmState = 638, /* Set PON switchover alarm report state */
    bcmSwitchL3IngressInterfaceMapSet = 639, /* Enable mode to configure
                                           ingress-mapping of Vlan and L3
                                           Ingress Interface */
    bcmSwitchMplsPWControlWordToCpu = 640, /* Enable MPLS packets with PWACH
                                           control word, to be copied to CPU */
    bcmSwitchMplsPWControlTypeToCpu = 641, /* Enable MPLS packets with other
                                           control word, to be copied to CPU */
    bcmSwitchMplsPWControlWord = 642,   /* Set Control Word value */
    bcmSwitchMplsPWCountPktsAll = 643,  /* Enable count-all MPLS packets
                                           arriving on PWs */
    bcmSwitchEntropyHashSet0Offset = 644, /* Selection for MPLS-Entropy-Label hash
                                           bits. */
    bcmSwitchEntropyHashSet1Offset = 645, /* Selection for MPLS-Entropy-Label hash
                                           bits. */
    bcmSwitchArpRequestMyStationIPToCPU = 646, /* APR reply packets with My IP address
                                           should be sent to CPU. */
    bcmSwitchArpRequestMyStationIPDrop = 647, /* APR reply packets with My IP address
                                           should be dropped. */
    bcmSwitchArpRequestMyStationIPFwd = 648, /* APR reply packets with given IP
                                           address should not trapped/dropped. */
    bcmSwitchL3SIPMoveToCpu = 649, 
    bcmSwitchTrunkHashSrcPortEnable = 650, /* BCM886XX: Make Source port part of
                                           the hash. */
    bcmSwitchTrunkHashOffset = 651,     /* BCM886XX: Hash key is barrel shifted
                                           by this value */
    bcmSwitchTrunkHashMPLSLabelBOS = 652, /* In an mpls label stack, look for
                                           label with bottom of stack bit set.
                                           Valid values see
                                           BCM_HASH_MPLS_LABEL_BOS_ */
    bcmSwitchTrunkHashMPLSPWControlWord = 653, /* BCM886XX: Indicates control word is
                                           present at end of MPLS headers. */
    bcmSwitchTrunkHashSeed = 654,       /* BCM886XX: Initial seed value for
                                           trunk hashing. */
    bcmSwitchTrunkHashConfig = 655,     /* BCM886XX: Selects hashing polynomial. */
    bcmSwitchTrunkHashPktHeaderCount = 656, /* BCM886XX: Number of headers to
                                           consider in hashing. */
    bcmSwitchTrunkHashPktHeaderSelect = 657, /* BCM886XX: Selects which starting
                                           header to use for hashing. */
    bcmSwitchECMPHashSrcPortEnable = 658, /* BCM886XX: Make Source port part of
                                           the ECMP hash. */
    bcmSwitchECMPHashOffset = 659,      /* BCM886XX: ECMP Hash key is barrel
                                           shifted by this value. */
    bcmSwitchECMPHashSeed = 660,        /* BCM886XX: Initial seed value for ECMP
                                           hashing. */
    bcmSwitchECMPHashConfig = 661,      /* BCM886XX: Selects hashing polynomial
                                           for ECMP. */
    bcmSwitchECMPHashPktHeaderCount = 662, /* BCM886XX: Number of headers to
                                           consider in ECMP hashing. */
    bcmSwitchTrunkDynamicHashOffset = 663, /* Enhanced hash selections for trunk
                                           dynamic load balancing. */
    bcmSwitchTrunkDynamicSampleRate = 664, /* Number of times historical member
                                           load and queued bytes are computed in
                                           a second */
    bcmSwitchTrunkDynamicAccountingSelect = 665, /* 0 = physical link accounting, 1 =
                                           virtual link accounting */
    bcmSwitchTrunkDynamicEgressBytesExponent = 666, /* The exponent used in the calculation
                                           of exponentially weighted moving
                                           average of historical member load.
                                           Applicable to physical link
                                           accounting. */
    bcmSwitchTrunkDynamicQueuedBytesExponent = 667, /* The exponent used in the calculation
                                           of exponentially weighted moving
                                           average of historical member queued
                                           bytes. Applicable to physical link
                                           accounting. */
    bcmSwitchTrunkDynamicEgressBytesDecreaseReset = 668, /* If set, the historical member load is
                                           reset to the instantaneous value if
                                           the latter is smaller. Applicable to
                                           physical link accounting. */
    bcmSwitchTrunkDynamicQueuedBytesDecreaseReset = 669, /* If set, the historical member queued
                                           bytes is updated with the
                                           instantaneous value if the latter is
                                           smaller. Applicable to physical link
                                           accounting. */
    bcmSwitchTrunkDynamicEgressBytesMinThreshold = 670, /* The minimum threshold, in mbps, used
                                           to quantize historical member load.
                                           Applicable to physical link
                                           accounting. */
    bcmSwitchTrunkDynamicEgressBytesMaxThreshold = 671, /* The maximum threshold, in mbps, used
                                           to quantize historical member load.
                                           Applicable to physical link
                                           accounting. */
    bcmSwitchTrunkDynamicQueuedBytesMinThreshold = 672, /* The minimum threshold, in bytes, used
                                           to quantize historical member queued
                                           bytes. Applicable to physical link
                                           accounting. */
    bcmSwitchTrunkDynamicQueuedBytesMaxThreshold = 673, /* The maximum threshold, in bytes, used
                                           to quantize historical member queued
                                           bytes. Applicable to physical link
                                           accounting. */
    bcmSwitchTrunkDynamicExpectedLoadMinThreshold = 674, /* The minimum threshold, in mbps, used
                                           to quantize historical and
                                           instantaneous expected member load.
                                           Applicable to virtual link
                                           accounting. */
    bcmSwitchTrunkDynamicExpectedLoadMaxThreshold = 675, /* The maximum threshold, in mbps, used
                                           to quantize historical and
                                           instantaneous expected member load.
                                           Applicable to virtual link
                                           accounting. */
    bcmSwitchTrunkDynamicImbalanceMinThreshold = 676, /* The minimum threshold, in percentage,
                                           used to quantize historical and
                                           instantaneous member load imbalance.
                                           Applicable to virtual link
                                           accounting. */
    bcmSwitchTrunkDynamicImbalanceMaxThreshold = 677, /* The maximum threshold, in percentage,
                                           used to quantize historical and
                                           instantaneous member load imbalance.
                                           Applicable to virtual link
                                           accounting. */
    bcmSwitchEcmpDynamicHashOffset = 678, /* Enhanced hash selections for L3 ECMP
                                           dynamic load balancing. */
    bcmSwitchEcmpDynamicSampleRate = 679, /* Number of times historical member
                                           load and queued bytes are computed in
                                           a second */
    bcmSwitchEcmpDynamicAccountingSelect = 680, /* 0 = physical link accounting, 1 =
                                           virtual link accounting */
    bcmSwitchEcmpDynamicEgressBytesExponent = 681, /* The exponent used in the calculation
                                           of exponentially weighted moving
                                           average of historical member load.
                                           Applicable to physical link
                                           accounting. */
    bcmSwitchEcmpDynamicQueuedBytesExponent = 682, /* The exponent used in the calculation
                                           of exponentially weighted moving
                                           average of historical member queued
                                           bytes. Applicable to physical link
                                           accounting. */
    bcmSwitchEcmpDynamicEgressBytesDecreaseReset = 683, /* If set, the historical member load is
                                           reset to the instantaneous value if
                                           the latter is smaller. Applicable to
                                           physical link accounting. */
    bcmSwitchEcmpDynamicQueuedBytesDecreaseReset = 684, /* If set, the historical member queued
                                           bytes is updated with the
                                           instantaneous value if the latter is
                                           smaller. Applicable to physical link
                                           accounting. */
    bcmSwitchEcmpDynamicEgressBytesMinThreshold = 685, /* The minimum threshold, in mbps, used
                                           to quantize historical member load.
                                           Applicable to physical link
                                           accounting. */
    bcmSwitchEcmpDynamicEgressBytesMaxThreshold = 686, /* The maximum threshold, in mbps, used
                                           to quantize historical member load.
                                           Applicable to physical link
                                           accounting. */
    bcmSwitchEcmpDynamicQueuedBytesMinThreshold = 687, /* The minimum threshold, in bytes, used
                                           to quantize historical member queued
                                           bytes. Applicable to physical link
                                           accounting. */
    bcmSwitchEcmpDynamicQueuedBytesMaxThreshold = 688, /* The maximum threshold, in bytes, used
                                           to quantize historical member queued
                                           bytes. Applicable to physical link
                                           accounting. */
    bcmSwitchEcmpDynamicExpectedLoadMinThreshold = 689, /* The minimum threshold, in mbps, used
                                           to quantize historical and
                                           instantaneous expected member load.
                                           Applicable to virtual link
                                           accounting. */
    bcmSwitchEcmpDynamicExpectedLoadMaxThreshold = 690, /* The maximum threshold, in mbps, used
                                           to quantize historical and
                                           instantaneous expected member load.
                                           Applicable to virtual link
                                           accounting. */
    bcmSwitchEcmpDynamicImbalanceMinThreshold = 691, /* The minimum threshold, in percentage,
                                           used to quantize historical and
                                           instantaneous member load imbalance.
                                           Applicable to virtual link
                                           accounting. */
    bcmSwitchEcmpDynamicImbalanceMaxThreshold = 692, /* The maximum threshold, in percentage,
                                           used to quantize historical and
                                           instantaneous member load imbalance.
                                           Applicable to virtual link
                                           accounting. */
    bcmSwitchFailoverDropToCpu = 693,   /* Protection data drop to CPU enable. */
    bcmSwitchMplsReservedEntropyLabelToCpu = 694, /* Packet is copied to the CPU if the
                                           entropy label falls between the
                                           reserved range (0-15). */
    bcmSwitchL3SrcBindMissToCpu = 695,  /* Send a copy of L3 packet to CPU if
                                           SIP lookup fails in HPAE mode. */
    bcmSwitchMplsGalAlertLabelToCpu = 696, /* When a GAL label is exposed in a
                                           packet, such a packet will be
                                           dropped. This control determines
                                           whether such a packet gets copied to
                                           CPU. */
    bcmSwitchMplsRalAlertLabelToCpu = 697, /* When a RAL label is exposed in a
                                           packet, such a packet will be
                                           dropped. This control determines
                                           whether such a packet gets copied to
                                           CPU. */
    bcmSwitchMplsIllegalReservedLabelToCpu = 698, /* Exposed an illegal reserved label to
                                           CPU. For example, exposed GAL Label
                                           has BOS=0. */
    bcmSwitchMplsLookupsExceededToCpu = 699, /* Expose out of lookups to CPU */
    bcmSwitchMplsUnknownAchTypeToCpu = 700, /* Packet has an unknown ACH Type. */
    bcmSwitchMplsUnknownAchVersionToCpu = 701, /* The version number of ACH is not 1. */
    bcmSwitchTimesyncIngressVersion = 702, /* Ingress 1588 version 0:V2 1:>V2. */
    bcmSwitchTimesyncEgressVersion = 703, /* Egress 1588 version 0:V2 1:>V2. */
    bcmSwitchTimesyncUnknownVersionToCpu = 704, /* The version number is not recognized. */
    bcmSwitchCongestionCnmToCpu = 705,  /* Send ICNM packets to the CPU.
                                           (Deprecated) */
    bcmSwtichCongestionCnmProxyErrorToCpu = 706, /* Enable forwarding to CPU. */
    bcmSwtichCongestionCnmProxyToCpu = 707, /* This is to copy the dropped CNM
                                           packet to CPU if a network
                                           administrator needs to look at them. */
    bcmSwitchWlanTunnelErrorDrop = 708, /* WLAN Decryption offload enable. */
    bcmSwitchMplsReservedEntropyLabelDrop = 709, /* When the value of the received
                                           entropy label falls in the reserved
                                           range(0-15), this control will
                                           determine if the packet is dropped or
                                           not. */
    bcmSwitchRemoteProtectionTrust = 710, /* If set, use the Protection Status bit
                                           in the received HiGig Header. */
    bcmSwitchL2GreProtocolType = 711,   /* Set protocol-type for L2-GRE */
    bcmSwitchL2GreVpnIdSizeSet = 712,   /* Set bit-size of VPNID within L2-GRE
                                           key */
    bcmSwitchL2GreVpnIdMissToCpu = 713, /* If set, send a copy of L2GRE packet
                                           to CPU if VPNID lookup fails. */
    bcmSwitchL2GreTunnelMissToCpu = 714, /* If set, send a copy of L2GRE packet
                                           to CPU if SIP lookup fails. */
    bcmSwitchMultipathCompressBuffer = 715, /* Set the size of the L3 ECMP table
                                           defragmentation buffer. */
    bcmSwitchMultipathCompress = 716,   /* Defragment L3 ECMP table. */
    bcmSwitchBstEnable = 717,           /* Enable BST tracking. */
    bcmSwitchBstTrackingMode = 718,     /* BST resource usage tracking mode. */
    bcmSwitchL3McastL2 = 719,           /* if set to 0 then l2 key is <VID, DA>,
                                           if set to 1 then l2 key is <RIF/VID,
                                           DIP>. */
    bcmSwitchMiMTeBvidLowerRange = 720, /* Configure the lower limit for Traffic
                                           engineered BVID */
    bcmSwitchMiMTeBvidUpperRange = 721, /* Configure the upper limit for Traffic
                                           engineered BVID */
    bcmSwitchRemoteEncapsulationMode = 722, /* If set, all packet replication is
                                           performed on a remote device. 
                                           Required egress encapsulation is
                                           indicated by the Higig2 header. */
    bcmSwitchFabricTrunkAutoIncludeDisable = 723, /* If set, disable automatic inclusion
                                           of other members of a Higig trunk
                                           group when one member is specified as
                                           the steering destination for a remote
                                           module. */
    bcmSwitchTrunkHashNormalize = 724,  /* Enables using same hash in both
                                           directions of a flow. Applies to both
                                           MAC/IP addresses */
    bcmSwitchMplsLabelCache = 725,      /* Enable Mpls Label Cache */
    bcmSwitchMplsLabelCommit = 726,     /* Commit the MPLS Label Database to
                                           hardware */
    bcmSwitchTrillHopCount = 727,       /* Trill hop count */
    bcmSwitchPolicerFairness = 728,     /* if set, packet is considered in
                                           profile if bucket-level plus random
                                           value are above packet-size. If not
                                           set, packet is considered in profile
                                           if bucket-level is above packet-size. */
    bcmSwitchVxlanUdpDestPortSet = 729, /* Set UDP Destination port for VXLAN */
    bcmSwitchVxlanEntropyEnable = 730,  /* Set UDP Source port for VXLAN Tunnel
                                           Entropy(Value = TRUE/FALSE) */
    bcmSwitchVxlanVnIdMissToCpu = 731,  /* Set VXLAN VN_ID lookup failure Copy
                                           to Cpu */
    bcmSwitchVxlanTunnelMissToCpu = 732, /* If set, send a copy of VXLAN packet
                                           to CPU if VXLAN Tunnel lookup fails. */
    bcmSwitchECMPVxlanHashOffset = 733, /* Enhanced hash select for VxLAN ECMP
                                           hashing . */
    bcmSwitchECMPL2GreHashOffset = 734, /* Enhanced hash select for L2Gre ECMP
                                           hashing . */
    bcmSwitchECMPTrillHashOffset = 735, /* Enhanced hash select for Trill ECMP
                                           hashing . */
    bcmSwitchECMPMplsHashOffset = 736,  /* Enhanced hash select for Mpls ECMP
                                           hashing . */
    bcmSwitchVirtualPortDynamicHashOffset = 737, /* Enhanced hash select for Virtual Port
                                           Aggregation. */
    bcmSwitchTMDomain = 738,            /* Device TM-Domain. */
    bcmSwitchPortHeaderType = 739,      /* Sets TM Port header type. */
    bcmSwitchL2OverflowEvent = 740,     /* Enable/Disable L2 overflow event
                                           processing. */
    bcmSwitchLinkProvClear = 741,       /* Automatically clear provision for a
                                           link when it is de-registered. */
    bcmSwitchEtagEthertype = 742,       /* Set ethertype field in ETAG */
    bcmSwitchEtagInvalidToCpu = 743,    /* Invalid ETAG to CPU */
    bcmSwitchEtagDropToCpu = 744,       /* Packets dropped due to ETAG present
                                           to CPU. Enable/disable or set
                                           specific system port gport. */
    bcmSwitchNonEtagDropToCpu = 745,    /* Packets dropped due to ETAG not
                                           present to CPU */
    bcmSwitchExtenderRpfFailToCpu = 746, /* Extender RPF check fail to CPU */
    bcmSwitchExtenderInterfaceMissToCpu = 747, /* Extender forwarding lookup miss to
                                           CPU */
    bcmSwitchPrioDropToCpu = 748,       /* Priority admittance drop to CPU */
    bcmSwitchExtenderMulticastLowerThreshold = 749, /* Lower threshold of multicast extended
                                           port VID */
    bcmSwitchExtenderMulticastHigherThreshold = 750, /* Higher threshold of multicast
                                           extended port VID */
    bcmSwitchL3NATEnable = 751,         /* Enable/Disable NAT on the switch. */
    bcmSwitchL3DNATHairpinToCpu = 752,  /* If set send copy of DNAT hairpin
                                           packets to CPU. */
    bcmSwitchL3DNATMissToCpu = 753,     /* If set send copy of DNAT lookup miss
                                           packets to CPU. */
    bcmSwitchL3SNATMissToCpu = 754,     /* If set send copy of SNAT lookup miss
                                           packets to CPU. */
    bcmSwitchL3NatOtherToCpu = 755,     /* If set send copy of realm crossing
                                           non-TCP, UDP or ICMP packets to CPU. */
    bcmSwitchL3NatRealmCrossingIcmpToCpu = 756, /* If set send copy of realm crossing
                                           ICMP packets to CPU. */
    bcmSwitchL3NatFragmentsToCpu = 757, /* If set send copy of NAT fragment
                                           packets to CPU. */
    bcmSwitchHashL3DNATPool = 758,      /* Hash Select for DNAT address type
                                           entry. */
    bcmSwitchHashL3DNATPoolDual = 759,  /* Secondary Hash Select for DNAT
                                           address type entry. */
    bcmSwitchMcastTrunkHashMin = 760,   /* Minimal hushing value for a copy with
                                           a given port as destination. Copies
                                           with lower Hash values will be
                                           dropped. */
    bcmSwitchMcastTrunkHashMax = 761,   /* Maximal hushing value for a copy with
                                           a given port as destination. Copies
                                           with higher Hash values will be
                                           dropped. */
    bcmSwitchIp4Compress = 762,         /* compress IPv4 routing table. */
    bcmSwitchEcmpResilientHashOffset = 763, /* Enhanced hash select for ECMP
                                           resilient hashing . */
    bcmSwitchTrunkResilientHashOffset = 764, /* Enhanced hash select for LAG
                                           resilient hashing . */
    bcmSwitchFabricTrunkResilientHashOffset = 765, /* Enhanced hash select for Higig trunk
                                           resilient hashing . */
    bcmSwitchShaperAdjust = 766,        /* Meter/Rate control with overhead on
                                           wire accounted for per packet for
                                           EFP. */
    bcmSwitchHashVpVlanMemberIngress = 767, /* Select Hash algorithm for ingress vp
                                           vlan membership check. */
    bcmSwitchHashVpVlanMemberIngressDual = 768, /* Select secondary Hash algorithm for
                                           ingress vp vlan membership check. */
    bcmSwitchHashVpVlanMemberEgress = 769, /* Select Hash algorithm for Egress vp
                                           vlan membership check. */
    bcmSwitchHashVpVlanMemberEgressDual = 770, /* Select secondary Hash algorithm for
                                           Egress vp vlan membership check. */
    bcmSwitchHashL2Endpoint = 771,      /* Select hash algorithm for L2 Endpoint
                                           table. */
    bcmSwitchHashL2EndpointDual = 772,  /* Select secondary hash algorithm for
                                           L2 Endpoint table. */
    bcmSwitchHashEndpointQueueMap = 773, /* Select hash algorithm for Endpoint
                                           Queue Map table. */
    bcmSwitchHashEndpointQueueMapDual = 774, /* Select secondary hash algorithm for
                                           Endpoint Queue Map table. */
    bcmSwitchStackRouteHistoryBitmap1 = 775, /* Configures Stacking route history
                                           bitmap stamping according to port
                                           profile number 1. Uses for packet
                                           pruning in Stacking system. */
    bcmSwitchStackRouteHistoryBitmap2 = 776, /* Configures Stacking route history
                                           bitmap stamping according to port
                                           profile number 2. Uses for packet
                                           pruning in Stacking system. */
    bcmSwitchArpIPcheck = 777,          /* For ARP request, check if TPA is
                                           known. */
    bcmSwitchPPPoESessionParseEnable = 778, /* Enables the parser of PPPoE session
                                           packets. */
    bcmSwitchPPPoESessionEthertype = 779, /* Sets the Ethertype of PPPoE session
                                           packets. */
    bcmSwitchL2LearnLimitToCpu = 780,   /* Copy the frame to CPU once the learn
                                           limitation occurred due to the hash
                                           is full in L2 Table. */
    bcmSwitchFlexibleMirrorDestinations = 781, /* Enable configuration of the maximum
                                           number of mirror destinations. */
    bcmSwitchEcmpMacroFlowHashEnable = 782, /* Enable ECMP macro-flow hashing. */
    bcmSwitchOamVersionCheckDisable = 783, /* Disable version check for OAM packets
                                           in pipeline. */
    bcmSwitchOamOlpChipEtherType = 784, /* Ether Type to be used for OLP Chip
                                           communication. */
    bcmSwitchOamOlpChipTpid = 785,      /* TPID to be used for OLP Chip
                                           communication. */
    bcmSwitchOamOlpChipVlan = 786,      /* VLAN ID to be used for OLP Chip
                                           communication. */
    bcmSwitchPPPoESessionPktDscpRemarkEnable = 787, /* Enable the DSCP remark of PPPoE
                                           session packet. */
    bcmSwitchEgressKeepSystemHeader = 788, /* Keep system headers on Tx packets for
                                           a given port. */
    bcmSwitchMacroFlowEcmpHashConcatEnable = 789, /* Enable hash concatenation for ecmp
                                           macro flow. */
    bcmSwitchMacroFlowLoadBalanceHashConcatEnable = 790, /* Enable hash concatenation for Load
                                           balance macro flow. */
    bcmSwitchMacroFlowTrunkHashConcatEnable = 791, /* Enable hash concatenation for Trunk
                                           macro flow. */
    bcmSwitchMacroFlowHigigTrunkHashConcatEnable = 792, /* Enable hash concatenation for Higig
                                           Trunk macro flow. */
    bcmSwitchMacroFlowECMPHashSeed = 793, /* Set Hash seed for ecmp macro flow. */
    bcmSwitchMacroFlowLoadBalanceHashSeed = 794, /* Set Hash Seed for Load balance macro
                                           flow. */
    bcmSwitchMacroFlowTrunkHashSeed = 795, /* Set Hash Seed for Trunk macro flow. */
    bcmSwitchMacroFlowHigigTrunkHashSeed = 796, /* Set Hash Seed for Higig Trunk macro
                                           flow. */
    bcmSwitchHashTrillPayloadSelect0 = 797, /* Set hash control to select TRILL
                                           payload L2/L3 fields for Hash Block
                                           A. */
    bcmSwitchHashTrillPayloadSelect1 = 798, /* Set hash control to select TRILL
                                           payload L2/L3 fields for Hash Block
                                           B. */
    bcmSwitchHashTrillTunnelSelect0 = 799, /* Set hash control to select TRILL
                                           Tunnel L2/L3 fields for Hash Block A. */
    bcmSwitchHashTrillTunnelSelect1 = 800, /* Set hash control to select TRILL
                                           Tunnel L2/L3 fields for Hash Block B. */
    bcmSwitchHashIP6AddrCollapseSelect0 = 801, /* Hash Control to collapse IPV6
                                           addresses for hash block A. */
    bcmSwitchHashIP6AddrCollapseSelect1 = 802, /* Hash Control to collapse IPV6
                                           addresses for hash block B. */
    bcmSwitchPrependTagEnable = 803,    /* Enable Prepend tag per Port. */
    bcmSwitchHashL2VxlanField0 = 804,   /* Hash A Selection of L2 Payload for
                                           Vxlan Packets */
    bcmSwitchHashL2VxlanField1 = 805,   /* Hash B Selection of L2 Payload for
                                           Vxlan Packets */
    bcmSwitchHashL3VxlanField0 = 806,   /* Hash A Selection of L3 Payload for
                                           Vxlan Packets */
    bcmSwitchHashL3VxlanField1 = 807,   /* Hash B Selection of L3 Payload for
                                           Vxlan Packets */
    bcmSwitchHashL2L2GreField0 = 808,   /* Hash A Selection of L2 Payload for
                                           L2Gre Packets */
    bcmSwitchHashL2L2GreField1 = 809,   /* Hash B Selection of L2 Payload for
                                           L2Gre Packets */
    bcmSwitchHashL3L2GreField0 = 810,   /* Hash A Selection of L3 Payload for
                                           L2Gre Packets */
    bcmSwitchHashL3L2GreField1 = 811,   /* Hash B Selection of L3 Payload for
                                           L2Gre Packets */
    bcmSwitchMcastTrunkIngressCommit = 812, /* If set, the Multicast LAG packets use
                                           the new LAG table definition for the
                                           member resolution. */
    bcmSwitchMcastTrunkEgressCommit = 813, /* If set, the new Multicast LAG table
                                           is copied to the old one. It assumes
                                           that all the devices are using the
                                           new LAG table, after calling
                                           bcmSwitchMcastTrunkIngressCommit. */
    bcmSwitchMplsShortPipe = 814,       /* If Set device supports Short pipe
                                           only. Otherwise Pipe only. */
    bcmSwitchTraverseMode = 815,        /* Control the traverse mode, choose
                                           mode from
                                           bcm_switch_table_update_mode_t */
    bcmSwitchResilientHashConfig = 816, /* Stateful hashing function */
    bcmSwitchTrunkResilientHashSeed = 817, /* Resilient ECMP hashing seed */
    bcmSwitchECMPResilientHashSeed = 818, /* ECMP hashing seed */
    bcmSwitchResilientHashAgeTimer = 819, /* Resilient hash entry deletion time.
                                           Units: seconds */
    bcmSwitchFieldStageEgressToCpu = 820, /* Control to enable egress copy to cpu
                                           action */
    bcmSwitchHashOamEgress = 821,       /* Hash Select for egress OAM. */
    bcmSwitchHashOamEgressDual = 822,   /* Secondary Hash Select for egress OAM. */
    bcmSwitchColorL3L2Marking = 823,    /* Set the DP->Resolved-DP map (COS
                                           marking) */
    bcmSwitchWredForAllPkts = 824,      /* Apply WRED per color profiles on all
                                           packets */
    bcmSwitchFcoeNpvModeEnable = 825,   /* NPV mode */
    bcmSwitchFcoeDomainRoutePrefixLength = 826, /* D-ID Bits to use for domain route
                                           search */
    bcmSwitchFcoeCutThroughEnable = 827, /* Enables Cut-Through mode for FCOE
                                           packets */
    bcmSwitchFcoeSourceBindCheckAction = 828, /* Sets the action to take when
                                           Source-bind-check fails */
    bcmSwitchFcoeSourceFpmaPrefixCheckAction = 829, /* Sets the action to take when
                                           Source-fpma-prefix-check fails */
    bcmSwitchFcoeVftHopCountExpiryToCpu = 830, /* If set, copy hopcount expired packets
                                           to CPU */
    bcmSwitchFcoeVftHopCountExpiryAction = 831, /* If set, send hopcount expired packets
                                           with EOFni in FC trailer. Applicable
                                           at egress. */
    bcmSwitchFcoeFcEofT1Value = 832,    /* Sets the numerical value for EOFt */
    bcmSwitchFcoeFcEofT2Value = 833,    /* Sets the numerical value for EOFt
                                           (alternate) */
    bcmSwitchFcoeFcEofA1Value = 834,    /* Sets the numerical value for EOFa */
    bcmSwitchFcoeFcEofA2Value = 835,    /* Sets the numerical value for EOFa
                                           (alternate) */
    bcmSwitchFcoeFcEofN1Value = 836,    /* Sets the numerical value for EOFn */
    bcmSwitchFcoeFcEofN2Value = 837,    /* Sets the numerical value for EOFn
                                           (alternate) */
    bcmSwitchFcoeFcEofNI1Value = 838,   /* Sets the numerical value for EOFni */
    bcmSwitchFcoeFcEofNI2Value = 839,   /* Sets the numerical value for EOFni
                                           (alternate) */
    bcmSwitchFcoeZoneCheckFailToCpu = 840, /* Action to take when FCOE zone check
                                           fails, 0 : no-op(default), 1 :
                                           Copy-to-Cpu */
    bcmSwitchFcoeZoneCheckMissDrop = 841, /* Action to take when FCOE zone check
                                           is a miss, 0 : no-op, 1 :
                                           Drop(default) */
    bcmSwitchHashUseL2GreTunnelGreKey0 = 842, /* Place the GRE key extracted from
                                           L2GRE pkt header in Hash A buckets */
    bcmSwitchHashUseL2GreTunnelGreKey1 = 843, /* Place the GRE key extracted from
                                           L2GRE pkt header in Hash B buckets */
    bcmSwitchHashL2GrePayloadSelect0 = 844, /* Select inner L2/L3 fields to derive
                                           the Hash A buckets when an L2GRE pkt
                                           is received and the L2GRE tunnel is
                                           being terminated */
    bcmSwitchHashL2GrePayloadSelect1 = 845, /* Select inner L2/L3 fields to derive
                                           the Hash B buckets when an L2GRE pkt
                                           is received and the L2GRE tunnel is
                                           being terminated */
    bcmSwitchHashL2GreNetworkPortPayloadDisable0 = 846, /* Disable using the l2gre payload for
                                           hashing, for L2Gre pkts */
    bcmSwitchHashL2GreNetworkPortPayloadDisable1 = 847, /* Disable using the l2gre payload for
                                           hashing, for L2Gre pkts */
    bcmSwitchSystemReservedVlan = 848,  /* System Reserved VLAN */
    bcmSwitchProxySrcKnockout = 849,    /* If set, remove the source port during
                                           a proxy lookup operation of a packet
                                           which originated on this module. */
    bcmSwitchNetworkGroupDepth = 850,   /* Number of split horizon groups
                                           supported by the device */
    bcmSwitchUnknownSubportPktTagToCpu = 851, /* If set, send packet to CPU on
                                           following error conditions a. missing
                                           subport pkt tag and b. unknown
                                           subport pkt tag (lookup miss). */
    bcmSwitchL3RoutedLearn = 852,       /* enable L2 learning for routed
                                           packets. */
    bcmSwitchSubportPktTagEthertype = 853, /* Set ethertype field in LLTAG */
    bcmSwitchSubportPktTagToCpu = 854,  /* LLTAG present to CPU */
    bcmSwitchNonSubportPktTagToCpu = 855, /* LLTAG not present to CPU */
    bcmSwitchHashL2GreKeyMask0 = 856,   /* Set the mask which is AND-ed with
                                           hash L2GRE key before hash generation
                                           for hash A */
    bcmSwitchHashL2GreKeyMask1 = 857,   /* Set the mask which is AND-ed with
                                           hash L2GRE key before hash generation
                                           for hash B */
    bcmSwitchL3Max128BV6Entries = 858,  /* Max number of Number of 128B LPM
                                           entries. */
    bcmSwitchEEEQueueThresholdProfile0 = 859, /* Set EEE BB mode queue depth threshold
                                           Profile 0 */
    bcmSwitchEEEQueueThresholdProfile1 = 860, /* Set EEE BB mode queue depth threshold
                                           Profile 1 */
    bcmSwitchEEEQueueThresholdProfile2 = 861, /* Set EEE BB mode queue depth threshold
                                           Profile 2 */
    bcmSwitchEEEQueueThresholdProfile3 = 862, /* Set EEE BB mode queue depth threshold
                                           Profile 3 */
    bcmSwitchEEEPacketLatencyProfile0 = 863, /* Set EEE BB mode packet max latency
                                           Profile 0 */
    bcmSwitchEEEPacketLatencyProfile1 = 864, /* Set EEE BB mode packet max latency
                                           Profile 1 */
    bcmSwitchEEEPacketLatencyProfile2 = 865, /* Set EEE BB mode packet max latency
                                           Profile 2 */
    bcmSwitchEEEPacketLatencyProfile3 = 866, /* Set EEE BB mode packet max latency
                                           Profile 3 */
    bcmSwitchDosAttackV6MinFragEnable = 867, /* Enable Min pkt size check for
                                           fragmented IPv6. */
    bcmSwitchDosAttackV6MinFragSize = 868, /* Min pkt size for fragmented IPv6
                                           check. */
    bcmSwitchMirrorUnicastCosq = 869,   /* Unicast mirror COS. */
    bcmSwitchMirrorMulticastCosq = 870, /* Multicast mirror COS. */
    bcmSwitchMcQueueSchedMode = 871,    /* Schedule mode select for multicast
                                           queues. */
    bcmSwitchReserved872 = 872,         /* Reserved. */
    bcmSwitchCacheTableUpdateAll = 873, /* Update all cached memories. */
    bcmSwitchHashNivSrcIfEtagSvidSelect0 = 874, /* Select VN-TAG.src_vif or E-Tag.svid
                                           for hashing computation in Hash A
                                           buckets. */
    bcmSwitchHashNivSrcIfEtagSvidSelect1 = 875, /* Select VN-TAG.src_vif or E-Tag.svid
                                           for hashing computation in Hash B
                                           buckets. */
    bcmSwitchHashNivDstIfEtagVidSelect0 = 876, /* Select VN-TAG.dst_vif or E-Tag.vid
                                           for hashing computation in Hash A
                                           buckets. */
    bcmSwitchHashNivDstIfEtagVidSelect1 = 877, /* Select VN-TAG.dst_vif or E-Tag.vid
                                           for hashing computation in Hash B
                                           buckets. */
    bcmSwitchBstSnapshotEnable = 878,   /* BST resource usage SnapShot mode. */
    bcmSwitchSymmetricHashControl = 879, /* Enable/Disable symmetric hash, for
                                           Ip4, Ip6, FCoE packet, etc. */
    bcmSwitchL2ExtLearn = 880,          /* Learn L2 addresses on EXT_L2_ENTRY */
    bcmSwitchReserveHighTunnelId = 881, /* Set the highest inclusive bounds of
                                           the Tunnel ID resources.  Get will
                                           return the highest value supported by
                                           the device.  Setting 0 will remove
                                           the reserved range */
    bcmSwitchReserveLowTunnelId = 882,  /* Set the lower inclusive bounds of the
                                           Tunnel ID resources.  Get will return
                                           the lowest value supported by the
                                           device.  Setting 0 will remove the
                                           reserved range */
    bcmSwitchHigigCongestionClassEnable = 883, /* Enable the Congestion_Class field in
                                           HIGIG2 header to store the int_cn
                                           value in it. */
    bcmSwitchEcnNonIpResponsive = 884,  /* Set the default responsive indication
                                           value for NON-IP packets. */
    bcmSwitchEcnNonIpIntCongestionNotification = 885, /* Set the internal congestion
                                           notification (int_cn) value for
                                           NON-IP packets. */
    bcmSwitchMimPayloadTpidEnable = 886, /* Indicates which of MPLS_TPID[3:0] are
                                           allowed to match the TPID of a
                                           transit MinM frame's payload L2
                                           header's outer VLAN tag. */
    bcmSwitchHashMimUseTunnelHeader0 = 887, /* Indicates whether the tunnel or
                                           payload fields must be used for
                                           hashing for MIM traffic in field
                                           selection block A. */
    bcmSwitchHashMimUseTunnelHeader1 = 888, /* Indicates whether the tunnel or
                                           payload fields must be used for
                                           hashing for MIM traffic in field
                                           selection block B. */
    bcmSwitchMplsPipeTunnelLabelExpSet = 889, /* If set, MPLS pipe modes is supported
                                           with EXP field set. In this case exp
                                           is taken from the exp field in
                                           bcm_mpls_egress_label_s struct in the
                                           bcm_mpls_port_add api. Otherwise EXP
                                           field will be copied from previous
                                           label. Default is 0. */
    bcmSwitchControlPortConfigInstall = 890, /* Port config install. */
    bcmSwitchLoopbackMtuSize = 891,     /* MTU size in bytes check for packets
                                           ingressed on loopback port. */
    bcmSwitchHashVxlanPayloadSelect0 = 892, /* Set hash control to select VXLAN
                                           payload L2/L3 fields for Hash Block
                                           A. */
    bcmSwitchHashVxlanPayloadSelect1 = 893, /* Set hash control to select VXLAN
                                           payload L2/L3 fields for Hash Block
                                           B. */
    bcmSwitchCongestionCnmSrcMacNonOui = 894, /* Source MAC address in Congestion
                                           Notification Message Lower 3 bytes of
                                           MAC address to match */
    bcmSwitchCongestionCnmSrcMacOui = 895, /* Source MAC address in Congestion
                                           Notification Message Upper 3 bytes of
                                           MAC address to match */
    bcmSwitch__Count = 896              /* Must be last.  Not a usable value. */
} bcm_switch_control_t;

#define BCM_SWITCH_CONTROL_STR \
    "HgHdrErrToCpu", \
    "ClassTagPacketsToCpu", \
    "IpmcTunnelToCpu", \
    "StationMoveOverLearnLimitToCpu", \
    "McastUnknownErrToCpu", \
    "LearnLimitPriority", \
    "ControlOpcodePriority", \
    "CpuProtoBpduPriority", \
    "CpuProtoArpPriority", \
    "CpuProtoIgmpPriority", \
    "CpuProtoDhcpPriority", \
    "CpuProtoIpmcReservedPriority", \
    "CpuProtoIpOptionsPriority", \
    "CpuProtoExceptionsPriority", \
    "CpuProtocolPrio", \
    "CpuUnknownPrio", \
    "CpuSamplePrio", \
    "CpuDefaultPrio", \
    "L2StaticMoveToCpu", \
    "UnknownIpmcToCpu", \
    "UnknownMcastToCpu", \
    "UnknownUcastToCpu", \
    "NonIpL3ErrToCpu", \
    "L3HeaderErrToCpu", \
    "UnknownVlanToCpu", \
    "UnknownL3SrcToCpu", \
    "UnknownL3DestToCpu", \
    "IpmcPortMissToCpu", \
    "IpmcErrorToCpu", \
    "VCLabelMissToCpu", \
    "SourceRouteToCpu", \
    "SampleIngressRandomSeed", \
    "SampleEgressRandomSeed", \
    "CpuFpCopyPrio", \
    "CpuIcmpRedirectPrio", \
    "CpuMtuFailPrio", \
    "CpuMirrorPrio", \
    "CpuLookupFpCopyPrio", \
    "L2NonStaticMoveToCpu", \
    "V6L3ErrToCpu", \
    "V6L3DstMissToCpu", \
    "V6L3LocalLinkDrop", \
    "V4L3ErrToCpu", \
    "V4L3DstMissToCpu", \
    "TunnelErrToCpu", \
    "MartianAddrToCpu", \
    "MartianAddr", \
    "L3UcTtlErrToCpu", \
    "L3SlowpathToCpu", \
    "IpmcTtlErrToCpu", \
    "DosAttackToCpu", \
    "DosAttackSipEqualDip", \
    "DosAttackMinTcpHdrSize", \
    "DosAttackV4FirstFrag", \
    "DosAttackTcpFlags", \
    "DosAttackL4Port", \
    "DosAttackTcpFrag", \
    "DosAttackIcmp", \
    "DosAttackIcmpV4", \
    "DosAttackIcmpV6", \
    "DosAttackIcmpPktOversize", \
    "DosAttackMACSAEqualMACDA", \
    "DosAttackIcmpV6PingSize", \
    "DosAttackIcmpFragments", \
    "DosAttackTcpOffset", \
    "DosAttackUdpPortsEqual", \
    "DosAttackTcpPortsEqual", \
    "DosAttackTcpFlagsSF", \
    "DosAttackTcpFlagsFUP", \
    "DosAttackTcpHdrPartial", \
    "DosAttackPingFlood", \
    "DosAttackSynFlood", \
    "DosAttackTcpSmurf", \
    "DosAttackTcpXMas", \
    "DosAttackL3Header", \
    "IcmpRedirectToCpu", \
    "MplsSequenceErrToCpu", \
    "MplsLabelMissToCpu", \
    "MplsTtlErrToCpu", \
    "MplsInvalidL3PayloadToCpu", \
    "MplsInvalidActionToCpu", \
    "SharedVlanMismatchToCpu", \
    "L3SrcUrpfErrToCpu", \
    "GreKeyToVlan", \
    "ArpReplyToCpu", \
    "ArpReplyDrop", \
    "ArpRequestToCpu", \
    "ArpRequestDrop", \
    "ArpReplyMyStationL2ToCPU", \
    "NdPktToCpu", \
    "NdPktDrop", \
    "McastFloodBlocking", \
    "IgmpPktToCpu", \
    "IgmpPktDrop", \
    "DhcpPktToCpu", \
    "DhcpPktDrop", \
    "MldPktToCpu", \
    "MldPktDrop", \
    "V4ResvdMcPktToCpu", \
    "V4ResvdMcPktDrop", \
    "V4ResvdMcPktFlood", \
    "V6ResvdMcPktToCpu", \
    "V6ResvdMcPktDrop", \
    "V6ResvdMcPktFlood", \
    "IgmpReportLeaveToCpu", \
    "IgmpReportLeaveDrop", \
    "IgmpReportLeaveFlood", \
    "IgmpQueryToCpu", \
    "IgmpQueryDrop", \
    "IgmpQueryFlood", \
    "IgmpUnknownToCpu", \
    "IgmpUnknownDrop", \
    "IgmpUnknownFlood", \
    "MldReportDoneToCpu", \
    "MldReportDoneDrop", \
    "MldReportDoneFlood", \
    "MldQueryToCpu", \
    "MldQueryDrop", \
    "MldQueryFlood", \
    "IpmcV4RouterDiscoveryToCpu", \
    "IpmcV4RouterDiscoveryDrop", \
    "IpmcV4RouterDiscoveryFlood", \
    "IpmcV6RouterDiscoveryToCpu", \
    "IpmcV6RouterDiscoveryDrop", \
    "IpmcV6RouterDiscoveryFlood", \
    "DirectedMirroring", \
    "PktAge", \
    "McastFloodDefault", \
    "ParityErrorToCpu", \
    "L3MtuFailToCpu", \
    "MeterAdjust", \
    "CounterAdjust", \
    "MeterAdjustInterframeGap", \
    "HashL2", \
    "HashL3", \
    "HashMultipath", \
    "HashControl", \
    "FieldMultipathHashSelect", \
    "FieldMultipathHashSeed", \
    "MirrorStackMode", \
    "MirrorSrcModCheck", \
    "MirrorUnmarked", \
    "DestPortHGTrunk", \
    "ColorSelect", \
    "ModuleLoopback", \
    "SrcModBlockMirrorCopy", \
    "SrcModBlockMirrorOnly", \
    "HashSeed0", \
    "HashSeed1", \
    "HashField0PreProcessEnable", \
    "HashField1PreProcessEnable", \
    "HashField0Config", \
    "HashField0Config1", \
    "HashField1Config", \
    "HashField1Config1", \
    "MacroFlowHashFieldConfig", \
    "HashSelectControl", \
    "HashIP4Field0", \
    "HashIP4Field1", \
    "HashIP4TcpUdpField0", \
    "HashIP4TcpUdpField1", \
    "HashIP4TcpUdpPortsEqualField0", \
    "HashIP4TcpUdpPortsEqualField1", \
    "HashIP6Field0", \
    "HashIP6Field1", \
    "HashIP6TcpUdpField0", \
    "HashIP6TcpUdpField1", \
    "HashIP6TcpUdpPortsEqualField0", \
    "HashIP6TcpUdpPortsEqualField1", \
    "HashL2Field0", \
    "HashL2Field1", \
    "HashMPLSField0", \
    "HashMPLSField1", \
    "HashFCOEField0", \
    "HashFCOEField1", \
    "HashL2TrillField0", \
    "HashL2TrillField1", \
    "HashL3TrillField0", \
    "HashL3TrillField1", \
    "HashTrillTunnelField0", \
    "HashTrillTunnelField1", \
    "HashHG2UnknownField0", \
    "HashHG2UnknownField1", \
    "HashField0OverlayCntagRpidEnable", \
    "HashField1OverlayCntagRpidEnable", \
    "HashHg2PktFieldsEnable", \
    "HashField0Ip6FlowLabel", \
    "HashField1Ip6FlowLabel", \
    "HashUseFlowSelTrunkUc", \
    "HashUseFlowSelEcmp", \
    "TrunkHashSet0UnicastOffset", \
    "TrunkHashSet1UnicastOffset", \
    "TrunkHashSet0NonUnicastOffset", \
    "TrunkHashSet1NonUnicastOffset", \
    "TrunkFailoverHashOffset", \
    "FabricTrunkHashSet0UnicastOffset", \
    "FabricTrunkHashSet1UnicastOffset", \
    "FabricTrunkHashSet0NonUnicastOffset", \
    "FabricTrunkHashSet1NonUnicastOffset", \
    "FabricTrunkFailoverHashOffset", \
    "FabricTrunkDynamicHashOffset", \
    "LoadBalanceHashSet0UnicastOffset", \
    "LoadBalanceHashSet1UnicastOffset", \
    "LoadBalanceHashSet0NonUnicastOffset", \
    "LoadBalanceHashSet1NonUnicastOffset", \
    "MacroFlowHashMinOffset", \
    "MacroFlowHashMaxOffset", \
    "MacroFlowHashStrideOffset", \
    "UniformUcastTrunkDistribution", \
    "UniformFabricTrunkDistribution", \
    "ECMPHashSet0Offset", \
    "ECMPHashSet1Offset", \
    "CpuToCpuEnable", \
    "IgmpUcastEnable", \
    "MldUcastEnable", \
    "IgmpReservedMcastEnable", \
    "MldReservedMcastEnable", \
    "MldDirectAttachedOnly", \
    "PortEgressBlockL2", \
    "PortEgressBlockL3", \
    "BpduInvalidVlanDrop", \
    "MirrorInvalidVlanDrop", \
    "MirrorPktChecksEnable", \
    "RemoteLearnTrust", \
    "SourceMacZeroDrop", \
    "IpmcGroupMtu", \
    "ModuleType", \
    "BpduToCPU", \
    "8021xToCPU", \
    "BcstToCPU", \
    "L3EgressMode", \
    "L3DefipMultipathCountUpdate", \
    "L3IngressMode", \
    "L3HostAsRouteReturnValue", \
    "SourceModBlockUcast", \
    "SourceModBlockControlOpcode", \
    "EgressBlockUcast", \
    "AlternateStoreForward", \
    "WarmBoot", \
    "StableSelect", \
    "StableSize", \
    "StableUsed", \
    "StableConsistent", \
    "ControlSync", \
    "ControlAutoSync", \
    "CallbackAbortOnError", \
    "UnknownIpmcAsMcast", \
    "TunnelUnknownIpmcDrop", \
    "DhcpLearn", \
    "IpmcTtl1ToCpu", \
    "L3UcastTtl1ToCpu", \
    "DosAttackFlagZeroSeqZero", \
    "HgHdrExtLengthEnable", \
    "DosAttackSynFrag", \
    "Ip4McastL2DestCheck", \
    "Ip6McastL2DestCheck", \
    "L3InterfaceUrpfEnable", \
    "L3TunnelUrpfMode", \
    "L3TunnelUrpfDefaultRoute", \
    "L3UrpfFailToCpu", \
    "L3UrpfRouteEnable", \
    "L3UrpfRouteEnableExternal", \
    "L3UrpfMode", \
    "L3UrpfDefaultRoute", \
    "IngressRateLimitIncludeIFG", \
    "RateLimitLinear", \
    "HashL2Dual", \
    "HashL3Dual", \
    "HashDualMoveDepth", \
    "HashDualMoveDepthL2", \
    "HashDualMoveDepthL3", \
    "HashDualMoveDepthVlan", \
    "HashDualMoveDepthMpls", \
    "HashDualMoveDepthEgressVlan", \
    "HashDualMoveDepthWlanPort", \
    "HashDualMoveDepthWlanClient", \
    "HashMultiMoveDepth", \
    "HashMultiMoveDepthL2", \
    "HashMultiMoveDepthL3", \
    "HashMultiMoveDepthVlan", \
    "HashMultiMoveDepthMpls", \
    "HashMultiMoveDepthEgressVlan", \
    "HashL2DualLeastFull", \
    "HashL3DualLeastFull", \
    "HashMPLSDualLeastFull", \
    "SharedVlanEnable", \
    "SharedVlanL2McastEnable", \
    "IpmcReplicationSharing", \
    "IpmcReplicationAvailabilityThreshold", \
    "VrfMax", \
    "FailoverStackTrunk", \
    "FailoverEtherTrunk", \
    "ClassBasedMoveFailPktToCpu", \
    "ClassBasedMoveFailPktDrop", \
    "HgHdrMcastFlood", \
    "HgHdrMcastFloodOverride", \
    "HgHdrIpMcastFlood", \
    "HgHdrIpMcastFloodOverride", \
    "STPBlockedFieldBypass", \
    "L2PortBlocking", \
    "HashIpfixIngress", \
    "HashIpfixIngressDual", \
    "HashIpfixEgress", \
    "HashIpfixEgressDual", \
    "HashMPLS", \
    "HashMPLSDual", \
    "ForceForwardFabricTrunk", \
    "UseGport", \
    "HgHdrMcastVlanRange", \
    "HgHdrMcastL2Range", \
    "HgHdrMcastL3Range", \
    "McastL2Range", \
    "McastL3Range", \
    "HashWlanPort", \
    "HashWlanPortDual", \
    "HashWlanClient", \
    "HashWlanClientDual", \
    "WlanClientAuthorizeAll", \
    "WlanClientUnauthToCpu", \
    "WlanClientRoamedOutErrorToCpu", \
    "WlanClientSrcMacMissToCpu", \
    "WlanClientDstMacMissToCpu", \
    "OamHeaderErrorToCpu", \
    "OamUnknownVersionToCpu", \
    "OamUnknownVersionDrop", \
    "OamUnexpectedPktToCpu", \
    "OamCcmToCpu", \
    "OamXconCcmToCpu", \
    "OamXconOtherToCpu", \
    "L3SrcBindFailToCpu", \
    "TunnelIp4IdShared", \
    "HashRegexAction", \
    "HashRegexActionDual", \
    "KeepEgressRtHdr", \
    "CpuCopyDestination", \
    "CpuProtoTimeSyncPrio", \
    "CpuProtoMmrpPrio", \
    "CpuProtoSrpPrio", \
    "TimeSyncPktToCpu", \
    "TimeSyncPktDrop", \
    "TimeSyncPktFlood", \
    "MmrpPktToCpu", \
    "MmrpPktDrop", \
    "MmrpPktFlood", \
    "SrpPktToCpu", \
    "SrpPktDrop", \
    "SrpPktFlood", \
    "SRPEthertype", \
    "MMRPEthertype", \
    "TimeSyncEthertype", \
    "FcoeEtherType", \
    "SRPDestMacOui", \
    "MMRPDestMacOui", \
    "TimeSyncDestMacOui", \
    "SRPDestMacNonOui", \
    "MMRPDestMacNonOui", \
    "TimeSyncDestMacNonOui", \
    "TimeSyncMessageTypeBitmap", \
    "TimeSyncClassAPktPrio", \
    "TimeSyncClassBPktPrio", \
    "TimeSyncClassAExeptionPktPrio", \
    "TimeSyncClassBExeptionPktPrio", \
    "L2McastAllRouterPortsAddEnable", \
    "BypassMode", \
    "IpmcSameVlanL3Route", \
    "AutoQueues", \
    "FieldCache", \
    "FieldCommit", \
    "IpmcCache", \
    "IpmcCommit", \
    "L2Cache", \
    "L2Commit", \
    "L2AgeDelete", \
    "L2AgeScan", \
    "L3HostCache", \
    "L3HostCommit", \
    "L3RouteCache", \
    "L3RouteCommit", \
    "L2InvalidCtlToCpu", \
    "InvalidGreToCpu", \
    "HashL2MPLSField0", \
    "HashL2MPLSField1", \
    "HashL3MPLSField0", \
    "HashL3MPLSField1", \
    "HashMPLSTunnelField0", \
    "HashMPLSTunnelField1", \
    "HashMIMTunnelField0", \
    "HashMIMTunnelField1", \
    "HashMIMField0", \
    "HashMIMField1", \
    "StgInvalidToCpu", \
    "VlanTranslateEgressMissToCpu", \
    "L3PktErrToCpu", \
    "MtuFailureToCpu", \
    "SrcKnockoutToCpu", \
    "WlanTunnelMismatchToCpu", \
    "WlanTunnelMismatchDrop", \
    "WlanPortMissToCpu", \
    "UnknownVlanToCpuCosq", \
    "StgInvalidToCpuCosq", \
    "VlanTranslateEgressMissToCpuCosq", \
    "TunnelErrToCpuCosq", \
    "L3HeaderErrToCpuCosq", \
    "L3PktErrToCpuCosq", \
    "IpmcTtlErrToCpuCosq", \
    "MtuFailureToCpuCosq", \
    "HgHdrErrToCpuCosq", \
    "SrcKnockoutToCpuCosq", \
    "WlanTunnelMismatchToCpuCosq", \
    "WlanPortMissToCpuCosq", \
    "IpfixRateViolationDataInsert", \
    "IpfixRateViolationPersistent", \
    "HashVlanTranslate", \
    "HashVlanTranslateDual", \
    "HashEgressVlanTranslate", \
    "HashEgressVlanTranslateDual", \
    "LayeredQoSResolution", \
    "CustomerQueuing", \
    "CosqStatThreshold", \
    "CosqStatInterval", \
    "EncapErrorToCpu", \
    "MplsPortIndependentLowerRange1", \
    "MplsPortIndependentUpperRange1", \
    "MplsPortIndependentLowerRange2", \
    "MplsPortIndependentUpperRange2", \
    "MirrorEgressTrueColorSelect", \
    "MirrorEgressTruePriority", \
    "PFCClass0Queue", \
    "PFCClass1Queue", \
    "PFCClass2Queue", \
    "PFCClass3Queue", \
    "PFCClass4Queue", \
    "PFCClass5Queue", \
    "PFCClass6Queue", \
    "PFCClass7Queue", \
    "PFCClass0McastQueue", \
    "PFCClass1McastQueue", \
    "PFCClass2McastQueue", \
    "PFCClass3McastQueue", \
    "PFCClass4McastQueue", \
    "PFCClass5McastQueue", \
    "PFCClass6McastQueue", \
    "PFCClass7McastQueue", \
    "PFCClass0DestmodQueue", \
    "PFCClass1DestmodQueue", \
    "PFCClass2DestmodQueue", \
    "PFCClass3DestmodQueue", \
    "PFCClass4DestmodQueue", \
    "PFCClass5DestmodQueue", \
    "PFCClass6DestmodQueue", \
    "PFCClass7DestmodQueue", \
    "PFCQueue0Class", \
    "PFCQueue1Class", \
    "PFCQueue2Class", \
    "PFCQueue3Class", \
    "PFCQueue4Class", \
    "PFCQueue5Class", \
    "PFCQueue6Class", \
    "PFCQueue7Class", \
    "ReserveLowL3InterfaceId", \
    "ReserveHighL3InterfaceId", \
    "ReserveLowL3EgressId", \
    "ReserveHighL3EgressId", \
    "ReserveLowVlanPort", \
    "ReserveHighVlanPort", \
    "ReserveLowMplsPort", \
    "ReserveHighMplsPort", \
    "ReserveLowMimPort", \
    "ReserveHighMimPort", \
    "ReserveLowEncap", \
    "ReserveHighEncap", \
    "ReserveLowL2Egress", \
    "ReserveHighL2Egress", \
    "ReserveLowVpn", \
    "ReserveHighVpn", \
    "ReserveLowFailoverId", \
    "ReserveHighFailoverId", \
    "ReserveLowOamEndPointId", \
    "ReserveHighOamEndPointId", \
    "ReserveLowOamGroupId", \
    "ReserveHighOamGroupId", \
    "SnapNonZeroOui", \
    "SynchronousPortClockSource", \
    "SynchronousPortClockSourceBkup", \
    "SynchronousPortClockSourceDivCtrl", \
    "SynchronousPortClockSourceBkupDivCtrl", \
    "L2HitClear", \
    "L2SrcHitClear", \
    "L2DstHitClear", \
    "L3HostHitClear", \
    "L3RouteHitClear", \
    "IpmcSameVlanPruning", \
    "GvrpToCpu", \
    "GmrpToCpu", \
    "L2McIdxRetType", \
    "L3McIdxRetType", \
    "McastSaDrop", \
    "JumboFrameDrop", \
    "DroppedJumboFrameDisLearn", \
    "RangeErrDrop", \
    "DroppedRangeErrDisLearn", \
    "ArpDhcpToCpu", \
    "IgmpMldToCpu", \
    "LinkDownInfoSkip", \
    "DestMacZeroDrop", \
    "L2SourceDiscardMoveToCpu", \
    "NivEthertype", \
    "NivPrioDropToCpu", \
    "NivInterfaceMissToCpu", \
    "NivRpfFailToCpu", \
    "NivTagInvalidToCpu", \
    "NivTagDropToCpu", \
    "NivUntagDropToCpu", \
    "EEEPipelineTime", \
    "EEEGlobalCongestionThreshold", \
    "FiltersControlModes", \
    "FiltersControlList", \
    "LedFuncGrp0", \
    "LedFuncGrp1", \
    "LedFuncGrpSelect", \
    "LedMode", \
    "PortBasedQos", \
    "RemoteCpuSchanEnable", \
    "RemoteCpuFromCpuEnable", \
    "RemoteCpuToCpuEnable", \
    "RemoteCpuCmicEnable", \
    "RemoteCpuMatchLocalMac", \
    "RemoteCpuMatchVlan", \
    "RemoteCpuVlan", \
    "RemoteCpuTpid", \
    "RemoteCpuSignature", \
    "RemoteCpuForceScheduling", \
    "RemoteCpuToCpuDestPortAllReasons", \
    "RemoteCpuToCpuDestMacAllReasons", \
    "RxRedirectPktReasons", \
    "RxRedirectPktReasonsExtended", \
    "RxRedirectHigigPktReasons", \
    "RxRedirectHigigPktReasonsExtended", \
    "RxRedirectTruncatedPktReasons", \
    "RxRedirectTruncatedPktReasonsExtended", \
    "RxRedirectPktCos", \
    "RxRedirectPktCosExtended", \
    "RemoteCpuLocalMacOui", \
    "RemoteCpuLocalMacNonOui", \
    "RemoteCpuDestMacOui", \
    "RemoteCpuDestMacNonOui", \
    "RemoteCpuEthertype", \
    "RemoteCpuDestPort", \
    "RemoteCpuHigigDestPort", \
    "RemoteCpuTcMappingMacOui", \
    "RemoteCpuTcMappingMacNonOui", \
    "RemoteCpuTcMappingEthertype", \
    "ServiceTpidReplace", \
    "EgressPktAge", \
    "FabricTrunkDynamicSampleRate", \
    "FabricTrunkDynamicEgressBytesExponent", \
    "FabricTrunkDynamicQueuedBytesExponent", \
    "FabricTrunkDynamicEgressBytesDecreaseReset", \
    "FabricTrunkDynamicQueuedBytesDecreaseReset", \
    "FabricTrunkDynamicEgressBytesMinThreshold", \
    "FabricTrunkDynamicEgressBytesMaxThreshold", \
    "FabricTrunkDynamicQueuedBytesMinThreshold", \
    "FabricTrunkDynamicQueuedBytesMaxThreshold", \
    "MacLowPower", \
    "CongestionCntag", \
    "CongestionCntagEthertype", \
    "CongestionCnm", \
    "CongestionCnmEthertype", \
    "CongestionNotificationIdHigh", \
    "CongestionNotificationIdLow", \
    "CongestionNotificationIdQueue", \
    "CongestionUseOuterTpid", \
    "CongestionUseOuterVlan", \
    "CongestionUseOuterPktPri", \
    "CongestionUseOuterCfi", \
    "CongestionUseInnerPktPri", \
    "CongestionUseInnerCfi", \
    "CongestionMissingCntag", \
    "CongestionExcludeReplications", \
    "MiMDefaultSVP", \
    "MiMDefaultSVPValue", \
    "EgressDroppedReportZeroLength", \
    "LoadBalanceHashSelect", \
    "TrillEthertype", \
    "TrillISISEthertype", \
    "TrillISISDestMacOui", \
    "TrillBroadcastDestMacOui", \
    "TrillEndStationDestMacOui", \
    "TrillISISDestMacNonOui", \
    "TrillBroadcastDestMacNonOui", \
    "TrillEndStationDestMacNonOui", \
    "TrillMinTtl", \
    "TrillTtlCheckEnable", \
    "TrillTtlErrToCpu", \
    "TrillHeaderErrToCpu", \
    "TrillMismatchToCpu", \
    "TrillNameMissToCpu", \
    "TrillRpfFailToCpu", \
    "TrillOptionsToCpu", \
    "TrillNameErrDrop", \
    "TrillRpfFailDrop", \
    "TrillHeaderVersionErrDrop", \
    "TrillNameMissDrop", \
    "TrillAdjacencyFailDrop", \
    "TrillHeaderErrDrop", \
    "UdpPktActionEnable", \
    "UdpPktRedirectPbmp", \
    "UdpPktCopyToPbmp", \
    "UdpPktNewTc", \
    "L3TunnelIpV4ModeOnly", \
    "L3SrcHitEnable", \
    "L2DstHitEnable", \
    "WESPProtocolEnable", \
    "WESPProtocol", \
    "ReservedMcastLearn", \
    "Ip6CompressEnable", \
    "Ip6CompressDefaultOffset", \
    "StableSaveLongIds", \
    "GportAnyDefaultL2Learn", \
    "GportAnyDefaultL2Move", \
    "IngParseL2TunnelTermDipSipSelect", \
    "IngParseL3L4IPv4", \
    "IngParseL3L4IPv6", \
    "L2LearnMode", \
    "SetWredJitterMask", \
    "SetMplsEntropyLabelTtl", \
    "SetMplsEntropyLabelPri", \
    "SetMplsEntropyLabelOffset", \
    "PonOamFailsafeState", \
    "EquipmentAlarmState", \
    "PowerAlarmState", \
    "BatteryMissingAlarmState", \
    "BatteryFailureAlarmState", \
    "BatteryVoltLowAlarmState", \
    "BatteryVoltLowAlarmReportThreshold", \
    "BatteryVoltLowAlarmClearThreshold", \
    "PhysicalIntrusionAlarmState", \
    "SelfTestFailureAlarmState", \
    "PonIfSwitchAlarmState", \
    "L3IngressInterfaceMapSet", \
    "MplsPWControlWordToCpu", \
    "MplsPWControlTypeToCpu", \
    "MplsPWControlWord", \
    "MplsPWCountPktsAll", \
    "EntropyHashSet0Offset", \
    "EntropyHashSet1Offset", \
    "ArpRequestMyStationIPToCPU", \
    "ArpRequestMyStationIPDrop", \
    "ArpRequestMyStationIPFwd", \
    "L3SIPMoveToCpu", \
    "TrunkHashSrcPortEnable", \
    "TrunkHashOffset", \
    "TrunkHashMPLSLabelBOS", \
    "TrunkHashMPLSPWControlWord", \
    "TrunkHashSeed", \
    "TrunkHashConfig", \
    "TrunkHashPktHeaderCount", \
    "TrunkHashPktHeaderSelect", \
    "ECMPHashSrcPortEnable", \
    "ECMPHashOffset", \
    "ECMPHashSeed", \
    "ECMPHashConfig", \
    "ECMPHashPktHeaderCount", \
    "TrunkDynamicHashOffset", \
    "TrunkDynamicSampleRate", \
    "TrunkDynamicAccountingSelect", \
    "TrunkDynamicEgressBytesExponent", \
    "TrunkDynamicQueuedBytesExponent", \
    "TrunkDynamicEgressBytesDecreaseReset", \
    "TrunkDynamicQueuedBytesDecreaseReset", \
    "TrunkDynamicEgressBytesMinThreshold", \
    "TrunkDynamicEgressBytesMaxThreshold", \
    "TrunkDynamicQueuedBytesMinThreshold", \
    "TrunkDynamicQueuedBytesMaxThreshold", \
    "TrunkDynamicExpectedLoadMinThreshold", \
    "TrunkDynamicExpectedLoadMaxThreshold", \
    "TrunkDynamicImbalanceMinThreshold", \
    "TrunkDynamicImbalanceMaxThreshold", \
    "EcmpDynamicHashOffset", \
    "EcmpDynamicSampleRate", \
    "EcmpDynamicAccountingSelect", \
    "EcmpDynamicEgressBytesExponent", \
    "EcmpDynamicQueuedBytesExponent", \
    "EcmpDynamicEgressBytesDecreaseReset", \
    "EcmpDynamicQueuedBytesDecreaseReset", \
    "EcmpDynamicEgressBytesMinThreshold", \
    "EcmpDynamicEgressBytesMaxThreshold", \
    "EcmpDynamicQueuedBytesMinThreshold", \
    "EcmpDynamicQueuedBytesMaxThreshold", \
    "EcmpDynamicExpectedLoadMinThreshold", \
    "EcmpDynamicExpectedLoadMaxThreshold", \
    "EcmpDynamicImbalanceMinThreshold", \
    "EcmpDynamicImbalanceMaxThreshold", \
    "FailoverDropToCpu", \
    "MplsReservedEntropyLabelToCpu", \
    "L3SrcBindMissToCpu", \
    "MplsGalAlertLabelToCpu", \
    "MplsRalAlertLabelToCpu", \
    "MplsIllegalReservedLabelToCpu", \
    "MplsLookupsExceededToCpu", \
    "MplsUnknownAchTypeToCpu", \
    "MplsUnknownAchVersionToCpu", \
    "TimesyncIngressVersion", \
    "TimesyncEgressVersion", \
    "TimesyncUnknownVersionToCpu", \
    "CongestionCnmToCpu", \
    "bcmSwtichCongestionCnmProxyErrorToCpu", \
    "bcmSwtichCongestionCnmProxyToCpu", \
    "WlanTunnelErrorDrop", \
    "MplsReservedEntropyLabelDrop", \
    "RemoteProtectionTrust", \
    "L2GreProtocolType", \
    "L2GreVpnIdSizeSet", \
    "L2GreVpnIdMissToCpu", \
    "L2GreTunnelMissToCpu", \
    "MultipathCompressBuffer", \
    "MultipathCompress", \
    "BstEnable", \
    "BstTrackingMode", \
    "L3McastL2", \
    "MiMTeBvidLowerRange", \
    "MiMTeBvidUpperRange", \
    "RemoteEncapsulationMode", \
    "FabricTrunkAutoIncludeDisable", \
    "TrunkHashNormalize", \
    "MplsLabelCache", \
    "MplsLabelCommit", \
    "TrillHopCount", \
    "PolicerFairness", \
    "VxlanUdpDestPortSet", \
    "VxlanEntropyEnable", \
    "VxlanVnIdMissToCpu", \
    "VxlanTunnelMissToCpu", \
    "ECMPVxlanHashOffset", \
    "ECMPL2GreHashOffset", \
    "ECMPTrillHashOffset", \
    "ECMPMplsHashOffset", \
    "VirtualPortDynamicHashOffset", \
    "TMDomain", \
    "PortHeaderType", \
    "L2OverflowEvent", \
    "LinkProvClear", \
    "EtagEthertype", \
    "EtagInvalidToCpu", \
    "EtagDropToCpu", \
    "NonEtagDropToCpu", \
    "ExtenderRpfFailToCpu", \
    "ExtenderInterfaceMissToCpu", \
    "PrioDropToCpu", \
    "ExtenderMulticastLowerThreshold", \
    "ExtenderMulticastHigherThreshold", \
    "L3NATEnable", \
    "L3DNATHairpinToCpu", \
    "L3DNATMissToCpu", \
    "L3SNATMissToCpu", \
    "L3NatOtherToCpu", \
    "L3NatRealmCrossingIcmpToCpu", \
    "L3NatFragmentsToCpu", \
    "HashL3DNATPool", \
    "HashL3DNATPoolDual", \
    "McastTrunkHashMin", \
    "McastTrunkHashMax", \
    "Ip4Compress", \
    "EcmpResilientHashOffset", \
    "TrunkResilientHashOffset", \
    "FabricTrunkResilientHashOffset", \
    "ShaperAdjust", \
    "HashVpVlanMemberIngress", \
    "HashVpVlanMemberIngressDual", \
    "HashVpVlanMemberEgress", \
    "HashVpVlanMemberEgressDual", \
    "HashL2Endpoint", \
    "HashL2EndpointDual", \
    "HashEndpointQueueMap", \
    "HashEndpointQueueMapDual", \
    "StackRouteHistoryBitmap1", \
    "StackRouteHistoryBitmap2", \
    "ArpIPcheck", \
    "PPPoESessionParseEnable", \
    "PPPoESessionEthertype", \
    "L2LearnLimitToCpu", \
    "FlexibleMirrorDestinations", \
    "EcmpMacroFlowHashEnable", \
    "OamVersionCheckDisable", \
    "OamOlpChipEtherType", \
    "OamOlpChipTpid", \
    "OamOlpChipVlan", \
    "PPPoESessionPktDscpRemarkEnable", \
    "EgressKeepSystemHeader", \
    "MacroFlowEcmpHashConcatEnable", \
    "MacroFlowLoadBalanceHashConcatEnable", \
    "MacroFlowTrunkHashConcatEnable", \
    "MacroFlowHigigTrunkHashConcatEnable", \
    "MacroFlowECMPHashSeed", \
    "MacroFlowLoadBalanceHashSeed", \
    "MacroFlowTrunkHashSeed", \
    "MacroFlowHigigTrunkHashSeed", \
    "HashTrillPayloadSelect0", \
    "HashTrillPayloadSelect1", \
    "HashTrillTunnelSelect0", \
    "HashTrillTunnelSelect1", \
    "HashIP6AddrCollapseSelect0", \
    "HashIP6AddrCollapseSelect1", \
    "PrependTagEnable", \
    "HashL2VxlanField0", \
    "HashL2VxlanField1", \
    "HashL3VxlanField0", \
    "HashL3VxlanField1", \
    "HashL2L2GreField0", \
    "HashL2L2GreField1", \
    "HashL3L2GreField0", \
    "HashL3L2GreField1", \
    "McastTrunkIngressCommit", \
    "McastTrunkEgressCommit", \
    "MplsShortPipe", \
    "TraverseMode", \
    "ResilientHashConfig", \
    "TrunkResilientHashSeed", \
    "ECMPResilientHashSeed", \
    "ResilientHashAgeTimer", \
    "FieldStageEgressToCpu", \
    "HashOamEgress", \
    "HashOamEgressDual", \
    "ColorL3L2Marking", \
    "WredForAllPkts", \
    "FcoeNpvModeEnable", \
    "FcoeDomainRoutePrefixLength", \
    "FcoeCutThroughEnable", \
    "FcoeSourceBindCheckAction", \
    "FcoeSourceFpmaPrefixCheckAction", \
    "FcoeVftHopCountExpiryToCpu", \
    "FcoeVftHopCountExpiryAction", \
    "FcoeFcEofT1Value", \
    "FcoeFcEofT2Value", \
    "FcoeFcEofA1Value", \
    "FcoeFcEofA2Value", \
    "FcoeFcEofN1Value", \
    "FcoeFcEofN2Value", \
    "FcoeFcEofNI1Value", \
    "FcoeFcEofNI2Value", \
    "FcoeZoneCheckFailToCpu", \
    "FcoeZoneCheckMissDrop", \
    "HashUseL2GreTunnelGreKey0", \
    "HashUseL2GreTunnelGreKey1", \
    "HashL2GrePayloadSelect0", \
    "HashL2GrePayloadSelect1", \
    "HashL2GreNetworkPortPayloadDisable0", \
    "HashL2GreNetworkPortPayloadDisable1", \
    "SystemReservedVlan", \
    "ProxySrcKnockout", \
    "NetworkGroupDepth", \
    "UnknownSubportPktTagToCpu", \
    "L3RoutedLearn", \
    "SubportPktTagEthertype", \
    "SubportPktTagToCpu", \
    "NonSubportPktTagToCpu", \
    "HashL2GreKeyMask0", \
    "HashL2GreKeyMask1", \
    "L3Max128BV6Entries", \
    "EEEQueueThresholdProfile0", \
    "EEEQueueThresholdProfile1", \
    "EEEQueueThresholdProfile2", \
    "EEEQueueThresholdProfile3", \
    "EEEPacketLatencyProfile0", \
    "EEEPacketLatencyProfile1", \
    "EEEPacketLatencyProfile2", \
    "EEEPacketLatencyProfile3", \
    "DosAttackV6MinFragEnable", \
    "DosAttackV6MinFragSize", \
    "MirrorUnicastCosq", \
    "MirrorMulticastCosq", \
    "McQueueSchedMode", \
    "Reserved872", \
    "CacheTableUpdateAll", \
    "HashNivSrcIfEtagSvidSelect0", \
    "HashNivSrcIfEtagSvidSelect1", \
    "HashNivDstIfEtagVidSelect0", \
    "HashNivDstIfEtagVidSelect1", \
    "BstSnapshotEnable", \
    "SymmetricHashControl", \
    "L2ExtLearn", \
    "ReserveHighTunnelId", \
    "ReserveLowTunnelId", \
    "HigigCongestionClassEnable", \
    "EcnNonIpResponsive", \
    "EcnNonIpIntCongestionNotification", \
    "MimPayloadTpidEnable", \
    "HashMimUseTunnelHeader0", \
    "HashMimUseTunnelHeader1", \
    "MplsPipeTunnelLabelExpSet", \
    "ControlPortConfigInstall", \
    "LoopbackMtuSize", \
    "HashVxlanPayloadSelect0", \
    "HashVxlanPayloadSelect1", \
    "CongestionCnmSrcMacNonOui", \
    "CongestionCnmSrcMacOui" 

#define BCM_SWITCH_CONTROL_L3_LEARN_NONE    0          /* Disable L2 learning
                                                          for all routed
                                                          packets. */
#define BCM_SWITCH_CONTROL_L3_LEARN_IPV4_UC 0x1        /* Enable L2 learning for
                                                          IPv4 Unicast packets. */
#define BCM_SWITCH_CONTROL_L3_LEARN_IPV4_MC 0x2        /* Enable L2 learning for
                                                          IPv4 Multicast
                                                          packets. */
#define BCM_SWITCH_CONTROL_L3_LEARN_IPV6_UC 0x4        /* Enable L2 learning for
                                                          IPv6 Unicast packets. */
#define BCM_SWITCH_CONTROL_L3_LEARN_IPV6_MC 0x8        /* Enable L2 learning for
                                                          IPv6 Multicast
                                                          packets. */
#define BCM_SWITCH_CONTROL_L3_LEARN_MPLS    0x10       /* Enable L2 learning for
                                                          MPLS packets. */
#define BCM_SWITCH_CONTROL_L3_LEARN_ALL     0xffffffff /* Enable L2 learning for
                                                          all routed packets. */

/* Module types for bcmSwitchModuleType. */
#define BCM_SWITCH_MODULE_UNKNOWN   0          
#define BCM_SWITCH_MODULE_XGS1      1          
#define BCM_SWITCH_MODULE_XGS2      2          
#define BCM_SWITCH_MODULE_XGS3      3          

/* Unicast RPF lookup modes. */
#define BCM_SWITCH_URPF_DISABLE (0)        
#define BCM_SWITCH_URPF_LOOSE   (1)        
#define BCM_SWITCH_URPF_STRICT  (2)        

/* Port header type. */
#define BCM_SWITCH_PORT_HEADER_TYPE_NONE    (0)        
#define BCM_SWITCH_PORT_HEADER_TYPE_ETH     (1)        
#define BCM_SWITCH_PORT_HEADER_TYPE_RAW     (2)        
#define BCM_SWITCH_PORT_HEADER_TYPE_TM      (3)        
#define BCM_SWITCH_PORT_HEADER_TYPE_PROG    (4)        
#define BCM_SWITCH_PORT_HEADER_TYPE_CPU     (5)        
#define BCM_SWITCH_PORT_HEADER_TYPE_STACKING (6)        
#define BCM_SWITCH_PORT_HEADER_TYPE_TDM     (7)        
#define BCM_SWITCH_PORT_HEADER_TYPE_TDM_RAW (8)        

/* Argument formatting macro for bcmSwitchModuleType. */
#define BCM_SWITCH_CONTROL_MOD_TYPE_PACK(modid, mod_type)  \
    (((modid) << 16) | (mod_type & 0xFFFF)) 
#define BCM_SWITCH_CONTROL_MODID_UNPACK(arg)  \
    (((arg) >> 16) & 0xFFFF) 
#define BCM_SWITCH_CONTROL_MODTYPE_UNPACK(arg)  \
    (((arg) >> 0) & 0xFFFF) 

/* Stable locations for bcmSwitchStableSelect */
#define BCM_SWITCH_STABLE_NONE              (_SHR_SWITCH_STABLE_NONE) 
#define BCM_SWITCH_STABLE_DEVICE_NEXT_HOP   (_SHR_SWITCH_STABLE_DEVICE_NEXT_HOP) 
#define BCM_SWITCH_STABLE_DEVICE_EXT_MEM    (_SHR_SWITCH_STABLE_DEVICE_EXT_MEM) 
#define BCM_SWITCH_STABLE_APPLICATION       (_SHR_SWITCH_STABLE_APPLICATION) 

/* Flags for automatic link provision clear. */
#define BCM_SWITCH_LINK_PROV_AUTO_CLEAR     0x00000001 /* Clear link provision
                                                          automatically. */
#define BCM_SWITCH_LINK_PROV_ALLOW_LIST_EXCLUDE 0x00000002 /* Retain allow list when
                                                          clearing link
                                                          provision. */
#define BCM_SWITCH_LINK_PROV_BLOCK_LIST_EXCLUDE 0x00000004 /* Retain block list when
                                                          clearing link
                                                          provision. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Configure port-specific and device-wide operating modes. */
extern int bcm_switch_control_get(
    int unit, 
    bcm_switch_control_t type, 
    int *arg);

/* Configure port-specific and device-wide operating modes. */
extern int bcm_switch_control_set(
    int unit, 
    bcm_switch_control_t type, 
    int arg);

/* Configure port-specific and device-wide operating modes. */
extern int bcm_switch_control_port_get(
    int unit, 
    bcm_port_t port, 
    bcm_switch_control_t type, 
    int *arg);

/* Configure port-specific and device-wide operating modes. */
extern int bcm_switch_control_port_set(
    int unit, 
    bcm_port_t port, 
    bcm_switch_control_t type, 
    int arg);

/* Configure encapsulation priority for the internal priority queue. */
extern int bcm_switch_rcpu_encap_priority_map_set(
    int unit, 
    uint32 flags, 
    int internal_cpu_pri, 
    int encap_pri);

/* Retrieve encapsulation priority of the internal priority queue. */
extern int bcm_switch_rcpu_encap_priority_map_get(
    int unit, 
    uint32 flags, 
    int internal_cpu_pri, 
    int *encap_pri);

/* Configure decapsulation priority for the internal priority queue. */
extern int bcm_switch_rcpu_decap_priority_map_set(
    int unit, 
    int decap_pri, 
    int internal_cpu_pri);

/* Retrieve decapsulation priority of the internal priority queue. */
extern int bcm_switch_rcpu_decap_priority_map_get(
    int unit, 
    int decap_pri, 
    int *internal_cpu_pri);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Hash tables. */
typedef enum bcm_switch_hash_table_e {
    bcmHashTableL2 = 0,                 /* L2 hash table. */
    bcmHashTableL3 = 1,                 /* L3 hash table. */
    bcmHashTableVlanTranslate = 2,      /* VLAN Translate hash table. */
    bcmHashTableEgressVlanTranslate = 3, /* Egress VLAN Translate hash table. */
    bcmHashTableMPLS = 4,               /* MPLS hash table. */
    bcmHashTable__Num = 5 
} bcm_switch_hash_table_t;

/* L2 address learning modes. */
typedef enum bcm_switch_l2_location_e {
    bcmSwitchL2LocInternal = 0, /* L2 addresses will be learnt on Internal TCAM */
    bcmSwitchL2LocExternal = 1, /* L2 addresses will be learnt on External TCAM */
    bcmSwitchL2LocIntAndExt = 2 /* L2 addresses are learnt either on internal or
                                   external Tcam */
} bcm_switch_l2_location_t;

/* Switch table update mode tables. */
typedef enum bcm_switch_table_update_mode_e {
    bcmSwitchTableUpdateNormal = 0,     /* Calling traverse API e.g.
                                           l2_replace() will act in normal mode,
                                           i.e. set match rule and action and
                                           perform the replace */
    bcmSwitchTableUpdateRuleAdd = 1,    /* Calling traverse API e.g.
                                           l2_replace() will add rule  without
                                           perform the replace */
    bcmSwitchTableUpdateRuleClear = 2,  /* clear all rules e.g. l2_replace()
                                           Calling traverse API */
    bcmSwitchTableUpdateRuleCommit = 3  /* Run traverse API e.g. l2_replace()
                                           with configured rules */
} bcm_switch_table_update_mode_t;

/* Opaque handle to a hash entry. */
typedef int bcm_hash_entry_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Install a flex hash entry into the hardware tables. */
extern int bcm_switch_hash_entry_install(
    int unit, 
    bcm_hash_entry_t entry, 
    uint32 offset);

/* Re-install a flex hash entry into the hardware tables. */
extern int bcm_switch_hash_entry_reinstall(
    int unit, 
    bcm_hash_entry_t entry, 
    uint32 offset);

/* Remove a flex hash entry from the hardware tables. */
extern int bcm_switch_hash_entry_remove(
    int unit, 
    bcm_hash_entry_t entry);

/* Create a blank flex hash entry. */
extern int bcm_switch_hash_entry_create(
    int unit, 
    bcm_field_group_t group, 
    bcm_hash_entry_t *entry);

/* Create a blank flex hash entry. */
extern int bcm_switch_hash_entry_create_qset(
    int unit, 
    bcm_field_qset_t qset, 
    bcm_hash_entry_t *entry);

/* Destroy a flex hash field entry. */
extern int bcm_switch_hash_entry_destroy(
    int unit, 
    bcm_hash_entry_t entry);

/* bcm_switch_hash_qualify_data */
extern int bcm_switch_hash_qualify_data(
    int unit, 
    bcm_hash_entry_t entry, 
    int qual_id, 
    uint32 data, 
    uint32 mask);

/* 
 * Gets the maximum number of banks associated with a particular hash
 * memory.
 */
extern int bcm_switch_hash_banks_max_get(
    int unit, 
    bcm_switch_hash_table_t hash_table, 
    uint32 *bank_count);

/* Configure the hash type for a bank of the particular hash memory. */
extern int bcm_switch_hash_banks_config_set(
    int unit, 
    bcm_switch_hash_table_t hash_table, 
    uint32 bank_num, 
    int hash_type, 
    uint32 hash_offset);

/* 
 * Gets the configured hash type for a bank of the particular hash
 * memory.
 */
extern int bcm_switch_hash_banks_config_get(
    int unit, 
    bcm_switch_hash_table_t hash_table, 
    uint32 bank_num, 
    int *hash_type, 
    uint32 *hash_offset);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Entry type for retrieving temperature values. */
typedef _shr_switch_temperature_monitor_t bcm_switch_temperature_monitor_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Retrieve each temperature monitor's current value and peak value. The
 * unit is 0.1 celsius degree
 */
extern int bcm_switch_temperature_monitor_get(
    int unit, 
    int temperature_max, 
    bcm_switch_temperature_monitor_t *temperature_array, 
    int *temperature_count);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Switch packet info flags. */
#define BCM_SWITCH_PKT_INFO_SRC_GPORT       (1 << 0)   /* Source gport (module,
                                                          port) field valid. */
#define BCM_SWITCH_PKT_INFO_VLAN            (1 << 1)   /* VLAN identifier field
                                                          valid. */
#define BCM_SWITCH_PKT_INFO_ETHERTYPE       (1 << 2)   /* Ethertype field valid. */
#define BCM_SWITCH_PKT_INFO_SRC_MAC         (1 << 3)   /* Source MAC address
                                                          field valid. */
#define BCM_SWITCH_PKT_INFO_DST_MAC         (1 << 4)   /* Destination MAC
                                                          address field valid. */
#define BCM_SWITCH_PKT_INFO_SRC_IP          (1 << 5)   /* Source IPv4 address
                                                          field valid. */
#define BCM_SWITCH_PKT_INFO_DST_IP          (1 << 6)   /* Destination IPv4
                                                          address field valid. */
#define BCM_SWITCH_PKT_INFO_SRC_IPV6        (1 << 7)   /* Source IPv6 address
                                                          field valid. */
#define BCM_SWITCH_PKT_INFO_DST_IPV6        (1 << 8)   /* Destination IPv6
                                                          address field valid. */
#define BCM_SWITCH_PKT_INFO_PROTOCOL        (1 << 9)   /* IP protocol field
                                                          valid. */
#define BCM_SWITCH_PKT_INFO_SRC_L4_PORT     (1 << 10)  /* Source L4 port field
                                                          valid. */
#define BCM_SWITCH_PKT_INFO_DST_L4_PORT     (1 << 11)  /* Destination L4 port
                                                          field valid. */
#define BCM_SWITCH_PKT_INFO_HASH_TRUNK      (1 << 12)  /* Retrieve trunk hash
                                                          result. */
#define BCM_SWITCH_PKT_INFO_HASH_MULTIPATH  (1 << 13)  /* Retrieve ECMP hash
                                                          result. */
#define BCM_SWITCH_PKT_INFO_HASH_UDP_SOURCE_PORT (1 << 14)  /* Retrieve Entropy Value
                                                          of VXLan packet. */

/* Packet forward reason for hash calculation. */
typedef enum bcm_switch_pkt_hash_info_fwd_reason_e {
    bcmSwitchPktHashInfoFwdReasonUnicast = 0, /* Known unicast packet */
    bcmSwitchPktHashInfoFwdReasonIpmc = 1, /* L3 multicast packet */
    bcmSwitchPktHashInfoFwdReasonL2mc = 2, /* L2 multicast packet */
    bcmSwitchPktHashInfoFwdReasonBcast = 3, /* Broadcast packet */
    bcmSwitchPktHashInfoFwdReasonDlf = 4 /* Destination lookup failed packet */
} bcm_switch_pkt_hash_info_fwd_reason_t;

#define BCM_SWITCH_PKT_HASH_INFO_FWD_REASON_STRINGS \
    "Unicast", \
    "Ipmc", \
    "L2mc", \
    "Bcast", \
    "Dlf" 

/* 
 * Switch packet info structure.
 * 
 * Contains packet fields for calculating aggregate link hash values.
 */
typedef struct bcm_switch_pkt_info_s {
    uint32 flags;                       /* BCM_SWITCH_PKT_INFO_xxx flags for
                                           packet parameter hashing. */
    bcm_gport_t src_gport;              /* Source module and port,
                                           BCM_GPORT_INVALID to wildcard. */
    bcm_vlan_t vid;                     /* VLAN ID. */
    bcm_ethertype_t ethertype;          /* Ethertype */
    bcm_mac_t src_mac;                  /* Source MAC address. */
    bcm_mac_t dst_mac;                  /* Destination MAC address. */
    bcm_ip_t sip;                       /* Source host IP address (IPv4). */
    bcm_ip_t dip;                       /* Destination host IP address (IPv4). */
    bcm_ip6_t sip6;                     /* Source host IP address (IPv6). */
    bcm_ip6_t dip6;                     /* Destination host IP address (IPv6). */
    uint8 protocol;                     /* IP protocol */
    uint32 src_l4_port;                 /* Source L4 port */
    uint32 dst_l4_port;                 /* Destination L4 port. */
    bcm_gport_t trunk_gport;            /* Gport of trunk type on which packet
                                           will egress. */
    bcm_if_t mpintf;                    /* Multipath egress forwarding object. */
    bcm_switch_pkt_hash_info_fwd_reason_t fwd_reason; /* Packet forward reason. */
} bcm_switch_pkt_info_t;

/* Initialize a bcm_switch_pkt_info_t structure. */
extern void bcm_switch_pkt_info_t_init(
    bcm_switch_pkt_info_t *pkt_info);

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Gets the hash result for the specified link aggregation method using
 * provided packet parameters and device configuration.
 */
extern int bcm_switch_pkt_info_hash_get(
    int unit, 
    bcm_switch_pkt_info_t *pkt_info, 
    bcm_gport_t *dst_gport, 
    bcm_if_t *dst_intf);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Read function signature to register for the application provided
 * stable for Level 2 Warm Boot
 */
typedef int (*bcm_switch_read_func_t)(
    int unit, 
    uint32 *buf, 
    int offset, 
    int nbytes);

/* 
 * Write function signature to register for the application provided
 * stable for Level 2 Warm Boot
 */
typedef int (*bcm_switch_write_func_t)(
    int unit, 
    uint32 *buf, 
    int offset, 
    int nbytes);

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Register read/write functions for the application provided stable for
 * Level 2 Warm Boot
 */
extern int bcm_switch_stable_register(
    int unit, 
    bcm_switch_read_func_t rf, 
    bcm_switch_write_func_t wf);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Call back function signature to register */
typedef void (*bcm_switch_event_cb_t)(
    int unit, 
    bcm_switch_event_t event, 
    uint32 arg1, 
    uint32 arg2, 
    uint32 arg3, 
    void *userdata);

#ifndef BCM_HIDE_DISPATCHABLE

/* Register callback function for critical events. */
extern int bcm_switch_event_register(
    int unit, 
    bcm_switch_event_cb_t cb, 
    void *userdata);

/* Unregister callback function for critical events. */
extern int bcm_switch_event_unregister(
    int unit, 
    bcm_switch_event_cb_t cb, 
    void *userdata);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Backward compatibility. */
#define bcm_switch_port_control_get bcm_switch_control_port_set 
#define bcm_switch_port_control_set bcm_switch_control_port_set 

#define BCM_HASH_ZERO           0x00000001 /* Always return 0 (debug only). */
#define BCM_HASH_LSB            0x00000002 /* Return LSB of key. */
#define BCM_HASH_CRC16L         0x00000003 /* Lower bits of CRC-16. */
#define BCM_HASH_CRC16U         0x00000004 /* Upper bits of CRC-16. */
#define BCM_HASH_CRC32L         0x00000005 /* Lower bits of CRC-32. */
#define BCM_HASH_CRC32U         0x00000006 /* Upper bits of CRC-32. */
#define BCM_HASH_XORU           0x00000007 /* Upper bits of byte by byte XOR. */
#define BCM_HASH_XORL           0x00000008 /* Lower bits of byte by byte XOR. */
#define BCM_HASH_OFFSET         0x10000000 /* Use supplied offset value into the
                                              hash value. */

/* Multipath (ECMP/WCMP) hashing. */
#define BCM_HASH_CONTROL_MULTIPATH_L4PORTS  0x0001     /* Use TCP/UDP ports. */
#define BCM_HASH_CONTROL_MULTIPATH_DIP      0x0002     /* Use destination IP
                                                          address. */
#define BCM_HASH_CONTROL_MULTIPATH_USERDEF(_val)  \
    (((_val) & 0xff) << 24) 
#define BCM_HASH_CONTROL_MULTIPATH_USERDEF_VAL(c)  \
    ((c) >> 24 & 0xff) 

/* Unicast trunk hash controls. */
#define BCM_HASH_CONTROL_TRUNK_UC_XGS2      0x0004     /* 5695 compatible hash. */
#define BCM_HASH_CONTROL_TRUNK_UC_SRCPORT   0x0008     /* Use source port. */

/* Non-unicast trunk block mask hash controls. */
#define BCM_HASH_CONTROL_TRUNK_NUC_DST      0x0010     /* Use destination MAC or
                                                          IP address. */
#define BCM_HASH_CONTROL_TRUNK_NUC_SRC      0x0020     /* Use source MAC or IP
                                                          address. */
#define BCM_HASH_CONTROL_TRUNK_NUC_MODPORT  0x0040     /* Use module ID and
                                                          port. */

/* Use enhanced (aka. RTAG7) hashing algorithm. */
#define BCM_HASH_CONTROL_ECMP_ENHANCE       0x0080     /* Use enhanced ECMP
                                                          hashing. */
#define BCM_HASH_CONTROL_TRUNK_NUC_ENHANCE  0x0100     /* Use enhanced
                                                          non-unicast trunk
                                                          hashing. */

/* Enhanced hash field config control. */
#define BCM_HASH_FIELD_CONFIG_CRC16XOR8     0x00000001 /* 8-bit CRC16 + 8-bit
                                                          XOR8. */
#define BCM_HASH_FIELD_CONFIG_CRC16XOR4     0x00000002 /* 8-bit CRC16 + 8-bit
                                                          XOR4. */
#define BCM_HASH_FIELD_CONFIG_CRC16XOR2     0x00000003 /* 8-bit CRC16 + 8-bit
                                                          XOR2. */
#define BCM_HASH_FIELD_CONFIG_CRC16XOR1     0x00000004 /* 8-bit CRC16 + 8-bit
                                                          XOR1. */
#define BCM_HASH_FIELD_CONFIG_CRC16         0x00000005 /* 16-bit CRC16. */
#define BCM_HASH_FIELD_CONFIG_XOR16         0x00000006 /* 16-bit XOR. */
#define BCM_HASH_FIELD_CONFIG_CRC16CCITT    0x00000007 /* 16-bit CRC using CCITT
                                                          polynomial. */
#define BCM_HASH_FIELD_CONFIG_CRC32LO       0x00000008 /* Lower 16-bit of CRC32. */
#define BCM_HASH_FIELD_CONFIG_CRC32HI       0x00000009 /* Higher 16-bit of
                                                          CRC32. */

/* Enhanced hash field selection disable control. */
#define BCM_HASH_FIELD0_DISABLE_IP4         0x00000001 /* Selection 0 for IPv4
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_IP4         0x00000002 /* Selection 1 for IPv4
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_IP6         0x00000004 /* Selection 0 for IPv6
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_IP6         0x00000008 /* Selection 1 for IPv6
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_MPLS        0x00000010 /* Selection 0 for MPLS
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_MPLS        0x00000020 /* Selection 1 for MPLS
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP4_IP 0x00000040 /* Selection 0 for tunnel
                                                          IPv4 over IPv4
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP4_IP 0x00000080 /* Selection 1 for tunnel
                                                          IPv4 over IPv4
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP6_IP 0x00000100 /* Selection 0 for tunnel
                                                          IPv6 over IPv4
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP6_IP 0x00000200 /* Selection 1 for tunnel
                                                          IPv6 over IPv4
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP4_GRE 0x00000400 /* Selection 0 for tunnel
                                                          IPv4 over GRE packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP4_GRE 0x00000800 /* Selection 1 for tunnel
                                                          IPv4 over GRE packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP6_GRE 0x00001000 /* Selection 0 for tunnel
                                                          IPv6 over GRE packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP6_GRE 0x00002000 /* Selection 1 for tunnel
                                                          IPv6 over GRE packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP4_IP6 0x00004000 /* Selection 0 for tunnel
                                                          IPv4 over IPv6
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP4_IP6 0x00008000 /* Selection 1 for tunnel
                                                          IPv4 over IPv6
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP6_IP6 0x00010000 /* Selection 0 for tunnel
                                                          IPv6 over IPv6
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP6_IP6 0x00020000 /* Selection 1 for tunnel
                                                          IPv6 over IPv6
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_MIM         0x00040000 /* Selection 0 for MIM
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_MIM         0x00080000 /* Selection 1 for MIM
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_FCOE        0x00100000 /* Selection 0 for FCoE
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_FCOE        0x00200000 /* Selection 1 for FCoE
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP4_GRE_IP4 0x00400000 /* Selection 0 for tunnel
                                                          IPv4 over GRE IPv4
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP4_GRE_IP6 0x00800000 /* Selection 0 for tunnel
                                                          IPv4 over GRE IPv6
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP4_GRE_IP4 0x01000000 /* Selection 1 for tunnel
                                                          IPv4 over GRE IPv4
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP4_GRE_IP6 0x02000000 /* Selection 1 for tunnel
                                                          IPv4 over GRE IPv6
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP6_GRE_IP4 0x04000000 /* Selection 0 for tunnel
                                                          IPv6 over GRE IPv4
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP6_GRE_IP6 0x08000000 /* Selection 0 for tunnel
                                                          IPv6 over GRE IPv6
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP6_GRE_IP4 0x10000000 /* Selection 1 for tunnel
                                                          IPv6 over GRE IPv4
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP6_GRE_IP6 0x20000000 /* Selection 1 for tunnel
                                                          IPv6 over GRE IPv6
                                                          packets. */

/* Enhanced hash field selection. */
#define BCM_HASH_FIELD_DSTMOD           0x00000001 /* Destination module ID. */
#define BCM_HASH_FIELD_DSTPORT          0x00000002 /* Destination port ID. */
#define BCM_HASH_FIELD_SRCMOD           0x00000004 /* Source modle ID. */
#define BCM_HASH_FIELD_SRCPORT          0x00000008 /* Souce port ID. */
#define BCM_HASH_FIELD_PROTOCOL         0x00000010 /* Protocol ID. */
#define BCM_HASH_FIELD_DSTL4            0x00000020 /* Destination L4 port. */
#define BCM_HASH_FIELD_SRCL4            0x00000040 /* Source L4 port. */
#define BCM_HASH_FIELD_VLAN             0x00000080 /* VLAN ID. */
#define BCM_HASH_FIELD_IP4DST_LO        0x00000100 /* IPv4 destination address
                                                      lower 16 bits. */
#define BCM_HASH_FIELD_IP4DST_HI        0x00000200 /* IPv4 destination address
                                                      upper 16 bits. */
#define BCM_HASH_FIELD_IP4SRC_LO        0x00000400 /* IPv4 source address lower
                                                      16 bits. */
#define BCM_HASH_FIELD_IP4SRC_HI        0x00000800 /* IPv4 source address upper
                                                      16 bits. */
#define BCM_HASH_FIELD_IP6DST_LO        0x00001000 /* IPv6 collapsed destination
                                                      address lower 16 bits. */
#define BCM_HASH_FIELD_IP6DST_HI        0x00002000 /* IPv6 collapsed destination
                                                      address upper 16 bits. */
#define BCM_HASH_FIELD_IP6SRC_LO        0x00004000 /* IPv6 collapsed source
                                                      address lower 16 bits. */
#define BCM_HASH_FIELD_IP6SRC_HI        0x00008000 /* IPv6 collapsed source
                                                      address upper 16 bits. */
#define BCM_HASH_FIELD_NXT_HDR          0x00010000 /* Next header. */
#define BCM_HASH_FIELD_ETHER_TYPE       0x00020000 /* Ether type. */
#define BCM_HASH_FIELD_MACDA_LO         0x00040000 /* MAC destination address
                                                      lower 16 bits. */
#define BCM_HASH_FIELD_MACDA_MI         0x00080000 /* MAC destination address
                                                      middle 16 bits. */
#define BCM_HASH_FIELD_MACDA_HI         0x00100000 /* MAC destination address
                                                      upper 16 bits. */
#define BCM_HASH_FIELD_MACSA_LO         0x00200000 /* MAC source address lower
                                                      16 bits. */
#define BCM_HASH_FIELD_MACSA_MI         0x00400000 /* MAC source address middle
                                                      16 bits. */
#define BCM_HASH_FIELD_MACSA_HI         0x00800000 /* MAC source address upper
                                                      16 bits. */
#define BCM_HASH_FIELD_LOAD_BALANCE     0x01000000 /* Load balance ID - HiGig2
                                                      only. */
#define BCM_HASH_FIELD_RSVD_LABELS      0x02000000 /* Reserved second label, top
                                                      label. */
#define BCM_HASH_FIELD_2ND_LABEL        0x04000000 /* Second label. */
#define BCM_HASH_FIELD_TOP_LABEL        0x08000000 /* Top label. */
#define BCM_HASH_FIELD_LOOKUP_ID_LO     0x10000000 /* Used for ISID[15:0]. */
#define BCM_HASH_FIELD_LOOKUP_ID_HI     0x20000000 /* Used for ISID[23:16]. */
#define BCM_HASH_FIELD_CNTAG_FLOW_ID    0x40000000 /* CNTAG flow ID. */

/* Enhanced hash MPLS field selection. */
#define BCM_HASH_MPLS_FIELD_DSTMOD          BCM_HASH_FIELD_DSTMOD /* Destination module ID. */
#define BCM_HASH_MPLS_FIELD_DSTPORT         BCM_HASH_FIELD_DSTPORT /* Destination port ID. */
#define BCM_HASH_MPLS_FIELD_SRCMOD          BCM_HASH_FIELD_SRCMOD /* Source modle ID. */
#define BCM_HASH_MPLS_FIELD_SRCPORT         BCM_HASH_FIELD_SRCPORT /* Souce port ID. */
#define BCM_HASH_MPLS_FIELD_3RD_LABEL       0x00000010 /* Third label. */
#define BCM_HASH_MPLS_FIELD_LABELS_4MSB     0x00000020 /* Most significant 4
                                                          bits of top, second,
                                                          and third label. */
#define BCM_HASH_MPLS_FIELD_IP4DST_LO       BCM_HASH_FIELD_IP4DST_LO /* IPv4 destination
                                                          address lower 16 bits. */
#define BCM_HASH_MPLS_FIELD_IP4DST_HI       BCM_HASH_FIELD_IP4DST_HI /* IPv4 destination
                                                          address upper 16 bits. */
#define BCM_HASH_MPLS_FIELD_IP4SRC_LO       BCM_HASH_FIELD_IP4SRC_LO /* IPv4 source address
                                                          lower 16 bits. */
#define BCM_HASH_MPLS_FIELD_IP4SRC_HI       BCM_HASH_FIELD_IP4SRC_HI /* IPv4 source address
                                                          upper 16 bits. */
#define BCM_HASH_MPLS_FIELD_2ND_LABEL       BCM_HASH_FIELD_2ND_LABEL /* Second label. */
#define BCM_HASH_MPLS_FIELD_TOP_LABEL       BCM_HASH_FIELD_TOP_LABEL /* Top label. */
#define BCM_HASH_MPLS_FIELD_CNTAG_FLOW_ID   BCM_HASH_FIELD_CNTAG_FLOW_ID /* CNTAG flow ID. */

/* Enhanced hash FCOE field selection. */
#define BCM_HASH_FCOE_FIELD_DSTMOD          BCM_HASH_FIELD_DSTMOD /* Destination module ID. */
#define BCM_HASH_FCOE_FIELD_DSTPORT         BCM_HASH_FIELD_DSTPORT /* Destination port ID. */
#define BCM_HASH_FCOE_FIELD_SRCMOD          BCM_HASH_FIELD_SRCMOD /* Source modle ID. */
#define BCM_HASH_FCOE_FIELD_SRCPORT         BCM_HASH_FIELD_SRCPORT /* Souce port ID. */
#define BCM_HASH_FCOE_FIELD_VLAN            0x00000010 /* VLAN ID. */
#define BCM_HASH_FCOE_FIELD_VIRTUAL_FABRIC_ID 0x00000020 /* Virtual Fabric ID. */
#define BCM_HASH_FCOE_FIELD_RESPONDER_EXCHANGE_ID 0x00000040 /* Responder Exchange_ID. */
#define BCM_HASH_FCOE_FIELD_ORIGINATOR_EXCHANGE_ID 0x00000080 /* Originator
                                                          Exchange_ID. */
#define BCM_HASH_FCOE_FIELD_DST_ID_LO       0x00000100 /* Destination_ID lower
                                                          16 bits. */
#define BCM_HASH_FCOE_FIELD_DST_ID_HI       0x00000200 /* Destination_ID upper
                                                          16 bits. */
#define BCM_HASH_FCOE_FIELD_SRC_ID_LO       0x00000400 /* Source_ID lower 16
                                                          bits. */
#define BCM_HASH_FCOE_FIELD_SRC_ID_HI       0x00000800 /* Source_ID upper 16
                                                          bits. */
#define BCM_HASH_FCOE_FIELD_CNTAG_FLOW_ID   BCM_HASH_FIELD_CNTAG_FLOW_ID /* CNTAG flow ID. */

/* Enhanced hash Trill field selection. */
#define BCM_HASH_TRILL_FIELD_DSTMOD         BCM_HASH_FIELD_DSTMOD /* Destination module ID. */
#define BCM_HASH_TRILL_FIELD_DSTPORT        BCM_HASH_FIELD_DSTPORT /* Destination port ID. */
#define BCM_HASH_TRILL_FIELD_SRCMOD         BCM_HASH_FIELD_SRCMOD /* Source modle ID. */
#define BCM_HASH_TRILL_FIELD_SRCPORT        BCM_HASH_FIELD_SRCPORT /* Souce port ID. */
#define BCM_HASH_TRILL_FIELD_VLAN           0x00000010 /* VLAN ID. */
#define BCM_HASH_TRILL_FIELD_ETHER_TYPE     0x00000020 /* Ether type. */
#define BCM_HASH_TRILL_FIELD_MACDA_LO       0x00000040 /* MAC destination
                                                          address lower 16 bits. */
#define BCM_HASH_TRILL_FIELD_MACDA_MI       0x00000080 /* MAC destination
                                                          address middle 16
                                                          bits. */
#define BCM_HASH_TRILL_FIELD_MACSA_LO       0x00000100 /* MAC source address
                                                          lower 16 bits. */
#define BCM_HASH_TRILL_FIELD_MACSA_MI       0x00000200 /* MAC source address
                                                          middle 16 bits. */
#define BCM_HASH_TRILL_FIELD_ING_RBRIDGE_NAME 0x00000400 /* Ingress RBridge
                                                          Nickname. */
#define BCM_HASH_TRILL_FIELD_EGR_RBRIDGE_NAME 0x00000800 /* Egress RBridge
                                                          Nickname. */

/* Stacking mode select. */
#define BCM_MIRROR_STACK_MODE_XGS3  0          /* Stacking with BCM5650x
                                                  (BCM5610x, BCM5630x). */
#define BCM_MIRROR_STACK_MODE_XGS1  1          /* Stacking with BCM5670. */
#define BCM_MIRROR_STACK_MODE_XGS2  2          /* Stacking with BCM5675-A0. */

#define BCM_COLOR_PRIORITY      0          /* Priority->COLOR mapping. */
#define BCM_COLOR_OUTER_CFI     1          /* SPVLAN CFI->COLOR mapping. */
#define BCM_COLOR_INNER_CFI     2          /* CVLAN CFI->COLOR mapping. */

#define BCM_HASH_MPLS_LABEL_NONE        0          /* Normal processing for MPLS
                                                      label stack, i.e. hash
                                                      according to forwarding
                                                      header configuration. */
#define BCM_HASH_MPLS_LABEL_BOS_START   1          /* Hashing from BOS label,
                                                      skipping all other label. */
#define BCM_HASH_MPLS_LABEL_BOS_SKIP    2          /* Hashing from header next
                                                      to BOS label, skipping all
                                                      MPLS labels. */

/* IGM/MLD Action select. */
#define BCM_SWITCH_FORWARD      0x00000001 
#define BCM_SWITCH_FLOOD        0x00000002 
#define BCM_SWITCH_DROP         0x00000004 
#define BCM_SWITCH_CPU          0x00000008 

/* Switch features bypass mode */
#define BCM_SWITCH_BYPASS_NONE      0          /* No switch logic bypassed. */
#define BCM_SWITCH_BYPASS_L3_ONLY   1          /* L3 switch logic bypassed. */
#define BCM_SWITCH_BYPASS_L3_AND_FP 2          /* L3 and FP switch logic
                                                  bypassed. */

/* Switch Remote CPU packet encapsulation priority mapping options. */
#define BCM_SWITCH_REMOTE_CPU_ENCAP_IEEE    0x00000001 /* Use 802.1P Priority
                                                          mapping for Remote CPU
                                                          packet encapsulation. */
#define BCM_SWITCH_REMOTE_CPU_ENCAP_HIGIG2  0x00000002 /* Use module header
                                                          traffic class mapping
                                                          for Remote CPU packet
                                                          encapsulation. */
#define BCM_SWITCH_REMOTE_CPU_ENCAP_IEEE_CPU_TC 0x00000004 /* Use status header
                                                          traffic class mapping
                                                          for Remote CPU packet
                                                          encapsulation. */

/* Switch features filter bypass control modes */
#define BCM_FILTER_NONE             _SHR_SWITCH_FILTER_NONE /* No switch filter bypass. */
#define BCM_FILTER_RX_CRCCHK        _SHR_SWITCH_FILTER_RX_CRCCHK /* RX filter bypass CRC check. */
#define BCM_FILTER_DOS_TOCPU        _SHR_SWITCH_FILTER_DOS_TOCPU /* DOS filter bypass at the frame
                                                  to CPU. */
#define BCM_FILTER_STP_USERADDR     _SHR_SWITCH_FILTER_STP_USERADDR /* STP filter bypass L2 User
                                                  address. */
#define BCM_FILTER_STP_MAC0X        _SHR_SWITCH_FILTER_STP_MAC0X /* STP filter bypass the frame at
                                                  MAC=0180c2-00000x. */
#define BCM_FILTER_VLAN_IGMP_MLD    _SHR_SWITCH_FILTER_VLAN_IGMP_MLD /* VLAN filter bypass IGMP and
                                                  MLD. */
#define BCM_FILTER_VLAN_ARP_DHCP    _SHR_SWITCH_FILTER_VLAN_ARP_DHCP /* VLAN filter bypass ARP and
                                                  DHCP */
#define BCM_FILTER_VLAN_MIIM        _SHR_SWITCH_FILTER_VLAN_MIIM /* VLAN filter bypass IMP ingress
                                                  frame. */
#define BCM_FILTER_VLAN_MCAST       _SHR_SWITCH_FILTER_VLAN_MCAST /* VLAN filter bypass MCAST
                                                  frame. */
#define BCM_FILTER_VLAN_RSV_MCAST   _SHR_SWITCH_FILTER_VLAN_RSV_MCAST /* VLAN filter bypass Reserved
                                                  MCAST frame. */
#define BCM_FILTER_VLAN_USERADDR    _SHR_SWITCH_FILTER_VLAN_USERADDR /* VLAN filter bypass L2 User
                                                  address. */
#define BCM_FILTER_EAP_USERADDR     _SHR_SWITCH_FILTER_EAP_USERADDR /* EAP filter bypass L2 User
                                                  address. */
#define BCM_FILTER_EAP_DHCP         _SHR_SWITCH_FILTER_EAP_DHCP /* EAP filter bypass DHCP. */
#define BCM_FILTER_EAP_ARP          _SHR_SWITCH_FILTER_EAP_ARP /* EAP filter bypass EAP and ARP. */
#define BCM_FILTER_EAP_MAC_22_2F    _SHR_SWITCH_FILTER_EAP_MAC_22_2F /* EAP filter bypass the frame at
                                                  MAC=0180c2-000021 to
                                                  0180c2-00002F. */
#define BCM_FILTER_EAP_MAC_21       _SHR_SWITCH_FILTER_EAP_MAC_21 /* EAP filter bypass the frame at
                                                  MAC=0180c2-000021. */
#define BCM_FILTER_EAP_MAC_20       _SHR_SWITCH_FILTER_EAP_MAC_20 /* EAP filter bypass the frame at
                                                  MAC=0180c2-000020. */
#define BCM_FILTER_EAP_MAC_11_1F    _SHR_SWITCH_FILTER_EAP_MAC_11_1F /* EAP filter bypass the frame at
                                                  MAC=0180c2-000011 to
                                                  0180c2-00001F. */
#define BCM_FILTER_EAP_MAC_10       _SHR_SWITCH_FILTER_EAP_MAC_10 /* EAP filter bypass the frame at
                                                  MAC=0180c2-000010. */
#define BCM_FILTER_EAP_MAC_0X       _SHR_SWITCH_FILTER_EAP_MAC_0X /* EAP filter bypass the frame at
                                                  MAC=0180c2-00000x. */
#define BCM_FILTER_EAP_BPDU         _SHR_SWITCH_FILTER_EAP_BPDU /* EAP filter bypass BPDU frame. */
#define BCM_FILTER_CONTROL_COUNT    _SHR_SWITCH_FILTER_CONTROL_COUNT /* The count of filter bypass
                                                  control items. */

/* LED functions group */
#define BCM_LED_FUNCGRP_0       _SHR_SWITCH_LED_FUNCGRP_0 
#define BCM_LED_FUNCGRP_1       _SHR_SWITCH_LED_FUNCGRP_1 

/* LED function items */
#define BCM_LED_FUNC_NONE           _SHR_SWITCH_LED_FUNC_NONE 
#define BCM_LED_FUNC_PHYLED4        _SHR_SWITCH_LED_FUNC_PHYLED4 
#define BCM_LED_FUNC_LNK            _SHR_SWITCH_LED_FUNC_LNK 
#define BCM_LED_FUNC_DPX            _SHR_SWITCH_LED_FUNC_DPX 
#define BCM_LED_FUNC_ACT            _SHR_SWITCH_LED_FUNC_ACT 
#define BCM_LED_FUNC_COL            _SHR_SWITCH_LED_FUNC_COL 
#define BCM_LED_FUNC_LINK_ACT       _SHR_SWITCH_LED_FUNC_LINK_ACT 
#define BCM_LED_FUNC_DPX_COL        _SHR_SWITCH_LED_FUNC_DPX_COL 
#define BCM_LED_FUNC_SP_10          _SHR_SWITCH_LED_FUNC_SP_10 
#define BCM_LED_FUNC_SP_100         _SHR_SWITCH_LED_FUNC_SP_100 
#define BCM_LED_FUNC_SP_1G          _SHR_SWITCH_LED_FUNC_SP_1G 
#define BCM_LED_FUNC_10_ACT         _SHR_SWITCH_LED_FUNC_10_ACT 
#define BCM_LED_FUNC_100_ACT        _SHR_SWITCH_FILTER_EAP_DHCP 
#define BCM_LED_FUNC_10_100_ACT     _SHR_SWITCH_LED_FUNC_10_100_ACT 
#define BCM_LED_FUNC_1G_ACT         _SHR_SWITCH_LED_FUNC_1G_ACT 
#define BCM_LED_FUNC_EAV_LINK       _SHR_SWITCH_LED_FUNC_EAV_LINK 
#define BCM_LED_FUNC_PHYLED3        _SHR_SWITCH_LED_FUNC_PHYLED3 
#define BCM_LED_FUNC_SP_100_200     _SHR_SWITCH_LED_FUNC_SP_100_200 
#define BCM_LED_FUNC_100_200_ACT    _SHR_SWITCH_LED_FUNC_100_200_ACT 
#define BCM_LED_FUNC_SP_LNK_ACT_SP  _SHR_SWITCH_LED_FUNC_LNK_ACT_SP 

/* LED working mode */
#define BCM_LED_MODE_OFF        _SHR_SWITCH_LED_MODE_OFF 
#define BCM_LED_MODE_ON         _SHR_SWITCH_LED_MODE_ON 
#define BCM_LED_MODE_BLINK      _SHR_SWITCH_LED_MODE_BLINK 
#define BCM_LED_MODE_AUTO       _SHR_SWITCH_LED_MODE_AUTO 

/* types for bcmSwitchL2LearnMode */
#define BCM_L2_INGRESS_CENT         0x1        /* Ingress and Centralized
                                                  Learning */
#define BCM_L2_INGRESS_DIST         0x2        /* Ingress and Centralized
                                                  Learning */
#define BCM_L2_EGRESS_DIST          0x4        /* Egress and Distributed
                                                  Learning */
#define BCM_L2_EGRESS_CENT          0x8        /* Egress and Centralized
                                                  Learning */
#define BCM_L2_EGRESS_INDEPENDENT   0x10       /* Egress and Independent
                                                  Learning */
#define BCM_L2_LEARN_CPU            0x20       /* Learning events handled by CPU */
#define BCM_L2_LEARN_DISABLE        0x40       /* Disabled learning */

/* Hashing function enumeration. */
typedef enum bcm_switch_hash_config_e {
    BCM_HASH_CONFIG_NONE = 1,           /* Indication to not hash */
    BCM_HASH_CONFIG_CRC8_0x14D = 2,     /* CRC8 with 0x14D polynomial */
    BCM_HASH_CONFIG_CRC8_0x1C3 = 3,     /* CRC8 with 0x1C3 polynomial */
    BCM_HASH_CONFIG_CRC8_0x1CF = 4,     /* CRC8 with 0x1CF polynomial */
    BCM_HASH_CONFIG_CRC16_0x17111 = 5,  /* CRC16 with 0x17111 polynomial */
    BCM_HASH_CONFIG_CRC16_0x10491 = 6,  /* CRC16 with 0x10491 polynomial */
    BCM_HASH_CONFIG_CRC16_0x155F5 = 7,  /* CRC16 with 0x155F5 polynomial */
    BCM_HASH_CONFIG_CRC16_0x1013D = 8,  /* CRC16 with 0x1013D polynomial */
    BCM_HASH_CONFIG_CRC16_0x13965 = 9,  /* CRC16 with 0x13965 polynomial */
    BCM_HASH_CONFIG_CRC16_0x1698D = 10, /* CRC16 with 0x1698D polynomial */
    BCM_HASH_CONFIG_CRC16_0x1105D = 11, /* CRC16 with 0x1105D polynomial */
    BCM_HASH_CONFIG_CRC16_0x10861 = 12, /* CRC16 with 0x10861 polynomial */
    BCM_HASH_CONFIG_CRC16_0x10285 = 13, /* CRC16 with 0x10285 polynomial */
    BCM_HASH_CONFIG_CRC16_0x101a1 = 14, /* CRC16 with 0x101a1 polynomial */
    BCM_HASH_CONFIG_CRC16_0x12499 = 15, /* CRC16 with 0x12499 polynomial */
    BCM_HASH_CONFIG_CRC16_0x1f801 = 16, /* CRC16 with 0x1f801 polynomial */
    BCM_HASH_CONFIG_CRC16_0x172e1 = 17, /* CRC16 with 0x172e1 polynomial */
    BCM_HASH_CONFIG_CRC16_0x1eb21 = 18, /* CRC16 with 0x1eb21 polynomial */
    BCM_HASH_CONFIG_FP_DATA = 19,       /* Use only data calculated by FP */
    BCM_HASH_CONFIG_ROUND_ROBIN = 20,   /* Round robin between ports per packet */
    BCM_HASH_CONFIG_CLOCK_BASED = 21,   /* Result based in clock (random) */
    BCM_HASH_CONFIG_CRC16_0x8003 = 22,  /* CRC16 with 0x8003 polynomial */
    BCM_HASH_CONFIG_CRC16_0x8011 = 23,  /* CRC16 with 0x8011 polynomial */
    BCM_HASH_CONFIG_CRC16_0x8423 = 24,  /* CRC16 with 0x8423 polynomial */
    BCM_HASH_CONFIG_CRC16_0x8101 = 25,  /* CRC16 with 0x8101 polynomial */
    BCM_HASH_CONFIG_CRC16_0x84a1 = 26,  /* CRC16 with 0x84a1 polynomial */
    BCM_HASH_CONFIG_CRC16_0x9019 = 27, 
    BCM_HASH_CONFIG_COUNT               /* Must be last */
} bcm_switch_hash_config_t;

/* header selection for trunk hashing */
#define BCM_HASH_HEADER_FORWARD     0x00000001 /* Select the forward header as
                                                  starting header for hashing */
#define BCM_HASH_HEADER_TERMINATED  0x00000002 /* Select the last terminated
                                                  header as starting header for
                                                  hashing */

/* RTAG7 Hash Field Control selection of payload and tunnel fields. */
#define BCM_HASH_SELECT_INNER_L2        0x1        /* Select the inner L2 fields
                                                      for hash fields selection. */
#define BCM_HASH_SELECT_OUTER_L2        0x2        /* Select the outer L2 fields
                                                      for hash fields selection. */
#define BCM_HASH_SELECT_INNER_L3        0x3        /* Select the inner L3 fields
                                                      for hash fields selection. */
#define BCM_HASH_SELECT_OUTER_L3        0x4        /* Select the outer L3 fields
                                                      for hash fields selection. */
#define BCM_HASH_SELECT_TUNNEL_INNER_L2 0x5        /* Select tunnel header and
                                                      inner L2 fields for hash
                                                      fields selection. */

/* IPv6 Collapse Methods for RTAG7 Hashing */
#define BCM_HASH_IP6_COLLAPSE_XOR   0x1        /* Select XOR method to collapse
                                                  IPv6 Addresses for RTAG7
                                                  hashing in field selection
                                                  block */
#define BCM_HASH_IP6_COLLAPSE_LSB   0x2        /* Select LSB method to collapse
                                                  IPv6 Addresses for RTAG7
                                                  hashing in field selection
                                                  block */

/* header selection for trunk hashing */
#define BCM_HASH_HEADER_FORWARD     0x00000001 /* Select the forward header as
                                                  starting header for hashing */
#define BCM_HASH_HEADER_TERMINATED  0x00000002 /* Select the last terminated
                                                  header as starting header for
                                                  hashing */

/* Symmetric hash field selection. */
#define BCM_SYMMETRIC_HASH_0_IP4_ENABLE     0x00000001 /* Enable symmetric key
                                                          hashing on Hash A for
                                                          IPV4 packets. */
#define BCM_SYMMETRIC_HASH_1_IP4_ENABLE     0x00000002 /* Enable symmetric key
                                                          hashing on Hash B for
                                                          IPV4 packets. */
#define BCM_SYMMETRIC_HASH_0_IP6_ENABLE     0x00000004 /* Enable symmetric key
                                                          hashing on Hash A for
                                                          IPV6 packets. */
#define BCM_SYMMETRIC_HASH_1_IP6_ENABLE     0x00000008 /* Enable symmetric key
                                                          hashing on Hash B for
                                                          IPV6 packets. */
#define BCM_SYMMETRIC_HASH_0_SUPPRESS_UNIDIR_FIELD_ENABLE 0x00000010 /* Enable setting SPI,
                                                          TEID, L2 GRE Key to
                                                          zero for Hash A
                                                          calculation. */
#define BCM_SYMMETRIC_HASH_1_SUPPRESS_UNIDIR_FIELD_ENABLE 0x00000020 /* Enable setting SPI,
                                                          TEID, L2 GRE Key to
                                                          zero for Hash B
                                                          calculation. */
#define BCM_SYMMETRIC_HASH_0_FCOE_ENABLE    0x00000040 /* Enable symmetric key
                                                          hashing on Hash A for
                                                          FCoE packets. */
#define BCM_SYMMETRIC_HASH_1_FCOE_ENABLE    0x00000080 /* Enable symmetric key
                                                          hashing on Hash B for
                                                          FCoE packets. */

/* Switch Event Control for event selection */
#define BCM_SWITCH_EVENT_CONTROL_ALL    (-1)       /* Selects All
                                                      interrupts-causes. */

/* Switch event action controls. */
typedef enum bcm_switch_event_control_action_e {
    bcmSwitchEventMask = _SHR_SWITCH_EVENT_MASK, /* Mask (disable) or unmask (enable) the
                                           event */
    bcmSwitchEventClear = _SHR_SWITCH_EVENT_CLEAR, /* Clear the event */
    bcmSwitchEventRead = _SHR_SWITCH_EVENT_READ, /* read the event */
    bcmSwitchEventForce = _SHR_SWITCH_EVENT_FORCE, /* Activate/diactivate forcing the event */
    bcmSwitchEventStormTimedCount = _SHR_SWITCH_EVENT_STORM_TIMED_COUNT, /* If more then
                                           bcmSwitchEventStormTimedCount
                                           interrupts occur in
                                           bcmSwitchEventStormTimedPeriod
                                           period, an interrupt storm is
                                           indicated (default hanling same as
                                           for bcmSwitchEventStormNominal
                                           threshold) */
    bcmSwitchEventStormTimedPeriod = _SHR_SWITCH_EVENT_STORM_TIMED_PERIOD, /* If more then
                                           bcmSwitchEventStormTimedCount
                                           interrupts occur in
                                           bcmSwitchEventStormTimedPeriod
                                           period, an interrupt storm is
                                           indicated (default hanling same as
                                           for bcmSwitchEventStormNominal
                                           threshold) */
    bcmSwitchEventStormNominal = _SHR_SWITCH_EVENT_STORM_NOMINAL, /* Nominal threshold for interrupt storm
                                           detection. If an interrupt occurs
                                           more times then the threshold, an
                                           interrupt storm is indicated. The
                                           default handling for such an
                                           interrupt is holding it in masked
                                           condition */
    bcmSwitchEventPriority = _SHR_SWITCH_EVENT_PRIORITY, /* Change handling priority in case of
                                           multiple interrupts */
    bcmSwitchEventLog = _SHR_SWITCH_EVENT_LOG, /* Activate/Diactivate log prints on
                                           event */
    bcmSwitchEventStat = _SHR_SWITCH_EVENT_STAT, /* Enable to Clear/Read event statistics */
    bcmSwitchEventCorrActOverride = _SHR_SWITCH_EVENT_CORR_ACT_OVERRIDE /* Enable to override application
                                           callback */
} bcm_switch_event_control_action_t;

/* Interrupt event operation */
typedef struct bcm_switch_event_control_s {
    int event_id;                       /* Event identifier, e.g. for interrupt
                                           event, device-specific enumerator per
                                           interrupt-cause. */
    int index;                          /* If multi-instance blocks represent
                                           the specific block index. */
    bcm_switch_event_control_action_t action; /* The action to perform on the
                                           indicated event. */
} bcm_switch_event_control_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Set event control. */
extern int bcm_switch_event_control_set(
    int unit, 
    bcm_switch_event_t event, 
    bcm_switch_event_control_t type, 
    uint32 value);

/* Get event control. */
extern int bcm_switch_event_control_get(
    int unit, 
    bcm_switch_event_t event, 
    bcm_switch_event_control_t type, 
    uint32 *value);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef enum bcm_switch_bst_tracking_mode_e {
    bcmSwitchBstTrackPeak = 0,      /* Track the peak usage. */
    bcmSwitchBstTrackCurrent = 1    /* Track the current usage. */
} bcm_switch_bst_tracking_mode_t;

/* Split Horizon network group configuration flags */
#define BCM_SWITCH_NETWORK_GROUP_MCAST_REMAP_ENABLE 0x00000001 
#define BCM_SWITCH_NETWORK_GROUP_INGRESS_PRUNE_ENABLE 0x00000002 
#define BCM_SWITCH_NETWORK_GROUP_EGRESS_PRUNE_ENABLE 0x00000004 

/* Split Horizon Network Group */
typedef int bcm_switch_network_group_t;

/* Split Horizon destination network group configuration information */
typedef struct bcm_switch_network_group_config_s {
    bcm_switch_network_group_t dest_network_group_id; /* Split Horizon Destination Network
                                           Group Identifier */
    uint32 config_flags;                /* BCM_SWITCH_NETWORK_GROUP_XXX flags */
} bcm_switch_network_group_config_t;

/* Initialize a bcm_switch_network_group_config_t structure. */
extern void bcm_switch_network_group_config_t_init(
    bcm_switch_network_group_config_t *config);

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Enable/Disable ingress pruning, egress pruning and ingress IPMC group
 * remap for a given pair of split horizon source network group and
 * destination network group.
 *             BCM5645x family of devices support 8 split horizon network
 * group. Split horizon network group id 0 is reserved.
 */
extern int bcm_switch_network_group_config_set(
    int unit, 
    bcm_switch_network_group_t source_network_group_id, 
    bcm_switch_network_group_config_t *config);

/* 
 * Get the enable/disable status of ingress pruning, egress pruning and
 * ingress IPMC group remap for a given pair of split horizon source
 * network group and destination network group.
 *             BCM5645x family of devices support 8 split horizon network
 * group. Split horizon network group id 0 is reserved.
 */
extern int bcm_switch_network_group_config_get(
    int unit, 
    bcm_switch_network_group_t source_network_group_id, 
    bcm_switch_network_group_config_t *config);

#endif /* BCM_HIDE_DISPATCHABLE */

/* User buffer type. */
typedef enum bcm_switch_user_buffer_type_e {
    bcmSwitchUserBufferTypeDram = 0 /* Dram User Buffer. */
} bcm_switch_user_buffer_type_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Write to the user buffer. */
extern int bcm_switch_user_buffer_write(
    int unit, 
    uint32 flags, 
    bcm_switch_user_buffer_type_t buff_type, 
    uint8 *buf, 
    int offset, 
    int nbytes);

/* Read from the user buffer. */
extern int bcm_switch_user_buffer_read(
    int unit, 
    uint32 flags, 
    bcm_switch_user_buffer_type_t buff_type, 
    uint8 *buf, 
    int offset, 
    int nbytes);

#endif /* BCM_HIDE_DISPATCHABLE */

/* header selection for trunk hashing */
#define BCM_SWITCH_USER_BUFFER_LOGICAL2PHY_TRANS 0x00000001 /* User buffer flag for
                                                          using logical to
                                                          physical translation,
                                                          instead of using
                                                          logical adresses */

#ifndef BCM_HIDE_DISPATCHABLE

/* Sets Ipv6 address and mask in reserved multicast address memory. */
extern int bcm_switch_ipv6_reserved_multicast_addr_set(
    int unit, 
    bcm_ip6_t ip6_addr, 
    bcm_ip6_t ip6_mask);

/* Gets Ipv6 address and mask from reserved multicast address memory. */
extern int bcm_switch_ipv6_reserved_multicast_addr_get(
    int unit, 
    bcm_ip6_t *ip6_addr, 
    bcm_ip6_t *ip6_mask);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef enum bcm_switch_object_e {
    bcmSwitchObjectL2EntryCurrent = 0,  /* Statistics of current L2 Entry. */
    bcmSwitchObjectVlanCurrent = 1,     /* Statistics of current Vlan Entry. */
    bcmSwitchObjectL3HostCurrent = 2,   /* Statistics of current L3 Hosts. */
    bcmSwitchObjectL3RouteCurrent = 3,  /* Statistics of current L3 Routes. */
    bcmSwitchObjectL3EgressCurrent = 4, /* Statistics of current L3 Egress
                                           objects. */
    bcmSwitchObjectIpmcCurrent = 5,     /* Statistics of current IP Multicast
                                           Objects. */
    bcmSwitchObjectEcmpCurrent = 6,     /* Statistics of current ECMP objects. */
    bcmSwitchObjectL3RouteV4RoutesMax = 7, /* Maximum number of v4 routes possible */
    bcmSwitchObjectL3RouteV4RoutesFree = 8, /* Maximum number of v4 routes that can
                                           be added in current state */
    bcmSwitchObjectL3RouteV4RoutesUsed = 9, /* Used count of v4 routes */
    bcmSwitchObjectL3RouteV6Routes64bMax = 10, /* Maximum number of 64bv6 routes
                                           possible */
    bcmSwitchObjectL3RouteV6Routes64bFree = 11, /* Maximum number of 64bV6 routes that
                                           can be added in current state */
    bcmSwitchObjectL3RouteV6Routes64bUsed = 12, /* Used count of 64bv6 routes */
    bcmSwitchObjectL3RouteV6Routes128bMax = 13, /* Maximum number of 128bV6 routes
                                           possible */
    bcmSwitchObjectL3RouteV6Routes128bFree = 14, /* Maximum number of 128bV6 routes that
                                           can be added in current state */
    bcmSwitchObjectL3RouteV6Routes128bUsed = 15, /* Used count of 128bv6 routes */
    bcmSwitchObjectL3RouteTotalUsedRoutes = 16, /* Sum of 44 + 64bv6 + 128bv6 routes */
    bcmSwitchObjectIpmcHeadTableFree = 17, /* Number of free entries in the
                                           replication head table */
    bcmSwitchObjectCount                /* Maximum object count. This is not an
                                           object and should always be in the
                                           last */
} bcm_switch_object_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Retrieving the statistics on the number of API objects. */
extern int bcm_switch_object_count_get(
    int unit, 
    bcm_switch_object_t object, 
    int *entries);

/* 
 * Retrieving the statistics on the number of API objects. This retrieves
 * for multiple objects.
 */
extern int bcm_switch_object_count_multi_get(
    int unit, 
    int object_size, 
    bcm_switch_object_t *object_array, 
    int *entries);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Services types. */
typedef enum bcm_switch_service_e {
    bcmServiceCounterCollection = 0,    /* Counters collection service. */
    bcmServiceRxLOS = 1,                /* RX LOS service. */
    bcmServiceCount                     /* Maximum object count. This is not an
                                           object and should always be in the
                                           last */
} bcm_switch_service_t;

/* Service enable configuration options. */
typedef enum bcm_switch_service_enabled_e {
    bcmServiceStateDisabled = 0,    /* Service disabled. */
    bcmServiceStateEnabled = 1,     /* Service enabled. */
    bcmServiceEnabledCount          /* Maximum object count. This is not an
                                       object and should always be in the last */
} bcm_switch_service_enabled_t;

/* Service configuration structure. */
typedef struct bcm_switch_service_config_s {
    uint32 flags;                       /* Option flags. */
    bcm_switch_service_enabled_t enabled; /* Service enable configuration. */
} bcm_switch_service_config_t;

/* Initialize a bcm_switch_service_config_t structure. */
extern void bcm_switch_service_config_t_init(
    bcm_switch_service_config_t *config);

#ifndef BCM_HIDE_DISPATCHABLE

/* Config an operation on specific service */
extern int bcm_switch_service_set(
    int unit, 
    bcm_switch_service_t service, 
    bcm_switch_service_config_t *config);

/* Get configuration status of specific service */
extern int bcm_switch_service_get(
    int unit, 
    bcm_switch_service_t service, 
    bcm_switch_service_config_t *config);

#endif /* BCM_HIDE_DISPATCHABLE */

/* MC queue group mode. */
typedef enum bcm_switch_control_mc_queue_config_mode_e {
    bcmSwitchMcUcPairGroupMode = 0, /* Each MC queue is paired with one UC queue */
    bcmSwitchAllMcGroupMode = 1     /* All MC queues are grouped together */
} bcm_switch_control_mc_queue_config_mode_t;

/* Flags for bcm_switch_l3_protocol_group_set / get */
#define BCM_SWITCH_L3_PROTOCOL_GROUP_NONE   0x0000     /* No protocols in this
                                                          group */
#define BCM_SWITCH_L3_PROTOCOL_GROUP_IPV4   0x0001     /* Add IPv4 to the group. */
#define BCM_SWITCH_L3_PROTOCOL_GROUP_IPV6   0x0002     /* Add IPv6 to the group. */
#define BCM_SWITCH_L3_PROTOCOL_GROUP_ARP    0x0004     /* Add ARP to the group. */
#define BCM_SWITCH_L3_PROTOCOL_GROUP_MPLS   0x0008     /* Add MPLS to the group. */
#define BCM_SWITCH_L3_PROTOCOL_GROUP_MIM    0x0010     /* Add MiM to the group. */
#define BCM_SWITCH_L3_PROTOCOL_GROUP_TRILL  0x0020     /* Add trill to the
                                                          group. */
#define BCM_SWITCH_L3_PROTOCOL_GROUP_FCOE   0x0040     /* Add FCOE to the group. */

/* 
 * Protocol group to which l3 protocols will be mapped for multiple mymac
 * termination
 */
typedef uint32 bcm_l3_protocol_group_id_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Assign protocol groups for multiple mymac termination. */
extern int bcm_switch_l3_protocol_group_set(
    int unit, 
    uint32 group_members, 
    bcm_l3_protocol_group_id_t group_id);

/* Assign protocol groups for multiple mymac termination. */
extern int bcm_switch_l3_protocol_group_get(
    int unit, 
    uint32 *group_members, 
    bcm_l3_protocol_group_id_t *group_id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* profile mapping type. */
typedef enum bcm_switch_profile_mapping_type_e {
    bcmCosqIngressQueueToRateClass = 0  /* ingress queue to rate class mapping */
} bcm_switch_profile_mapping_type_t;

/* profile mapping struct. */
typedef struct bcm_switch_profile_mapping_s {
    bcm_switch_profile_mapping_type_t profile_type; /* The type of profile to be mapped to. */
    bcm_gport_t mapped_profile;         /* mapped profile handle */
} bcm_switch_profile_mapping_t;

/* Initialize a profile mapping structure. */
extern void bcm_switch_profile_mapping_t_init(
    bcm_switch_profile_mapping_t *profile_mapping);

#endif /* __BCM_SWITCH_H__ */
