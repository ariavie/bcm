/*
 * $Id: afad5ee0e3db83f50ce3cf9cd8e09ae1ea85d232 $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_NAT_H__
#define __BCM_NAT_H__

#if defined(INCLUDE_L3)

#include <bcm/types.h>
#include <bcm/l3.h>

/* L3 NAT ingress. */
#define BCM_L3_NAT_INGRESS_DNAT         (1 << 0)   /* 1: DNAT entry, 0: SNAT
                                                      entry. */
#define BCM_L3_NAT_INGRESS_DNAT_POOL    (1 << 1)   /* Indicates DNAT pool entry. */
#define BCM_L3_NAT_INGRESS_TYPE_NAPT    (1 << 2)   /* 0: Indicates NAT entry. 1:
                                                      Indicates NAPT entry. */
#define BCM_L3_NAT_INGRESS_RPE          (1 << 3)   /* Assign internal priority
                                                      from DNAT entry. */
#define BCM_L3_NAT_INGRESS_DST_DISCARD  (1 << 4)   /* Discard the packet on DIP
                                                      match. */
#define BCM_L3_NAT_INGRESS_MULTIPATH    (1 << 5)   /* Entry is for ECMP. */
#define BCM_L3_NAT_INGRESS_HIT          (1 << 6)   /* SNAT/DNAT entry match. */
#define BCM_L3_NAT_INGRESS_REPLACE      (1 << 7)   /* Replace existing entry. */

/* L3 NAT egress packet edit flags. */
#define BCM_L3_NAT_EGRESS_SNAT      (1 << 0)   /* Entry is for SNAT. */
#define BCM_L3_NAT_EGRESS_DNAT      (1 << 1)   /* Entry is for DNAT. */
#define BCM_L3_NAT_EGRESS_NAPT      (1 << 2)   /* Entry is for NAPT. */
#define BCM_L3_NAT_EGRESS_REPLACE   (1 << 3)   /* Replace existing entry. */
#define BCM_L3_NAT_EGRESS_WITH_ID   (1 << 4)   /* ID is provided. */

/* Egress nat table entry specification. */
typedef struct bcm_l3_nat_egress_s {
    uint32 flags;           /* See BCM_L3_NAT_EGRESS_XXX flag definitions. */
    bcm_l3_nat_id_t nat_id; /* Index into packet edit table. */
    bcm_ip_t sip_addr;      /* Translated source IP. */
    bcm_ip_t sip_addr_mask; /* Bits of source IP prefix to translate. */
    uint16 src_port;        /* Source l4 port for NAPT */
    bcm_ip_t dip_addr;      /* Translated dest IP. */
    bcm_ip_t dip_addr_mask; /* Bits of dest IP prefix to translate. */
    uint16 dst_port;        /* Destination l4 port for NAPT */
} bcm_l3_nat_egress_t;

/* 
 * L3 Ingress NAT Structure.
 * 
 * Contains information required for manipulating either DNAT, DNAT pool
 * or SNAT table entries.
 */
typedef struct bcm_l3_nat_ingress_s {
    uint32 flags;           /* See BCM_L3_NAT_INGRESS_XXX flag definitions. */
    bcm_ip_t ip_addr;       /* IP address to be translated. */
    bcm_vrf_t vrf;          /* Virtual router instance. */
    uint16 l4_port;         /* TCP/UDP port. */
    uint8 ip_proto;         /* IP proto. */
    bcm_l3_nat_id_t nat_id; /* nat edit index to use on egress on hit. */
    bcm_cos_t pri;          /* New priority in packet. */
    int class_id;           /* Classification lookup class id. */
    bcm_if_t nexthop;       /* Nexthop of ecmp_ptr depending on MULTIPATH flag
                               setting. */
} bcm_l3_nat_ingress_t;

/* bcm_l3_nat_egress_traverse_cb */
typedef int (*bcm_l3_nat_egress_traverse_cb)(
    int unit, 
    int index, 
    bcm_l3_nat_egress_t *nat_info, 
    void *user_data);

/* Initialize a bcm_l3_nat_egress_t structure. */
extern void bcm_l3_nat_egress_t_init(
    bcm_l3_nat_egress_t *nat_info);

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Add an egress NAT packet edit entry and return the index in nat_id
 * field of nat_info structure. If REPLACE flag is specified then use
 * nat_id field as the location to add the entry.
 */
extern int bcm_l3_nat_egress_add(
    int unit, 
    bcm_l3_nat_egress_t *nat_info);

/* Delete an egress NAT packet edit entry at the specified index nat_id */
extern int bcm_l3_nat_egress_delete(
    int unit, 
    bcm_l3_nat_id_t nat_id);

/* 
 * Retrieve the egress NAT packet edit entry at the specified index in
 * nat_info structure
 */
extern int bcm_l3_nat_egress_get(
    int unit, 
    bcm_l3_nat_egress_t *nat_info);

/* 
 * Traverse through the egress NAT packet edit table and invoke a user
 * provided callback for each valid entry.
 */
extern int bcm_l3_nat_egress_traverse(
    int unit, 
    uint32 flags, 
    uint32 start, 
    uint32 end, 
    bcm_l3_nat_egress_traverse_cb cb, 
    void *user_data);

#endif /* BCM_HIDE_DISPATCHABLE */

/* L3 NAT statistics maintained per l3 egress nat. */
typedef enum bcm_l3_nat_egress_stat_e {
    bcmL3NatOutPackets = 0, /* Packets that egress on the l3 Nat nat */
    bcmL3NatOutBytes = 1    /* Bytes that egress on the l3 Nat */
} bcm_l3_nat_egress_stat_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Attach counter entries to the given l3 Egress NAT. */
extern int bcm_l3_nat_egress_stat_attach(
    int unit, 
    bcm_l3_nat_egress_t *info, 
    uint32 stat_counter_id);

/* Detach counter entries to the given l3 Egress NAT. */
extern int bcm_l3_nat_egress_stat_detach(
    int unit, 
    bcm_l3_nat_egress_t *info);

/* Get egress nat counter value for specified l3 Egress NAT */
extern int bcm_l3_nat_egress_stat_counter_get(
    int unit, 
    bcm_l3_nat_egress_t *info, 
    bcm_l3_nat_egress_stat_t stat, 
    uint32 num_entries, 
    uint32 *counter_indexes, 
    bcm_stat_value_t *counter_values);

/* Get egress nat counter value for specified l3 Egress NAT */
extern int bcm_l3_nat_egress_stat_counter_sync_get(
    int unit, 
    bcm_l3_nat_egress_t *info, 
    bcm_l3_nat_egress_stat_t stat, 
    uint32 num_entries, 
    uint32 *counter_indexes, 
    bcm_stat_value_t *counter_values);

/* Set egress nat counter value for specified l3 Egress NAT */
extern int bcm_l3_nat_egress_stat_counter_set(
    int unit, 
    bcm_l3_nat_egress_t *info, 
    bcm_l3_nat_egress_stat_t stat, 
    uint32 num_entries, 
    uint32 *counter_indexes, 
    bcm_stat_value_t *counter_values);

/* Get 64-bit counter value for multiple egress nat statistic types. */
extern int bcm_l3_nat_egress_stat_multi_get(
    int unit, 
    bcm_l3_nat_egress_t *info, 
    int nstat, 
    bcm_l3_nat_egress_stat_t *stat_arr, 
    uint64 *value_arr);

/* 
 * Get lower 32-bit counter value for multiple egress nat statistic
 * types.
 */
extern int bcm_l3_nat_egress_stat_multi_get32(
    int unit, 
    bcm_l3_nat_egress_t *info, 
    int nstat, 
    bcm_l3_nat_egress_stat_t *stat_arr, 
    uint32 *value_arr);

/* Set 64-bit counter value for multiple egress nat statistic types. */
extern int bcm_l3_nat_egress_stat_multi_set(
    int unit, 
    bcm_l3_nat_egress_t *info, 
    int nstat, 
    bcm_l3_nat_egress_stat_t *stat_arr, 
    uint64 *value_arr);

/* 
 * Set lower 32-bit counter value for multiple egress nat statistic
 * types.
 */
extern int bcm_l3_nat_egress_stat_multi_set32(
    int unit, 
    bcm_l3_nat_egress_t *info, 
    int nstat, 
    bcm_l3_nat_egress_stat_t *stat_arr, 
    uint32 *value_arr);

/* Provide stat counter ids associated with given l3 Egress NAT */
extern int bcm_l3_nat_egress_stat_id_get(
    int unit, 
    bcm_l3_nat_egress_t *info, 
    bcm_l3_nat_egress_stat_t stat, 
    uint32 *stat_counter_id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* bcm_l3_nat_ingress_traverse_cb */
typedef int (*bcm_l3_nat_ingress_traverse_cb)(
    int unit, 
    int index, 
    bcm_l3_nat_ingress_t *nat_info, 
    void *user_data);

/* Initialize a bcm_l3_nat_ingress_t structure. */
extern void bcm_l3_nat_ingress_t_init(
    bcm_l3_nat_ingress_t *nat_info);

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Add an ingress NAT table entry. Depending on the flags settings an
 * entry is added to either the ingress DNAT pool table, DNAT session
 * table or SNAT session table.
 */
extern int bcm_l3_nat_ingress_add(
    int unit, 
    bcm_l3_nat_ingress_t *nat_info);

/* 
 * Delete an ingress NAT table entry. Depending on the flags settings an
 * entry is deleted from either the ingress DNAT pool table, DNAT session
 * table or SNAT session table.
 */
extern int bcm_l3_nat_ingress_delete(
    int unit, 
    bcm_l3_nat_ingress_t *nat_info);

/* 
 * Find an ingress NAT table entry. Depending on the flags settings an
 * entry is searched for in  either the ingress DNAT pool table, DNAT
 * session table or SNAT session table.
 */
extern int bcm_l3_nat_ingress_find(
    int unit, 
    bcm_l3_nat_ingress_t *nat_info);

/* 
 * Delete all entries in an ingress NAT table. Depending on the flags
 * settings entries are deleted from either the ingress DNAT pool table,
 * DNAT session table or SNAT session table.
 */
extern int bcm_l3_nat_ingress_delete_all(
    int unit, 
    bcm_l3_nat_ingress_t *nat_info);

/* Run aging on either DNAT session or SNAT session table. */
extern int bcm_l3_nat_ingress_age(
    int unit, 
    uint32 flags, 
    bcm_l3_nat_ingress_traverse_cb age_cb, 
    void *user_data);

/* 
 * Traverse through the ingress NAT table specified by flags and invoke a
 * user provided callback for each valid entry.
 */
extern int bcm_l3_nat_ingress_traverse(
    int unit, 
    uint32 flags, 
    uint32 start, 
    uint32 end, 
    bcm_l3_nat_ingress_traverse_cb cb, 
    void *user_data);

#endif /* defined(INCLUDE_L3) */

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_NAT_H__ */
