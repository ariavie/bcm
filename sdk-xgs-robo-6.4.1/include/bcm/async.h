/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: 017277e9b2d331eae80db66fa81307d3d299d251 $
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * File:	async.h
 * Purpose:	Asynchronous BCM API routines
 * Generator:	mkdispatch 1.54
 * Generated:	Tue Jun 10 17:42:06 2014
 */

#ifndef	_BCM_ASYNC_H
#define	_BCM_ASYNC_H

#include <bcm/types.h>
#include <bcm/auth.h>
#include <bcm/bcmi2c.h>
#include <bcm/bfd.h>
#include <bcm/bregex.h>
#include <bcm/ces.h>
#include <bcm/cosq.h>
#include <bcm/custom.h>
#include <bcm/eav.h>
#include <bcm/ecn.h>
#include <bcm/error.h>
#include <bcm/extender.h>
#include <bcm/fabric.h>
#include <bcm/failover.h>
#include <bcm/fcmap.h>
#include <bcm/fcoe.h>
#include <bcm/field.h>
#include <bcm/init.h>
#include <bcm/ipfix.h>
#include <bcm/ipmc.h>
#include <bcm/knet.h>
#include <bcm/l2.h>
#include <bcm/l2gre.h>
#include <bcm/l3.h>
#include <bcm/link.h>
#include <bcm/macsec.h>
#include <bcm/mcast.h>
#include <bcm/mim.h>
#include <bcm/mirror.h>
#include <bcm/module.h>
#include <bcm/mpls.h>
#include <bcm/multicast.h>
#include <bcm/nat.h>
#include <bcm/niv.h>
#include <bcm/oam.h>
#include <bcm/pkt.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/proxy.h>
#include <bcm/ptp.h>
#include <bcm/qos.h>
#include <bcm/rate.h>
#include <bcm/rx.h>
#include <bcm/sat.h>
#include <bcm/stack.h>
#include <bcm/stat.h>
#include <bcm/stg.h>
#include <bcm/subport.h>
#include <bcm/switch.h>
#include <bcm/time.h>
#include <bcm/topo.h>
#include <bcm/trill.h>
#include <bcm/trunk.h>
#include <bcm/tunnel.h>
#include <bcm/tx.h>
#include <bcm/txbeacon.h>
#include <bcm/udf.h>
#include <bcm/vlan.h>
#include <bcm/vswitch.h>
#include <bcm/vxlan.h>
#include <bcm/wlan.h>

#ifdef	BCM_ASYNC_SUPPORT

typedef void (*bcm_async_cb_t)(void *cookie, int retval);

void	_bcm_shutdown_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_async(int unit, char * type, char * subtype, int remunit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_check_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_max_async(int * max_units, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_register_async(int unit, bcm_attach_cb_t cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_unregister_async(int unit, bcm_attach_cb_t cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_egress_get_async(int unit, int port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_egress_set_async(int unit, int port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_add_async(int unit, int port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_control_get_async(int unit, bcm_auth_mac_control_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_control_set_async(int unit, bcm_auth_mac_control_t type, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_delete_async(int unit, int port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_delete_all_async(int unit, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mode_get_async(int unit, int port, uint32 * modep, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mode_set_async(int unit, int port, uint32 mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_unauth_callback_async(int unit, bcm_auth_cb_t func, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_BFD
void	bcm_bfd_auth_sha1_get_async(int unit, int index, bcm_bfd_auth_sha1_t * sha1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_auth_sha1_set_async(int unit, int index, bcm_bfd_auth_sha1_t * sha1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_auth_simple_password_get_async(int unit, int index, bcm_bfd_auth_simple_password_t * sp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_auth_simple_password_set_async(int unit, int index, bcm_bfd_auth_simple_password_t * sp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_create_async(int unit, bcm_bfd_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_destroy_async(int unit, bcm_bfd_endpoint_t endpoint, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_get_async(int unit, bcm_bfd_endpoint_t endpoint, bcm_bfd_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_poll_async(int unit, bcm_bfd_endpoint_t endpoint, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_endpoint_stat_get_async(int unit, bcm_bfd_endpoint_t endpoint, bcm_bfd_endpoint_stat_t * ctr_info, uint8 clear, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_event_register_async(int unit, bcm_bfd_event_types_t event_types, bcm_bfd_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_event_unregister_async(int unit, bcm_bfd_event_types_t event_types, bcm_bfd_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_bfd_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_BFD */
#ifdef	INCLUDE_CES
void	bcm_ces_attach_ethernet_async(int unit, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_cb_register_async(int unit, bcm_ces_event_types_t events, bcm_ces_event_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_cb_unregister_async(int unit, bcm_ces_event_types_t events, bcm_ces_event_cb callback, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_egress_status_get_async(int unit, bcm_ces_service_t ces_service, bcm_ces_service_egress_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_ethernet_config_get_async(int unit, int port, bcm_ces_mac_cmd_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_ethernet_config_set_async(int unit, int port, bcm_ces_mac_cmd_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_cas_packet_enable_async(int unit, bcm_ces_service_t ces_service, bcm_ces_cas_packet_control_t * cas_packet, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_config_get_async(int unit, bcm_ces_service_t ces_service, bcm_ces_service_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_control_word_get_async(int unit, bcm_ces_service_t ces_service, uint16 * tx_control_word_mask, uint16 * tx_control_word, uint16 * rx_control_word, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_control_word_set_async(int unit, bcm_ces_service_t ces_service, uint16 tx_control_word_mask, uint16 tx_control_word, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_create_async(int unit, int flags, bcm_ces_service_config_t * config, bcm_ces_service_t * ces_service, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_destroy_async(int unit, bcm_ces_service_t ces_service, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_enable_get_async(int unit, bcm_ces_service_t ces_service, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_enable_set_async(int unit, bcm_ces_service_t ces_service, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_ingress_cas_enable_get_async(int unit, bcm_ces_service_t ces_service, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_ingress_cas_enable_set_async(int unit, bcm_ces_service_t ces_service, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_pm_clear_async(int unit, bcm_ces_service_t ces_service, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_pm_get_async(int unit, bcm_ces_service_t ces_service, bcm_ces_service_pm_stats_t * stats, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_rclock_config_get_async(int unit, bcm_ces_service_t ces_service, bcm_ces_rclock_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_service_rclock_config_set_async(int unit, bcm_ces_service_t ces_service, bcm_ces_rclock_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_services_cclk_config_get_async(int unit, bcm_ces_cclk_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_services_cclk_config_set_async(int unit, bcm_ces_cclk_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_services_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_services_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ces_services_traverse_async(int unit, uint32 flags, bcm_ces_service_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_CES */
void	bcm_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_profile_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, bcm_cosq_bst_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_profile_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, bcm_cosq_bst_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_clear_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, uint32 options, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_get32_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_bst_stat_id_t bid, uint32 options, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_multi_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 options, int max_values, bcm_bst_stat_id_t * id_list, uint64 * values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_multi_get32_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 options, int max_values, bcm_bst_stat_id_t * id_list, uint32 * values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_bst_stat_sync_async(int unit, bcm_bst_stat_id_t bid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_create_async(int unit, bcm_cosq_classifier_t * classifier, int * classifier_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_destroy_async(int unit, int classifier_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_get_async(int unit, int classifier_id, bcm_cosq_classifier_t * classifier, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_mapping_clear_async(int unit, bcm_gport_t port, int classifier_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_mapping_get_async(int unit, bcm_gport_t port, int classifier_id, bcm_gport_t * queue_group, bcm_cos_t priority, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_mapping_multi_get_async(int unit, bcm_gport_t port, int classifier_id, bcm_gport_t * queue_group, int array_max, bcm_cos_t * priority_array, bcm_cos_queue_t * cosq_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_mapping_multi_set_async(int unit, bcm_gport_t port, int classifier_id, bcm_gport_t queue_group, int array_count, bcm_cos_t * priority_array, bcm_cos_queue_t * cosq_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_classifier_mapping_set_async(int unit, bcm_gport_t port, int classifier_id, bcm_gport_t queue_group, bcm_cos_t priority, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_config_get_async(int unit, int * numq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_config_set_async(int unit, int numq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_control_get_async(int unit, bcm_gport_t port, bcm_cos_queue_t cosq, bcm_cosq_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_control_set_async(int unit, bcm_gport_t port, bcm_cos_queue_t cosq, bcm_cosq_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_cpu_cosq_enable_get_async(int unit, bcm_cos_queue_t cosq, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_cpu_cosq_enable_set_async(int unit, bcm_cos_queue_t cosq, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_delay_tolerance_level_get_async(int unit, int delay_tolerance_level, bcm_cosq_delay_tolerance_t * delay_tolerance, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_delay_tolerance_level_set_async(int unit, int delay_tolerance_level, bcm_cosq_delay_tolerance_t * delay_tolerance, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_dest_credit_size_get_async(int unit, bcm_module_t dest_modid, uint32 * credit_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_dest_credit_size_set_async(int unit, bcm_module_t dest_modid, uint32 credit_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_get_async(int unit, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_port_get_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 color, int * drop_start, int * drop_slope, int * average_time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_port_set_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 color, int drop_start, int drop_slope, int average_time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_set_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_fabric_distribution_add_async(int unit, bcm_fabric_distribution_t ds_id, int num_cos_levels, uint32 flags, bcm_gport_t * req_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_fabric_distribution_get_async(int unit, bcm_fabric_distribution_t ds_id, int * num_cos_levels, bcm_gport_t * req_gport, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_fc_path_add_async(int unit, bcm_cosq_fc_direction_type_t fc_direction, bcm_cosq_fc_endpoint_t * source, bcm_cosq_fc_endpoint_t * target, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_fc_path_delete_async(int unit, bcm_cosq_fc_direction_type_t fc_direction, bcm_cosq_fc_endpoint_t * source, bcm_cosq_fc_endpoint_t * target, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_fc_path_get_async(int unit, bcm_cosq_fc_direction_type_t fc_direction, bcm_cosq_fc_endpoint_t * source, int target_max, bcm_cosq_fc_endpoint_t * target, int * target_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_add_async(int unit, bcm_gport_t port, int numq, uint32 flags, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_attach_async(int unit, bcm_gport_t sched_port, bcm_gport_t input_port, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_attach_get_async(int unit, bcm_gport_t sched_port, bcm_gport_t * input_port, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_bandwidth_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 * kbits_sec_min, uint32 * kbits_sec_max, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_bandwidth_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 kbits_sec_min, uint32 kbits_sec_max, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_child_get_async(int unit, bcm_gport_t in_gport, bcm_cos_queue_t cosq, bcm_gport_t * out_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_color_size_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_color_t color, uint32 flags, bcm_cosq_gport_size_t * gport_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_color_size_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_color_t color, uint32 flags, bcm_cosq_gport_size_t * gport_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_congestion_config_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_congestion_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_congestion_config_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_congestion_info_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_connection_get_async(int unit, bcm_cosq_gport_connection_t * gport_connect, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_connection_set_async(int unit, bcm_cosq_gport_connection_t * gport_connect, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_delete_async(int unit, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_destmod_attach_async(int unit, bcm_gport_t gport, bcm_port_t ingress_port, bcm_module_t dest_modid, int fabric_egress_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_destmod_detach_async(int unit, bcm_gport_t gport, bcm_port_t ingress_port, bcm_module_t dest_modid, int fabric_egress_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_detach_async(int unit, bcm_gport_t sched_port, bcm_gport_t input_port, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_discard_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_discard_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_dynamic_sched_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_dynamic_state_t state, int * weight, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_dynamic_sched_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_dynamic_state_t state, int weight, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_egress_map_get_async(int unit, bcm_gport_t gport, bcm_cos_t ingress_pri, bcm_color_t ingress_dp, bcm_cos_queue_t * offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_egress_map_set_async(int unit, bcm_gport_t gport, bcm_cos_t ingress_pri, bcm_color_t ingress_dp, bcm_cos_queue_t offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_egress_multicast_config_get_async(int unit, bcm_gport_t gport, bcm_cos_t ingress_pri, bcm_color_t ingress_dp, uint32 flags, bcm_cosq_egress_multicast_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_egress_multicast_config_set_async(int unit, bcm_gport_t gport, bcm_cos_t ingress_pri, bcm_color_t ingress_dp, uint32 flags, bcm_cosq_egress_multicast_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_enable_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_enable_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_flow_control_get_async(int unit, bcm_gport_t port, bcm_cos_t int_pri, uint32 * flow_control_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_flow_control_set_async(int unit, bcm_gport_t port, bcm_cos_t int_pri, uint32 flow_control_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_get_async(int unit, bcm_gport_t gport, bcm_gport_t * physical_port, int * num_cos_levels, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_handle_core_get_async(int unit, int core, bcm_cosq_gport_info_core_t * gport_info, bcm_gport_t * out_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_handle_get_async(int unit, bcm_cosq_gport_type_t gport_type, bcm_cosq_gport_info_t * gport_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_mapping_get_async(int unit, bcm_port_t ing_port, bcm_cos_t int_pri, uint32 flags, bcm_gport_t * gport, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_mapping_set_async(int unit, bcm_port_t ing_port, bcm_cos_t int_pri, uint32 flags, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_multipath_add_async(int unit, bcm_gport_t multipath_gport, bcm_gport_t member_gport, bcm_cos_queue_t member_gport_cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_multipath_delete_async(int unit, bcm_gport_t multipath_gport, bcm_gport_t member_gport, bcm_cos_queue_t member_gport_cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_multipath_get_async(int unit, bcm_gport_t multipath_gport, int member_gport_max, bcm_gport_t * member_gport_array, bcm_cos_queue_t * member_gport_cosq_array, int * member_gport_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_parent_get_async(int unit, bcm_gport_t child_port, bcm_cos_queue_t cos, bcm_gport_t * parent_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_pon_link_sla_get_async(int unit, bcm_gport_t gport, bcm_cos_pon_link_sla_t * link_sla, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_pon_link_sla_set_async(int unit, bcm_gport_t gport, bcm_cos_pon_link_sla_t * link_sla, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_queue_attach_async(int unit, uint32 flags, bcm_gport_t ingress_queue, bcm_cos_t ingress_int_pri, bcm_gport_t egress_queue, bcm_cos_t egress_int_pri, int * attach_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_queue_attach_get_async(int unit, bcm_gport_t ingress_queue, bcm_cos_t ingress_int_pri, bcm_gport_t * egress_queue, bcm_cos_t * egress_int_pri, int attach_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_queue_detach_async(int unit, bcm_gport_t ingress_queue, bcm_cos_t ingress_int_pri, int attach_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_reattach_async(int unit, bcm_gport_t sched_port, bcm_gport_t input_port, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_report_threshold_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_report_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_report_threshold_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_report_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_sched_config_get_async(int unit, bcm_gport_t gport, int sched_mode, int int_pri, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_sched_config_set_async(int unit, bcm_gport_t gport, int sched_mode, int int_pri, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_sched_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int * mode, int * weight, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_sched_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int mode, int weight, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_size_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 * bytes_min, uint32 * bytes_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_size_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 bytes_min, uint32 bytes_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_config_get_async(int unit, bcm_gport_t gport, bcm_gport_t lgl_gport, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_gport_stat_profile_t * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_config_set_async(int unit, bcm_gport_t gport, bcm_gport_t lgl_gport, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_gport_stat_profile_t profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_enable_get_async(int unit, bcm_gport_t gport, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_enable_set_async(int unit, bcm_gport_t gport, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_stats_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_stats_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_sync_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_stats_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_statistic_get_async(int unit, bcm_gport_t gport, bcm_gport_t lgl_gport, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_gport_stats_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_statistic_multi_get_async(int unit, bcm_gport_t gport, bcm_gport_t lgl_gport, bcm_cos_queue_t cosq, int stat_count, bcm_cosq_gport_stats_t * stats_array, int value_count, uint64 * value_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_statistic_multi_set_async(int unit, bcm_gport_t gport, bcm_gport_t lgl_gport, bcm_cos_queue_t cosq, int stat_count, bcm_cosq_gport_stats_t * stats_array, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_statistic_set_async(int unit, bcm_gport_t gport, bcm_gport_t lgl_gport, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_gport_stats_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_threshold_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_threshold_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_traverse_async(int unit, bcm_cosq_gport_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_add_async(int unit, bcm_gport_t vsq, bcm_gport_t queue, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_create_async(int unit, bcm_cosq_vsq_info_t * vsq_info, bcm_gport_t * vsq_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_delete_async(int unit, bcm_gport_t vsq, bcm_gport_t queue, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_delete_all_async(int unit, bcm_gport_t vsq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_destroy_async(int unit, bcm_gport_t vsq_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_vsq_get_async(int unit, bcm_gport_t vsq, int queue_max, bcm_gport_t * queue_array, bcm_cos_queue_t * cosq_array, int * queue_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mapping_get_async(int unit, bcm_cos_t priority, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mapping_set_async(int unit, bcm_cos_t priority, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_config_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_pfc_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_pfc_config_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_pfc_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_bandwidth_get_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 * kbits_sec_min, uint32 * kbits_sec_max, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_bandwidth_set_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 kbits_sec_min, uint32 kbits_sec_max, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_mapping_get_async(int unit, bcm_port_t port, bcm_cos_t priority, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_mapping_set_async(int unit, bcm_port_t port, bcm_cos_t priority, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_sched_get_async(int unit, bcm_pbmp_t pbm, int * mode, int weights[BCM_COS_COUNT], int * delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_sched_set_async(int unit, bcm_pbmp_t pbm, int mode, const int weights[BCM_COS_COUNT], int delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_get_async(int unit, int start_queue, int end_queue, int * pri_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_profile_get_async(int unit, int pri_profile_id, int * count, bcm_cosq_gport_priority_profile_t * pri_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_profile_set_async(int unit, int pri_profile_id, int count, bcm_cosq_gport_priority_profile_t * pri_profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_priority_set_async(int unit, int start_queue, int end_queue, int pri_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_profile_mapping_get_async(int unit, bcm_gport_t gport_to_map, bcm_cos_queue_t cosq, uint32 flags, bcm_switch_profile_mapping_t * profile_mapping, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_profile_mapping_set_async(int unit, bcm_gport_t gport_to_map, bcm_cos_queue_t cosq, uint32 flags, bcm_switch_profile_mapping_t * profile_mapping, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_qcn_config_get_async(int unit, bcm_gport_t port, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_qcn_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_qcn_config_set_async(int unit, bcm_gport_t port, bcm_cos_queue_t cosq, uint32 flags, bcm_cosq_qcn_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sched_get_async(int unit, int * mode, int weights[BCM_COS_COUNT], int * delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sched_set_async(int unit, int mode, const int weights[BCM_COS_COUNT], int delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sched_weight_max_get_async(int unit, int mode, int * weight_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_service_pool_get_async(int unit, bcm_service_pool_id_t id, bcm_cosq_service_pool_t * cosq_service_pool, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_service_pool_set_async(int unit, bcm_service_pool_id_t id, bcm_cosq_service_pool_t cosq_service_pool, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_get32_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_set32_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_sync_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_stat_sync_get32_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_stat_t stat, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subscriber_map_add_async(int unit, bcm_cosq_subscriber_map_t * map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subscriber_map_delete_async(int unit, bcm_cosq_subscriber_map_t * map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subscriber_map_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subscriber_map_get_async(int unit, bcm_cosq_subscriber_map_t * map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_subscriber_traverse_async(int unit, bcm_cosq_subscriber_map_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_port_get_async(int unit, bcm_port_t port, int type, int max_len, uint32 * args, int * actual_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_port_set_async(int unit, bcm_port_t port, int type, int len, uint32 * args, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_register_async(int unit, bcm_custom_cb_t func, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_unregister_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_detach_retry_get_async(int unit, bcm_detach_retry_t * retry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_detach_retry_set_async(int unit, bcm_detach_retry_t * retry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_bandwidth_get_async(int unit, bcm_port_t port, bcm_eav_stream_class_t type, uint32 * bytes_sec, uint32 * bytes_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_bandwidth_set_async(int unit, bcm_port_t port, bcm_eav_stream_class_t type, uint32 bytes_sec, uint32 bytes_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_control_get_async(int unit, bcm_eav_control_t type, uint32 * arg, uint32 * arg2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_control_set_async(int unit, bcm_eav_control_t type, uint32 arg, uint32 arg2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_link_status_get_async(int unit, bcm_port_t port, int * link, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_link_status_set_async(int unit, bcm_port_t port, int link, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_pcp_mapping_get_async(int unit, bcm_eav_stream_class_t type, int * pcp, int * remapped_pcp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_pcp_mapping_set_async(int unit, bcm_eav_stream_class_t type, int pcp, int remapped_pcp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_port_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_port_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_srp_mac_ethertype_get_async(int unit, bcm_mac_t mac, bcm_port_ethertype_t * ethertype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_srp_mac_ethertype_set_async(int unit, bcm_mac_t mac, bcm_port_ethertype_t ethertype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_timestamp_get_async(int unit, bcm_port_t port, uint32 * timestamp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_timesync_mac_get_async(int unit, bcm_mac_t eav_mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_timesync_mac_set_async(int unit, bcm_mac_t eav_mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_responsive_protocol_get_async(int unit, uint8 ip_proto, int * responsive, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_responsive_protocol_set_async(int unit, uint8 ip_proto, int responsive, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_traffic_action_config_get_async(int unit, bcm_ecn_traffic_action_config_t * ecn_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_traffic_action_config_set_async(int unit, bcm_ecn_traffic_action_config_t * ecn_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_traffic_map_get_async(int unit, bcm_ecn_traffic_map_info_t * map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ecn_traffic_map_set_async(int unit, bcm_ecn_traffic_map_info_t * map, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_PTP
void	bcm_esmc_QL_SSM_map_async(int unit, bcm_esmc_network_option_t opt, bcm_esmc_quality_level_t ql, uint8 * ssm_code, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_SSM_QL_map_async(int unit, bcm_esmc_network_option_t opt, uint8 ssm_code, bcm_esmc_quality_level_t * ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_g781_option_get_async(int unit, int stack_id, bcm_esmc_network_option_t * g781_option, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_g781_option_set_async(int unit, int stack_id, bcm_esmc_network_option_t g781_option, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_rx_callback_register_async(int unit, int stack_id, bcm_esmc_rx_cb rx_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_rx_callback_unregister_async(int unit, int stack_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_tunnel_get_async(int unit, int stack_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_tunnel_set_async(int unit, int stack_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_esmc_tx_async(int unit, int stack_id, bcm_pbmp_t pbmp, bcm_esmc_pdu_data_t * esmc_pdu_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_PTP */
#ifdef	INCLUDE_L3
void	bcm_extender_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_encap_create_async(int unit, bcm_extender_encap_t * extender_encap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_encap_destroy_async(int unit, bcm_gport_t * extender_encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_encap_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_encap_get_async(int unit, bcm_extender_encap_t * extender_encap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_encap_traverse_async(int unit, bcm_extender_encap_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_forward_add_async(int unit, bcm_extender_forward_t * extender_forward_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_forward_delete_async(int unit, bcm_extender_forward_t * extender_forward_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_forward_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_forward_get_async(int unit, bcm_extender_forward_t * extender_forward_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_forward_traverse_async(int unit, bcm_extender_forward_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_port_add_async(int unit, bcm_extender_port_t * extender_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_port_delete_async(int unit, bcm_gport_t extender_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_port_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_port_get_async(int unit, bcm_extender_port_t * extender_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_extender_port_traverse_async(int unit, bcm_extender_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_fabric_action_create_async(int unit, bcm_fabric_action_info_t * action_info, bcm_fabric_action_t * action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_action_destroy_async(int unit, bcm_fabric_action_t action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_action_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_action_get_async(int unit, bcm_fabric_action_t action_id, bcm_fabric_action_info_t * action_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_action_traverse_async(int unit, bcm_fabric_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_bandwidth_profile_get_async(int unit, int profile_count, bcm_fabric_bandwidth_profile_t * profile_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_bandwidth_profile_set_async(int unit, int profile_count, bcm_fabric_bandwidth_profile_t * profile_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_calendar_active_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_calendar_get_async(int unit, int cindex, int * connection, bcm_gport_t * dest_port, bcm_cos_queue_t * dest_cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_calendar_max_get_async(int unit, int * max_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_calendar_multi_get_async(int unit, int array_size, int * connection_array, bcm_gport_t * dest_port_array, bcm_cos_queue_t * dest_cosq_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_calendar_multi_set_async(int unit, int array_size, int * connection_array, bcm_gport_t * dest_port_array, bcm_cos_queue_t * dest_cosq_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_calendar_set_async(int unit, int cindex, int connection, bcm_gport_t dest_port, bcm_cos_queue_t dest_cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_calendar_size_get_async(int unit, int * config_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_calendar_size_set_async(int unit, int config_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_config_discard_get_async(int unit, bcm_fabric_config_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_config_discard_set_async(int unit, bcm_fabric_config_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_congestion_size_get_async(int unit, bcm_module_t module_id, int * max_ports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_congestion_size_set_async(int unit, bcm_module_t module_id, int max_ports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_connection_bytes_get_async(int unit, int src_modid, int dst_modid, bcm_fabric_connection_mode_t mode, int link_fail_count, int * max_bytes, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_connection_interval_get_async(int unit, int link_fail_count, int * connection_interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_connection_max_get_async(int unit, int link_fail_count, int * connection, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_control_get_async(int unit, bcm_fabric_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_control_redundancy_register_async(int unit, bcm_fabric_control_redundancy_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_control_redundancy_unregister_async(int unit, bcm_fabric_control_redundancy_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_control_set_async(int unit, bcm_fabric_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_connection_get_async(int unit, int xbar, int src_modid, bcm_port_t src_xbport, int dst_modid, bcm_port_t * dst_xbport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_connection_set_async(int unit, int xbar, int src_modid, bcm_port_t src_xbport, int dst_modid, bcm_port_t dst_xbport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_connection_status_get_async(int unit, int src_modid, int dst_modid, bcm_fabric_connection_mode_t mode, uint64 * xbars, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_enable_get_async(int unit, uint64 * xbars, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_enable_set_async(int unit, uint64 xbars, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_mapping_get_async(int unit, int modid, int switch_fabric_arbiter_id, int xbar, bcm_port_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_mapping_set_async(int unit, int modid, int switch_fabric_arbiter_id, int xbar, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_status_get_async(int unit, uint64 * xbars, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_distribution_control_get_async(int unit, bcm_fabric_distribution_t ds_id, bcm_fabric_distribution_control_t type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_distribution_control_set_async(int unit, bcm_fabric_distribution_t ds_id, bcm_fabric_distribution_control_t type, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_distribution_create_async(int unit, uint32 flags, bcm_fabric_distribution_t * ds_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_distribution_destroy_async(int unit, bcm_fabric_distribution_t ds_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_distribution_get_async(int unit, bcm_fabric_distribution_t ds_id, int max_count, int * dist_modids, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_distribution_set_async(int unit, bcm_fabric_distribution_t ds_id, int modid_count, int * dist_modids, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_connectivity_status_get_async(int unit, int link_partner_max, bcm_fabric_link_connectivity_t * link_partner_array, int * link_partner_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_connectivity_status_single_get_async(int unit, bcm_port_t link_id, bcm_fabric_link_connectivity_t * link_partner_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_control_get_async(int unit, bcm_port_t link, bcm_fabric_link_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_control_set_async(int unit, bcm_port_t link, bcm_fabric_link_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_remote_pipe_mapping_get_async(int unit, bcm_port_t port, bcm_fabric_link_remote_pipe_mapping_t * mapping_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_remote_pipe_mapping_set_async(int unit, bcm_port_t port, bcm_fabric_link_remote_pipe_mapping_t * mapping_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_status_get_async(int unit, bcm_port_t link_id, uint32 * link_status, uint32 * errored_token_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_threshold_add_async(int unit, uint32 flags, int * fifo_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_threshold_delete_async(int unit, int fifo_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_attach_async(int unit, int fifo_type, uint32 links_count, bcm_port_t * links, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_get_async(int unit, int fifo_type, uint32 count, bcm_fabric_link_threshold_type_t * type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_pipe_get_async(int unit, int fifo_type, bcm_fabric_pipe_t pipe, uint32 flags, uint32 count, bcm_fabric_link_threshold_type_t * type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_pipe_set_async(int unit, int fifo_type, bcm_fabric_pipe_t pipe, uint32 flags, uint32 count, bcm_fabric_link_threshold_type_t * type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_retrieve_async(int unit, int fifo_type, uint32 links_count_max, bcm_port_t * links, uint32 * links_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_thresholds_set_async(int unit, int fifo_type, uint32 count, bcm_fabric_link_threshold_type_t * type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_topology_get_async(int unit, bcm_module_t destination, int max_links_count, int * links_count, bcm_port_t * links_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_link_topology_set_async(int unit, bcm_module_t destination, int links_count, bcm_port_t * links_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_modid_group_find_async(int unit, bcm_module_t modid, bcm_module_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_modid_group_get_async(int unit, bcm_module_t group, int modid_max_count, bcm_module_t * modid_array, int * modid_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_modid_group_set_async(int unit, bcm_module_t group, int modid_count, bcm_module_t * modid_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_modid_local_mapping_get_async(int unit, bcm_module_t local_modid, bcm_module_t * modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_modid_local_mapping_set_async(int unit, bcm_module_t local_modid, bcm_module_t modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_multicast_get_async(int unit, bcm_multicast_t group, uint32 flags, int destid_count_max, int * destid_count, bcm_module_t * destid_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_multicast_multi_get_async(int unit, uint32 flags, uint32 ngroups, bcm_multicast_t * groups, bcm_fabric_module_vector_t * dest_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_multicast_multi_set_async(int unit, uint32 flags, uint32 ngroups, bcm_multicast_t * groups, bcm_fabric_module_vector_t * dest_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_multicast_set_async(int unit, bcm_multicast_t group, uint32 flags, uint32 destid_count, bcm_module_t * destid_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_operating_interval_get_async(int unit, int link_fail_count, int * operating_interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_packet_adjust_get_async(int unit, int pkt_adjust_selector, int * pkt_adjust_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_packet_adjust_set_async(int unit, int pkt_adjust_selector, int pkt_adjust_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_pcp_dest_mode_config_get_async(int unit, uint32 flags, bcm_module_t modid, bcm_fabric_pcp_mode_config_t * pcp_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_pcp_dest_mode_config_set_async(int unit, uint32 flags, bcm_module_t modid, bcm_fabric_pcp_mode_config_t * pcp_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_port_create_async(int unit, bcm_gport_t parent_port, int offset, uint32 flags, bcm_gport_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_port_destroy_async(int unit, bcm_gport_t parent_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_port_failover_get_async(int unit, bcm_gport_t port, bcm_failover_t * failover_id, bcm_gport_t * failover_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_port_failover_set_async(int unit, bcm_gport_t port, bcm_failover_t failover_id, bcm_gport_t failover_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_port_get_async(int unit, bcm_gport_t child_port, uint32 flags, bcm_gport_t * parent_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_action_create_async(int unit, bcm_fabric_predicate_action_info_t * predicate_action, bcm_fabric_predicate_action_t * predicate_action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_action_destroy_async(int unit, bcm_fabric_predicate_action_t predicate_action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_action_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_action_get_async(int unit, bcm_fabric_predicate_action_t predicate_action_id, bcm_fabric_predicate_action_info_t * predicate_action_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_action_traverse_async(int unit, bcm_fabric_predicate_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_create_async(int unit, bcm_fabric_predicate_info_t * pred_info, bcm_fabric_predicate_t * pred_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_destroy_async(int unit, bcm_fabric_predicate_t pred_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_get_async(int unit, bcm_fabric_predicate_t pred_id, bcm_fabric_predicate_info_t * pred_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_predicate_traverse_async(int unit, bcm_fabric_predicate_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_priority_get_async(int unit, uint32 flags, bcm_cos_t ingress_pri, bcm_color_t color, int * fabric_priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_priority_set_async(int unit, uint32 flags, bcm_cos_t ingress_pri, bcm_color_t color, int fabric_priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_create_async(int unit, uint32 flags, int base, int count, bcm_fabric_qsel_t * qsel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_destroy_async(int unit, bcm_fabric_qsel_t qsel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_entry_get_async(int unit, bcm_fabric_qsel_t qsel_id, int offset, bcm_gport_t * queue, bcm_fabric_qsel_offset_t * qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_entry_multi_get_async(int unit, bcm_fabric_qsel_t qsel_id, int offset, int count, bcm_gport_t * queue, bcm_fabric_qsel_offset_t * qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_entry_multi_set_async(int unit, bcm_fabric_qsel_t qsel_id, int offset, int count, bcm_gport_t * queue, bcm_fabric_qsel_offset_t * qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_entry_set_async(int unit, bcm_fabric_qsel_t qsel_id, int offset, bcm_gport_t queue, bcm_fabric_qsel_offset_t qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_entry_traverse_async(int unit, bcm_fabric_qsel_t qsel_id, bcm_fabric_qsel_entry_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_get_async(int unit, bcm_fabric_qsel_t qsel_id, uint32 * flags, int * base, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_create_async(int unit, uint32 flags, bcm_fabric_qsel_offset_t * qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_destroy_async(int unit, bcm_fabric_qsel_offset_t qsel_offset_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_entry_get_async(int unit, bcm_fabric_qsel_offset_t qsel_offset_id, bcm_cos_t int_pri, int * offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_entry_set_async(int unit, bcm_fabric_qsel_offset_t qsel_offset_id, bcm_cos_t int_pri, int offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_entry_traverse_async(int unit, bcm_fabric_qsel_offset_t qsel_offset_id, bcm_fabric_qsel_offset_entry_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_offset_traverse_async(int unit, bcm_fabric_qsel_offset_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_qsel_traverse_async(int unit, bcm_fabric_qsel_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_reachability_status_get_async(int unit, int moduleid, int links_max, uint32 * links_array, int * links_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_route_rx_async(int unit, uint32 flags, uint32 data_out_max_size, uint32 * data_out, uint32 * data_out_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_route_tx_async(int unit, uint32 flags, bcm_fabric_route_t * route, uint32 data_in_size, uint32 * data_in, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_tdm_direct_routing_get_async(int unit, bcm_gport_t gport, bcm_fabric_tdm_direct_routing_t * routing_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_tdm_direct_routing_set_async(int unit, bcm_gport_t gport, bcm_fabric_tdm_direct_routing_t * routing_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_tdm_editing_get_async(int unit, bcm_gport_t gport, bcm_fabric_tdm_editing_t * editing, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_tdm_editing_set_async(int unit, bcm_gport_t gport, bcm_fabric_tdm_editing_t * editing, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_tdm_enable_get_async(int unit, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_tdm_enable_set_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_failover_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_create_async(int unit, uint32 flags, bcm_failover_t * failover_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_destroy_async(int unit, bcm_failover_t failover_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_get_async(int unit, bcm_failover_t failover_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_failover_ring_config_get_async(int unit, bcm_failover_ring_t * failover_ring, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_ring_config_set_async(int unit, bcm_failover_ring_t * failover_ring, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_failover_set_async(int unit, bcm_failover_t failover_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_status_get_async(int unit, bcm_failover_element_t * failover, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_status_set_async(int unit, bcm_failover_element_t * failover, int enable, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_FCMAP
void	bcm_fcmap_diag_get_async(int unit, bcm_port_t port, bcm_fcmap_diag_code_t * diag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_event_enable_get_async(int unit, bcm_fcmap_event_t t, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_event_enable_set_async(int unit, bcm_fcmap_event_t t, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_event_register_async(int unit, bcm_fcmap_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_event_unregister_async(int unit, bcm_fcmap_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_linkfault_trigger_rc_get_async(int unit, bcm_port_t port, bcm_fcmap_lf_tr_t * trigger, bcm_fcmap_lf_rc_t * rc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_config_get_async(int unit, bcm_port_t port, bcm_fcmap_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_config_selective_get_async(int unit, bcm_port_t port, bcm_fcmap_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_config_selective_set_async(int unit, bcm_port_t port, bcm_fcmap_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_config_set_async(int unit, bcm_port_t port, bcm_fcmap_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_enable_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_link_reset_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_shutdown_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_speed_set_async(int unit, bcm_port_t port, bcm_fcmap_port_speed_t speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_port_traverse_async(int unit, bcm_fcmap_port_traverse_cb callbk, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_stat_clear_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_stat_get_async(int unit, bcm_port_t port, bcm_fcmap_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_stat_get32_async(int unit, bcm_port_t port, bcm_fcmap_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_vlan_map_add_async(int unit, bcm_port_t port, bcm_fcmap_vlan_vsan_map_t * vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_vlan_map_delete_async(int unit, bcm_port_t port, bcm_fcmap_vlan_vsan_map_t * vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcmap_vlan_map_get_async(int unit, bcm_port_t port, bcm_fcmap_vlan_vsan_map_t * vlan, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_FCMAP */
void	bcm_fcoe_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_control_vsan_get_async(int unit, bcm_fcoe_vsan_id_t vsan_id, bcm_fcoe_vsan_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_control_vsan_set_async(int unit, bcm_fcoe_vsan_id_t vsan_id, bcm_fcoe_vsan_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_enable_set_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_fc_header_type_get_async(int unit, uint32 flags, uint8 r_ctl, bcm_fcoe_fc_header_type_t * hdr_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_fc_header_type_set_async(int unit, uint32 flags, uint8 r_ctl, bcm_fcoe_fc_header_type_t hdr_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_intf_config_get_async(int unit, uint32 flags, bcm_if_t intf, bcm_fcoe_intf_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_intf_config_set_async(int unit, uint32 flags, bcm_if_t intf, bcm_fcoe_intf_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_add_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_delete_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_delete_by_interface_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_delete_by_prefix_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_find_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_attach_async(int unit, bcm_fcoe_route_t * route, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_counter_get_async(int unit, bcm_fcoe_route_t * route, bcm_fcoe_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_counter_set_async(int unit, bcm_fcoe_route_t * route, bcm_fcoe_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_counter_sync_get_async(int unit, bcm_fcoe_route_t * route, bcm_fcoe_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_detach_async(int unit, bcm_fcoe_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_stat_id_get_async(int unit, bcm_fcoe_route_t * route, bcm_fcoe_route_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_route_traverse_async(int unit, uint32 flags, bcm_fcoe_route_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_create_async(int unit, uint32 options, bcm_fcoe_vsan_t * vsan, bcm_fcoe_vsan_id_t * vsan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_destroy_async(int unit, bcm_fcoe_vsan_id_t vsan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_get_async(int unit, bcm_fcoe_vsan_id_t vsan_id, bcm_fcoe_vsan_t * vsan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_set_async(int unit, bcm_fcoe_vsan_id_t vsan_id, bcm_fcoe_vsan_t * vsan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_attach_async(int unit, bcm_fcoe_vsan_id_t vsan, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_counter_get_async(int unit, bcm_fcoe_vsan_id_t vsan, bcm_fcoe_vsan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_counter_set_async(int unit, bcm_fcoe_vsan_id_t vsan, bcm_fcoe_vsan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_counter_sync_get_async(int unit, bcm_fcoe_vsan_id_t vsan, bcm_fcoe_vsan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_detach_async(int unit, bcm_fcoe_vsan_id_t vsan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_stat_id_get_async(int unit, bcm_fcoe_vsan_id_t vsan, bcm_fcoe_vsan_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_translate_action_add_async(int unit, bcm_fcoe_vsan_translate_key_config_t * key, bcm_fcoe_vsan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_translate_action_delete_async(int unit, bcm_fcoe_vsan_translate_key_config_t * key, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_vsan_traverse_async(int unit, uint32 flags, bcm_fcoe_vsan_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_add_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_delete_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_delete_by_did_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_delete_by_sid_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_delete_by_vsan_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_get_async(int unit, bcm_fcoe_zone_entry_t * zone, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fcoe_zone_traverse_async(int unit, uint32 flags, bcm_fcoe_zone_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_add_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, uint32 param0, uint32 param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_delete_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, uint32 param0, uint32 param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_get_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, uint32 * param0, uint32 * param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_mac_add_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_mac_get_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_ports_add_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_ports_get_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_remove_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_remove_all_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_control_get_async(int unit, bcm_field_control_t control, uint32 * state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_control_set_async(int unit, bcm_field_control_t control, uint32 state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_create_async(int unit, bcm_field_data_qualifier_t * data_qualifier, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_destroy_async(int unit, int qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ethertype_add_async(int unit, int qual_id, bcm_field_data_ethertype_t * etype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ethertype_delete_async(int unit, int qual_id, bcm_field_data_ethertype_t * etype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_get_async(int unit, int qual_id, bcm_field_data_qualifier_t * qual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ip_protocol_add_async(int unit, int qual_id, bcm_field_data_ip_protocol_t * ip_protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ip_protocol_delete_async(int unit, int qual_id, bcm_field_data_ip_protocol_t * ip_protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_multi_get_async(int unit, int qual_size, int * qual_array, int * qual_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_packet_format_add_async(int unit, int qual_id, bcm_field_data_packet_format_t * packet_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_packet_format_delete_async(int unit, int qual_id, bcm_field_data_packet_format_t * packet_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_direct_extraction_action_add_async(int unit, bcm_field_entry_t entry, bcm_field_extraction_action_t action, int count, bcm_field_extraction_field_t * extractions, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_direct_extraction_action_get_async(int unit, bcm_field_entry_t entry, bcm_field_extraction_action_t * action, int max_count, bcm_field_extraction_field_t * extractions, int * actual_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_copy_async(int unit, bcm_field_entry_t src_entry, bcm_field_entry_t * dst_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_copy_id_async(int unit, bcm_field_entry_t src_entry, bcm_field_entry_t dst_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_create_async(int unit, bcm_field_group_t group, bcm_field_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_create_id_async(int unit, bcm_field_group_t group, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_destroy_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_field_entry_dump_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_field_entry_enable_get_async(int unit, bcm_field_entry_t entry, int * enable_flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_enable_set_async(int unit, bcm_field_entry_t entry, int enable_flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_install_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_multi_get_async(int unit, bcm_field_group_t group, int entry_size, bcm_field_entry_t * entry_array, int * entry_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_operation_async(int unit, bcm_field_entry_oper_t * entry_oper, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_attach_async(int unit, bcm_field_entry_t entry_id, int level, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_detach_async(int unit, bcm_field_entry_t entry_id, int level, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_detach_all_async(int unit, bcm_field_entry_t entry_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_get_async(int unit, bcm_field_entry_t entry_id, int level, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_prio_get_async(int unit, bcm_field_entry_t entry, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_prio_set_async(int unit, bcm_field_entry_t entry, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_reinstall_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_remove_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_stat_attach_async(int unit, bcm_field_entry_t entry, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_stat_detach_async(int unit, bcm_field_entry_t entry, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_stat_get_async(int unit, bcm_field_entry_t entry, int * stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_action_get_async(int unit, bcm_field_group_t group, bcm_field_aset_t * aset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_action_set_async(int unit, bcm_field_group_t group, bcm_field_aset_t aset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_compress_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_config_create_async(int unit, bcm_field_group_config_t * group_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_id_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_mode_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_mode_id_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_destroy_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_field_group_dump_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_field_group_enable_get_async(int unit, bcm_field_group_t group, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_enable_set_async(int unit, bcm_field_group_t group, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_expansion_enable_get_async(int unit, bcm_field_group_t group, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_expansion_enable_set_async(int unit, bcm_field_group_t group, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_flush_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_get_async(int unit, bcm_field_group_t group, bcm_field_qset_t * qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_install_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_mode_get_async(int unit, bcm_field_group_t group, bcm_field_group_mode_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_port_create_mode_async(int unit, bcm_port_t port, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_port_create_mode_id_async(int unit, bcm_port_t port, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_ports_create_mode_async(int unit, bcm_pbmp_t pbmp, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_ports_create_mode_id_async(int unit, bcm_pbmp_t pbmp, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_presel_get_async(int unit, bcm_field_group_t group, bcm_field_presel_set_t * presel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_presel_set_async(int unit, bcm_field_group_t group, bcm_field_presel_set_t * presel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_priority_get_async(int unit, bcm_field_group_t group, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_priority_set_async(int unit, bcm_field_group_t group, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_remove_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_set_async(int unit, bcm_field_group_t group, bcm_field_qset_t qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_status_get_async(int unit, bcm_field_group_t group, bcm_field_group_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_traverse_async(int unit, bcm_field_group_traverse_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_wlan_create_mode_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_wlan_create_mode_id_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_create_async(int unit, bcm_field_presel_t * presel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_create_id_async(int unit, bcm_field_presel_t presel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_presel_destroy_async(int unit, bcm_field_presel_t presel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_data_qualifier_add_async(int unit, bcm_field_qset_t * qset, int qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_data_qualifier_delete_async(int unit, bcm_field_qset_t * qset, int qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_data_qualifier_get_async(int unit, bcm_field_qset_t qset, int qual_max, int * qual_arr, int * qual_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_id_multi_delete_async(int unit, bcm_field_qualify_t qualifier, int num_objects, int * object_list, bcm_field_qset_t * qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_id_multi_get_async(int unit, bcm_field_qset_t qset, bcm_field_qualify_t qualifier, int max_objects, int * object_list, int * count_objects, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_id_multi_set_async(int unit, bcm_field_qualify_t qualifier, int num_objects, int * object_list, bcm_field_qset_t * qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualifier_delete_async(int unit, bcm_field_entry_t entry, bcm_field_qualify_t qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_AppType_async(int unit, bcm_field_entry_t entry, bcm_field_AppType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_AppType_get_async(int unit, bcm_field_entry_t entry, bcm_field_AppType_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpOpcode_async(int unit, bcm_field_entry_t entry, bcm_field_ArpOpcode_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpOpcode_get_async(int unit, bcm_field_entry_t entry, bcm_field_ArpOpcode_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpSenderIp4_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpSenderIp4_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpTargetIp4_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ArpTargetIp4_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BigIcmpCheck_async(int unit, bcm_field_entry_t entry, uint32 flag, uint32 size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BigIcmpCheck_get_async(int unit, bcm_field_entry_t entry, uint32 * flag, uint32 * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassFilter_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassFilter32_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassFilter32_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassFilter_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassSrcMacFilter_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BypassSrcMacFilter_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CascadedKeyValue_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CascadedKeyValue_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ClassId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ClassId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CnTag_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CnTag_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Color_async(int unit, bcm_field_entry_t entry, uint8 color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Color_get_async(int unit, bcm_field_entry_t entry, uint8 * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CpuQueue_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_CpuQueue_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DSCP_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DSCP_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Decap_async(int unit, bcm_field_entry_t entry, bcm_field_decap_t decap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Dhcp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Dhcp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DosAttack_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DosAttack_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Drop_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Drop_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassField_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassField_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassL2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassL2_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassL3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassL3_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstHiGig_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstHiGig_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6High_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6Low_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6Low_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpLocal_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIpLocal_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3Egress_async(int unit, bcm_field_entry_t entry, bcm_if_t if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3EgressNextHops_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3EgressNextHops_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstL3Egress_get_async(int unit, bcm_field_entry_t entry, bcm_if_t * if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMimGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t mim_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMimGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mim_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMplsGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t mpls_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMplsGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mpls_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMulticastGroup_async(int unit, bcm_field_entry_t entry, bcm_gport_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMulticastGroup_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipath_async(int unit, bcm_field_entry_t entry, bcm_if_t mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMultipath_get_async(int unit, bcm_field_entry_t entry, bcm_if_t * mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstNivGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t niv_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstNivGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * niv_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPort_async(int unit, bcm_field_entry_t entry, bcm_module_t data_modid, bcm_module_t mask_modid, bcm_port_t data_port, bcm_port_t mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPort_get_async(int unit, bcm_field_entry_t entry, bcm_module_t * data_modid, bcm_module_t * mask_modid, bcm_port_t * data_port, bcm_port_t * mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstRpfGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstRpfGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstTrunk_async(int unit, bcm_field_entry_t entry, bcm_trunk_t data, bcm_trunk_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstTrunk_get_async(int unit, bcm_field_entry_t entry, bcm_trunk_t * data, bcm_trunk_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstVxlanGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t vxlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstVxlanGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * vxlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstWlanGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t wlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstWlanGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * wlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ECid_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ECid_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ETag_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ETag_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EcnValue_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EcnValue_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClass_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassL2Gre_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassL2Gre_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassL3Interface_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassL3Interface_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassTrill_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassTrill_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassWlan_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClassWlan_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EgressClass_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EqualL4Port_async(int unit, bcm_field_entry_t entry, uint32 flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EqualL4Port_get_async(int unit, bcm_field_entry_t entry, uint32 * flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EtherType_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EtherType_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeader2Type_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeader2Type_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeaderSubCode_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeaderSubCode_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeaderType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeaderType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit0_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit0_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit1_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit1_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit2_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit2_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit3_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalHit3_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue0_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue0_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue1_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue1_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue2_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue2_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue3_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExternalValue3_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FabricQueueTag_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FabricQueueTag_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeSOF_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeSOF_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeVersionIsZero_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FcoeVersionIsZero_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Fhei_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FheiSize_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FheiSize_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Fhei_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanCSCtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanCSCtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDFCtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDFCtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanDstId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanFCtl_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanFCtl_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanInner_async(int unit, bcm_field_entry_t entry, bcm_field_FibreChan_t fibre_chan_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanInner_get_async(int unit, bcm_field_entry_t entry, bcm_field_FibreChan_t * fibre_chan_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanOuter_async(int unit, bcm_field_entry_t entry, bcm_field_FibreChan_t fibre_chan_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanOuter_get_async(int unit, bcm_field_entry_t entry, bcm_field_FibreChan_t * fibre_chan_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanRCtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanRCtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcBindCheck_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcBindCheck_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcFpmaCheck_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcFpmaCheck_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanSrcId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanType_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTFabricId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTFabricId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTHopCount_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTHopCount_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVersion_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVersion_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVsanId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVsanId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVsanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanVFTVsanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanZoneCheck_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FibreChanZoneCheck_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowId_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_FlowId_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardCopy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardCopy_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingHeaderOffset_async(int unit, bcm_field_entry_t entry, bcm_field_data_offset_base_t base_header, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingHeaderOffset_get_async(int unit, bcm_field_entry_t entry, bcm_field_data_offset_base_t * base_header, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingType_async(int unit, bcm_field_entry_t entry, bcm_field_ForwardingType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingType_get_async(int unit, bcm_field_entry_t entry, bcm_field_ForwardingType_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingVlanValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingVlanValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GenericAssociatedChannelLabelValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_GenericAssociatedChannelLabelValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HeaderFormat_async(int unit, bcm_field_entry_t entry, bcm_field_header_format_t header_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HeaderFormatSet_async(int unit, bcm_field_entry_t entry, bcm_field_header_format_set_t header_format_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HeaderFormatSet_get_async(int unit, bcm_field_entry_t entry, bcm_field_header_format_set_t * header_format_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HeaderFormat_get_async(int unit, bcm_field_entry_t entry, bcm_field_header_format_t * header_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGig_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigProxy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGigProxy_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGig_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ISid_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ISid_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IcmpError_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IcmpError_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IcmpTypeCode_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IcmpTypeCode_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IgmpTypeMaxRespTime_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IgmpTypeMaxRespTime_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InPort_async(int unit, bcm_field_entry_t entry, bcm_port_t data, bcm_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InPort_get_async(int unit, bcm_field_entry_t entry, bcm_port_t * data, bcm_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InPorts_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t data, bcm_pbmp_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InPorts_get_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t * data, bcm_pbmp_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVPort_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVPort32_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVPort32_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InVPort_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IncomingIpIfClass_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IncomingIpIfClass_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressClassField_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressClassField_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressECid_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressECid_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressInterfaceClassPort_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressInterfaceClassPort_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressStpState_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressStpState_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressVPortBridgeDisable_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressVPortBridgeDisable_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDSCP_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDSCP_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp6High_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerEtherType_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerEtherType_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6FlowLabel_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6FlowLabel_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6HopLimit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6HopLimit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6NextHeader_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIp6NextHeader_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpFrag_async(int unit, bcm_field_entry_t entry, bcm_field_IpFrag_t frag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpFrag_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpFrag_t * frag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpProtocolCommon_async(int unit, bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpProtocolCommon_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t * protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpProtocol_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpType_async(int unit, bcm_field_entry_t entry, bcm_field_IpType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpType_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpType_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4DstPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4DstPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4SrcPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerL4SrcPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp6High_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTpid_async(int unit, bcm_field_entry_t entry, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTpid_get_async(int unit, bcm_field_entry_t entry, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanActionRange_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanActionRange_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntCongestionNotification_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntCongestionNotification_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPriority_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IntPriority_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL2_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL3_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassPort_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassPort_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassProcessingPort_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassProcessingPort_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassVPort_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassVPort_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6FlowLabel_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6FlowLabel_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6HopLimit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6HopLimit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6NextHeader_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6NextHeader_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6TrafficClass_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6TrafficClass_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpAddrsNormalized_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpAddrsNormalized_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpAuth_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpAuth_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFlags_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFrag_async(int unit, bcm_field_entry_t entry, bcm_field_IpFrag_t frag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFrag_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpFrag_t * frag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpInfo_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpInfo_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocolCommon_async(int unit, bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocolCommon_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t * protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocol_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpTunnelValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpType_async(int unit, bcm_field_entry_t entry, bcm_field_IpType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpType_get_async(int unit, bcm_field_entry_t entry, bcm_field_IpType_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcStarGroupHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcStarGroupHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcStarGroupValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcStarGroupValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IsEqualValue_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IsEqualValue_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2CacheHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2CacheHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DestHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DestHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DestValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DestValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2Format_async(int unit, bcm_field_entry_t entry, bcm_field_L2Format_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2Format_get_async(int unit, bcm_field_entry_t entry, bcm_field_L2Format_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreFlowId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreFlowId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreProtocolType_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreProtocolType_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreSrcIpHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreSrcIpHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreVfiHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreVfiHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreVsid_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2GreVsid_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2Learn_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2Learn_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2PayloadFirstEightBytes_async(int unit, bcm_field_entry_t entry, uint32 data1, uint32 data2, uint32 mask1, uint32 mask2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2PayloadFirstEightBytes_get_async(int unit, bcm_field_entry_t entry, uint32 * data1, uint32 * data2, uint32 * mask1, uint32 * mask2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcStatic_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcStatic_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2StationMove_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2StationMove_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestHostHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestHostHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestRouteHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestRouteHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestRouteValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestRouteValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3Ingress_async(int unit, bcm_field_entry_t entry, uint32 intf_id, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3Ingress_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3Routable_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3Routable_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcBind_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcBind_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcHostHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcHostHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcRouteHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcRouteHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcRouteValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcRouteValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4DstPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4DstPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4PortRangeCheck_async(int unit, bcm_field_entry_t entry, bcm_field_range_t range, int invert, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4PortRangeCheck_get_async(int unit, bcm_field_entry_t entry, int max_count, bcm_field_range_t * range, int * invert, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4Ports_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4Ports_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4SrcPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4SrcPort_get_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t * data, bcm_l4_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnSrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnSrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnSrcPort_async(int unit, bcm_field_entry_t entry, bcm_gport_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnSrcPort_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LearnVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Llc_async(int unit, bcm_field_entry_t entry, bcm_field_llc_header_t data, bcm_field_llc_header_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Llc_get_async(int unit, bcm_field_entry_t entry, bcm_field_llc_header_t * data, bcm_field_llc_header_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LlidValue_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LlidValue_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Loopback_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackType_async(int unit, bcm_field_entry_t entry, bcm_field_LoopbackType_t loopback_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LoopbackType_get_async(int unit, bcm_field_entry_t entry, bcm_field_LoopbackType_t * loopback_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Loopback_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MHOpcode_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MHOpcode_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacAddrsNormalized_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MacAddrsNormalized_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimSrcGportHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimSrcGportHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVfiHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVfiHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MimVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorCopy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorCopy_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorEgressDisabled_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorEgressDisabled_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsBos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsBos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsControlWord_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsControlWordValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsControlWordValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsControlWord_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabel_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelAction_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelAction32_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelAction32_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelAction_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelBos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelBos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelExp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelExp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelPayload_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelPayload_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelTtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabelTtl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsForwardingLabel_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Bos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Bos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Exp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Exp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Hit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Hit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Id_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Id_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel1_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Bos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Bos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Exp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Exp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Hit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Hit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Id_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Id_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel2_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Bos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Bos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Exp_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Exp_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Id_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Id_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsLabel3_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOuterLabelPop_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsOuterLabelPop_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsStationHitTunnelUnterminated_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsStationHitTunnelUnterminated_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminated_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminatedHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminatedHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminatedValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminatedValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminated_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MyStationHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MyStationHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatDstRealmId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatDstRealmId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatNeeded_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatNeeded_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatSrcRealmId_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NatSrcRealmId_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NativeVSwitch_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NativeVSwitchValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NativeVSwitchValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_NativeVSwitch_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamMdl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OamMdl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutPort_async(int unit, bcm_field_entry_t entry, bcm_port_t data, bcm_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutPort_get_async(int unit, bcm_field_entry_t entry, bcm_port_t * data, bcm_port_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutPorts_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t data, bcm_pbmp_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutPorts_get_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t * data, bcm_pbmp_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutVPort_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutVPort32_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutVPort32_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutVPort_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterTpid_async(int unit, bcm_field_entry_t entry, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterTpid_get_async(int unit, bcm_field_entry_t entry, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanActionRange_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanActionRange_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketLengthRangeCheck_async(int unit, bcm_field_entry_t entry, bcm_field_range_t range, int invert, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketLengthRangeCheck_get_async(int unit, bcm_field_entry_t entry, int max_count, bcm_field_range_t * range, int * invert, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketRes_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketRes_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketSize_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketSize_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketTerminatedBytes_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketTerminatedBytes_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PolicerIntPrio_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PolicerIntPrio_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PortOrientation_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PortOrientation_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ptch_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ptch_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RangeCheck_async(int unit, bcm_field_entry_t entry, bcm_field_range_t range, int invert, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RangeCheck_get_async(int unit, bcm_field_entry_t entry, int max_count, bcm_field_range_t * range, int * invert, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecoverableDrop_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RecoverableDrop_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RepCopy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RepCopy_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ReplicantAny_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ReplicantAny_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ReplicantFirst_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ReplicantFirst_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RouterAlertLabelValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RouterAlertLabelValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7AHashLower_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7AHashLower_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7AHashUpper_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7AHashUpper_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7BHashLower_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7BHashLower_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7BHashUpper_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Rtag7BHashUpper_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapCode_async(int unit, bcm_field_entry_t entry, bcm_rx_trap_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapCodeForSnoop_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapCodeForSnoop_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapCode_get_async(int unit, bcm_field_entry_t entry, bcm_rx_trap_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapData_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RxTrapData_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Snap_async(int unit, bcm_field_entry_t entry, bcm_field_snap_header_t data, bcm_field_snap_header_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Snap_get_async(int unit, bcm_field_entry_t entry, bcm_field_snap_header_t * data, bcm_field_snap_header_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SnoopCopy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SnoopCopy_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassField_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassField_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassL2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassL2_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassL3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassL3_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6High_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6Low_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6Low_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6_get_async(int unit, bcm_field_entry_t entry, bcm_ip6_t * data, bcm_ip6_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIpEqualDstIp_async(int unit, bcm_field_entry_t entry, uint32 flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIpEqualDstIp_get_async(int unit, bcm_field_entry_t entry, uint32 * flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp_get_async(int unit, bcm_field_entry_t entry, bcm_ip_t * data, bcm_ip_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMac_get_async(int unit, bcm_field_entry_t entry, bcm_mac_t * data, bcm_mac_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMimGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t mim_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMimGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mim_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcModPortGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcModPortGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcModuleGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcModuleGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMplsGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t mpls_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMplsGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * mpls_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcNivGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t niv_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcNivGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * niv_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPort_async(int unit, bcm_field_entry_t entry, bcm_module_t data_modid, bcm_module_t mask_modid, bcm_port_t data_port, bcm_port_t mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPort_get_async(int unit, bcm_field_entry_t entry, bcm_module_t * data_modid, bcm_module_t * mask_modid, bcm_port_t * data_port, bcm_port_t * mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcTrunk_async(int unit, bcm_field_entry_t entry, bcm_trunk_t data, bcm_trunk_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcTrunkMemberGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcTrunkMemberGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcTrunk_get_async(int unit, bcm_field_entry_t entry, bcm_trunk_t * data, bcm_trunk_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVirtualPortValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVirtualPortValid_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVxlanGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t vxlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcVxlanGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * vxlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcWlanGport_async(int unit, bcm_field_entry_t entry, bcm_gport_t wlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcWlanGport_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * wlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Stage_async(int unit, bcm_field_entry_t entry, bcm_field_stage_t data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Stage_get_async(int unit, bcm_field_entry_t entry, bcm_field_stage_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SubportPktTag_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SubportPktTag_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpControl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpControl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpHeaderSize_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpHeaderSize_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpSequenceZero_async(int unit, bcm_field_entry_t entry, uint32 flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpSequenceZero_get_async(int unit, bcm_field_entry_t entry, uint32 * flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Tos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Tos_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedInnerVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanCfi_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanCfi_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanId_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanId_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanPri_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlanPri_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedOuterVlan_get_async(int unit, bcm_field_entry_t entry, bcm_vlan_t * data, bcm_vlan_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedVlanFormat_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TranslatedVlanFormat_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillEgressRbridge_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillEgressRbridgeHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillEgressRbridgeHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillEgressRbridge_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillHopCount_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillHopCount_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIVersion_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIVersion_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIngressRbridge_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIngressRbridgeHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIngressRbridgeHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillIngressRbridge_get_async(int unit, bcm_field_entry_t entry, uint16 * data, uint16 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillMultiDestination_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillMultiDestination_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillOpLength_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillOpLength_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillPayload_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrillPayload_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrunkHashResult_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TrunkHashResult_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ttl_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminated_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminatedHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminatedHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminatedValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminatedValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminated_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelType_async(int unit, bcm_field_entry_t entry, bcm_field_TunnelType_t tunnel_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelType_get_async(int unit, bcm_field_entry_t entry, bcm_field_TunnelType_t * tunnel_type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VPortRangeCheck_async(int unit, bcm_field_entry_t entry, bcm_field_range_t range, int invert, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VPortRangeCheck_get_async(int unit, bcm_field_entry_t entry, int max_count, bcm_field_range_t * range, int * invert, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanFormat_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanFormat_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanTranslationHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanTranslationHit_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanTranslationValue_async(int unit, bcm_field_entry_t entry, uint64 data, uint64 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanTranslationValue_get_async(int unit, bcm_field_entry_t entry, uint64 * data, uint64 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VnTag_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VnTag_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Vpn_async(int unit, bcm_field_entry_t entry, bcm_vpn_t data, bcm_vpn_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VpnUnknownDstMacDstPort_async(int unit, bcm_field_entry_t entry, bcm_gport_t port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VpnUnknownDstMacDstPort_get_async(int unit, bcm_field_entry_t entry, bcm_gport_t * port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Vpn_get_async(int unit, bcm_field_entry_t entry, bcm_vpn_t * data, bcm_vpn_t * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Vrf_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Vrf_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanFlags_get_async(int unit, bcm_field_entry_t entry, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanNetworkId_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VxlanNetworkId_get_async(int unit, bcm_field_entry_t entry, uint32 * data, uint32 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_clear_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_data_async(int unit, bcm_field_entry_t eid, int qual_id, uint8 * data, uint8 * mask, uint16 length, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_data_get_async(int unit, bcm_field_entry_t eid, int qual_id, uint16 length_max, uint8 * data, uint8 * mask, uint16 * length, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_udf_async(int unit, bcm_field_entry_t eid, bcm_udf_id_t udf_id, int length, uint8 * data, uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_udf_get_async(int unit, bcm_field_entry_t eid, bcm_udf_id_t udf_id, int max_length, uint8 * data, uint8 * mask, int * actual_length, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_create_async(int unit, bcm_field_range_t * range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_create_id_async(int unit, bcm_field_range_t range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_destroy_async(int unit, bcm_field_range_t range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_get_async(int unit, bcm_field_range_t range, uint32 * flags, bcm_l4_port_t * min, bcm_l4_port_t * max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_group_create_async(int unit, bcm_field_range_t * range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_if_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_group_create_id_async(int unit, bcm_field_range_t range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_if_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_multi_create_async(int unit, bcm_field_range_t * range_id, uint32 create_flags, int count, uint32 * range_flags, uint32 * min_value, uint32 * max_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_multi_get_async(int unit, bcm_field_range_t range_id, int max_count, uint32 * range_flags, uint32 * minimum_value, uint32 * maxamum_value, int * actual_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_resync_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_field_show_async(int unit, const char * pfx, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_field_stage_info_get_async(int unit, bcm_field_stage_t stage, bcm_field_stage_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_all_set_async(int unit, int stat_id, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_all_set32_async(int unit, int stat_id, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_attach_async(int unit, bcm_field_group_t group, uint32 stat_counter_id, uint32 * stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_config_get_async(int unit, int stat_id, int nstat, bcm_field_stat_t * stat_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_counter_get_async(int unit, uint32 stat_id, bcm_field_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_counter_set_async(int unit, uint32 stat_id, bcm_field_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_counter_sync_get_async(int unit, uint32 stat_id, bcm_field_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_create_async(int unit, bcm_field_group_t group, int nstat, bcm_field_stat_t * stat_arr, int * stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_create_id_async(int unit, bcm_field_group_t group, int nstat, bcm_field_stat_t * stat_arr, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_destroy_async(int unit, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_detach_async(int unit, uint32 stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_get_async(int unit, int stat_id, bcm_field_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_get32_async(int unit, int stat_id, bcm_field_stat_t stat, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_id_get_async(int unit, bcm_field_group_t group, uint32 stat_id, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_multi_get_async(int unit, int stat_id, int nstat, bcm_field_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_multi_get32_async(int unit, int stat_id, int nstat, bcm_field_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_set_async(int unit, int stat_id, bcm_field_stat_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_set32_async(int unit, int stat_id, bcm_field_stat_t stat, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_size_async(int unit, int stat_id, int * stat_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_sync_get_async(int unit, int stat_id, bcm_field_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_stat_sync_get32_async(int unit, int stat_id, bcm_field_stat_t stat, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_find_async(char * type, char * subtype, int remunit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_I2C
void	bcm_i2c_ioctl_async(int unit, int fd, int opcode, void * data, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_i2c_open_async(int unit, char * devname, uint32 flags, int speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_i2c_read_async(int unit, int fd, uint32 addr, uint8 * data, uint32 * nbytes, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_i2c_write_async(int unit, int fd, uint32 addr, uint8 * data, uint32 nbytes, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_I2C */
void	bcm_info_get_async(int unit, bcm_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_init_check_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_init_selective_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ip6_mask_create_async(bcm_ip6_t ip6, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ip6_mask_length_async(bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
/* bcm_ip_mask_create has a non int return type */
void	bcm_ip_mask_length_async(bcm_ip_t ip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_config_get_async(int unit, bcm_ipfix_stage_t stage, bcm_port_t port, bcm_ipfix_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_config_set_async(int unit, bcm_ipfix_stage_t stage, bcm_port_t port, bcm_ipfix_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_config_get_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_ipfix_mirror_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_config_set_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_ipfix_mirror_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_port_dest_add_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_port_dest_delete_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_port_dest_delete_all_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_mirror_port_dest_get_async(int unit, bcm_ipfix_stage_t stage, bcm_gport_t port, int mirror_dest_size, bcm_gport_t * mirror_dest_id, int * mirror_dest_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_create_async(int unit, bcm_ipfix_rate_t * rate_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_destroy_async(int unit, bcm_ipfix_rate_id_t rate_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_get_async(int unit, bcm_ipfix_rate_t * rate_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_mirror_add_async(int unit, bcm_ipfix_rate_id_t rate_id, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_mirror_delete_async(int unit, bcm_ipfix_rate_id_t rate_id, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_mirror_delete_all_async(int unit, bcm_ipfix_rate_id_t rate_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_mirror_get_async(int unit, bcm_ipfix_rate_id_t rate_id, int mirror_dest_size, bcm_gport_t * mirror_dest_id, int * mirror_dest_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_rate_traverse_async(int unit, bcm_ipfix_rate_traverse_cb cb, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_register_async(int unit, bcm_ipfix_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_unregister_async(int unit, bcm_ipfix_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_ipmc_add_async(int unit, bcm_ipmc_addr_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_age_async(int unit, uint32 flags, bcm_ipmc_traverse_cb age_cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_del_async(int unit, int ipmc_idx, bcm_port_t port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_get_async(int unit, int ipmc_idx, bcm_port_t port, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_max_get_async(int unit, int * max_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_set_async(int unit, int ipmc_idx, bcm_port_t port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_counters_get_async(int unit, bcm_port_t port, bcm_ipmc_counters_t * counters, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_port_get_async(int unit, bcm_port_t port, bcm_mac_t mac, int * untag, bcm_vlan_t * vid, int * ttl_threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_port_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_port_set_async(int unit, bcm_port_t port, const bcm_mac_t mac, int untag, bcm_vlan_t vid, int ttl_threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_enable_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_find_async(int unit, bcm_ipmc_addr_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_range_add_async(int unit, int * range_id, bcm_ipmc_range_t * range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_range_delete_async(int unit, int range_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_range_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_range_get_async(int unit, int range_id, bcm_ipmc_range_t * range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_range_size_get_async(int unit, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_remove_async(int unit, bcm_ipmc_addr_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_remove_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_add_async(int unit, int rp_id, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_create_async(int unit, uint32 flags, int * rp_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_delete_async(int unit, int rp_id, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_delete_all_async(int unit, int rp_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_destroy_async(int unit, int rp_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_get_async(int unit, int rp_id, int intf_max, bcm_if_t * intf_array, int * intf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_rp_set_async(int unit, int rp_id, int intf_count, bcm_if_t * intf_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_attach_async(int unit, bcm_ipmc_addr_t * info, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_counter_get_async(int unit, bcm_ipmc_addr_t * info, bcm_ipmc_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_counter_set_async(int unit, bcm_ipmc_addr_t * info, bcm_ipmc_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_counter_sync_get_async(int unit, bcm_ipmc_addr_t * info, bcm_ipmc_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_detach_async(int unit, bcm_ipmc_addr_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_id_get_async(int unit, bcm_ipmc_addr_t * info, bcm_ipmc_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_multi_get_async(int unit, bcm_ipmc_addr_t * info, int nstat, bcm_ipmc_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_multi_get32_async(int unit, bcm_ipmc_addr_t * info, int nstat, bcm_ipmc_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_multi_set_async(int unit, bcm_ipmc_addr_t * info, int nstat, bcm_ipmc_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_stat_multi_set32_async(int unit, bcm_ipmc_addr_t * info, int nstat, bcm_ipmc_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_traverse_async(int unit, uint32 flags, bcm_ipmc_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_knet_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_filter_create_async(int unit, bcm_knet_filter_t * filter, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_filter_destroy_async(int unit, int filter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_filter_get_async(int unit, int filter_id, bcm_knet_filter_t * filter, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_filter_traverse_async(int unit, bcm_knet_filter_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_netif_create_async(int unit, bcm_knet_netif_t * netif, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_netif_destroy_async(int unit, int netif_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_netif_get_async(int unit, int netif_id, bcm_knet_netif_t * netif, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_knet_netif_traverse_async(int unit, bcm_knet_netif_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_add_async(int unit, bcm_l2_addr_t * l2addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_mac_async(int unit, bcm_mac_t mac, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_mac_port_async(int unit, bcm_mac_t mac, bcm_module_t mod, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_port_async(int unit, bcm_module_t mod, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_trunk_async(int unit, bcm_trunk_t tid, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_vlan_async(int unit, bcm_vlan_t vid, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_vlan_gport_multi_async(int unit, uint32 flags, int num_pairs, bcm_vlan_t * vlan, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_vlan_port_async(int unit, bcm_vlan_t vid, bcm_module_t mod, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_vlan_trunk_async(int unit, bcm_vlan_t vid, bcm_trunk_t tid, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_freeze_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_get_async(int unit, bcm_mac_t mac_addr, bcm_vlan_t vid, bcm_l2_addr_t * l2addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_msg_distribute_get_async(int unit, bcm_l2_addr_distribute_t * distribution, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_msg_distribute_set_async(int unit, bcm_l2_addr_distribute_t * distribution, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_register_async(int unit, bcm_l2_addr_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_thaw_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_unregister_async(int unit, bcm_l2_addr_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_age_timer_get_async(int unit, int * age_seconds, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_age_timer_set_async(int unit, int age_seconds, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_auth_add_async(int unit, bcm_l2_auth_addr_t * addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_auth_delete_async(int unit, bcm_l2_auth_addr_t * addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_auth_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_auth_get_async(int unit, bcm_l2_auth_addr_t * addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_auth_traverse_async(int unit, bcm_l2_auth_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_delete_async(int unit, int index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_get_async(int unit, int index, bcm_l2_cache_addr_t * addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_set_async(int unit, int index, bcm_l2_cache_addr_t * addr, int * index_used, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_size_get_async(int unit, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_conflict_get_async(int unit, bcm_l2_addr_t * addr, bcm_l2_addr_t * cf_array, int cf_max, int * cf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_create_async(int unit, bcm_l2_egress_t * egr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_destroy_async(int unit, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_find_async(int unit, bcm_l2_egress_t * egr, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_get_async(int unit, bcm_if_t encap_id, bcm_l2_egress_t * egr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_traverse_async(int unit, bcm_l2_egress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_gport_forward_info_get_async(int unit, int gport_id, bcm_l2_gport_forward_info_t * forward_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_key_dump_async(int unit, char * pfx, bcm_l2_addr_t * entry, char * sfx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_class_get_async(int unit, int lclass, int * lclass_prio, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_class_set_async(int unit, int lclass, int lclass_prio, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_limit_get_async(int unit, bcm_l2_learn_limit_t * limit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_limit_set_async(int unit, bcm_l2_learn_limit_t * limit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_msgs_config_get_async(int unit, bcm_l2_learn_msgs_config_t * learn_msg_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_msgs_config_set_async(int unit, bcm_l2_learn_msgs_config_t * learn_msg_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_port_class_get_async(int unit, bcm_gport_t port, int * lclass, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_port_class_set_async(int unit, bcm_gport_t port, int lclass, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_mac_port_create_async(int unit, bcm_l2_mac_port_t * mac_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_mac_port_destroy_async(int unit, bcm_gport_t mac_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_mac_port_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_mac_port_get_async(int unit, bcm_l2_mac_port_t * mac_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_mac_port_traverse_async(int unit, bcm_l2_mac_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_match_masked_traverse_async(int unit, uint32 flags, bcm_l2_addr_t * match_addr, bcm_l2_addr_t * mask_addr, bcm_l2_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_matched_traverse_async(int unit, uint32 flags, bcm_l2_addr_t * match_addr, bcm_l2_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_port_native_async(int unit, int modid, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_replace_async(int unit, uint32 flags, bcm_l2_addr_t * match_addr, bcm_module_t new_module, bcm_port_t new_port, bcm_trunk_t new_trunk, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_replace_match_async(int unit, uint32 flags, bcm_l2_addr_t * match_addr, bcm_l2_addr_t * mask_addr, bcm_l2_addr_t * replace_addr, bcm_l2_addr_t * replace_mask_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_ring_replace_async(int unit, bcm_l2_ring_t * l2_ring, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_enable_set_async(int unit, bcm_l2_addr_t * l2_addr, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_get_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_get32_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_set_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_set32_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_station_add_async(int unit, int * station_id, bcm_l2_station_t * station, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_station_delete_async(int unit, int station_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_station_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_station_get_async(int unit, int station_id, bcm_l2_station_t * station, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_station_size_get_async(int unit, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_traverse_async(int unit, bcm_l2_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_tunnel_add_async(int unit, bcm_mac_t mac, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_tunnel_delete_async(int unit, bcm_mac_t mac, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_tunnel_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_l2gre_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_port_add_async(int unit, bcm_vpn_t l2vpn, bcm_l2gre_port_t * l2gre_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_port_delete_async(int unit, bcm_vpn_t l2vpn, bcm_gport_t l2gre_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_port_delete_all_async(int unit, bcm_vpn_t l2vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_port_get_async(int unit, bcm_vpn_t l2vpn, bcm_l2gre_port_t * l2gre_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_port_get_all_async(int unit, bcm_vpn_t l2vpn, int port_max, bcm_l2gre_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_attach_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_counter_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_l2gre_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_counter_set_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_l2gre_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_counter_sync_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_l2gre_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_detach_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_id_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_l2gre_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_multi_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_l2gre_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_multi_get32_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_l2gre_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_multi_set_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_l2gre_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_stat_multi_set32_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_l2gre_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_initiator_create_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_initiator_destroy_async(int unit, bcm_gport_t l2gre_tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_initiator_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_initiator_get_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_initiator_traverse_async(int unit, bcm_tunnel_initiator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_create_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_destroy_async(int unit, bcm_gport_t l2gre_tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_get_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_traverse_async(int unit, bcm_tunnel_terminator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_tunnel_terminator_update_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_vpn_create_async(int unit, bcm_l2gre_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_vpn_destroy_async(int unit, bcm_vpn_t l2vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_vpn_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_vpn_get_async(int unit, bcm_vpn_t l2vpn, bcm_l2gre_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2gre_vpn_traverse_async(int unit, bcm_l2gre_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_create_async(int unit, uint32 flags, bcm_l3_egress_t * egr, bcm_if_t * if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_destroy_async(int unit, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_add_async(int unit, bcm_l3_egress_ecmp_t * ecmp, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_create_async(int unit, bcm_l3_egress_ecmp_t * ecmp, int intf_count, bcm_if_t * intf_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_delete_async(int unit, bcm_l3_egress_ecmp_t * ecmp, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_destroy_async(int unit, bcm_l3_egress_ecmp_t * ecmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_ethertype_get_async(int unit, uint32 * flags, int ethertype_max, int * ethertype_array, int * ethertype_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_ethertype_set_async(int unit, uint32 flags, int ethertype_count, int * ethertype_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_find_async(int unit, int intf_count, bcm_if_t * intf_array, bcm_l3_egress_ecmp_t * ecmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_get_async(int unit, bcm_l3_egress_ecmp_t * ecmp, int intf_size, bcm_if_t * intf_array, int * intf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_member_status_get_async(int unit, bcm_if_t intf, int * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_member_status_set_async(int unit, bcm_if_t intf, int status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_resilient_replace_async(int unit, uint32 flags, bcm_l3_egress_ecmp_resilient_entry_t * match_entry, int * num_entries, bcm_l3_egress_ecmp_resilient_entry_t * replace_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_resilient_traverse_async(int unit, uint32 flags, bcm_l3_egress_ecmp_resilient_entry_t * match_entry, bcm_l3_egress_ecmp_resilient_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_ecmp_traverse_async(int unit, bcm_l3_egress_ecmp_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_find_async(int unit, bcm_l3_egress_t * egr, bcm_if_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_get_async(int unit, bcm_if_t intf, bcm_l3_egress_t * egr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_add_async(int unit, bcm_if_t mpintf, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_create_async(int unit, uint32 flags, int intf_count, bcm_if_t * intf_array, bcm_if_t * mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_delete_async(int unit, bcm_if_t mpintf, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_destroy_async(int unit, bcm_if_t mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_find_async(int unit, int intf_count, bcm_if_t * intf_array, bcm_if_t * mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_get_async(int unit, bcm_if_t mpintf, int intf_size, bcm_if_t * intf_array, int * intf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_max_create_async(int unit, uint32 flags, int max_paths, int intf_count, bcm_if_t * intf_array, bcm_if_t * mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_traverse_async(int unit, bcm_l3_egress_multipath_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_attach_async(int unit, bcm_if_t intf_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_counter_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_counter_set_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_counter_sync_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_detach_async(int unit, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_enable_set_async(int unit, bcm_l3_egress_t * egr, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_get_async(int unit, bcm_l3_egress_t * egr, bcm_l3_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_get32_async(int unit, bcm_l3_egress_t * egr, bcm_l3_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_id_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_set_async(int unit, bcm_l3_egress_t * egr, bcm_l3_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_set32_async(int unit, bcm_l3_egress_t * egr, bcm_l3_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_traverse_async(int unit, bcm_l3_egress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_enable_set_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_add_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_age_async(int unit, uint32 flags, bcm_l3_host_traverse_cb age_cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_conflict_get_async(int unit, bcm_l3_key_t * ipkey, bcm_l3_key_t * cf_array, int cf_max, int * cf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_async(int unit, bcm_l3_host_t * ip_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_all_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_by_interface_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_by_network_async(int unit, bcm_l3_route_t * ip_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_find_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_invalidate_entry_async(int unit, bcm_ip_t info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_attach_async(int unit, bcm_l3_host_t * info, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_counter_get_async(int unit, bcm_l3_host_t * info, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_counter_set_async(int unit, bcm_l3_host_t * info, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_counter_sync_get_async(int unit, bcm_l3_host_t * info, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_detach_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_enable_set_async(int unit, bcm_l3_host_t * host, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_get_async(int unit, bcm_l3_host_t * host, bcm_l3_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_get32_async(int unit, bcm_l3_host_t * host, bcm_l3_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_id_get_async(int unit, bcm_l3_host_t * info, bcm_l3_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_set_async(int unit, bcm_l3_host_t * host, bcm_l3_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_set32_async(int unit, bcm_l3_host_t * host, bcm_l3_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_traverse_async(int unit, uint32 flags, uint32 start, uint32 end, bcm_l3_host_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_validate_entry_async(int unit, bcm_ip_t info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_info_async(int unit, bcm_l3_info_t * l3info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_create_async(int unit, bcm_l3_ingress_t * ing_intf, bcm_if_t * intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_destroy_async(int unit, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_find_async(int unit, bcm_l3_ingress_t * ing_intf, bcm_if_t * intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_get_async(int unit, bcm_if_t intf, bcm_l3_ingress_t * ing_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_attach_async(int unit, bcm_if_t intf_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_counter_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_counter_set_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_counter_sync_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_detach_async(int unit, bcm_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_stat_id_get_async(int unit, bcm_if_t intf_id, bcm_l3_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ingress_traverse_async(int unit, bcm_l3_ingress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_create_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_delete_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_find_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_find_vlan_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_get_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip4_options_action_get_async(int unit, int ip4_options_profile_id, int ip4_option, bcm_l3_ip4_options_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip4_options_action_set_async(int unit, int ip4_options_profile_id, int ip4_option, bcm_l3_ip4_options_action_t action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip4_options_profile_create_async(int unit, uint32 flags, bcm_l3_ip4_options_action_t default_action, int * ip4_options_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip4_options_profile_destroy_async(int unit, int ip4_options_profile_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_add_async(int unit, bcm_ip6_t ip6_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_delete_async(int unit, bcm_ip6_t ip6_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_get_async(int unit, int map_size, bcm_ip6_t * ip6_array, int * ip6_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_add_async(int unit, bcm_l3_nat_egress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_delete_async(int unit, bcm_l3_nat_id_t nat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_get_async(int unit, bcm_l3_nat_egress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_attach_async(int unit, bcm_l3_nat_egress_t * info, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_counter_get_async(int unit, bcm_l3_nat_egress_t * info, bcm_l3_nat_egress_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_counter_set_async(int unit, bcm_l3_nat_egress_t * info, bcm_l3_nat_egress_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_counter_sync_get_async(int unit, bcm_l3_nat_egress_t * info, bcm_l3_nat_egress_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_detach_async(int unit, bcm_l3_nat_egress_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_id_get_async(int unit, bcm_l3_nat_egress_t * info, bcm_l3_nat_egress_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_multi_get_async(int unit, bcm_l3_nat_egress_t * info, int nstat, bcm_l3_nat_egress_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_multi_get32_async(int unit, bcm_l3_nat_egress_t * info, int nstat, bcm_l3_nat_egress_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_multi_set_async(int unit, bcm_l3_nat_egress_t * info, int nstat, bcm_l3_nat_egress_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_stat_multi_set32_async(int unit, bcm_l3_nat_egress_t * info, int nstat, bcm_l3_nat_egress_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_egress_traverse_async(int unit, uint32 flags, uint32 start, uint32 end, bcm_l3_nat_egress_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_add_async(int unit, bcm_l3_nat_ingress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_age_async(int unit, uint32 flags, bcm_l3_nat_ingress_traverse_cb age_cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_delete_async(int unit, bcm_l3_nat_ingress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_delete_all_async(int unit, bcm_l3_nat_ingress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_find_async(int unit, bcm_l3_nat_ingress_t * nat_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_nat_ingress_traverse_async(int unit, uint32 flags, uint32 start, uint32 end, bcm_l3_nat_ingress_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_add_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_age_async(int unit, uint32 flags, bcm_l3_route_traverse_cb age_out, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_delete_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_delete_all_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_delete_by_interface_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_find_async(int unit, bcm_l3_host_t * host, bcm_l3_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_get_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_max_ecmp_get_async(int unit, int * max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_max_ecmp_set_async(int unit, int max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_multipath_get_async(int unit, bcm_l3_route_t * the_route, bcm_l3_route_t * path_array, int max_path, int * path_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_attach_async(int unit, bcm_l3_route_t * info, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_counter_get_async(int unit, bcm_l3_route_t * info, bcm_l3_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_counter_set_async(int unit, bcm_l3_route_t * info, bcm_l3_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_counter_sync_get_async(int unit, bcm_l3_route_t * info, bcm_l3_route_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_detach_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_enable_set_async(int unit, bcm_l3_route_t * route, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_get_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_get32_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_id_get_async(int unit, bcm_l3_route_t * info, bcm_l3_route_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_multi_get_async(int unit, bcm_l3_route_t * info, int nstat, bcm_l3_route_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_multi_get32_async(int unit, bcm_l3_route_t * info, int nstat, bcm_l3_route_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_multi_set_async(int unit, bcm_l3_route_t * info, int nstat, bcm_l3_route_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_multi_set32_async(int unit, bcm_l3_route_t * info, int nstat, bcm_l3_route_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_set_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_set32_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_traverse_async(int unit, uint32 flags, uint32 start, uint32 end, bcm_l3_route_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_add_async(int unit, bcm_l3_source_bind_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_delete_async(int unit, bcm_l3_source_bind_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_get_async(int unit, bcm_l3_source_bind_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_source_bind_traverse_async(int unit, bcm_l3_source_bind_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_subnet_route_find_async(int unit, bcm_l3_route_t * input, bcm_l3_route_t * route, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_attach_async(int unit, bcm_vrf_t vrf, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_counter_get_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_counter_set_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_counter_sync_get_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_detach_async(int unit, bcm_vrf_t vrf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_enable_set_async(int unit, bcm_vrf_t vrf, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_get_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_get32_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_id_get_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_multi_get_async(int unit, bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_multi_get32_async(int unit, bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_multi_set_async(int unit, bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_multi_set32_async(int unit, bcm_vrf_t vrf, int nstat, bcm_l3_vrf_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_set_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_set32_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_sync_get_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrf_stat_sync_get32_async(int unit, bcm_vrf_t vrf, bcm_l3_vrf_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_add_async(int unit, bcm_vlan_t vlan, uint32 vrid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_config_add_async(int unit, uint32 flags, bcm_vlan_t vlan, uint32 vrid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_config_delete_async(int unit, uint32 flags, bcm_vlan_t vlan, uint32 vrid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_config_delete_all_async(int unit, uint32 flags, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_config_get_async(int unit, uint32 flags, bcm_vlan_t vlan, uint32 alloc_size, uint32 * vrid_array, uint32 * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_delete_async(int unit, bcm_vlan_t vlan, uint32 vrid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_delete_all_async(int unit, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_vrrp_get_async(int unit, bcm_vlan_t vlan, int alloc_size, int * vrid_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_link_change_async(int unit, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_link_wait_async(int unit, bcm_pbmp_t * pbm, int us, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_linkscan_dump_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_linkscan_enable_get_async(int unit, int * us, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_enable_port_get_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_enable_set_async(int unit, int us, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_mode_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_mode_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_mode_set_pbm_async(int unit, bcm_pbmp_t pbm, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_port_register_async(int unit, bcm_port_t port, bcm_linkscan_port_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_port_unregister_async(int unit, bcm_port_t port, bcm_linkscan_port_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_register_async(int unit, bcm_linkscan_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_unregister_async(int unit, bcm_linkscan_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_update_async(int unit, bcm_pbmp_t pbm, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_MACSEC
void	bcm_macsec_event_enable_get_async(int unit, bcm_macsec_event_t t, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_event_enable_set_async(int unit, bcm_macsec_event_t t, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_event_register_async(int unit, bcm_macsec_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_event_unregister_async(int unit, bcm_macsec_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_flow_create_async(int unit, bcm_port_t port, uint32 flags, bcm_macsec_flow_match_t * flow, bcm_macsec_flow_action_t * action, int * flowId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_flow_destroy_async(int unit, bcm_port_t port, int flowId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_flow_get_async(int unit, bcm_port_t port, int flowId, bcm_macsec_flow_match_t * flow, bcm_macsec_flow_action_t * a, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_flow_traverse_async(int unit, bcm_port_t port, bcm_macsec_flow_traverse_cb callbk, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_port_capability_get_async(int unit, bcm_port_t port, bcm_macsec_port_capability_t * cap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_port_config_get_async(int unit, bcm_port_t port, bcm_macsec_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_port_config_set_async(int unit, bcm_port_t port, bcm_macsec_port_config_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_port_traverse_async(int unit, bcm_macsec_port_traverse_cb callbk, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_assoc_create_async(int unit, bcm_port_t port, uint32 flags, int chanId, bcm_macsec_secure_assoc_t * assoc, int * assocId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_assoc_destroy_async(int unit, bcm_port_t port, int assocId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_assoc_get_async(int unit, bcm_port_t port, int assocId, bcm_macsec_secure_assoc_t * assoc, int * chanId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_assoc_traverse_async(int unit, bcm_port_t port, int chanId, bcm_macsec_secure_assoc_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_chan_create_async(int unit, bcm_port_t port, uint32 flags, bcm_macsec_secure_chan_t * chan, int * chanId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_chan_destroy_async(int unit, bcm_port_t port, int chanId, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_chan_get_async(int unit, bcm_port_t port, int chanId, bcm_macsec_secure_chan_t * chan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_secure_chan_traverse_async(int unit, bcm_port_t port, bcm_macsec_chan_traverse_cb calback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_stat_clear_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_stat_get_async(int unit, bcm_port_t port, bcm_macsec_stat_t stat, int chanId, int assocId, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_stat_get32_async(int unit, bcm_port_t port, bcm_macsec_stat_t stat, int chanId, int assocId, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_stat_set_async(int unit, bcm_port_t port, bcm_macsec_stat_t stat, int chanId, int assocId, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_macsec_stat_set32_async(int unit, bcm_port_t port, bcm_macsec_stat_t stat, int chanId, int assocId, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_MACSEC */
void	bcm_mcast_addr_add_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_addr_add_w_l2mcindex_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_addr_remove_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_addr_remove_w_l2mcindex_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_del_async(int unit, int mc_idx, bcm_port_t in_port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_get_async(int unit, int mc_idx, bcm_port_t in_port, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_max_get_async(int unit, int * max_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_set_async(int unit, int mc_idx, bcm_port_t in_port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_join_async(int unit, bcm_mac_t mcMacAddr, bcm_vlan_t vlanId, int srcPort, bcm_mcast_addr_t * mcaddr, bcm_pbmp_t * allRouterBmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_leave_async(int unit, bcm_mac_t mcMacAddr, bcm_vlan_t vlanId, int srcPort, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_port_add_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_port_get_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_port_remove_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_mim_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_attach_async(int unit, int lookup_id, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_counter_get_async(int unit, int lookup_id, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_counter_set_async(int unit, int lookup_id, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_counter_sync_get_async(int unit, int lookup_id, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_detach_async(int unit, int lookup_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_lookup_id_stat_id_get_async(int unit, int lookup_id, bcm_mim_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_add_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_port_t * mim_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_delete_async(int unit, bcm_mim_vpn_t vpn, bcm_gport_t mim_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_delete_all_async(int unit, bcm_mim_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_port_t * mim_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_get_all_async(int unit, bcm_mim_vpn_t vpn, int port_max, bcm_mim_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_create_async(int unit, bcm_mim_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_destroy_async(int unit, bcm_mim_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_attach_async(int unit, bcm_mim_vpn_t vpn, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_counter_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_counter_set_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_counter_sync_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_detach_async(int unit, bcm_mim_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_stat_id_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_traverse_async(int unit, bcm_mim_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_mirror_destination_create_async(int unit, bcm_mirror_destination_t * mirror_dest, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_destroy_async(int unit, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_get_async(int unit, bcm_gport_t mirror_dest_id, bcm_mirror_destination_t * mirror_dest, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_traverse_async(int unit, bcm_mirror_destination_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_egress_get_async(int unit, bcm_port_t port, int * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_egress_set_async(int unit, bcm_port_t port, int val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_get_async(int unit, bcm_port_t port, int * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_set_async(int unit, bcm_port_t port, int val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_mode_get_async(int unit, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_mode_set_async(int unit, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_add_async(int unit, bcm_port_t port, uint32 flags, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_delete_async(int unit, bcm_port_t port, uint32 flags, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_delete_all_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_get_async(int unit, bcm_port_t port, uint32 flags, int mirror_dest_size, bcm_gport_t * mirror_dest, int * mirror_dest_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_destination_add_async(int unit, bcm_port_t port, uint32 flags, bcm_gport_t mirror_dest, bcm_mirror_options_t options, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_destination_get_async(int unit, bcm_port_t port, uint32 flags, int mirror_dest_size, bcm_gport_t * mirror_dest, int * mirror_dest_count, bcm_mirror_options_t * options, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_get_async(int unit, bcm_port_t port, bcm_module_t * dest_mod, bcm_port_t * dest_port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_info_get_async(int unit, bcm_port_t port, uint32 flags, bcm_mirror_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_info_set_async(int unit, bcm_port_t port, uint32 flags, bcm_mirror_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_set_async(int unit, bcm_port_t port, bcm_module_t dest_mod, bcm_port_t dest_port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_dest_add_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, bcm_gport_t destid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_dest_delete_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, bcm_gport_t destid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_dest_delete_all_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_dest_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, uint32 mirror_dest_size, bcm_gport_t * destid, uint32 * destcount, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_destination_add_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, bcm_gport_t destid, bcm_mirror_options_t options, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_destination_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, uint32 flags, uint32 mirror_dest_size, bcm_gport_t * destid, uint32 * destcount, bcm_mirror_options_t * options, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, bcm_gport_t * dest_port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_vlan_set_async(int unit, bcm_port_t port, bcm_vlan_t vlan, bcm_gport_t destport, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_get_async(int unit, bcm_port_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_pbmp_get_async(int unit, bcm_port_t port, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_pbmp_set_async(int unit, bcm_port_t port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_set_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_vlan_get_async(int unit, bcm_port_t port, uint16 * tpid, uint16 * vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_vlan_set_async(int unit, bcm_port_t port, uint16 tpid, uint16 vlan, bcm_async_cb_t async_callback, void *async_cookie);
/* bcm_module_name has a non int return type */
#ifdef	INCLUDE_L3
void	bcm_mpls_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_create_async(int unit, uint32 flags, int * exp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_destroy_async(int unit, int exp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_get_async(int unit, int exp_map_id, bcm_mpls_exp_map_t * exp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_set_async(int unit, int exp_map_id, bcm_mpls_exp_map_t * exp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_attach_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_clear_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_counter_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_counter_set_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_counter_sync_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_detach_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_enable_set_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_get32_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_id_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_sync_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_sync_get32_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_add_async(int unit, bcm_vpn_t vpn, bcm_mpls_port_t * mpls_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_delete_async(int unit, bcm_vpn_t vpn, bcm_gport_t mpls_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_delete_all_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_get_async(int unit, bcm_vpn_t vpn, bcm_mpls_port_t * mpls_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_get_all_async(int unit, bcm_vpn_t vpn, int port_max, bcm_mpls_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_attach_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_counter_get_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_counter_set_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_counter_sync_get_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_detach_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_enable_set_async(int unit, bcm_gport_t mpls_port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_get_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_get32_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_id_get_async(int unit, bcm_vpn_t vpn, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_set_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_set32_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_clear_async(int unit, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_clear_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_create_async(int unit, bcm_if_t intf, int num_labels, bcm_mpls_egress_label_t * label_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_get_async(int unit, bcm_if_t intf, int label_max, bcm_mpls_egress_label_t * label_array, int * label_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_set_async(int unit, bcm_if_t intf, int num_labels, bcm_mpls_egress_label_t * label_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_add_async(int unit, bcm_mpls_tunnel_switch_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_create_async(int unit, bcm_mpls_tunnel_switch_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_delete_async(int unit, bcm_mpls_tunnel_switch_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_get_async(int unit, bcm_mpls_tunnel_switch_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_traverse_async(int unit, bcm_mpls_tunnel_switch_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_create_async(int unit, bcm_mpls_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_destroy_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_get_async(int unit, bcm_vpn_t vpn, bcm_mpls_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_traverse_async(int unit, bcm_mpls_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_multicast_add_async(int unit, bcm_multicast_t group, uint32 flags, int nof_replications, bcm_multicast_replication_t * rep_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_control_get_async(int unit, bcm_multicast_t group, bcm_multicast_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_control_set_async(int unit, bcm_multicast_t group, bcm_multicast_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_create_async(int unit, uint32 flags, bcm_multicast_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_delete_async(int unit, bcm_multicast_t group, uint32 flags, int nof_replications, bcm_multicast_replication_t * rep_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_destroy_async(int unit, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_add_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_delete_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_delete_all_async(int unit, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_get_async(int unit, bcm_multicast_t group, int port_max, bcm_gport_t * port_array, bcm_if_t * encap_id_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_object_encap_get_async(int unit, bcm_multicast_t group, bcm_if_t intf, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_set_async(int unit, bcm_multicast_t group, int port_count, bcm_gport_t * port_array, bcm_if_t * encap_id_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_subscriber_add_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_gport_t subscriber_queue, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_subscriber_delete_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_gport_t subscriber_queue, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_subscriber_get_async(int unit, bcm_multicast_t group, int port_max, bcm_gport_t * port_array, bcm_if_t * encap_id_array, bcm_gport_t * subscriber_queue_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_subscriber_set_async(int unit, bcm_multicast_t group, int port_count, bcm_gport_t * port_array, bcm_if_t * encap_id_array, bcm_gport_t * subscriber_queue_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_extender_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t extender_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_fabric_distribution_get_async(int unit, bcm_multicast_t group, bcm_fabric_distribution_t * ds_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_fabric_distribution_set_async(int unit, bcm_multicast_t group, bcm_fabric_distribution_t ds_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_get_async(int unit, bcm_multicast_t group, uint32 flags, int replication_max, bcm_multicast_replication_t * out_rep_array, int * rep_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_group_free_range_get_async(int unit, uint32 type_flag, bcm_multicast_t * group_min, bcm_multicast_t * group_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_group_get_async(int unit, bcm_multicast_t group, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_group_is_free_async(int unit, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_group_traverse_async(int unit, bcm_multicast_group_traverse_cb_t trav_fn, uint32 flags, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_ingress_add_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_ingress_delete_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_ingress_delete_all_async(int unit, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_ingress_get_async(int unit, bcm_multicast_t group, int port_max, bcm_gport_t * port_array, bcm_if_t * encap_id_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_ingress_set_async(int unit, bcm_multicast_t group, int port_count, bcm_gport_t * port_array, bcm_if_t * encap_id_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_l2_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_vlan_t vlan, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_l2gre_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t l2gre_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_l3_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t intf, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_mac_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t mac_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_mim_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t mim_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_niv_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t niv_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_repl_get_async(int unit, int index, bcm_port_t port, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_repl_set_async(int unit, int mc_index, bcm_port_t port, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_set_async(int unit, bcm_multicast_t group, uint32 flags, int nof_replications, bcm_multicast_replication_t * rep_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_subport_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t subport, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_trill_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t intf, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_vlan_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t vlan_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_vpls_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t mpls_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_vxlan_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t vxlan_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_wlan_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t wlan_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_niv_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_egress_add_async(int unit, bcm_gport_t niv_port, bcm_niv_egress_t * niv_egress, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_egress_delete_async(int unit, bcm_gport_t niv_port, bcm_niv_egress_t * niv_egress, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_egress_delete_all_async(int unit, bcm_gport_t niv_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_egress_get_async(int unit, bcm_gport_t niv_port, int array_size, bcm_niv_egress_t * niv_egress_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_egress_set_async(int unit, bcm_gport_t niv_port, int array_size, bcm_niv_egress_t * niv_egress_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_forward_add_async(int unit, bcm_niv_forward_t * iv_fwd_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_forward_delete_async(int unit, bcm_niv_forward_t * iv_fwd_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_forward_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_forward_get_async(int unit, bcm_niv_forward_t * iv_fwd_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_forward_traverse_async(int unit, bcm_niv_forward_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_port_add_async(int unit, bcm_niv_port_t * niv_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_port_delete_async(int unit, bcm_gport_t niv_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_port_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_port_get_async(int unit, bcm_niv_port_t * niv_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_niv_port_traverse_async(int unit, bcm_niv_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_oam_control_get_async(int unit, bcm_oam_control_type_t type, uint64 * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_control_set_async(int unit, bcm_oam_control_type_t type, uint64 arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_delay_add_async(int unit, bcm_oam_delay_t * delay_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_delay_delete_async(int unit, bcm_oam_delay_t * delay_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_delay_get_async(int unit, bcm_oam_delay_t * delay_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_action_set_async(int unit, bcm_oam_endpoint_t id, bcm_oam_endpoint_action_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_create_async(int unit, bcm_oam_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_destroy_async(int unit, bcm_oam_endpoint_t endpoint, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_destroy_all_async(int unit, bcm_oam_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_get_async(int unit, bcm_oam_endpoint_t endpoint, bcm_oam_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_endpoint_traverse_async(int unit, bcm_oam_group_t group, bcm_oam_endpoint_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_event_register_async(int unit, bcm_oam_event_types_t event_types, bcm_oam_event_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_event_unregister_async(int unit, bcm_oam_event_types_t event_types, bcm_oam_event_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_group_create_async(int unit, bcm_oam_group_info_t * group_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_group_destroy_async(int unit, bcm_oam_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_group_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_group_get_async(int unit, bcm_oam_group_t group, bcm_oam_group_info_t * group_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_group_traverse_async(int unit, bcm_oam_group_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loopback_add_async(int unit, bcm_oam_loopback_t * loopback_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loopback_delete_async(int unit, bcm_oam_loopback_t * loopback_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loopback_get_async(int unit, bcm_oam_loopback_t * loopback_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loss_add_async(int unit, bcm_oam_loss_t * loss_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loss_delete_async(int unit, bcm_oam_loss_t * loss_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_loss_get_async(int unit, bcm_oam_loss_t * loss_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_opcode_map_get_async(int unit, int opcode, int * profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_opcode_map_set_async(int unit, int opcode, int profile, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_psc_add_async(int unit, bcm_oam_psc_t * psc_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_psc_delete_async(int unit, bcm_oam_psc_t * psc_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_psc_get_async(int unit, bcm_oam_psc_t * psc_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pw_status_add_async(int unit, bcm_oam_pw_status_t * pw_status_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pw_status_delete_async(int unit, bcm_oam_pw_status_t * pw_status_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_pw_status_get_async(int unit, bcm_oam_pw_status_t * pw_status_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_alloc_async(int unit, int size, uint32 flags, bcm_pkt_t ** pkt_buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_blk_alloc_async(int unit, int count, int size, uint32 flags, bcm_pkt_t *** packet_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_blk_free_async(int unit, bcm_pkt_t ** pkt, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_byte_index_async(bcm_pkt_t * pkt, int n, int * len, int * blk_idx, uint8 ** location, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_clear_async(int unit, bcm_pkt_t * pkt, bcm_pkt_blk_t * blks, int blk_count, uint32 flags, bcm_pkt_t ** pkt_buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_flags_init_async(int unit, bcm_pkt_t * pkt, uint32 init_flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_flags_len_setup_async(int unit, bcm_pkt_t * pkt, int alloc_bytes, int payload_len, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_free_async(int unit, bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_memcpy_async(bcm_pkt_t * pkt, int dest_byte, uint8 * src, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_rx_alloc_async(int unit, int len, bcm_pkt_t ** pkt_buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_rx_free_async(int unit, bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_add_async(int unit, uint32 action_id, bcm_policer_action_t action, uint32 param0, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_attach_async(int unit, bcm_policer_t policer_id, uint32 action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_attach_get_async(int unit, bcm_policer_t policer_id, uint32 * action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_create_async(int unit, uint32 * action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_destroy_async(int unit, uint32 action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_detach_async(int unit, bcm_policer_t policer_id, uint32 action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_action_get_async(int unit, uint32 action_id, bcm_policer_action_t action, uint32 * param0, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_create_async(int unit, bcm_policer_config_t * pol_cfg, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_destroy_async(int unit, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_envelop_create_async(int unit, uint32 flag, bcm_policer_t macro_flow_policer_id, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_envelop_group_create_async(int unit, uint32 flag, bcm_policer_group_mode_t mode, bcm_policer_t macro_flow_policer_id, bcm_policer_t * policer_id, int * npolicers, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_get_async(int unit, bcm_policer_t policer_id, bcm_policer_config_t * pol_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_group_create_async(int unit, bcm_policer_group_mode_t mode, bcm_policer_t * policer_id, int * npolicers, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_set_async(int unit, bcm_policer_t policer_id, bcm_policer_config_t * pol_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_enable_get_async(int unit, bcm_policer_t policer_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_enable_set_async(int unit, bcm_policer_t policer_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_get_async(int unit, bcm_policer_t policer_id, bcm_cos_t int_pri, bcm_policer_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_get32_async(int unit, bcm_policer_t policer_id, bcm_cos_t int_pri, bcm_policer_stat_t stat, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_set_async(int unit, bcm_policer_t policer_id, bcm_cos_t int_pri, bcm_policer_stat_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_set32_async(int unit, bcm_policer_t policer_id, bcm_cos_t int_pri, bcm_policer_stat_t stat, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_traverse_async(int unit, bcm_policer_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_advert_get_async(int unit, bcm_port_t port, bcm_port_ability_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_advert_set_async(int unit, bcm_port_t port, bcm_port_ability_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_get_async(int unit, bcm_port_t port, bcm_port_abil_t * local_ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_local_get_async(int unit, bcm_port_t port, bcm_port_ability_t * local_ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_remote_get_async(int unit, bcm_port_t port, bcm_port_ability_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_advert_get_async(int unit, bcm_port_t port, bcm_port_abil_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_advert_remote_get_async(int unit, bcm_port_t port, bcm_port_abil_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_advert_set_async(int unit, bcm_port_t port, bcm_port_abil_t ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_autoneg_get_async(int unit, bcm_port_t port, int * autoneg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_autoneg_set_async(int unit, bcm_port_t port, int autoneg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_bpdu_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_bpdu_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_cable_diag_async(int unit, bcm_port_t port, bcm_port_cable_diag_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_cfi_color_get_async(int unit, bcm_port_t port, int cfi, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_cfi_color_set_async(int unit, bcm_port_t port, int cfi, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_class_get_async(int unit, bcm_port_t port, bcm_port_class_t pclass, uint32 * class_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_class_set_async(int unit, bcm_port_t port, bcm_port_class_t pclass, uint32 class_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_config_get_async(int unit, bcm_port_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_config_phy_oam_get_async(int unit, bcm_port_t port, bcm_port_config_phy_oam_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_config_phy_oam_set_async(int unit, bcm_port_t port, bcm_port_config_phy_oam_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_congestion_config_get_async(int unit, bcm_gport_t port, bcm_port_congestion_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_congestion_config_set_async(int unit, bcm_gport_t port, bcm_port_congestion_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_congestion_get_async(int unit, bcm_gport_t congestion_port, bcm_gport_t port, uint32 flags, int * channel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_congestion_set_async(int unit, bcm_gport_t congestion_port, bcm_gport_t port, uint32 flags, int channel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_get_async(int unit, bcm_port_t port, bcm_port_control_t type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_phy_oam_get_async(int unit, bcm_port_t port, bcm_port_control_phy_oam_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_phy_oam_set_async(int unit, bcm_port_t port, bcm_port_control_phy_oam_t type, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_phy_timesync_get_async(int unit, bcm_port_t port, bcm_port_control_phy_timesync_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_phy_timesync_set_async(int unit, bcm_port_t port, bcm_port_control_phy_timesync_t type, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_set_async(int unit, bcm_port_t port, bcm_port_control_t type, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_detach_async(int unit, bcm_pbmp_t pbmp, bcm_pbmp_t * detached, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_discard_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_discard_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_get_async(int unit, bcm_port_t port, int srccp, int * mapcp, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_mode_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_mode_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_set_async(int unit, bcm_port_t port, int srccp, int mapcp, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_unmap_get_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int * pkt_dscp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_unmap_set_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int pkt_dscp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dtag_mode_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dtag_mode_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_duplex_get_async(int unit, bcm_port_t port, int * duplex, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_duplex_set_async(int unit, bcm_port_t port, int duplex, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_egress_get_async(int unit, bcm_port_t port, int modid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_egress_policer_set_async(int unit, bcm_port_t port, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_egress_set_async(int unit, bcm_port_t port, int modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_config_get_async(int unit, bcm_gport_t gport, bcm_port_encap_config_t * encap_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_config_set_async(int unit, bcm_gport_t gport, bcm_port_encap_config_t * encap_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_map_get_async(int unit, uint32 flags, bcm_if_t encap_id, bcm_gport_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_map_set_async(int unit, uint32 flags, bcm_if_t encap_id, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_fault_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flood_block_get_async(int unit, bcm_port_t ingress_port, bcm_port_t egress_port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flood_block_set_async(int unit, bcm_port_t ingress_port, bcm_port_t egress_port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_dest_get_async(int unit, bcm_gport_t gport, bcm_port_dest_info_t * dest_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_dest_set_async(int unit, bcm_gport_t gport, bcm_port_dest_info_t * dest_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_forward_get_async(int unit, bcm_port_t port, bcm_port_t * egr_port, int * enabled, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_forward_mode_get_async(int unit, bcm_port_t port, bcm_port_t * egr_port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_forward_mode_set_async(int unit, bcm_port_t port, bcm_port_t egr_port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_forward_set_async(int unit, bcm_port_t port, bcm_port_t egr_port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_vlan_get_async(int unit, bcm_port_t port, bcm_vlan_t * vlan, int * pkt_prio, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_vlan_set_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int pkt_prio, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_frame_max_get_async(int unit, bcm_port_t port, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_frame_max_set_async(int unit, bcm_port_t port, int size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_gport_free_range_get_async(int unit, uint32 gport_type, bcm_gport_t * gport_min, bcm_gport_t * gport_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_gport_get_async(int unit, bcm_port_t port, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_gport_is_free_async(int unit, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifg_get_async(int unit, bcm_port_t port, int speed, bcm_port_duplex_t duplex, int * bit_times, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifg_set_async(int unit, bcm_port_t port, int speed, bcm_port_duplex_t duplex, int bit_times, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifilter_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifilter_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_get_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_restore_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_save_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_set_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_inner_tpid_get_async(int unit, bcm_port_t port, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_inner_tpid_set_async(int unit, bcm_port_t port, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_interface_config_get_async(int unit, bcm_port_t port, bcm_port_interface_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_interface_config_set_async(int unit, bcm_port_t port, bcm_port_interface_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_interface_get_async(int unit, bcm_port_t port, bcm_port_if_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_interface_set_async(int unit, bcm_port_t port, bcm_port_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_internal_get_async(int unit, uint32 flags, int internal_ports_max, bcm_gport_t * internal_gport, int * internal_ports_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ipmc_modify_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ipmc_modify_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_jam_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_jam_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_modify_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_modify_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_mtu_get_async(int unit, bcm_port_t port, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_mtu_set_async(int unit, bcm_port_t port, int size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_learn_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_learn_modify_async(int unit, bcm_port_t port, uint32 add, uint32 remove, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_learn_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_link_failed_clear_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_link_state_get_async(int unit, bcm_port_t port, uint32 flags, bcm_port_link_state_t * state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_link_status_get_async(int unit, bcm_port_t port, int * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_linkscan_get_async(int unit, bcm_port_t port, int * linkscan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_linkscan_set_async(int unit, bcm_port_t port, int linkscan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_local_get_async(int unit, bcm_gport_t gport, bcm_port_t * local_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_loopback_get_async(int unit, bcm_port_t port, int * loopback, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_loopback_set_async(int unit, bcm_port_t port, int loopback, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_management_packet_config_get_async(int unit, bcm_port_t port, bcm_port_management_packet_config_t * config_array, int max_config, int * config_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_management_packet_config_set_async(int unit, bcm_port_t port, bcm_port_management_packet_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_master_get_async(int unit, bcm_port_t port, int * ms, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_master_set_async(int unit, bcm_port_t port, int ms, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_add_async(int unit, bcm_gport_t port, bcm_port_match_info_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_delete_async(int unit, bcm_gport_t port, bcm_port_match_info_t * match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_delete_all_async(int unit, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_multi_get_async(int unit, bcm_gport_t port, int size, bcm_port_match_info_t * match_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_replace_async(int unit, bcm_gport_t port, bcm_port_match_info_t * old_match, bcm_port_match_info_t * new_match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_match_set_async(int unit, bcm_gport_t port, int size, bcm_port_match_info_t * match_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_mdix_get_async(int unit, bcm_port_t port, bcm_port_mdix_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_mdix_set_async(int unit, bcm_port_t port, bcm_port_mdix_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_mdix_status_get_async(int unit, bcm_port_t port, bcm_port_mdix_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_config_get_async(int unit, bcm_port_t port, bcm_port_medium_t medium, bcm_phy_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_config_set_async(int unit, bcm_port_t port, bcm_port_medium_t medium, bcm_phy_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_get_async(int unit, bcm_port_t port, bcm_port_medium_t * medium, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_status_register_async(int unit, bcm_port_t port, bcm_port_medium_status_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_status_unregister_async(int unit, bcm_port_t port, bcm_port_medium_status_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_egress_get_async(int unit, bcm_port_t port, bcm_module_t modid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_egress_set_async(int unit, bcm_port_t port, bcm_module_t modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_enable_get_async(int unit, bcm_port_t port, int modid, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_enable_set_async(int unit, bcm_port_t port, int modid, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_addr_get_async(int unit, bcm_port_t port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_addr_set_async(int unit, bcm_port_t port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_get_async(int unit, bcm_port_t port, int * pause_tx, int * pause_rx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_set_async(int unit, bcm_port_t port, int pause_tx, int pause_rx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_sym_get_async(int unit, bcm_port_t port, int * pause, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_sym_set_async(int unit, bcm_port_t port, int pause, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pfm_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pfm_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_control_get_async(int unit, bcm_port_t port, bcm_port_phy_control_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_control_set_async(int unit, bcm_port_t port, bcm_port_phy_control_t type, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_drv_name_get_async(int unit, bcm_port_t port, char * name, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_firmware_set_async(int unit, bcm_port_t port, uint32 flags, int offset, uint8 * array, int length, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_get_async(int unit, bcm_port_t port, uint32 flags, uint32 phy_reg_addr, uint32 * phy_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_modify_async(int unit, bcm_port_t port, uint32 flags, uint32 phy_reg_addr, uint32 phy_data, uint32 phy_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_multi_get_async(int unit, bcm_port_t port, uint32 flags, uint32 dev_addr, uint32 offset, int max_size, uint8 * data, int * actual_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_reset_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_reset_register_async(int unit, bcm_port_t port, bcm_port_phy_reset_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_reset_unregister_async(int unit, bcm_port_t port, bcm_port_phy_reset_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_set_async(int unit, bcm_port_t port, uint32 flags, uint32 phy_reg_addr, uint32 phy_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_timesync_config_get_async(int unit, bcm_port_t port, bcm_port_phy_timesync_config_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_timesync_config_set_async(int unit, bcm_port_t port, bcm_port_phy_timesync_config_t * conf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_timesync_enhanced_capture_get_async(int unit, bcm_port_t port, bcm_port_phy_timesync_enhanced_capture_t * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_policer_get_async(int unit, bcm_port_t port, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_policer_set_async(int unit, bcm_port_t port, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_info_get_async(int unit, bcm_port_t pon_port, bcm_port_pon_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_info_set_async(int unit, bcm_port_t pon_port, bcm_port_pon_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_tunnel_add_async(int unit, bcm_gport_t pon_port, uint32 flags, bcm_gport_t * tunnel_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_tunnel_map_get_async(int unit, bcm_gport_t pon_port, bcm_tunnel_id_t tunnel_id, bcm_gport_t * tunnel_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_tunnel_map_set_async(int unit, bcm_gport_t pon_port, bcm_tunnel_id_t tunnel_id, bcm_gport_t tunnel_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pon_tunnel_remove_async(int unit, bcm_gport_t tunnel_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_color_get_async(int unit, bcm_port_t port, int prio, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_color_set_async(int unit, bcm_port_t port, int prio, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_probe_async(int unit, bcm_pbmp_t pbmp, bcm_pbmp_t * okay_pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_protocol_vlan_add_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_protocol_vlan_delete_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_protocol_vlan_delete_all_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_queued_count_get_async(int unit, bcm_port_t port, uint32 * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_get_async(int unit, bcm_port_t port, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_pps_get_async(int unit, bcm_port_t port, uint32 * pps, uint32 * burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_pps_set_async(int unit, bcm_port_t port, uint32 pps, uint32 burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_set_async(int unit, bcm_port_t port, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_traffic_get_async(int unit, bcm_port_t port, uint32 * traffic_types, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_traffic_set_async(int unit, bcm_port_t port, uint32 traffic_types, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_ingress_get_async(int unit, bcm_port_t port, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_ingress_set_async(int unit, bcm_port_t port, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_pause_get_async(int unit, bcm_port_t port, uint32 * kbits_pause, uint32 * kbits_resume, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_pause_set_async(int unit, bcm_port_t port, uint32 kbits_pause, uint32 kbits_resume, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_sample_rate_get_async(int unit, bcm_port_t port, int * ingress_rate, int * egress_rate, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_sample_rate_set_async(int unit, bcm_port_t port, int ingress_rate, int egress_rate, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_selective_get_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_selective_set_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_speed_get_async(int unit, bcm_port_t port, int * speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_speed_max_async(int unit, bcm_port_t port, int * speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_speed_set_async(int unit, bcm_port_t port, int speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_attach_async(int unit, bcm_gport_t port, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_counter_get_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_counter_set_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_counter_sync_get_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_detach_async(int unit, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_detach_with_id_async(int unit, bcm_gport_t port, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_enable_set_async(int unit, bcm_gport_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_get_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_get32_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_id_get_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_multi_get_async(int unit, bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_multi_get32_async(int unit, bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_multi_set_async(int unit, bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_multi_set32_async(int unit, bcm_gport_t port, int nstat, bcm_port_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_set_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_set32_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_sync_get_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stat_sync_get32_async(int unit, bcm_gport_t port, bcm_port_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stp_get_async(int unit, bcm_port_t port, int * state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stp_set_async(int unit, bcm_port_t port, int state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_subsidiary_ports_get_async(int unit, bcm_port_t port, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_CES
void	bcm_port_tdm_cas_abcd_get_async(int unit, bcm_port_t tdm_port, bcm_tdm_port_cas_status_t status, uint8 * cas_abcd, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tdm_cas_status_get_async(int unit, bcm_port_t tdm_port, uint32 * cas_changed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tdm_ces_ports_get_async(int unit, bcm_port_t tdm_port, uint32 * n_ports, uint32 ces_ports[BCM_CES_SLOT_MAX], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tdm_config_get_async(int unit, bcm_port_t tdm_port, bcm_tdm_port_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tdm_config_set_async(int unit, bcm_port_t tdm_port, bcm_tdm_port_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_CES */
void	bcm_port_tgid_get_async(int unit, bcm_port_t port, int * tgid, int * psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tgid_set_async(int unit, bcm_port_t port, int tgid, int psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_timesync_config_get_async(int unit, bcm_port_t port, int array_size, bcm_port_timesync_config_t * config_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_timesync_config_set_async(int unit, bcm_port_t port, int config_count, bcm_port_timesync_config_t * config_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_add_async(int unit, bcm_port_t port, uint16 tpid, int color_select, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_class_get_async(int unit, bcm_port_tpid_class_t * tpid_class, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_class_set_async(int unit, bcm_port_tpid_class_t * tpid_class, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_delete_async(int unit, bcm_port_t port, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_delete_all_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_get_async(int unit, bcm_port_t port, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_get_all_async(int unit, bcm_port_t port, int size, uint16 * tpid_array, int * color_array, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_set_async(int unit, bcm_port_t port, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_trunk_index_get_async(int unit, bcm_port_t port, int * port_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_trunk_index_set_async(int unit, bcm_port_t port, int port_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_priority_get_async(int unit, bcm_port_t port, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_priority_set_async(int unit, bcm_port_t port, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_vlan_get_async(int unit, bcm_port_t port, bcm_vlan_t * vid_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_vlan_set_async(int unit, bcm_port_t port, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_update_async(int unit, bcm_port_t port, int link, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_dscp_map_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int dscp, int * internal_pri, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_dscp_map_set_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int dscp, int internal_pri, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_inner_tag_get_async(int unit, bcm_port_t port, uint16 * inner_tag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_inner_tag_set_async(int unit, bcm_port_t port, uint16 inner_tag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_member_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_member_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_pri_map_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int pkt_pri, int cfi, int * internal_pri, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_pri_map_set_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int pkt_pri, int cfi, int internal_pri, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_map_get_async(int unit, bcm_port_t port, int pkt_pri, int cfi, int * internal_pri, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_map_set_async(int unit, bcm_port_t port, int pkt_pri, int cfi, int internal_pri, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_mapping_get_async(int unit, bcm_port_t port, bcm_vlan_t vid, int pkt_pri, int cfi, bcm_priority_mapping_t * pri_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_mapping_set_async(int unit, bcm_port_t port, bcm_vlan_t vid, int pkt_pri, int cfi, bcm_priority_mapping_t * pri_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_unmap_get_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int * pkt_pri, int * cfi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_unmap_set_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int pkt_pri, int cfi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_vector_get_async(int unit, bcm_gport_t port_id, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_vector_set_async(int unit, bcm_gport_t port_id, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_proxy_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_client_set_async(int unit, bcm_port_t client_port, bcm_proxy_proto_type_t proto_type, bcm_module_t server_modid, bcm_port_t server_port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_egress_create_async(int unit, uint32 flags, bcm_proxy_egress_t * proxy_egress, bcm_if_t * proxy_if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_egress_destroy_async(int unit, bcm_if_t proxy_if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_egress_get_async(int unit, bcm_if_t proxy_if_id, bcm_proxy_egress_t * proxy_egress, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_egress_traverse_async(int unit, bcm_proxy_egress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_server_get_async(int unit, bcm_port_t server_port, bcm_proxy_mode_t mode, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_server_port_get_async(int unit, bcm_gport_t local_ingress_port, bcm_proxy_server_t * proxy_server, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_server_port_set_async(int unit, bcm_gport_t local_ingress_port, bcm_proxy_server_t * proxy_server, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_server_set_async(int unit, bcm_port_t server_port, bcm_proxy_mode_t mode, int enable, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_PTP
void	bcm_ptp_acceptable_master_add_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int priority1_alt_value, bcm_ptp_clock_peer_address_t * master_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_enabled_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint8 * enabled, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_enabled_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint8 enabled, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_list_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int max_num_masters, int * num_masters, bcm_ptp_clock_peer_address_t * master_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_peer_address_t * master_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_table_clear_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_acceptable_master_table_size_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int * max_table_entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_cb_register_async(int unit, bcm_ptp_cb_types_t cb_types, bcm_ptp_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_cb_unregister_async(int unit, bcm_ptp_cb_types_t cb_types, bcm_ptp_cb cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_accuracy_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_accuracy_t * accuracy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_accuracy_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_accuracy_t * accuracy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_create_async(int unit, bcm_ptp_stack_id_t ptp_id, bcm_ptp_clock_info_t * clock_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_current_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_current_dataset_t * dataset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_default_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_default_dataset_t * dataset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_domain_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 * domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_domain_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_info_t * clock_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_parent_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_parent_dataset_t * dataset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_announce_receipt_timeout_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 * timeout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_announce_receipt_timeout_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 timeout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_configure_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_clock_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_port_dataset_t * dataset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_delay_mechanism_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 * delay_mechanism, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_delay_mechanism_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 delay_mechanism, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_disable_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_enable_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_identity_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_port_identity_t * identity, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_info_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_clock_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_latency_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 latency_in, uint32 latency_out, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_announce_interval_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int * interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_announce_interval_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_min_delay_req_interval_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int * interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_min_delay_req_interval_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_min_pdelay_req_interval_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int * interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_min_pdelay_req_interval_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_sync_interval_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int * interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_log_sync_interval_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, int interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_mac_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_protocol_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_protocol_t * protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_type_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, bcm_ptp_port_type_t * type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_port_version_number_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 clock_port, uint32 * version, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_priority1_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 * priority1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_priority1_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 priority1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_priority2_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 * priority2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_priority2_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 priority2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_slaveonly_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 * slaveonly, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_slaveonly_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint32 slaveonly, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_time_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_timestamp_t * time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_time_properties_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_time_properties_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_time_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_timestamp_t * time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_timescale_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_timescale_t * timescale, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_timescale_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_timescale_t * timescale, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_traceability_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_trace_t * trace, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_traceability_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_trace_t * trace, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_user_description_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 * desc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_utc_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_utc_t * utc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_clock_utc_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_utc_t * utc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_alarm_callback_register_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_ctdev_alarm_cb alarm_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_alarm_callback_unregister_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_alpha_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint16 * alpha_numerator, uint16 * alpha_denominator, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_alpha_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint16 alpha_numerator, uint16 alpha_denominator, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_enable_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * enable, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_enable_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int enable, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_verbose_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * verbose, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_ctdev_verbose_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int verbose, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_foreign_master_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_foreign_master_dataset_t * data_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_input_channel_precedence_mode_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int channel_select_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_input_channel_switching_mode_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int channel_switching_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_input_channels_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * num_channels, bcm_ptp_channel_t * channels, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_input_channels_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int num_channels, bcm_ptp_channel_t * channels, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_enable_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * enable, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_enable_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int enable, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_phyts_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * phyts, int * framesync_pin, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_phyts_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int phyts, int framesync_pin, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_portbitmap_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_portbitmap_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_verbose_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * verbose, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_modular_verbose_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int verbose, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_packet_counters_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_packet_counters_t * counters, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_peer_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int max_num_peers, bcm_ptp_peer_entry_t * peers, int * num_peers, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_primary_domain_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * primary_domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_primary_domain_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int primary_domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_servo_configuration_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_servo_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_servo_configuration_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_servo_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_servo_status_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_servo_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signal_output_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * signal_output_count, bcm_ptp_signal_output_t * signal_output_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signal_output_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int signal_output_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signal_output_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * signal_output_id, bcm_ptp_signal_output_t * output_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signaled_unicast_master_add_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_unicast_master_t * master_info, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signaled_unicast_master_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_peer_address_t * master_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signaled_unicast_slave_list_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int max_num_slaves, int * num_slaves, bcm_ptp_clock_peer_t * slave_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_signaled_unicast_slave_table_clear_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int callstack, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_stack_create_async(int unit, bcm_ptp_stack_info_t * ptp_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_master_add_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_unicast_master_t * master_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_master_list_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int max_num_masters, int * num_masters, bcm_ptp_clock_peer_address_t * master_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_master_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_peer_address_t * master_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_master_table_clear_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_master_table_size_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int * max_table_entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_slave_add_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_peer_t * slave_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_slave_list_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, int max_num_slaves, int * num_slaves, bcm_ptp_clock_peer_t * slave_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_slave_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_peer_t * slave_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_static_unicast_slave_table_clear_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_sync_phy_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_sync_phy_input_t sync_input, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_init_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_network_option_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_network_option_t * network_option, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_network_option_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_network_option_t network_option, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_add_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_best_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_pktmaster_t * pktmaster, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_clock_port_address_t * address, bcm_ptp_telecom_g8265_pktmaster_t * pktmaster, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_list_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int max_master_count, int * num_masters, int * best_master, bcm_ptp_telecom_g8265_pktmaster_t * pktmaster, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_lockout_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 lockout, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_non_reversion_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 nonres, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_priority_override_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint8 override, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_priority_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint16 priority, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_packet_master_wait_duration_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint64 wait_sec, bcm_ptp_clock_port_address_t * address, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_pktstats_thresholds_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_pktstats_t * thresholds, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_pktstats_thresholds_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_pktstats_t thresholds, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_quality_level_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_telecom_g8265_quality_level_t ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_receipt_timeout_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_message_type_t message_type, uint32 * receipt_timeout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_receipt_timeout_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_message_type_t message_type, uint32 receipt_timeout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_telecom_g8265_shutdown_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_time_format_set_async(int unit, bcm_ptp_stack_id_t ptp_id, bcm_ptp_time_type_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_timesource_input_status_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_timesource_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_tod_input_sources_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * num_tod_sources, bcm_ptp_tod_input_t * tod_sources, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_tod_input_sources_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int num_tod_sources, bcm_ptp_tod_input_t * tod_sources, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_tod_output_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * tod_output_count, bcm_ptp_tod_output_t * tod_output, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_tod_output_remove_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int tod_output_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_tod_output_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int * tod_output_id, bcm_ptp_tod_output_t * output_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_transparent_clock_default_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, bcm_ptp_transparent_clock_default_dataset_t * data_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_transparent_clock_port_dataset_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, uint16 clock_port, bcm_ptp_transparent_clock_port_dataset_t * data_set, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 * duration, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_max_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 * duration_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_max_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 duration_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_min_get_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 * duration_min, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_min_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 duration_min, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ptp_unicast_request_duration_set_async(int unit, bcm_ptp_stack_id_t ptp_id, int clock_num, int port_num, uint32 duration, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_PTP */
void	bcm_qos_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_add_async(int unit, uint32 flags, bcm_qos_map_t * map, int map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_create_async(int unit, uint32 flags, int * map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_delete_async(int unit, uint32 flags, bcm_qos_map_t * map, int map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_destroy_async(int unit, int map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_map_multi_get_async(int unit, uint32 flags, int map_id, int array_size, bcm_qos_map_t * array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_multi_get_async(int unit, int array_size, int * map_ids_array, int * flags_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_port_map_get_async(int unit, bcm_gport_t port, int * ing_map, int * egr_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_port_map_set_async(int unit, bcm_gport_t port, int ing_map, int egr_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_port_map_type_get_async(int unit, bcm_gport_t port, uint32 flags, int * map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_port_vlan_map_get_async(int unit, bcm_port_t port, bcm_vlan_t vid, int * ing_map, int * egr_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_qos_port_vlan_map_set_async(int unit, bcm_port_t port, bcm_vlan_t vid, int ing_map, int egr_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_bandwidth_get_async(int unit, bcm_port_t port, int flags, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_bandwidth_set_async(int unit, bcm_port_t port, int flags, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_bcast_get_async(int unit, int * pps, int * flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_bcast_set_async(int unit, int pps, int flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_dlfbc_get_async(int unit, int * pps, int * flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_dlfbc_set_async(int unit, int pps, int flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_get_async(int unit, int * pps, int * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_mcast_get_async(int unit, int * pps, int * flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_mcast_set_async(int unit, int pps, int flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_set_async(int unit, int pps, int flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_type_get_async(int unit, bcm_rate_limit_t * rl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_type_set_async(int unit, bcm_rate_limit_t * rl, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_REGEX
void	bcm_regex_config_get_async(int unit, bcm_regex_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_config_set_async(int unit, bcm_regex_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_engine_create_async(int unit, bcm_regex_engine_config_t * config, bcm_regex_engine_t * engid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_engine_destroy_async(int unit, bcm_regex_engine_t engid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_engine_get_async(int unit, bcm_regex_engine_t engid, bcm_regex_engine_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_engine_info_get_async(int unit, int engine_id, bcm_regex_engine_info_t * regex_engine_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_engine_traverse_async(int unit, bcm_regex_engine_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_exclude_add_async(int unit, uint8 protocol, uint16 l4_start, uint16 l4_end, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_exclude_delete_async(int unit, uint8 protocol, uint16 l4_start, uint16 l4_end, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_exclude_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_exclude_get_async(int unit, int array_size, uint8 * protocol, uint16 * l4low, uint16 * l4high, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_get_match_id_async(int unit, int signature_id, int * match_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_get_sig_id_async(int unit, int match_id, int * signature_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_info_get_async(int unit, bcm_regex_info_t * regex_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_match_check_async(int unit, bcm_regex_match_t * matches, int count, int * metric, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_match_set_async(int unit, bcm_regex_engine_t engid, bcm_regex_match_t * matches, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_add_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, uint32 param0, uint32 param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_delete_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, uint32 param0, uint32 param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_get_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, uint32 * param0, uint32 * param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_mac_add_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_mac_get_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_ports_add_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_ports_get_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_remove_async(int unit, bcm_regex_policy_t policy, bcm_field_action_t action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_action_remove_all_async(int unit, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_create_async(int unit, int flags, bcm_regex_policy_t * policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_destroy_async(int unit, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_install_async(int unit, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_policer_attach_async(int unit, bcm_regex_policy_t policy, int level, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_policer_detach_async(int unit, bcm_regex_policy_t policy, int level, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_policer_detach_all_async(int unit, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_policer_get_async(int unit, bcm_regex_policy_t policy, int level, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_remove_async(int unit, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_stat_attach_async(int unit, bcm_regex_policy_t policy, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_stat_detach_async(int unit, bcm_regex_policy_t policy, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_policy_stat_get_async(int unit, bcm_regex_policy_t policy, int * stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_report_register_async(int unit, uint32 reports, bcm_regex_report_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_report_unregister_async(int unit, uint32 reports, bcm_regex_report_cb callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_add_async(int unit, int flags, bcm_regex_session_key_t * key, bcm_regex_session_t * session, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_delete_async(int unit, bcm_regex_session_key_t * key, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_get_async(int unit, int flags, bcm_regex_session_key_t * key, bcm_regex_session_t * session, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_policy_update_async(int unit, int flags, int flow_index, bcm_regex_policy_t policy, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_session_traverse_async(int unit, int flags, bcm_regex_session_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_stat_create_async(int unit, int flags, int nstat, bcm_field_stat_t * stat_arr, int * stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_stat_destroy_async(int unit, int stat_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_stat_get_async(int unit, bcm_regex_stat_t type, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_regex_stat_set_async(int unit, bcm_regex_stat_t type, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_REGEX */
void	bcm_rx_active_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_alloc_async(int unit, int pkt_size, uint32 flags, void ** buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_burst_get_async(int unit, int * burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_burst_set_async(int unit, int burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cfg_get_async(int unit, bcm_rx_cfg_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cfg_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_channels_running_async(int unit, uint32 * channels, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_control_get_async(int unit, bcm_rx_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_control_set_async(int unit, bcm_rx_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_burst_get_async(int unit, int cos, int * burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_burst_set_async(int unit, int cos, int burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_max_len_get_async(int unit, int cos, int * max_q_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_max_len_set_async(int unit, int cos, int max_q_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_rate_get_async(int unit, int cos, int * pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_rate_set_async(int unit, int cos, int pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_delete_async(int unit, int index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_get_async(int unit, int index, bcm_rx_reasons_t * reasons, bcm_rx_reasons_t * reasons_mask, uint8 * int_prio, uint8 * int_prio_mask, uint32 * packet_type, uint32 * packet_type_mask, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_reasons_get_async(int unit, bcm_rx_reasons_t * reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_set_async(int unit, int index, bcm_rx_reasons_t reasons, bcm_rx_reasons_t reasons_mask, uint8 int_prio, uint8 int_prio_mask, uint32 packet_type, uint32 packet_type_mask, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_size_get_async(int unit, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cpu_rate_get_async(int unit, int * pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cpu_rate_set_async(int unit, int pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_free_async(int unit, void * pkt_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_free_enqueue_async(int unit, void * pkt_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_alloc_async(int unit, int size, uint32 flags, void ** pool, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_cleanup_async(bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_free_async(int unit, void * buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_setup_async(int pkt_count, int bytes_per_pkt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_setup_done_async(bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_channel_get_async(int unit, bcm_cos_queue_t queue_id, bcm_rx_chan_t * chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_channel_set_async(int unit, bcm_cos_queue_t queue_id, bcm_rx_chan_t chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_max_get_async(int unit, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_packet_count_get_async(int unit, bcm_cos_queue_t cosq, int * packet_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_rate_limit_status_get_async(int unit, bcm_cos_queue_t cosq, int * packet_tokens, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_register_async(int unit, const char * name, bcm_cos_queue_t cosq, bcm_rx_cb_f callback, uint8 priority, void * cookie, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_unregister_async(int unit, bcm_cos_queue_t cosq, bcm_rx_cb_f callback, uint8 priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_rate_get_async(int unit, int * pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_rate_set_async(int unit, int pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_reasons_get_async(int unit, bcm_rx_reasons_t * reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_reasons_policer_set_async(int unit, bcm_rx_reasons_t rx_reasons, bcm_policer_t polid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_redirect_reasons_get_async(int unit, bcm_rx_redirect_t mode, bcm_rx_reasons_t * reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_redirect_reasons_set_async(int unit, bcm_rx_redirect_t mode, bcm_rx_reasons_t reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_register_async(int unit, const char * name, bcm_rx_cb_f callback, uint8 priority, void * cookie, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BCM_RPC_SUPPORT
void	bcm_rx_remote_pkt_alloc_async(int len, bcm_pkt_t ** pkt, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BCM_RPC_SUPPORT */
void	bcm_rx_remote_pkt_enqueue_async(int unit, bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BCM_RPC_SUPPORT
void	bcm_rx_remote_pkt_free_async(bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BCM_RPC_SUPPORT */
void	bcm_rx_sched_register_async(int unit, bcm_rx_sched_cb sched_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_sched_unregister_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_rx_show_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_rx_snoop_create_async(int unit, int flags, int * snoop_cmnd, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_snoop_destroy_async(int unit, int flags, int snoop_cmnd, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_snoop_get_async(int unit, int snoop_cmnd, bcm_rx_snoop_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_snoop_set_async(int unit, int snoop_cmnd, bcm_rx_snoop_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_start_async(int unit, bcm_rx_cfg_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_stop_async(int unit, bcm_rx_cfg_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_get_async(int unit, int trap_id, bcm_rx_trap_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_set_async(int unit, int trap_id, bcm_rx_trap_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_type_create_async(int unit, int flags, bcm_rx_trap_t type, int * trap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_trap_type_destroy_async(int unit, int trap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_unit_next_get_async(int unit, int * next_unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_unregister_async(int unit, bcm_rx_cb_f callback, uint8 priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_endpoint_create_async(int unit, bcm_sat_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_endpoint_destroy_async(int unit, bcm_sat_endpoint_t endpoint, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_endpoint_destroy_all_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_endpoint_get_async(int unit, bcm_sat_endpoint_t endpoint, uint32 flags, bcm_sat_endpoint_info_t * endpoint_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_sat_endpoint_traverse_async(int unit, uint32 flags, bcm_sat_endpoint_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_clear_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_add_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_check_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, int * result, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_delete_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_delete_all_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_get_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_group_create_async(int unit, uint32 mode_id, bcm_stat_object_t object, uint32 * stat_counter_id, uint32 * num_entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_set_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_flex_pool_info_multi_get_async(int unit, bcm_stat_flex_direction_t direction, uint32 num_pools, uint32 * actual_num_pools, bcm_stat_flex_pool_stat_info_t * flex_pool_stat, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_get_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_get32_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_create_async(int unit, bcm_stat_object_t object, bcm_stat_group_mode_t group_mode, uint32 * stat_counter_id, uint32 * num_entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_destroy_async(int unit, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_dump_async(int unit, bcm_stat_object_t object, bcm_stat_group_mode_t group_mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_dump_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_mode_id_create_async(int unit, uint32 flags, uint32 total_counters, uint32 num_selectors, bcm_stat_group_mode_attr_selector_t * attr_selectors, uint32 * mode_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_mode_id_destroy_async(int unit, uint32 mode_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_group_mode_id_get_async(int unit, uint32 mode_id, uint32 * flags, uint32 * total_counters, uint32 num_selectors, bcm_stat_group_mode_attr_selector_t * attr_selectors, uint32 * actual_num_selectors, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_id_get_all_async(int unit, bcm_stat_object_t object, int stat_max, uint32 * stat_array, int * stat_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_multi_get_async(int unit, bcm_port_t port, int nstat, bcm_stat_val_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_multi_get32_async(int unit, bcm_port_t port, int nstat, bcm_stat_val_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_sync_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_sync_get_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_sync_get32_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_sync_multi_get_async(int unit, bcm_port_t port, int nstat, bcm_stat_val_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_sync_multi_get32_async(int unit, bcm_port_t port, int nstat, bcm_stat_val_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_threshold_get_async(int unit, bcm_port_t port, bcm_stat_val_t stat, bcm_stat_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_threshold_set_async(int unit, bcm_port_t port, bcm_stat_val_t stat, bcm_stat_threshold_t * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_count_get_async(int unit, int * max_stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_create_async(int unit, bcm_stg_t * stg_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_create_id_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_default_get_async(int unit, bcm_stg_t * stg_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_default_set_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_destroy_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_list_async(int unit, bcm_stg_t ** list, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_list_destroy_async(int unit, bcm_stg_t * list, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_stp_get_async(int unit, bcm_stg_t stg, bcm_port_t port, int * stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_stp_set_async(int unit, bcm_stg_t stg, bcm_port_t port, int stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_add_async(int unit, bcm_stg_t stg, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_list_async(int unit, bcm_stg_t stg, bcm_vlan_t ** list, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_list_destroy_async(int unit, bcm_vlan_t * list, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_remove_async(int unit, bcm_stg_t stg, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_remove_all_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_domain_stk_trunk_add_async(int unit, int tm_domain, bcm_trunk_t stk_trunk, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_domain_stk_trunk_delete_async(int unit, int tm_domain, bcm_trunk_t stk_trunk, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_domain_stk_trunk_get_async(int unit, bcm_trunk_t stk_trunk, int domain_max, int * domain_array, int * domain_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fabric_map_get_async(int unit, bcm_gport_t switch_port, bcm_gport_t * fabric_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fabric_map_set_async(int unit, bcm_gport_t switch_port, bcm_gport_t fabric_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_lmod_mapping_get_async(int unit, bcm_port_t port, bcm_module_t * fmod, bcm_module_t * lmod, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_lmod_mapping_set_async(int unit, bcm_port_t port, bcm_module_t fmod, bcm_module_t lmod, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_smod_mapping_get_async(int unit, bcm_port_t port, bcm_module_t fmod, bcm_module_t * smod, bcm_port_t * sport, uint32 * nports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_smod_mapping_set_async(int unit, bcm_port_t port, bcm_module_t fmod, bcm_module_t smod, bcm_port_t sport, uint32 nports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_gport_sysport_get_async(int unit, bcm_gport_t gport, bcm_gport_t * sysport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_mode_get_async(int unit, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_mode_set_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_config_get_async(int unit, bcm_stk_modid_config_t * modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_config_set_async(int unit, bcm_stk_modid_config_t * modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_count_async(int unit, int * num_modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_domain_add_async(int unit, int modid, int tm_domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_domain_delete_async(int unit, int modid, int tm_domain, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_domain_get_async(int unit, int tm_domain, int mod_max, int * mod_array, int * mod_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_get_async(int unit, int * modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_set_async(int unit, int modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_map_async(int unit, int setget, bcm_module_t mod_in, bcm_port_t port_in, bcm_module_t * mod_out, bcm_port_t * port_out, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_register_async(int unit, bcm_stk_modmap_cb_t func, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_unregister_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_add_async(int unit, int modid, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_clear_async(int unit, int modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_clear_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_delete_async(int unit, int modid, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_get_async(int unit, int modid, int * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_get_all_async(int unit, int modid, int port_max, int * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_remote_map_get_async(int unit, bcm_gport_t port, uint32 flags, int * remote_modid, bcm_port_t * remote_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_remote_map_set_async(int unit, bcm_gport_t port, uint32 flags, int remote_modid, bcm_port_t remote_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_set_async(int unit, int modid, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_control_get_async(int unit, uint32 flags, bcm_module_t module, bcm_stk_module_control_t control, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_control_set_async(int unit, uint32 flags, bcm_module_t module, bcm_stk_module_control_t control, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_enable_async(int unit, bcm_module_t modid, int nports, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_max_get_async(int unit, uint32 flags, bcm_module_t * max_module, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_max_set_async(int unit, uint32 flags, bcm_module_t max_module, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_protocol_get_async(int unit, bcm_module_t modid, bcm_module_protocol_t * protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_protocol_set_async(int unit, bcm_module_t modid, bcm_module_protocol_t protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_my_modid_get_async(int unit, int * my_modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_my_modid_set_async(int unit, int my_modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_pbmp_get_async(int unit, bcm_pbmp_t * cur_pbm, bcm_pbmp_t * inactive_pbm, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modmap_group_get_async(int unit, bcm_port_t port, int * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modmap_group_max_get_async(int unit, int * max_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modmap_group_set_async(int unit, bcm_port_t port, int group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_add_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, bcm_port_t dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_clear_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_clear_all_async(int unit, bcm_port_t ing_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_delete_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, bcm_port_t dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_get_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, bcm_port_t * dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_get_all_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, int dest_port_max, bcm_port_t * dest_port_array, int * dest_port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modport_set_async(int unit, bcm_port_t ing_port, bcm_module_t dest_modid, bcm_port_t dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_steering_clear_async(int unit, int steer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_steering_clear_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_steering_multicast_set_async(int unit, int steer_id, bcm_multicast_t mgid_lo, bcm_multicast_t mgid_hi, int num_queue_groups, bcm_gport_t * queue_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_steering_unicast_set_async(int unit, int steer_id, bcm_module_t destmod_lo, bcm_module_t destmod_hi, int num_queue_groups, bcm_gport_t * queue_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_sysport_gport_get_async(int unit, bcm_gport_t sysport, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_sysport_gport_set_async(int unit, bcm_gport_t sysport, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_system_gport_map_create_async(int unit, bcm_stk_system_gport_map_t * sys_gport_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_system_gport_map_destroy_async(int unit, bcm_gport_t system_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_system_gport_map_get_async(int unit, bcm_stk_system_gport_map_t * sys_gport_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_ucbitmap_del_async(int unit, bcm_port_t port, int modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_ucbitmap_get_async(int unit, int port, int modid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_ucbitmap_set_async(int unit, int port, int modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_update_callback_register_async(int unit, bcm_stk_cb_f cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_update_callback_unregister_async(int unit, bcm_stk_cb_f cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_create_async(int unit, bcm_subport_group_config_t * config, bcm_gport_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_destroy_async(int unit, bcm_gport_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_get_async(int unit, bcm_gport_t group, bcm_subport_group_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_linkphy_config_get_async(int unit, bcm_gport_t port, bcm_subport_group_linkphy_config_t * linkphy_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_linkphy_config_set_async(int unit, bcm_gport_t port, bcm_subport_group_linkphy_config_t * linkphy_config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_traverse_async(int unit, bcm_gport_t subport_group, bcm_subport_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_add_async(int unit, bcm_subport_config_t * config, bcm_gport_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_delete_async(int unit, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_get_async(int unit, bcm_gport_t port, bcm_subport_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_stat_get_async(int unit, bcm_gport_t port, int stream_id, bcm_subport_stat_t stat_type, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_stat_set_async(int unit, bcm_gport_t port, int stream_id, bcm_subport_stat_t stat_type, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_traverse_async(int unit, bcm_subport_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_get_async(int unit, bcm_switch_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_port_get_async(int unit, bcm_port_t port, bcm_switch_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_port_set_async(int unit, bcm_port_t port, bcm_switch_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_set_async(int unit, bcm_switch_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_event_control_get_async(int unit, bcm_switch_event_t event, bcm_switch_event_control_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_event_control_set_async(int unit, bcm_switch_event_t event, bcm_switch_event_control_t type, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_event_register_async(int unit, bcm_switch_event_cb_t cb, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_event_unregister_async(int unit, bcm_switch_event_cb_t cb, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_banks_config_get_async(int unit, bcm_switch_hash_table_t hash_table, uint32 bank_num, int * hash_type, uint32 * hash_offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_banks_config_set_async(int unit, bcm_switch_hash_table_t hash_table, uint32 bank_num, int hash_type, uint32 hash_offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_banks_max_get_async(int unit, bcm_switch_hash_table_t hash_table, uint32 * bank_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_create_async(int unit, bcm_field_group_t group, bcm_hash_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_create_qset_async(int unit, bcm_field_qset_t qset, bcm_hash_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_destroy_async(int unit, bcm_hash_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_install_async(int unit, bcm_hash_entry_t entry, uint32 offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_reinstall_async(int unit, bcm_hash_entry_t entry, uint32 offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_entry_remove_async(int unit, bcm_hash_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_hash_qualify_data_async(int unit, bcm_hash_entry_t entry, int qual_id, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ipv6_reserved_multicast_addr_get_async(int unit, bcm_ip6_t * ip6_addr, bcm_ip6_t * ip6_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_ipv6_reserved_multicast_addr_set_async(int unit, bcm_ip6_t ip6_addr, bcm_ip6_t ip6_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_l3_protocol_group_get_async(int unit, uint32 * group_members, bcm_l3_protocol_group_id_t * group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_l3_protocol_group_set_async(int unit, uint32 group_members, bcm_l3_protocol_group_id_t group_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_network_group_config_get_async(int unit, bcm_switch_network_group_t source_network_group_id, bcm_switch_network_group_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_network_group_config_set_async(int unit, bcm_switch_network_group_t source_network_group_id, bcm_switch_network_group_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_object_count_get_async(int unit, bcm_switch_object_t object, int * entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_object_count_multi_get_async(int unit, int object_size, bcm_switch_object_t * object_array, int * entries, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_pkt_info_hash_get_async(int unit, bcm_switch_pkt_info_t * pkt_info, bcm_gport_t * dst_gport, bcm_if_t * dst_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_rcpu_decap_priority_map_get_async(int unit, int decap_pri, int * internal_cpu_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_rcpu_decap_priority_map_set_async(int unit, int decap_pri, int internal_cpu_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_rcpu_encap_priority_map_get_async(int unit, uint32 flags, int internal_cpu_pri, int * encap_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_rcpu_encap_priority_map_set_async(int unit, uint32 flags, int internal_cpu_pri, int encap_pri, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_service_get_async(int unit, bcm_switch_service_t service, bcm_switch_service_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_service_set_async(int unit, bcm_switch_service_t service, bcm_switch_service_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_stable_register_async(int unit, bcm_switch_read_func_t rf, bcm_switch_write_func_t wf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_temperature_monitor_get_async(int unit, int temperature_max, bcm_switch_temperature_monitor_t * temperature_array, int * temperature_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_user_buffer_read_async(int unit, uint32 flags, bcm_switch_user_buffer_type_t buff_type, uint8 * buf, int offset, int nbytes, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_user_buffer_write_async(int unit, uint32 flags, bcm_switch_user_buffer_type_t buff_type, uint8 * buf, int offset, int nbytes, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_PTP
void	bcm_tdpll_dpll_bandwidth_get_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_bandwidth_t * bandwidth, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_bandwidth_set_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_bandwidth_t * bandwidth, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_bindings_get_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_bindings_t * bindings, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_bindings_set_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_bindings_t * bindings, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_phase_control_get_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_phase_control_t * phase_control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_phase_control_set_async(int unit, int stack_id, int dpll_index, bcm_tdpll_dpll_phase_control_t * phase_control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_dpll_reference_get_async(int unit, int stack_id, int max_num_dpll, int * dpll_ref, int * num_dpll, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_holdover_ql_get_async(int unit, int stack_id, int dpll_index, bcm_esmc_quality_level_t * ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_holdover_ql_set_async(int unit, int stack_id, int dpll_index, bcm_esmc_quality_level_t ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_mac_get_async(int unit, int stack_id, int dpll_index, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_mac_set_async(int unit, int stack_id, int dpll_index, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_ql_get_async(int unit, int stack_id, int dpll_index, bcm_esmc_quality_level_t * ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_ql_set_async(int unit, int stack_id, int dpll_index, bcm_esmc_quality_level_t ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_rx_enable_get_async(int unit, int stack_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_rx_enable_set_async(int unit, int stack_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_rx_portbitmap_get_async(int unit, int stack_id, int dpll_index, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_rx_portbitmap_set_async(int unit, int stack_id, int dpll_index, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_rx_state_machine_async(int unit, int stack_id, int ingress_port, bcm_esmc_pdu_data_t * esmc_pdu_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_tx_enable_get_async(int unit, int stack_id, int dpll_index, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_tx_enable_set_async(int unit, int stack_id, int dpll_index, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_tx_portbitmap_get_async(int unit, int stack_id, int dpll_index, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_esmc_tx_portbitmap_set_async(int unit, int stack_id, int dpll_index, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_best_get_async(int unit, int stack_id, int dpll_index, int * best_clock, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_control_async(int unit, int stack_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_enable_get_async(int unit, int stack_id, int clock_index, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_enable_set_async(int unit, int stack_id, int clock_index, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_frequency_error_get_async(int unit, int stack_id, int clock_index, int * freq_error_ppb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_frequency_get_async(int unit, int stack_id, int clock_index, uint32 * clock_frequency, uint32 * tsevent_frequency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_frequency_set_async(int unit, int stack_id, int clock_index, uint32 clock_frequency, uint32 tsevent_frequency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_l1mux_get_async(int unit, int stack_id, int clock_index, bcm_tdpll_input_clock_l1mux_t * l1mux, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_l1mux_set_async(int unit, int stack_id, int clock_index, bcm_tdpll_input_clock_l1mux_t * l1mux, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_lockout_get_async(int unit, int stack_id, int clock_index, int * lockout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_lockout_set_async(int unit, int stack_id, int clock_index, int lockout, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_mac_get_async(int unit, int stack_id, int clock_index, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_mac_set_async(int unit, int stack_id, int clock_index, bcm_mac_t * mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_callback_register_async(int unit, int stack_id, bcm_tdpll_input_clock_monitor_cb monitor_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_callback_unregister_async(int unit, int stack_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_interval_get_async(int unit, int stack_id, uint32 * monitor_interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_interval_set_async(int unit, int stack_id, uint32 monitor_interval, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_threshold_get_async(int unit, int stack_id, bcm_tdpll_input_clock_monitor_type_t threshold_type, uint32 * threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_monitor_threshold_set_async(int unit, int stack_id, bcm_tdpll_input_clock_monitor_type_t threshold_type, uint32 threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_priority_get_async(int unit, int stack_id, int clock_index, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_priority_set_async(int unit, int stack_id, int clock_index, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_ql_enabled_get_async(int unit, int stack_id, int dpll_index, int * ql_enabled, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_ql_enabled_set_async(int unit, int stack_id, int dpll_index, int ql_enabled, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_ql_get_async(int unit, int stack_id, int clock_index, bcm_esmc_quality_level_t * ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_ql_set_async(int unit, int stack_id, int clock_index, bcm_esmc_quality_level_t ql, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_revertive_get_async(int unit, int stack_id, int dpll_index, int * revertive, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_revertive_set_async(int unit, int stack_id, int dpll_index, int revertive, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_selector_callback_register_async(int unit, int stack_id, bcm_tdpll_input_clock_selector_cb selector_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_selector_callback_unregister_async(int unit, int stack_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_threshold_state_get_async(int unit, int stack_id, int clock_index, bcm_tdpll_input_clock_monitor_type_t threshold_type, int * threshold_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_valid_get_async(int unit, int stack_id, int clock_index, int * valid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_input_clock_valid_set_async(int unit, int stack_id, int clock_index, int valid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_deriv_frequency_get_async(int unit, int stack_id, int clock_index, uint32 * deriv_frequency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_deriv_frequency_set_async(int unit, int stack_id, int clock_index, uint32 deriv_frequency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_enable_get_async(int unit, int stack_id, int clock_index, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_enable_set_async(int unit, int stack_id, int clock_index, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_holdover_data_get_async(int unit, int stack_id, int clock_index, bcm_tdpll_holdover_data_t * hdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_holdover_frequency_set_async(int unit, int stack_id, int clock_index, bcm_tdpll_frequency_correction_t hfreq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_holdover_mode_get_async(int unit, int stack_id, int clock_index, bcm_tdpll_holdover_mode_t * hmode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_holdover_mode_set_async(int unit, int stack_id, int clock_index, bcm_tdpll_holdover_mode_t hmode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_holdover_reset_async(int unit, int stack_id, int clock_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_synth_frequency_get_async(int unit, int stack_id, int clock_index, uint32 * synth_frequency, uint32 * tsevent_frequency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tdpll_output_clock_synth_frequency_set_async(int unit, int stack_id, int clock_index, uint32 synth_frequency, uint32 tsevent_frequency, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_PTP */
void	bcm_time_capture_get_async(int unit, bcm_time_if_t intf_id, bcm_time_capture_t * time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_deinit_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_heartbeat_enable_get_async(int unit, bcm_time_if_t id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_heartbeat_enable_set_async(int unit, bcm_time_if_t id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_heartbeat_register_async(int unit, bcm_time_if_t id, bcm_time_heartbeat_cb f, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_heartbeat_unregister_async(int unit, bcm_time_if_t id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_interface_add_async(int unit, bcm_time_interface_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_interface_delete_async(int unit, bcm_time_if_t intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_interface_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_interface_get_async(int unit, bcm_time_interface_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_interface_traverse_async(int unit, bcm_time_interface_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_trigger_enable_get_async(int unit, bcm_time_if_t id, uint32 * mode_flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_time_trigger_enable_set_async(int unit, bcm_time_if_t id, uint32 mode_flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_topo_port_get_async(int unit, int dest_modid, bcm_port_t * exit_port, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_trill_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_adjacency_add_async(int unit, bcm_trill_multicast_adjacency_t * trill_multicast_adjacency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_adjacency_delete_async(int unit, bcm_trill_multicast_adjacency_t * trill_multicast_adjacency, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_adjacency_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_adjacency_traverse_async(int unit, bcm_trill_multicast_adjacency_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_delete_all_async(int unit, bcm_trill_name_t root_name, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_entry_add_async(int unit, bcm_trill_multicast_entry_t * trill_mc_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_entry_delete_async(int unit, bcm_trill_multicast_entry_t * trill_mc_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_entry_get_async(int unit, bcm_trill_multicast_entry_t * trill_mc_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_entry_traverse_async(int unit, bcm_trill_multicast_entry_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_source_add_async(int unit, bcm_trill_name_t root_name, bcm_trill_name_t source_rbridge_name, bcm_gport_t port, bcm_if_t encap_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_source_delete_async(int unit, bcm_trill_name_t root_name, bcm_trill_name_t source_rbridge_name, bcm_gport_t port, bcm_if_t encap_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_source_get_async(int unit, bcm_trill_name_t root_name, bcm_trill_name_t source_rbridge_name, bcm_gport_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_multicast_source_traverse_async(int unit, bcm_trill_multicast_source_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_port_add_async(int unit, bcm_trill_port_t * trill_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_port_delete_async(int unit, bcm_gport_t trill_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_port_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_port_get_async(int unit, bcm_trill_port_t * trill_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_port_get_all_async(int unit, int port_max, bcm_trill_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_rbridge_entry_add_async(int unit, bcm_trill_rbridge_t * trill_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_rbridge_entry_delete_async(int unit, bcm_trill_rbridge_t * trill_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_rbridge_entry_get_async(int unit, bcm_trill_rbridge_t * trill_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_stat_clear_async(int unit, bcm_port_t port, bcm_trill_stat_t stat, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_stat_get_async(int unit, bcm_port_t port, bcm_trill_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_stat_get32_async(int unit, bcm_port_t port, bcm_trill_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_vpn_create_async(int unit, bcm_trill_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_vpn_destroy_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_vpn_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_vpn_get_async(int unit, bcm_vpn_t vpn, bcm_trill_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trill_vpn_traverse_async(int unit, bcm_trill_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_trunk_bitmap_expand_async(int unit, bcm_pbmp_t * pbmp_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_chip_info_get_async(int unit, bcm_trunk_chip_info_t * ta_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_create_async(int unit, uint32 flags, bcm_trunk_t * tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_destroy_async(int unit, bcm_trunk_t tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_egress_get_async(int unit, bcm_trunk_t tid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_egress_set_async(int unit, bcm_trunk_t tid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_ethertype_get_async(int unit, uint32 * flags, int ethertype_max, int * ethertype_array, int * ethertype_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_ethertype_set_async(int unit, uint32 flags, int ethertype_count, int * ethertype_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_failover_get_async(int unit, bcm_trunk_t tid, bcm_gport_t failport, int * psc, uint32 * flags, int array_size, bcm_gport_t * fail_to_array, int * array_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_failover_set_async(int unit, bcm_trunk_t tid, bcm_gport_t failport, int psc, uint32 flags, int count, bcm_gport_t * fail_to_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_find_async(int unit, bcm_module_t modid, bcm_port_t port, bcm_trunk_t * tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_get_async(int unit, bcm_trunk_t tid, bcm_trunk_info_t * t_data, int member_max, bcm_trunk_member_t * member_array, int * member_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_mcast_join_async(int unit, bcm_trunk_t tid, bcm_vlan_t vid, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_member_add_async(int unit, bcm_trunk_t tid, bcm_trunk_member_t * member, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_member_delete_async(int unit, bcm_trunk_t tid, bcm_trunk_member_t * member, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_member_delete_all_async(int unit, bcm_trunk_t tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_member_status_get_async(int unit, bcm_gport_t member, int * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_member_status_set_async(int unit, bcm_gport_t member, int status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ipmc_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ipmc_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_mcast_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_mcast_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ucast_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int modid, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ucast_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int modid, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_vlan_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, bcm_vlan_t vid, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_vlan_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, bcm_vlan_t vid, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_pool_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int * size, int weights[BCM_TRUNK_MAX_PORTCNT], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_pool_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int size, const int weights[BCM_TRUNK_MAX_PORTCNT], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_psc_get_async(int unit, bcm_trunk_t tid, int * psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_psc_set_async(int unit, bcm_trunk_t tid, int psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_resilient_replace_async(int unit, uint32 flags, bcm_trunk_resilient_entry_t * match_entry, int * num_entries, bcm_trunk_resilient_entry_t * replace_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_resilient_traverse_async(int unit, uint32 flags, bcm_trunk_resilient_entry_t * match_entry, bcm_trunk_resilient_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_set_async(int unit, bcm_trunk_t tid, bcm_trunk_info_t * trunk_info, int member_count, bcm_trunk_member_t * member_array, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_tunnel_config_get_async(int unit, bcm_tunnel_config_t * tconfig, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_config_set_async(int unit, bcm_tunnel_config_t * tconfig, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_create_async(int unit, uint32 flags, int * dscp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_destroy_async(int unit, int dscp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_get_async(int unit, int dscp_map_id, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_port_get_async(int unit, bcm_port_t port, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_port_set_async(int unit, bcm_port_t port, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_set_async(int unit, int dscp_map_id, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_clear_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_create_async(int unit, bcm_l3_intf_t * intf, bcm_tunnel_initiator_t * tunnel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_get_async(int unit, bcm_l3_intf_t * intf, bcm_tunnel_initiator_t * tunnel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_set_async(int unit, bcm_l3_intf_t * intf, bcm_tunnel_initiator_t * tunnel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_traverse_async(int unit, bcm_tunnel_initiator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_add_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_create_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_delete_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_get_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_traverse_async(int unit, bcm_tunnel_terminator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_update_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_vlan_get_async(int unit, bcm_gport_t tunnel, bcm_vlan_vector_t * vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_vlan_set_async(int unit, bcm_gport_t tunnel, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_tx_async(int unit, bcm_pkt_t * tx_pkt, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_array_async(int unit, bcm_pkt_t ** pkt, int count, bcm_pkt_cb_f all_done_cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BCM_RPC_SUPPORT
void	bcm_tx_cpu_tunnel_async(bcm_pkt_t * pkt, int dest_unit, int remote_port, uint32 flags, bcm_cpu_tunnel_mode_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_cpu_tunnel_get_async(bcm_tx_cpu_tunnel_f * f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_cpu_tunnel_set_async(bcm_tx_cpu_tunnel_f f, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BCM_RPC_SUPPORT */
#ifdef	BROADCOM_DEBUG
void	bcm_tx_dv_dump_async(int unit, void * dv_p, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_tx_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_list_async(int unit, bcm_pkt_t * pkt, bcm_pkt_cb_f all_done_cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_pkt_l2_map_async(int unit, bcm_pkt_t * pkt, bcm_mac_t dest_mac, int vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_pkt_setup_async(int unit, bcm_pkt_t * tx_pkt, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_tx_show_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_txbeacon_destroy_async(int unit, bcm_txbeacon_pkt_id_t pkt_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_init_async(int unit, int uC, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_pkt_get_async(int unit, bcm_txbeacon_t * txbeacon, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_pkt_setup_async(int unit, bcm_txbeacon_t * txbeacon, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_start_async(int unit, bcm_txbeacon_pkt_id_t pkt_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_stop_async(int unit, bcm_txbeacon_pkt_id_t pkt_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_txbeacon_traverse_async(int unit, bcm_txbeacon_traverse_cb_t trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_create_async(int unit, bcm_udf_alloc_hints_t * hints, bcm_udf_t * udf_info, bcm_udf_id_t * udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_destroy_async(int unit, bcm_udf_id_t udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_get_async(int unit, bcm_udf_id_t udf_id, bcm_udf_t * udf_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_get_all_async(int unit, int max, bcm_udf_id_t * udf_id_list, int * actual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_add_async(int unit, bcm_udf_id_t udf_id, bcm_udf_pkt_format_id_t pkt_format_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_create_async(int unit, bcm_udf_pkt_format_options_t options, bcm_udf_pkt_format_info_t * pkt_format, bcm_udf_pkt_format_id_t * pkt_format_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_delete_async(int unit, bcm_udf_id_t udf_id, bcm_udf_pkt_format_id_t pkt_format_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_delete_all_async(int unit, bcm_udf_id_t udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_destroy_async(int unit, bcm_udf_pkt_format_id_t pkt_format_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_get_async(int unit, bcm_udf_pkt_format_id_t pkt_format_id, int max, bcm_udf_id_t * udf_id_list, int * actual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_get_all_async(int unit, bcm_udf_id_t udf_id, int max, bcm_udf_pkt_format_id_t * pkt_format_id_list, int * actual, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_udf_pkt_format_info_get_async(int unit, bcm_udf_pkt_format_id_t pkt_format_id, bcm_udf_pkt_format_info_t * pkt_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_block_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_block_t * vlan_block, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_block_set_async(int unit, bcm_vlan_t vlan, bcm_vlan_block_t * vlan_block, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_get_async(int unit, bcm_vlan_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_port_get_async(int unit, int port, bcm_vlan_control_port_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_port_set_async(int unit, int port, bcm_vlan_control_port_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_set_async(int unit, bcm_vlan_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_vlan_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_control_vlan_t * control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_vlan_selective_get_async(int unit, bcm_vlan_t vlan, uint32 valid_fields, bcm_vlan_control_vlan_t * control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_vlan_selective_set_async(int unit, bcm_vlan_t vlan, uint32 valid_fields, bcm_vlan_control_vlan_t * control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_vlan_set_async(int unit, bcm_vlan_t vlan, bcm_vlan_control_vlan_t control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_create_async(int unit, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_add_async(int unit, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_gport_t port_1, bcm_gport_t port_2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_delete_async(int unit, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_traverse_async(int unit, bcm_vlan_cross_connect_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_default_get_async(int unit, bcm_vlan_t * vid_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_default_set_async(int unit, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_destroy_async(int unit, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_add_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_delete_async(int unit, int port, bcm_vlan_t old_vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_get_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_add_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t new_vid, int int_prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_delete_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_get_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_traverse_async(int unit, bcm_vlan_dtag_range_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_traverse_async(int unit, bcm_vlan_dtag_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_egress_policer_get_async(int unit, bcm_vlan_t vlan, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_egress_policer_set_async(int unit, bcm_vlan_t vlan, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_add_async(int unit, bcm_vlan_t vlan, bcm_gport_t port, int flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_delete_async(int unit, bcm_vlan_t vlan, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_delete_all_async(int unit, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_get_async(int unit, bcm_vlan_t vlan, bcm_gport_t port, int * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_get_all_async(int unit, bcm_vlan_t vlan, int array_max, bcm_gport_t * gport_array, int * flags_array, int * array_size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_gport_info_get_async(int unit, bcm_vlan_gport_info_t * vlan_gport_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_action_add_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_action_delete_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_action_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_action_get_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_action_traverse_async(int unit, bcm_vlan_ip_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_add_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_delete_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_list_async(int unit, bcm_vlan_data_t ** listp, int * countp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_list_by_pbmp_async(int unit, bcm_pbmp_t ports, bcm_vlan_data_t ** listp, int * countp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_list_destroy_async(int unit, bcm_vlan_data_t * list, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_action_add_async(int unit, bcm_mac_t mac, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_action_delete_async(int unit, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_action_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_action_get_async(int unit, bcm_mac_t mac, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_action_traverse_async(int unit, bcm_vlan_mac_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_add_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_delete_async(int unit, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mcast_flood_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_mcast_flood_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mcast_flood_set_async(int unit, bcm_vlan_t vlan, bcm_vlan_mcast_flood_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_policer_get_async(int unit, bcm_vlan_t vlan, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_policer_set_async(int unit, bcm_vlan_t vlan, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_add_async(int unit, bcm_vlan_t vid, bcm_pbmp_t pbmp, bcm_pbmp_t ubmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_create_async(int unit, bcm_vlan_port_t * vlan_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_default_action_delete_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_default_action_get_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_default_action_set_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_destroy_async(int unit, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_egress_default_action_delete_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_egress_default_action_get_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_egress_default_action_set_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_egress_policer_get_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_egress_policer_set_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_find_async(int unit, bcm_vlan_port_t * vlan_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_get_async(int unit, bcm_vlan_t vid, bcm_pbmp_t * pbmp, bcm_pbmp_t * ubmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_policer_get_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_policer_set_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_protocol_action_add_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_protocol_action_delete_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_protocol_action_delete_all_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_protocol_action_get_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_protocol_action_traverse_async(int unit, bcm_vlan_port_protocol_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_remove_async(int unit, bcm_vlan_t vid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_enable_get_async(int unit, bcm_vlan_t vlan, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_enable_set_async(int unit, bcm_vlan_t vlan, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_get_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_get32_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_multi_get_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_multi_get32_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_multi_set_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_multi_set32_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_set_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_stat_set32_async(int unit, bcm_vlan_t vlan, bcm_port_t port, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_translation_get_async(int unit, bcm_vlan_port_translation_t * vlan_port_translation, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_translation_set_async(int unit, bcm_vlan_port_translation_t * vlan_port_translation, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_attach_async(int unit, bcm_vlan_t vlan, int qmid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_attach_get_async(int unit, bcm_vlan_t vlan, int * qmid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_create_async(int unit, uint32 flags, int * qmid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_destroy_async(int unit, int qmid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_detach_async(int unit, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_detach_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_get_async(int unit, int qmid, int pkt_pri, int cfi, int * queue, int * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_queue_map_set_async(int unit, int qmid, int pkt_pri, int cfi, int queue, int color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_attach_async(int unit, bcm_vlan_t vlan, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_counter_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_counter_set_async(int unit, bcm_vlan_t vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_counter_sync_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_detach_async(int unit, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_detach_with_id_async(int unit, bcm_vlan_t vlan, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_enable_set_async(int unit, bcm_vlan_t vlan, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_get_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_get32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_id_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_multi_get_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_multi_get32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_multi_set_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_multi_set32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_set_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_set32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_sync_get_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_sync_get32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stg_get_async(int unit, bcm_vlan_t vid, bcm_stg_t * stg_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stg_set_async(int unit, bcm_vlan_t vid, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stp_get_async(int unit, bcm_vlan_t vid, bcm_port_t port, int * stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stp_set_async(int unit, bcm_vlan_t vid, bcm_port_t port, int stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_add_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_class_get_async(int unit, bcm_vlan_translate_action_class_t * action_class, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_class_set_async(int unit, bcm_vlan_translate_action_class_t * action_class, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_create_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_delete_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_id_create_async(int unit, uint32 flags, int * action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_id_destroy_async(int unit, uint32 flags, int action_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_id_destroy_all_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_id_get_async(int unit, uint32 flags, int action_id, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_id_set_async(int unit, uint32 flags, int action_id, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_add_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_delete_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_get_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_traverse_async(int unit, bcm_vlan_translate_action_range_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_traverse_async(int unit, bcm_vlan_translate_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_add_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_delete_async(int unit, int port, bcm_vlan_t old_vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_add_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_delete_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_traverse_async(int unit, bcm_vlan_translate_egress_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_add_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_delete_async(int unit, int port, bcm_vlan_t old_vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_get_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_attach_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_counter_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_counter_set_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_counter_sync_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_detach_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_enable_set_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_get32_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_id_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_multi_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_multi_get32_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_multi_set_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_multi_set32_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_set_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_set32_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_sync_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_stat_sync_get32_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_traverse_async(int unit, bcm_vlan_translate_egress_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_get_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_add_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t new_vid, int int_prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_delete_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_get_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t * new_vid, int * int_prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_traverse_async(int unit, bcm_vlan_translate_range_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_attach_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_counter_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_counter_set_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_counter_sync_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_detach_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_enable_set_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_get32_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_id_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_multi_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_multi_get32_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_multi_set_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_multi_set32_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, int nstat, bcm_vlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_set_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_set32_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_sync_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_stat_sync_get32_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_traverse_async(int unit, bcm_vlan_translate_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_vector_flags_set_async(int unit, bcm_vlan_vector_t vlan_vector, uint32 flags_mask, uint32 flags_value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_vector_stp_set_async(int unit, bcm_vlan_vector_t vlan_vector, bcm_port_t port, int stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_create_async(int unit, bcm_vlan_t * vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_create_with_id_async(int unit, bcm_vlan_t vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_cross_connect_add_async(int unit, bcm_vswitch_cross_connect_t * gports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_cross_connect_delete_async(int unit, bcm_vswitch_cross_connect_t * gports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_cross_connect_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_cross_connect_get_async(int unit, bcm_vswitch_cross_connect_t * gports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_cross_connect_traverse_async(int unit, bcm_vswitch_cross_connect_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_destroy_async(int unit, bcm_vlan_t vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_add_async(int unit, bcm_vlan_t vsi, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_delete_async(int unit, bcm_vlan_t vsi, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_delete_all_async(int unit, bcm_vlan_t vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_get_async(int unit, bcm_gport_t port, bcm_vlan_t * vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_traverse_async(int unit, bcm_vlan_t vsi, bcm_vswitch_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_vxlan_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_attach_async(int unit, bcm_ip_t vxlan_dip, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_counter_get_async(int unit, bcm_ip_t vxlan_dip, bcm_vxlan_dip_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_counter_set_async(int unit, bcm_ip_t vxlan_dip, bcm_vxlan_dip_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_detach_async(int unit, bcm_ip_t vxlan_dip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_id_get_async(int unit, bcm_ip_t vxlan_dip, bcm_vxlan_dip_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_multi_get_async(int unit, bcm_ip_t vxlan_dip, int nstat, bcm_vxlan_dip_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_multi_get32_async(int unit, bcm_ip_t vxlan_dip, int nstat, bcm_vxlan_dip_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_multi_set_async(int unit, bcm_ip_t vxlan_dip, int nstat, bcm_vxlan_dip_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_dip_stat_multi_set32_async(int unit, bcm_ip_t vxlan_dip, int nstat, bcm_vxlan_dip_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_port_add_async(int unit, bcm_vpn_t l2vpn, bcm_vxlan_port_t * vxlan_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_port_delete_async(int unit, bcm_vpn_t l2vpn, bcm_gport_t vxlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_port_delete_all_async(int unit, bcm_vpn_t l2vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_port_get_async(int unit, bcm_vpn_t l2vpn, bcm_vxlan_port_t * vxlan_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_port_get_all_async(int unit, bcm_vpn_t l2vpn, int port_max, bcm_vxlan_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_attach_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, uint32 stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_counter_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_vxlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_counter_set_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_vxlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_counter_sync_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_vxlan_stat_t stat, uint32 num_entries, uint32 * counter_indexes, bcm_stat_value_t * counter_values, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_detach_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_enable_set_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_id_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, bcm_vxlan_stat_t stat, uint32 * stat_counter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_multi_get_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_vxlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_multi_get32_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_vxlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_multi_set_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_vxlan_stat_t * stat_arr, uint64 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_stat_multi_set32_async(int unit, bcm_gport_t port, bcm_vpn_t vpn, int nstat, bcm_vxlan_stat_t * stat_arr, uint32 * value_arr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_initiator_create_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_initiator_destroy_async(int unit, bcm_gport_t vxlan_tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_initiator_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_initiator_get_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_initiator_traverse_async(int unit, bcm_tunnel_initiator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_create_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_destroy_async(int unit, bcm_gport_t vxlan_tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_get_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_traverse_async(int unit, bcm_tunnel_terminator_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_tunnel_terminator_update_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_vpn_create_async(int unit, bcm_vxlan_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_vpn_destroy_async(int unit, bcm_vpn_t l2vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_vpn_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_vpn_get_async(int unit, bcm_vpn_t l2vpn, bcm_vxlan_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vxlan_vpn_traverse_async(int unit, bcm_vxlan_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_client_add_async(int unit, bcm_wlan_client_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_client_delete_async(int unit, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_client_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_client_get_async(int unit, bcm_mac_t mac, bcm_wlan_client_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_client_traverse_async(int unit, bcm_wlan_client_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_port_add_async(int unit, bcm_wlan_port_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_port_delete_async(int unit, bcm_gport_t wlan_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_port_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_port_get_async(int unit, bcm_gport_t wlan_port_id, bcm_wlan_port_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_port_traverse_async(int unit, bcm_wlan_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_tunnel_initiator_create_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_tunnel_initiator_destroy_async(int unit, bcm_gport_t wlan_tunnel_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_wlan_tunnel_initiator_get_async(int unit, bcm_tunnel_initiator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */

#endif	/* BCM_ASYNC_SUPPORT */
#endif	/* !_BCM_ASYNC_H */
