/*
 * $Id: 0dcc8eda6486a3561a220093c5bd7ec42c71bea3 $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_STAT_H__
#define __BCM_STAT_H__

#include <bcm/types.h>

/* 
 * Statistics counters.
 * 
 * Note: the following RFC 2465 MIBs are not supported:
 * 
 *   snmpIpv6IfStatsInTooBigErrors,
 *   snmpIpv6IfStatsInNoRoutes,
 *   snmpIpv6IfStatsInUnknownProtos,
 *   snmpIpv6IfStatsInTruncatedPkts,
 *   snmpIpv6IfStatsInDelivers,
 *   snmpIpv6IfStatsOutRequests,
 *   snmpIpv6IfStatsOutFragOKs,
 *   snmpIpv6IfStatsOutFragFails,
 *   snmpIpv6IfStatsOutFragCreates,
 *   snmpIpv6IfStatsReasmReqds,
 *   snmpIpv6IfStatsReasmOKs,
 *   snmpIpv6IfStatsReasmFails,
 */
typedef enum bcm_stat_val_e {
    snmpIfInOctets = 0,                 /* RFC 1213 */
    snmpIfInUcastPkts = 1,              /* RFC 1213 */
    snmpIfInNUcastPkts = 2,             /* RFC 1213 */
    snmpIfInDiscards = 3,               /* RFC 1213 */
    snmpIfInErrors = 4,                 /* RFC 1213 */
    snmpIfInUnknownProtos = 5,          /* RFC 1213 */
    snmpIfOutOctets = 6,                /* RFC 1213 */
    snmpIfOutUcastPkts = 7,             /* RFC 1213 */
    snmpIfOutNUcastPkts = 8,            /* RFC 1213 */
    snmpIfOutDiscards = 9,              /* RFC 1213 */
    snmpIfOutErrors = 10,               /* RFC 1213 */
    snmpIfOutQLen = 11,                 /* RFC 1213 */
    snmpIpInReceives = 12,              /* RFC 1213 */
    snmpIpInHdrErrors = 13,             /* RFC 1213 */
    snmpIpForwDatagrams = 14,           /* RFC 1213 */
    snmpIpInDiscards = 15,              /* RFC 1213 */
    snmpDot1dBasePortDelayExceededDiscards = 16, /* RFC 1493 */
    snmpDot1dBasePortMtuExceededDiscards = 17, /* RFC 1493 */
    snmpDot1dTpPortInFrames = 18,       /* RFC 1493 */
    snmpDot1dTpPortOutFrames = 19,      /* RFC 1493 */
    snmpDot1dPortInDiscards = 20,       /* RFC 1493 */
    snmpEtherStatsDropEvents = 21,      /* RFC 1757 (EtherStat) */
    snmpEtherStatsMulticastPkts = 22,   /* RFC 1757 (EtherStat) */
    snmpEtherStatsBroadcastPkts = 23,   /* RFC 1757 (EtherStat) */
    snmpEtherStatsUndersizePkts = 24,   /* RFC 1757 (EtherStat) */
    snmpEtherStatsFragments = 25,       /* RFC 1757 (EtherStat) */
    snmpEtherStatsPkts64Octets = 26,    /* RFC 1757 (EtherStat) */
    snmpEtherStatsPkts65to127Octets = 27, /* RFC 1757 (EtherStat) */
    snmpEtherStatsPkts128to255Octets = 28, /* RFC 1757 (EtherStat) */
    snmpEtherStatsPkts256to511Octets = 29, /* RFC 1757 (EtherStat) */
    snmpEtherStatsPkts512to1023Octets = 30, /* RFC 1757 (EtherStat) */
    snmpEtherStatsPkts1024to1518Octets = 31, /* RFC 1757 (EtherStat) */
    snmpEtherStatsOversizePkts = 32,    /* RFC 1757 (EtherStat) */
    snmpEtherRxOversizePkts = 33,       /* Rx component of
                                           snmpEtherStatsOversizePkts */
    snmpEtherTxOversizePkts = 34,       /* Tx component of
                                           snmpEtherStatsOversizePkts */
    snmpEtherStatsJabbers = 35,         /* RFC 1757 (EtherStat) */
    snmpEtherStatsOctets = 36,          /* RFC 1757 (EtherStat) */
    snmpEtherStatsPkts = 37,            /* RFC 1757 (EtherStat) */
    snmpEtherStatsCollisions = 38,      /* RFC 1757 (EtherStat) */
    snmpEtherStatsCRCAlignErrors = 39,  /* RFC 1757 (EtherStat) */
    snmpEtherStatsTXNoErrors = 40,      /* RFC 1757 (EtherStat) */
    snmpEtherStatsRXNoErrors = 41,      /* RFC 1757 (EtherStat) */
    snmpDot3StatsAlignmentErrors = 42,  /* RFC 2665 */
    snmpDot3StatsFCSErrors = 43,        /* RFC 2665 */
    snmpDot3StatsSingleCollisionFrames = 44, /* RFC 2665 */
    snmpDot3StatsMultipleCollisionFrames = 45, /* RFC 2665 */
    snmpDot3StatsSQETTestErrors = 46,   /* RFC 2665 */
    snmpDot3StatsDeferredTransmissions = 47, /* RFC 2665 */
    snmpDot3StatsLateCollisions = 48,   /* RFC 2665 */
    snmpDot3StatsExcessiveCollisions = 49, /* RFC 2665 */
    snmpDot3StatsInternalMacTransmitErrors = 50, /* RFC 2665 */
    snmpDot3StatsCarrierSenseErrors = 51, /* RFC 2665 */
    snmpDot3StatsFrameTooLongs = 52,    /* RFC 2665 */
    snmpDot3StatsInternalMacReceiveErrors = 53, /* RFC 2665 */
    snmpDot3StatsSymbolErrors = 54,     /* RFC 2665 */
    snmpDot3ControlInUnknownOpcodes = 55, /* RFC 2665 */
    snmpDot3InPauseFrames = 56,         /* RFC 2665 */
    snmpDot3OutPauseFrames = 57,        /* RFC 2665 */
    snmpIfHCInOctets = 58,              /* RFC 2233 */
    snmpIfHCInUcastPkts = 59,           /* RFC 2233 */
    snmpIfHCInMulticastPkts = 60,       /* RFC 2233 */
    snmpIfHCInBroadcastPkts = 61,       /* RFC 2233 */
    snmpIfHCOutOctets = 62,             /* RFC 2233 */
    snmpIfHCOutUcastPkts = 63,          /* RFC 2233 */
    snmpIfHCOutMulticastPkts = 64,      /* RFC 2233 */
    snmpIfHCOutBroadcastPckts = 65,     /* RFC 2233 */
    snmpIpv6IfStatsInReceives = 66,     /* RFC 2465 */
    snmpIpv6IfStatsInHdrErrors = 67,    /* RFC 2465 */
    snmpIpv6IfStatsInAddrErrors = 68,   /* RFC 2465 */
    snmpIpv6IfStatsInDiscards = 69,     /* RFC 2465 */
    snmpIpv6IfStatsOutForwDatagrams = 70, /* RFC 2465 */
    snmpIpv6IfStatsOutDiscards = 71,    /* RFC 2465 */
    snmpIpv6IfStatsInMcastPkts = 72,    /* RFC 2465 */
    snmpIpv6IfStatsOutMcastPkts = 73,   /* RFC 2465 */
    snmpIfInBroadcastPkts = 74,         /* RFC 1573 */
    snmpIfInMulticastPkts = 75,         /* RFC 1573 */
    snmpIfOutBroadcastPkts = 76,        /* RFC 1573 */
    snmpIfOutMulticastPkts = 77,        /* RFC 1573 */
    snmpIeee8021PfcRequests = 78,       /* IEEE 802.1bb */
    snmpIeee8021PfcIndications = 79,    /* IEEE 802.1bb */
    snmpBcmReceivedUndersizePkts = 80,  /* Broadcom-specific */
    snmpBcmTransmittedUndersizePkts = 81, /* Broadcom-specific */
    snmpBcmIPMCBridgedPckts = 82,       /* Broadcom-specific */
    snmpBcmIPMCRoutedPckts = 83,        /* Broadcom-specific */
    snmpBcmIPMCInDroppedPckts = 84,     /* Broadcom-specific */
    snmpBcmIPMCOutDroppedPckts = 85,    /* Broadcom-specific */
    snmpBcmEtherStatsPkts1519to1522Octets = 86, /* Broadcom-specific */
    snmpBcmEtherStatsPkts1522to2047Octets = 87, /* Broadcom-specific */
    snmpBcmEtherStatsPkts2048to4095Octets = 88, /* Broadcom-specific */
    snmpBcmEtherStatsPkts4095to9216Octets = 89, /* Broadcom-specific */
    snmpBcmReceivedPkts64Octets = 90,   /* Broadcom-specific */
    snmpBcmReceivedPkts65to127Octets = 91, /* Broadcom-specific */
    snmpBcmReceivedPkts128to255Octets = 92, /* Broadcom-specific */
    snmpBcmReceivedPkts256to511Octets = 93, /* Broadcom-specific */
    snmpBcmReceivedPkts512to1023Octets = 94, /* Broadcom-specific */
    snmpBcmReceivedPkts1024to1518Octets = 95, /* Broadcom-specific */
    snmpBcmReceivedPkts1519to2047Octets = 96, /* Broadcom-specific */
    snmpBcmReceivedPkts2048to4095Octets = 97, /* Broadcom-specific */
    snmpBcmReceivedPkts4095to9216Octets = 98, /* Broadcom-specific */
    snmpBcmTransmittedPkts64Octets = 99, /* Broadcom-specific */
    snmpBcmTransmittedPkts65to127Octets = 100, /* Broadcom-specific */
    snmpBcmTransmittedPkts128to255Octets = 101, /* Broadcom-specific */
    snmpBcmTransmittedPkts256to511Octets = 102, /* Broadcom-specific */
    snmpBcmTransmittedPkts512to1023Octets = 103, /* Broadcom-specific */
    snmpBcmTransmittedPkts1024to1518Octets = 104, /* Broadcom-specific */
    snmpBcmTransmittedPkts1519to2047Octets = 105, /* Broadcom-specific */
    snmpBcmTransmittedPkts2048to4095Octets = 106, /* Broadcom-specific */
    snmpBcmTransmittedPkts4095to9216Octets = 107, /* Broadcom-specific */
    snmpBcmTxControlCells = 108,        /* Fabric TX Control cells counter.
                                           (Broadcom-specific) */
    snmpBcmTxDataCells = 109,           /* Fabric TX Data cell counter.
                                           (Broadcom-specific) */
    snmpBcmTxDataBytes = 110,           /* Fabric TX Data byte counter.
                                           (Broadcom-specific) */
    snmpBcmRxCrcErrors = 111,           /* Fabric RX CRC errors counter.
                                           (Broadcom-specific) */
    snmpBcmRxFecCorrectable = 112,      /* Fabric RX LFEC/FEC correctable error.
                                           (Broadcom-specific) */
    snmpBcmRxBecCrcErrors = 113,        /* Fabric RX BEC crc error.
                                           (Broadcom-specific) */
    snmpBcmRxDisparityErrors = 114,     /* Fabric RX 8b/10b disparity errors.
                                           (Broadcom-specific) */
    snmpBcmRxControlCells = 115,        /* Fabric RX Control cells counter.
                                           (Broadcom-specific) */
    snmpBcmRxDataCells = 116,           /* Fabric RX Data cell counter.
                                           (Broadcom-specific) */
    snmpBcmRxDataBytes = 117,           /* Fabric RX Data byte counter.
                                           (Broadcom-specific) */
    snmpBcmRxDroppedRetransmittedControl = 118, /* Fabric RX dropped retransmitted
                                           control. (Broadcom-specific) */
    snmpBcmTxBecRetransmit = 119,       /* Fabric TX BEC retransmit.
                                           (Broadcom-specific) */
    snmpBcmRxBecRetransmit = 120,       /* Fabric RX BEC retransmit.
                                           (Broadcom-specific) */
    snmpBcmTxAsynFifoRate = 121,        /* Fabric TX Asyn fifo rate at units of
                                           40 bits. (Broadcom-specific) */
    snmpBcmRxAsynFifoRate = 122,        /* Fabric RX Asyn fifo rate at units of
                                           40 bits. (Broadcom-specific) */
    snmpBcmRxFecUncorrectable = 123,    /* Fabric RX LFEC/FEC uncorrectable
                                           erros. (Broadcom-specific) */
    snmpBcmRxBecRxFault = 124,          /* Fabric RX BEC RX fault.
                                           (Broadcom-specific) */
    snmpBcmRxCodeErrors = 125,          /* Fabric RX 8b/10b code errors.
                                           (Broadcom-specific) */
    snmpBcmRxLlfcPrimary = 126,         /* Fabric RX LLFC Primary.
                                           (Broadcom-specific) */
    snmpBcmRxLlfcSecondary = 127,       /* Fabric RX LLFC Secondary.
                                           (Broadcom-specific) */
    snmpBcmCustomReceive0 = 128,        /* Broadcom-specific */
    snmpBcmCustomReceive1 = 129,        /* Broadcom-specific */
    snmpBcmCustomReceive2 = 130,        /* Broadcom-specific */
    snmpBcmCustomReceive3 = 131,        /* Broadcom-specific */
    snmpBcmCustomReceive4 = 132,        /* Broadcom-specific */
    snmpBcmCustomReceive5 = 133,        /* Broadcom-specific */
    snmpBcmCustomReceive6 = 134,        /* Broadcom-specific */
    snmpBcmCustomReceive7 = 135,        /* Broadcom-specific */
    snmpBcmCustomReceive8 = 136,        /* Broadcom-specific */
    snmpBcmCustomTransmit0 = 137,       /* Broadcom-specific */
    snmpBcmCustomTransmit1 = 138,       /* Broadcom-specific */
    snmpBcmCustomTransmit2 = 139,       /* Broadcom-specific */
    snmpBcmCustomTransmit3 = 140,       /* Broadcom-specific */
    snmpBcmCustomTransmit4 = 141,       /* Broadcom-specific */
    snmpBcmCustomTransmit5 = 142,       /* Broadcom-specific */
    snmpBcmCustomTransmit6 = 143,       /* Broadcom-specific */
    snmpBcmCustomTransmit7 = 144,       /* Broadcom-specific */
    snmpBcmCustomTransmit8 = 145,       /* Broadcom-specific */
    snmpBcmCustomTransmit9 = 146,       /* Broadcom-specific */
    snmpBcmCustomTransmit10 = 147,      /* Broadcom-specific */
    snmpBcmCustomTransmit11 = 148,      /* Broadcom-specific */
    snmpBcmCustomTransmit12 = 149,      /* Broadcom-specific */
    snmpBcmCustomTransmit13 = 150,      /* Broadcom-specific */
    snmpBcmCustomTransmit14 = 151,      /* Broadcom-specific */
    snmpDot3StatsInRangeLengthError = 152, /* RFC 1284 */
    snmpDot3OmpEmulationCRC8Errors = 153, /* RFC 4837 */
    snmpDot3MpcpRxGate = 154,           /* RFC 4837 */
    snmpDot3MpcpRxRegister = 155,       /* RFC 4837 */
    snmpDot3MpcpTxRegRequest = 156,     /* RFC 4837 */
    snmpDot3MpcpTxRegAck = 157,         /* RFC 4837 */
    snmpDot3MpcpTxReport = 158,         /* RFC 4837 */
    snmpDot3EponFecCorrectedBlocks = 159, /* RFC 4837 */
    snmpDot3EponFecUncorrectableBlocks = 160, /* RFC 4837 */
    snmpBcmPonInDroppedOctets = 161,    /* Broadcom-specific */
    snmpBcmPonOutDroppedOctets = 162,   /* Broadcom-specific */
    snmpBcmPonInDelayedOctets = 163,    /* Broadcom-specific */
    snmpBcmPonOutDelayedOctets = 164,   /* Broadcom-specific */
    snmpBcmPonInDelayedHundredUs = 165, /* Broadcom-specific */
    snmpBcmPonOutDelayedHundredUs = 166, /* Broadcom-specific */
    snmpBcmPonInFrameErrors = 167,      /* Broadcom-specific */
    snmpBcmPonInOamFrames = 168,        /* Broadcom-specific */
    snmpBcmPonOutOamFrames = 169,       /* Broadcom-specific */
    snmpBcmPonOutUnusedOctets = 170,    /* Broadcom-specific */
    snmpBcmEtherStatsPkts9217to16383Octets = 171, /* Broadcom-specific */
    snmpBcmReceivedPkts9217to16383Octets = 172, /* Broadcom-specific */
    snmpBcmTransmittedPkts9217to16383Octets = 173, /* Broadcom-specific */
    snmpBcmRxVlanTagFrame = 174,        /* Broadcom-specific */
    snmpBcmRxDoubleVlanTagFrame = 175,  /* Broadcom-specific */
    snmpBcmTxVlanTagFrame = 176,        /* Broadcom-specific */
    snmpBcmTxDoubleVlanTagFrame = 177,  /* Broadcom-specific */
    snmpBcmRxPFCControlFrame = 178,     /* PFC Receive Control Frame */
    snmpBcmTxPFCControlFrame = 179,     /* PFC Transmit Control Frame */
    snmpBcmRxPFCFrameXonPriority0 = 180, /* Receive PFC Frame Priority 0 XON to
                                           XOFF */
    snmpBcmRxPFCFrameXonPriority1 = 181, /* Receive PFC Frame Priority 1 XON to
                                           XOFF */
    snmpBcmRxPFCFrameXonPriority2 = 182, /* Receive PFC Frame Priority 2 XON to
                                           XOFF */
    snmpBcmRxPFCFrameXonPriority3 = 183, /* Receive PFC Frame Priority 3 XON to
                                           XOFF */
    snmpBcmRxPFCFrameXonPriority4 = 184, /* Receive PFC Frame Priority 4 XON to
                                           XOFF */
    snmpBcmRxPFCFrameXonPriority5 = 185, /* Receive PFC Frame Priority 5 XON to
                                           XOFF */
    snmpBcmRxPFCFrameXonPriority6 = 186, /* Receive PFC Frame Priority 6 XON to
                                           XOFF */
    snmpBcmRxPFCFrameXonPriority7 = 187, /* Receive PFC Frame Priority 7 XON to
                                           XOFF */
    snmpBcmRxPFCFramePriority0 = 188,   /* Receive PFC Frame Priority 0 */
    snmpBcmRxPFCFramePriority1 = 189,   /* Receive PFC Frame Priority 1 */
    snmpBcmRxPFCFramePriority2 = 190,   /* Receive PFC Frame Priority 2 */
    snmpBcmRxPFCFramePriority3 = 191,   /* Receive PFC Frame Priority 3 */
    snmpBcmRxPFCFramePriority4 = 192,   /* Receive PFC Frame Priority 4 */
    snmpBcmRxPFCFramePriority5 = 193,   /* Receive PFC Frame Priority 5 */
    snmpBcmRxPFCFramePriority6 = 194,   /* Receive PFC Frame Priority 6 */
    snmpBcmRxPFCFramePriority7 = 195,   /* Receive PFC Frame Priority 7 */
    snmpBcmTxPFCFramePriority0 = 196,   /* Transmit PFC Frame Priority 0 */
    snmpBcmTxPFCFramePriority1 = 197,   /* Transmit PFC Frame Priority 1 */
    snmpBcmTxPFCFramePriority2 = 198,   /* Transmit PFC Frame Priority 2 */
    snmpBcmTxPFCFramePriority3 = 199,   /* Transmit PFC Frame Priority 3 */
    snmpBcmTxPFCFramePriority4 = 200,   /* Transmit PFC Frame Priority 4 */
    snmpBcmTxPFCFramePriority5 = 201,   /* Transmit PFC Frame Priority 5 */
    snmpBcmTxPFCFramePriority6 = 202,   /* Transmit PFC Frame Priority 6 */
    snmpBcmTxPFCFramePriority7 = 203,   /* Transmit PFC Frame Priority 7 */
    snmpFcmPortClass3RxFrames = 204,    /* RFC 4044 */
    snmpFcmPortClass3TxFrames = 205,    /* RFC 4044 */
    snmpFcmPortClass3Discards = 206,    /* RFC 4044 */
    snmpFcmPortClass2RxFrames = 207,    /* RFC 4044 */
    snmpFcmPortClass2TxFrames = 208,    /* RFC 4044 */
    snmpFcmPortClass2Discards = 209,    /* RFC 4044 */
    snmpFcmPortInvalidCRCs = 210,       /* RFC 4044 */
    snmpFcmPortDelimiterErrors = 211,   /* RFC 4044 */
    snmpValCount = 212 
} bcm_stat_val_t;

#define BCM_STAT_NAME_INITIALIZER \
{ \
    "snmpIfInOctets", \
    "snmpIfInUcastPkts", \
    "snmpIfInNUcastPkts", \
    "snmpIfInDiscards", \
    "snmpIfInErrors", \
    "snmpIfInUnknownProtos", \
    "snmpIfOutOctets", \
    "snmpIfOutUcastPkts", \
    "snmpIfOutNUcastPkts", \
    "snmpIfOutDiscards", \
    "snmpIfOutErrors", \
    "snmpIfOutQLen", \
    "snmpIpInReceives", \
    "snmpIpInHdrErrors", \
    "snmpIpForwDatagrams", \
    "snmpIpInDiscards", \
    "snmpDot1dBasePortDelayExceededDiscards", \
    "snmpDot1dBasePortMtuExceededDiscards", \
    "snmpDot1dTpPortInFrames", \
    "snmpDot1dTpPortOutFrames", \
    "snmpDot1dPortInDiscards", \
    "snmpEtherStatsDropEvents", \
    "snmpEtherStatsMulticastPkts", \
    "snmpEtherStatsBroadcastPkts", \
    "snmpEtherStatsUndersizePkts", \
    "snmpEtherStatsFragments", \
    "snmpEtherStatsPkts64Octets", \
    "snmpEtherStatsPkts65to127Octets", \
    "snmpEtherStatsPkts128to255Octets", \
    "snmpEtherStatsPkts256to511Octets", \
    "snmpEtherStatsPkts512to1023Octets", \
    "snmpEtherStatsPkts1024to1518Octets", \
    "snmpEtherStatsOversizePkts", \
    "snmpEtherRxOversizePkts", \
    "snmpEtherTxOversizePkts", \
    "snmpEtherStatsJabbers", \
    "snmpEtherStatsOctets", \
    "snmpEtherStatsPkts", \
    "snmpEtherStatsCollisions", \
    "snmpEtherStatsCRCAlignErrors", \
    "snmpEtherStatsTXNoErrors", \
    "snmpEtherStatsRXNoErrors", \
    "snmpDot3StatsAlignmentErrors", \
    "snmpDot3StatsFCSErrors", \
    "snmpDot3StatsSingleCollisionFrames", \
    "snmpDot3StatsMultipleCollisionFrames", \
    "snmpDot3StatsSQETTestErrors", \
    "snmpDot3StatsDeferredTransmissions", \
    "snmpDot3StatsLateCollisions", \
    "snmpDot3StatsExcessiveCollisions", \
    "snmpDot3StatsInternalMacTransmitErrors", \
    "snmpDot3StatsCarrierSenseErrors", \
    "snmpDot3StatsFrameTooLongs", \
    "snmpDot3StatsInternalMacReceiveErrors", \
    "snmpDot3StatsSymbolErrors", \
    "snmpDot3ControlInUnknownOpcodes", \
    "snmpDot3InPauseFrames", \
    "snmpDot3OutPauseFrames", \
    "snmpIfHCInOctets", \
    "snmpIfHCInUcastPkts", \
    "snmpIfHCInMulticastPkts", \
    "snmpIfHCInBroadcastPkts", \
    "snmpIfHCOutOctets", \
    "snmpIfHCOutUcastPkts", \
    "snmpIfHCOutMulticastPkts", \
    "snmpIfHCOutBroadcastPckts", \
    "snmpIpv6IfStatsInReceives", \
    "snmpIpv6IfStatsInHdrErrors", \
    "snmpIpv6IfStatsInAddrErrors", \
    "snmpIpv6IfStatsInDiscards", \
    "snmpIpv6IfStatsOutForwDatagrams", \
    "snmpIpv6IfStatsOutDiscards", \
    "snmpIpv6IfStatsInMcastPkts", \
    "snmpIpv6IfStatsOutMcastPkts", \
    "snmpIfInBroadcastPkts", \
    "snmpIfInMulticastPkts", \
    "snmpIfOutBroadcastPkts", \
    "snmpIfOutMulticastPkts", \
    "snmpIeee8021PfcRequests", \
    "snmpIeee8021PfcIndications", \
    "snmpBcmReceivedUndersizePkts", \
    "snmpBcmTransmittedUndersizePkts", \
    "snmpBcmIPMCBridgedPckts", \
    "snmpBcmIPMCRoutedPckts", \
    "snmpBcmIPMCInDroppedPckts", \
    "snmpBcmIPMCOutDroppedPckts", \
    "snmpBcmEtherStatsPkts1519to1522Octets", \
    "snmpBcmEtherStatsPkts1522to2047Octets", \
    "snmpBcmEtherStatsPkts2048to4095Octets", \
    "snmpBcmEtherStatsPkts4095to9216Octets", \
    "snmpBcmReceivedPkts64Octets", \
    "snmpBcmReceivedPkts65to127Octets", \
    "snmpBcmReceivedPkts128to255Octets", \
    "snmpBcmReceivedPkts256to511Octets", \
    "snmpBcmReceivedPkts512to1023Octets", \
    "snmpBcmReceivedPkts1024to1518Octets", \
    "snmpBcmReceivedPkts1519to2047Octets", \
    "snmpBcmReceivedPkts2048to4095Octets", \
    "snmpBcmReceivedPkts4095to9216Octets", \
    "snmpBcmTransmittedPkts64Octets", \
    "snmpBcmTransmittedPkts65to127Octets", \
    "snmpBcmTransmittedPkts128to255Octets", \
    "snmpBcmTransmittedPkts256to511Octets", \
    "snmpBcmTransmittedPkts512to1023Octets", \
    "snmpBcmTransmittedPkts1024to1518Octets", \
    "snmpBcmTransmittedPkts1519to2047Octets", \
    "snmpBcmTransmittedPkts2048to4095Octets", \
    "snmpBcmTransmittedPkts4095to9216Octets", \
    "snmpBcmTxControlCells", \
    "snmpBcmTxDataCells", \
    "snmpBcmTxDataBytes", \
    "snmpBcmRxCrcErrors", \
    "snmpBcmRxFecCorrectable", \
    "snmpBcmRxBecCrcErrors", \
    "snmpBcmRxDisparityErrors", \
    "snmpBcmRxControlCells", \
    "snmpBcmRxDataCells", \
    "snmpBcmRxDataBytes", \
    "snmpBcmRxDroppedRetransmittedControl", \
    "snmpBcmTxBecRetransmit", \
    "snmpBcmRxBecRetransmit", \
    "snmpBcmTxAsynFifoRate", \
    "snmpBcmRxAsynFifoRate", \
    "snmpBcmRxFecUncorrectable", \
    "snmpBcmRxBecRxFault", \
    "snmpBcmRxCodeErrors", \
    "snmpBcmRxLlfcPrimary", \
    "snmpBcmRxLlfcSecondary", \
    "snmpBcmCustomReceive0", \
    "snmpBcmCustomReceive1", \
    "snmpBcmCustomReceive2", \
    "snmpBcmCustomReceive3", \
    "snmpBcmCustomReceive4", \
    "snmpBcmCustomReceive5", \
    "snmpBcmCustomReceive6", \
    "snmpBcmCustomReceive7", \
    "snmpBcmCustomReceive8", \
    "snmpBcmCustomTransmit0", \
    "snmpBcmCustomTransmit1", \
    "snmpBcmCustomTransmit2", \
    "snmpBcmCustomTransmit3", \
    "snmpBcmCustomTransmit4", \
    "snmpBcmCustomTransmit5", \
    "snmpBcmCustomTransmit6", \
    "snmpBcmCustomTransmit7", \
    "snmpBcmCustomTransmit8", \
    "snmpBcmCustomTransmit9", \
    "snmpBcmCustomTransmit10", \
    "snmpBcmCustomTransmit11", \
    "snmpBcmCustomTransmit12", \
    "snmpBcmCustomTransmit13", \
    "snmpBcmCustomTransmit14", \
    "snmpDot3StatsInRangeLengthError", \
    "snmpDot3OmpEmulationCRC8Errors", \
    "snmpDot3MpcpRxGate", \
    "snmpDot3MpcpRxRegister", \
    "snmpDot3MpcpTxRegRequest", \
    "snmpDot3MpcpTxRegAck", \
    "snmpDot3MpcpTxReport", \
    "snmpDot3EponFecCorrectedBlocks", \
    "snmpDot3EponFecUncorrectableBlocks", \
    "snmpBcmPonInDroppedOctets", \
    "snmpBcmPonOutDroppedOctets", \
    "snmpBcmPonInDelayedOctets", \
    "snmpBcmPonOutDelayedOctets", \
    "snmpBcmPonInDelayedHundredUs", \
    "snmpBcmPonOutDelayedHundredUs", \
    "snmpBcmPonInFrameErrors", \
    "snmpBcmPonInOamFrames", \
    "snmpBcmPonOutOamFrames", \
    "snmpBcmPonOutUnusedOctets", \
    "snmpBcmEtherStatsPkts9217to16383Octets", \
    "snmpBcmReceivedPkts9217to16383Octets", \
    "snmpBcmTransmittedPkts9217to16383Octets", \
    "snmpBcmRxVlanTagFrame", \
    "snmpBcmRxDoubleVlanTagFrame", \
    "snmpBcmTxVlanTagFrame", \
    "snmpBcmTxDoubleVlanTagFrame", \
    "snmpBcmRxPFCControlFrame", \
    "snmpBcmTxPFCControlFrame", \
    "snmpBcmRxPFCFrameXonPriority0", \
    "snmpBcmRxPFCFrameXonPriority1", \
    "snmpBcmRxPFCFrameXonPriority2", \
    "snmpBcmRxPFCFrameXonPriority3", \
    "snmpBcmRxPFCFrameXonPriority4", \
    "snmpBcmRxPFCFrameXonPriority5", \
    "snmpBcmRxPFCFrameXonPriority6", \
    "snmpBcmRxPFCFrameXonPriority7", \
    "snmpBcmRxPFCFramePriority0", \
    "snmpBcmRxPFCFramePriority1", \
    "snmpBcmRxPFCFramePriority2", \
    "snmpBcmRxPFCFramePriority3", \
    "snmpBcmRxPFCFramePriority4", \
    "snmpBcmRxPFCFramePriority5", \
    "snmpBcmRxPFCFramePriority6", \
    "snmpBcmRxPFCFramePriority7", \
    "snmpBcmTxPFCFramePriority0", \
    "snmpBcmTxPFCFramePriority1", \
    "snmpBcmTxPFCFramePriority2", \
    "snmpBcmTxPFCFramePriority3", \
    "snmpBcmTxPFCFramePriority4", \
    "snmpBcmTxPFCFramePriority5", \
    "snmpBcmTxPFCFramePriority6", \
    "snmpBcmTxPFCFramePriority7", \
    "snmpFcmPortClass3RxFrames", \
    "snmpFcmPortClass3TxFrames", \
    "snmpFcmPortClass3Discards", \
    "snmpFcmPortClass2RxFrames", \
    "snmpFcmPortClass2TxFrames", \
    "snmpFcmPortClass2Discards", \
    "snmpFcmPortInvalidCRCs", \
    "snmpFcmPortDelimiterErrors"  \
}

/* bcm_custom_stat_trigger_e */
typedef enum bcm_custom_stat_trigger_e {
    bcmDbgCntRIPD4 = 0,                 /* Rx: IPv4 L3 discard packets. */
    bcmDbgCntRIPC4 = 1,                 /* Rx: Good L3 (V4 packets) includes
                                           tunneled. */
    bcmDbgCntRIPHE4 = 2,                /* Rx: IPv4 header error packets. */
    bcmDbgCntIMRP4 = 3,                 /* Rx: Routed IPv4 multicast packets. */
    bcmDbgCntRIPD6 = 4,                 /* Rx: IPv6 L3 discard packets. */
    bcmDbgCntRIPC6 = 5,                 /* Rx: Good L3 (V6 packets) includes
                                           tunneled. */
    bcmDbgCntRIPHE6 = 6,                /* Rx: IPv6 header error packets. */
    bcmDbgCntIMRP6 = 7,                 /* Rx: Routed IPv6 multicast packets. */
    bcmDbgCntRDISC = 8,                 /* Rx: IBP discard and CBP full. */
    bcmDbgCntRUC = 9,                   /* Rx: Good unicast (L2+L3) packets. */
    bcmDbgCntRPORTD = 10,               /* Rx: Packets droppped when ingress
                                           port is not in forwarding state. */
    bcmDbgCntPDISC = 11,                /* Rx: policy discard - DST_DISCARD,
                                           SRC_DISCARD, RATE_CONTROL... */
    bcmDbgCntIMBP = 12,                 /* Rx: Bridged multicast packets. */
    bcmDbgCntRFILDR = 13,               /* Rx: Packets dropped by FP. */
    bcmDbgCntRIMDR = 14,                /* Rx: Multicast (L2+L3) packets that
                                           are dropped. */
    bcmDbgCntRDROP = 15,                /* Rx: Port bitmap zero drop condition. */
    bcmDbgCntIRPSE = 16,                /* Rx: HiGig IPIC pause packets. */
    bcmDbgCntIRHOL = 17,                /* Rx: HiGig End-to-End HOL packets
                                           (BCM56504/56700/56800/56580). */
    bcmDbgCntIRIBP = 18,                /* Rx: HiGig End-to-End IBP packets
                                           (BCM56504/56700/56800/56580). */
    bcmDbgCntDSL3HE = 19,               /* Rx: DOS L3 header error packets. */
    bcmDbgCntIUNKHDR = 20,              /* Rx: Unknown HiGig header type packet
                                           (BCM56700/56800/56580). */
    bcmDbgCntDSL4HE = 21,               /* Rx: DOS L4 header error packets. */
    bcmDbgCntIMIRROR = 22,              /* Rx: HiGig mirror packet
                                           (BCM56700/56800/56580). */
    bcmDbgCntDSICMP = 23,               /* Rx: DOS ICMP error packets. */
    bcmDbgCntDSFRAG = 24,               /* Rx: DOS fragment error packets. */
    bcmDbgCntMTUERR = 25,               /* Rx: Packets trapped to CPU due to
                                           egress L3 MTU violation. */
    bcmDbgCntRTUN = 26,                 /* Rx: Tunnel packets. */
    bcmDbgCntRTUNE = 27,                /* Rx: tunnel error packets. */
    bcmDbgCntVLANDR = 28,               /* Rx: VLAN drops. */
    bcmDbgCntRHGUC = 29,                /* Rx: HiGig lookup UC cases (BCM56504
                                           B0). */
    bcmDbgCntRHGMC = 30,                /* Rx: HiGig lookup MC cases (BCM56504
                                           B0). */
    bcmDbgCntMPLS = 31,                 /* Rx: MPLS packets (BCM5660x only). */
    bcmDbgCntMACLMT = 32,               /* Rx: packets dropped due to MAC Limit
                                           is hit. */
    bcmDbgCntMPLSERR = 33,              /* Rx: MPLS packets with error (BCM5660x
                                           only). */
    bcmDbgCntURPFERR = 34,              /* Rx: L3 source URPF check Fail
                                           (BCM5660x only). */
    bcmDbgCntHGHDRE = 35,               /* Rx: Higig Header error packets
                                           (BCM56700/56800/56580/56514). */
    bcmDbgCntMCIDXE = 36,               /* Rx: Multicast Index error packets
                                           (BCM56700/56800/56580). */
    bcmDbgCntLAGLUP = 37,               /* Rx: LAG failover loopback packets
                                           (BCM56700/56800/56580). */
    bcmDbgCntLAGLUPD = 38,              /* Rx: LAG backup port down
                                           (BCM56700/56800/56580). */
    bcmDbgCntPARITYD = 39,              /* Rx: Parity error packets
                                           (BCM56700/56800/56580). */
    bcmDbgCntVFPDR = 40,                /* Rx: VLAN FP drop case (BCM56514). */
    bcmDbgCntURPF = 41,                 /* Rx: Unicast RPF drop case (BCM56514). */
    bcmDbgCntDSTDISCARDDROP = 42,       /* Rx: L2/L3 lookup DST_DISCARD drop. */
    bcmDbgCntCLASSBASEDMOVEDROP = 43,   /* Rx: Class based learning drop. */
    bcmDbgCntMACLMT_NODROP = 44,        /* Rx: Mac limit exceeded and packet not
                                           dropped. */
    bcmDbgCntMACSAEQUALMACDA = 45,      /* Rx: Dos Attack L2 Packets MACSA
                                           equals to MACDA. */
    bcmDbgCntMACLMT_DROP = 46,          /* Rx: Mac limit exceeded and packet
                                           dropped. */
    bcmDbgCntTGIP4 = 47,                /* Tx: Good IPv4 L3 UC packets. */
    bcmDbgCntTIPD4 = 48,                /* Tx: IPv4 L3 UC Aged and Drop packets. */
    bcmDbgCntTGIPMC4 = 49,              /* Tx: Good IPv4 IPMC packets. */
    bcmDbgCntTIPMCD4 = 50,              /* Tx: IPv4 IPMC Aged and Drop packets. */
    bcmDbgCntTGIP6 = 51,                /* Tx: Good IPv6 L3 UC packets. */
    bcmDbgCntTIPD6 = 52,                /* Tx: IPv6 L3 UC Aged and Drop Packets. */
    bcmDbgCntTGIPMC6 = 53,              /* Tx: Good IPv6 IPMC packets. */
    bcmDbgCntTIPMCD6 = 54,              /* Tx: IPv6 IPMC Aged and Drop packets. */
    bcmDbgCntTTNL = 55,                 /* Tx: Tunnel packets. */
    bcmDbgCntTTNLE = 56,                /* Tx: Tunnel error packets. */
    bcmDbgCntTTTLD = 57,                /* Tx: Packets dropped due to TTL
                                           threshold counter. */
    bcmDbgCntTCFID = 58,                /* Tx: Packets dropped when CFI set &
                                           pket is untagged or L3 switched for
                                           IPMC. */
    bcmDbgCntTVLAN = 59,                /* Tx: VLAN tagged packets. */
    bcmDbgCntTVLAND = 60,               /* Tx: Packets dropped due to invalid
                                           VLAN counter. */
    bcmDbgCntTVXLTMD = 61,              /* Tx: Packets dropped due to miss in
                                           VXLT table counter. */
    bcmDbgCntTSTGD = 62,                /* Tx: Packets dropped due to Spanning
                                           Tree State not in forwarding state. */
    bcmDbgCntTAGED = 63,                /* Tx: Packets dropped due to packet
                                           aged counter. */
    bcmDbgCntTL2MCD = 64,               /* Tx: L2 MC packets. */
    bcmDbgCntTPKTD = 65,                /* Tx: Packets dropped due to any
                                           condition. */
    bcmDbgCntTMIRR = 66,                /* Tx: Packets with mirroring flag. */
    bcmDbgCntTSIPL = 67,                /* Tx: Packets with SIP Link Local Drop
                                           flag (BCM56504/56700/56800/56580). */
    bcmDbgCntTHGUC = 68,                /* Tx: Higig Looked-up L3UC packets
                                           (BCM56504_B0/56700/56800/56580). */
    bcmDbgCntTHGMC = 69,                /* Tx: Higig Looked-up L3MC packets
                                           (BCM56504_B0/56700/56800/56580). */
    bcmDbgCntTHIGIG2 = 70,              /* Tx: Unknown HiGig2 Drops
                                           (BCM56700/56800/56580). */
    bcmDbgCntTHGI = 71,                 /* Tx: Unknown HiGig drops
                                           (BCM56700/56800/56580). */
    bcmDbgCntTL2_MTU = 72,              /* Tx: L2 MTU fail drops
                                           (BCM56700/56800/56580). */
    bcmDbgCntTPARITY_ERR = 73,          /* Tx: Parity error drops
                                           (BCM56700/56800/56580). */
    bcmDbgCntTIP_LEN_FAIL = 74,         /* Tx: IP Length check fail drops
                                           (BCM56700/56800/56580). */
    bcmDbgCntTMTUD = 75,                /* Tx: EBAD_MTU_drops (BCM5660x only). */
    bcmDbgCntTSLLD = 76,                /* Tx: ESIP_LINK_LOCAL (BCM5660x only). */
    bcmDbgCntTL2MPLS = 77,              /* Tx: L2_MPLS_ENCAP_TX (BCM5660x only). */
    bcmDbgCntTL3MPLS = 78,              /* Tx: L3_MPLS_ENCAP_TX (BCM5660x only). */
    bcmDbgCntTMPLS = 79,                /* Tx: MPLS_TX (BCM5660x only). */
    bcmDbgCntTMODIDTOOLARGEDROP = 80,   /* Tx: MODID greater than 31 drop
                                           counter. */
    bcmDbgCntPKTMODTOOLARGEDROP = 81,   /* Tx: Byte additions too large drop
                                           counter. */
    bcmDbgCntRX_SYMBOL = 82,            /* Fabric I/F => Rx Errors (e.g.8B10B) */
    bcmDbgCntTIME_ALIGNMENT_EVEN = 83,  /* Fabric I/F => Time Alignment (even) */
    bcmDbgCntTIME_ALIGNMENT_ODD = 84,   /* Fabric I/F => Time Alignment (odd) */
    bcmDbgCntBIT_INTERLEAVED_PARITY_EVEN = 85, /* Fabric I/F => BIP (even) */
    bcmDbgCntBIT_INTERLEAVED_PARITY_ODD = 86, /* Fabric I/F => BIP (odd) */
    bcmDbgCntFcmPortClass3RxFrames = 87, /* FCOE L3 RX frames */
    bcmDbgCntFcmPortClass3RxDiscards = 88, /* FCOE L3 RX discarded frames */
    bcmDbgCntFcmPortClass3TxFrames = 89, /* FCOE L3 TX frames */
    bcmDbgCntFcmPortClass2RxFrames = 90, /* FCOE L2 RX frames */
    bcmDbgCntFcmPortClass2RxDiscards = 91, /* FCOE L2 RX discarded frames */
    bcmDbgCntFcmPortClass2TxFrames = 92, /* FCOE L2 TX frames */
    bcmDbgCntNum = 93                   /* Must be last one. */
} bcm_custom_stat_trigger_t;

/* Custom receive flags. */
#define BCM_DBG_CNT_RIPD4       0x00000001 /* Rx IPv4 L3 discard packets. */
#define BCM_DBG_CNT_RIPC4       0x00000002 /* Good rx L3 (V4 packets) includes
                                              tunneled. */
#define BCM_DBG_CNT_RIPHE4      0x00000004 /* Rx IPv4 header error packets. */
#define BCM_DBG_CNT_IMRP4       0x00000008 /* Routed IPv4 multicast packets. */
#define BCM_DBG_CNT_RIPD6       0x00000010 /* Rx IPv6 L3 discard packet. */
#define BCM_DBG_CNT_RIPC6       0x00000020 /* Good rx L3 (V6 packets) includes
                                              tunneled. */
#define BCM_DBG_CNT_RIPHE6      0x00000040 /* Rx IPv6 header error packets. */
#define BCM_DBG_CNT_IMRP6       0x00000080 /* Routed IPv6 multicast packets. */
#define BCM_DBG_CNT_RDISC       0x00000100 /* IBP discard and CBP full. */
#define BCM_DBG_CNT_RUC         0x00000200 /* Good rx unicast (L2+L3) packets. */
#define BCM_DBG_CNT_RPORTD      0x00000400 /* Packets droppped when ingress port
                                              is not in forwarding state. */
#define BCM_DBG_CNT_PDISC       0x00000800 /* Rx policy discard - DST_DISCARD,
                                              SRC_DISCARD, RATE_CONTROL... */
#define BCM_DBG_CNT_IMBP        0x00001000 /* Bridged multicast packets. */
#define BCM_DBG_CNT_RFILDR      0x00002000 /* Packets dropped by FP. */
#define BCM_DBG_CNT_RIMDR       0x00004000 /* Multicast (L2+L3) packets that are
                                              dropped. */
#define BCM_DBG_CNT_RDROP       0x00008000 /* Port bitmap zero drop condition. */
#define BCM_DBG_CNT_IRPSE       0x00010000 /* HiGig IPIC pause rx. */
#define BCM_DBG_CNT_IRHOL       0x00020000 /* HiGig End-to-End HOL rx packets
                                              (BCM56504/56700/56800/56580). */
#define BCM_DBG_CNT_IRIBP       0x00040000 /* HiGig End-to-End IBP rx packets
                                              (BCM56504/56700/56800/56580). */
#define BCM_DBG_CNT_DSL3HE      0x00080000 /* DOS L3 header error packets. */
#define BCM_DBG_CNT_IUNKHDR     0x00080000 /* Unknown HiGig header type packet
                                              (BCM56700/56800/56580). */
#define BCM_DBG_CNT_DSL4HE      0x00100000 /* DOS L4 header error packets. */
#define BCM_DBG_CNT_IMIRROR     0x00100000 /* HiGig mirror packet
                                              (BCM56700/56800/56580). */
#define BCM_DBG_CNT_DSICMP      0x00200000 /* DOS ICMP error packets. */
#define BCM_DBG_CNT_DSFRAG      0x00400000 /* DOS fragment error packets. */
#define BCM_DBG_CNT_MTUERR      0x00800000 /* Packets trapped to CPU due to
                                              egress L3 MTU violation. */
#define BCM_DBG_CNT_RTUN        0x01000000 /* Number of tunnel packets received. */
#define BCM_DBG_CNT_RTUNE       0x02000000 /* Rx tunnel error packets. */
#define BCM_DBG_CNT_VLANDR      0x04000000 /* Rx VLAN drops. */
#define BCM_DBG_CNT_RHGUC       0x08000000 /* Rx HiGig lookup UC cases (BCM56504
                                              B0 only). */
#define BCM_DBG_CNT_RHGMC       0x10000000 /* Rx HiGig lookup MC cases (BCM56504
                                              B0 only). */
#define BCM_DBG_CNT_MPLS        0x20000000 /* Received MPLS Packets (BCM5660x
                                              only). */
#define BCM_DBG_CNT_MACLMT      0x20000000 /* packets dropped due to MAC Limit
                                              is hit. */
#define BCM_DBG_CNT_MPLSERR     0x40000000 /* Received MPLS Packets with Error
                                              (BCM5660x only). */
#define BCM_DBG_CNT_URPFERR     0x80000000 /* L3 src URPF check Fail (BCM5660x
                                              only). */
#define BCM_DBG_CNT_HGHDRE      0x08000000 /* Higig Header error packets
                                              (BCM56700/56800/56580). */
#define BCM_DBG_CNT_MCIDXE      0x10000000 /* Multicast Index error packets
                                              (BCM56700/56800/56580). */
#define BCM_DBG_CNT_LAGLUP      0x20000000 /* LAG failover loopback packets
                                              (BCM56700/56800/56580). */
#define BCM_DBG_CNT_LAGLUPD     0x40000000 /* LAG backup port down
                                              (BCM56700/56800/56580). */
#define BCM_DBG_CNT_PARITYD     0x80000000 /* Parity error packets
                                              (BCM56700/56800/56580). */
#define BCM_FB_DBG_CNT_RMASK    0x07ffffff /* Internal. */
#define BCM_RP_DBG_CNT_RMASK    0x27ffffff /* Internal. */
#define BCM_FB_B0_DBG_CNT_RMASK 0x1fffffff /* Internal. */
#define BCM_HB_DBG_CNT_RMASK    0xffffffff /* Internal. */

/* Custom transmit flags. */
#define BCM_DBG_CNT_TGIP4               0x00000001 /* Tx Good IPv4 L3 UC
                                                      packets. */
#define BCM_DBG_CNT_TIPD4               0x00000002 /* Tx IPv4 L3 UC Aged and
                                                      Drop packets. */
#define BCM_DBG_CNT_TGIPMC4             0x00000004 /* Tx Good IPv4 IPMC packets. */
#define BCM_DBG_CNT_TIPMCD4             0x00000008 /* Tx IPv4 IPMC Aged and Drop
                                                      packets. */
#define BCM_DBG_CNT_TGIP6               0x00000010 /* Tx Good IPv6 L3 UC
                                                      packets. */
#define BCM_DBG_CNT_TIPD6               0x00000020 /* Tx IPv6 L3 UC Aged and
                                                      Drop Packets. */
#define BCM_DBG_CNT_TGIPMC6             0x00000040 /* Tx Good IPv6 IPMC packets. */
#define BCM_DBG_CNT_TIPMCD6             0x00000080 /* Tx IPv6 IPMC Aged and Drop
                                                      packets. */
#define BCM_DBG_CNT_TTNL                0x00000100 /* Tx Tunnel packets. */
#define BCM_DBG_CNT_TTNLE               0x00000200 /* Tx Tunnel error packets. */
#define BCM_DBG_CNT_TTTLD               0x00000400 /* Pkts dropped due to TTL
                                                      threshold counter. */
#define BCM_DBG_CNT_TCFID               0x00000800 /* Pkts dropped when CFI set
                                                      & pket is untagged or L3
                                                      switched for IPMC. */
#define BCM_DBG_CNT_TVLAN               0x00001000 /* Tx VLAN tagged packets. */
#define BCM_DBG_CNT_TVLAND              0x00002000 /* Pkts dropped due to
                                                      invalid VLAN counter. */
#define BCM_DBG_CNT_TVXLTMD             0x00004000 /* Pkts dropped due to miss
                                                      in VXLT table counter. */
#define BCM_DBG_CNT_TSTGD               0x00008000 /* Pkts dropped due to
                                                      Spanning Tree State not in
                                                      forwarding state. */
#define BCM_DBG_CNT_TAGED               0x00010000 /* Pkts dropped due to packet
                                                      aged counter. */
#define BCM_DBG_CNT_TL2MCD              0x00020000 /* L2 MC packet drop counter. */
#define BCM_DBG_CNT_TPKTD               0x00040000 /* Pkts dropped due to any
                                                      condition. */
#define BCM_DBG_CNT_TMIRR               0x00080000 /* mirroring flag. */
#define BCM_DBG_CNT_TSIPL               0x00100000 /* SIP Link Local Drop flag
                                                      (BCM56504/56700/56800/56580). */
#define BCM_DBG_CNT_THGUC               0x00200000 /* Higig Lookedup L3UC Pkts
                                                      (BCM56504_B0/56700/56800/56580). */
#define BCM_DBG_CNT_THGMC               0x00400000 /* Higig Lookedup L3MC Pkts
                                                      (BCM56504_B0/56700/56800/56580). */
#define BCM_DBG_CNT_THIGIG2             0x00800000 /* Unknown HiGig2 Drop
                                                      (BCM56700/56800/56580). */
#define BCM_DBG_CNT_THGI                0x01000000 /* Unknown HiGig drop
                                                      (BCM56700/56800/56580). */
#define BCM_DBG_CNT_TL2_MTU             0x02000000 /* L2 MTU fail drop
                                                      (BCM56700/56800/56580). */
#define BCM_DBG_CNT_TPARITY_ERR         0x04000000 /* Parity Error drop
                                                      (BCM56700/56800/56580). */
#define BCM_DBG_CNT_TIP_LEN_FAIL        0x08000000 /* IP Length check fail drop
                                                      (BCM56700/56800/56580). */
#define BCM_DBG_CNT_TMTUD               0x01000000 /* EBAD_MTU_DROP (BCM5660x
                                                      only). */
#define BCM_DBG_CNT_TSLLD               0x10000000 /* ESIP_LINK_LOCAL (BCM5660x
                                                      only). */
#define BCM_DBG_CNT_TL2MPLS             0x20000000 /* L2_MPLS_ENCAP_TX (BCM5660x
                                                      only). */
#define BCM_DBG_CNT_TL3MPLS             0x40000000 /* L3_MPLS_ENCAP_TX (BCM5660x
                                                      only). */
#define BCM_DBG_CNT_TMPLS               0x80000000 /* MPLS_TX (BCM5660x only). */
#define BCM_DBG_CNT_MODIDTOOLARGEDROP   0x10000000 /* MODID greater than 31 drop
                                                      counter. */
#define BCM_DBG_CNT_PKTMODTOOLARGEDROP  0x20000000 /* Byte additions too large
                                                      drop counter. */
#define BCM_FB_DBG_CNT_TMASK            0x001fffff /* Internal. */
#define BCM_RP_DBG_CNT_TMASK            0x001fffff /* Internal. */
#define BCM_FB_B0_DBG_CNT_TMASK         0x007fffff /* Internal. */
#define BCM_HB_DBG_CNT_TMASK            0x0fffffff /* Internal. */
#define BCM_TRX_DBG_CNT_TMASK           0x3fffffff /* Internal. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the BCM statistics module. */
extern int bcm_stat_init(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

#define bcm_stat_enable_set(unit, port, enable)             /* Gone */
#define bcm_stat_enable_get(unit, port, enable_ptr)             /* Gone */

#ifndef BCM_HIDE_DISPATCHABLE

/* Clear the port-based statistics for the indicated device port. */
extern int bcm_stat_clear(
    int unit, 
    bcm_port_t port);

/* Synchronize software counters with hardware. */
extern int bcm_stat_sync(
    int unit);

/* Get the specified statistics from the device. */
extern int bcm_stat_get(
    int unit, 
    bcm_port_t port, 
    bcm_stat_val_t type, 
    uint64 *value);

/* Get the specified statistics from the device. */
extern int bcm_stat_get32(
    int unit, 
    bcm_port_t port, 
    bcm_stat_val_t type, 
    uint32 *value);

/* Get the specified statistics from the device. */
extern int bcm_stat_multi_get(
    int unit, 
    bcm_port_t port, 
    int nstat, 
    bcm_stat_val_t *stat_arr, 
    uint64 *value_arr);

/* 
 * Get the specified statistics from the device.  The 64-bit values may
 * be truncated to fit.
 */
extern int bcm_stat_multi_get32(
    int unit, 
    bcm_port_t port, 
    int nstat, 
    bcm_stat_val_t *stat_arr, 
    uint32 *value_arr);

/* Get the specified hardware statistics from the device. */
extern int bcm_stat_sync_get(
    int unit, 
    bcm_port_t port, 
    bcm_stat_val_t type, 
    uint64 *value);

/* Get the specified hardware statistics from the device. */
extern int bcm_stat_sync_get32(
    int unit, 
    bcm_port_t port, 
    bcm_stat_val_t type, 
    uint32 *value);

/* Get the specified hardware statistics from the device. */
extern int bcm_stat_sync_multi_get(
    int unit, 
    bcm_port_t port, 
    int nstat, 
    bcm_stat_val_t *stat_arr, 
    uint64 *value_arr);

/* 
 * Get the specified hardware statistics from the device.  The 64-bit
 * values may be truncated to fit.
 */
extern int bcm_stat_sync_multi_get32(
    int unit, 
    bcm_port_t port, 
    int nstat, 
    bcm_stat_val_t *stat_arr, 
    uint32 *value_arr);

/* Set/get debug counter to count certain packet types. */
extern int bcm_stat_custom_set(
    int unit, 
    bcm_port_t port, 
    bcm_stat_val_t type, 
    uint32 flags);

/* Set/get debug counter to count certain packet types. */
extern int bcm_stat_custom_get(
    int unit, 
    bcm_port_t port, 
    bcm_stat_val_t type, 
    uint32 *flags);

/* Add a certain packet type to debug counter to count. */
extern int bcm_stat_custom_add(
    int unit, 
    bcm_port_t port, 
    bcm_stat_val_t type, 
    bcm_custom_stat_trigger_t trigger);

/* Delete the specified packet type from debug counter. */
extern int bcm_stat_custom_delete(
    int unit, 
    bcm_port_t port, 
    bcm_stat_val_t type, 
    bcm_custom_stat_trigger_t trigger);

/* Delete all packet types from debug counter. */
extern int bcm_stat_custom_delete_all(
    int unit, 
    bcm_port_t port, 
    bcm_stat_val_t type);

/* Check if specified packet types is part of debug counter. */
extern int bcm_stat_custom_check(
    int unit, 
    bcm_port_t port, 
    bcm_stat_val_t type, 
    bcm_custom_stat_trigger_t trigger, 
    int *result);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Vlan related flex attributes values */
typedef enum bcm_stat_group_mode_attr_vlan_e {
    bcmStatGroupModeAttrVlanUnTagged = 1, /* UnTagged Vlan */
    bcmStatGroupModeAttrVlanInnerTag = 2, /* Inner Tagged Vlan */
    bcmStatGroupModeAttrVlanOuterTag = 3, /* Outer Tagged Vlan */
    bcmStatGroupModeAttrVlanStackedTag = 4, /* Both Inner and Outer Tagged Vlan */
    bcmStatGroupModeAttrVlanAll = 5     /* UnTagged,Inner and Outer Tagged Vlan */
} bcm_stat_group_mode_attr_vlan_t;

/* Packet type related flex attributes values */
typedef enum bcm_stat_group_mode_attr_pkt_type_e {
    bcmStatGroupModeAttrPktTypeAll = 1, /* All Packet Types */
    bcmStatGroupModeAttrPktTypeUnknown = 2, /* Unknown Packet */
    bcmStatGroupModeAttrPktTypeControl = 3, /* Control Packet */
    bcmStatGroupModeAttrPktTypeOAM = 4, /* OAM Packet */
    bcmStatGroupModeAttrPktTypeBFD = 5, /* BFD Packet */
    bcmStatGroupModeAttrPktTypeBPDU = 6, /* BPDU Packet */
    bcmStatGroupModeAttrPktTypeICNM = 7, /* ICNM Packet */
    bcmStatGroupModeAttrPktType1588 = 8, /* 1588 Packet */
    bcmStatGroupModeAttrPktTypeKnownL2UC = 9, /* Known L2 Unicast Packet */
    bcmStatGroupModeAttrPktTypeUnknownL2UC = 10, /* Unknown L2 Unicast Packet */
    bcmStatGroupModeAttrPktTypeL2BC = 11, /* L2 Broadcast Packet */
    bcmStatGroupModeAttrPktTypeKnownL2MC = 12, /* Known L2 Multicast Packet */
    bcmStatGroupModeAttrPktTypeUnknownL2MC = 13, /* Unknown L2 Multicast Packet */
    bcmStatGroupModeAttrPktTypeKnownL3UC = 14, /* Known L3 Unicast Packet */
    bcmStatGroupModeAttrPktTypeUnknownL3UC = 15, /* Unknown L3 Unicast Packet */
    bcmStatGroupModeAttrPktTypeKnownIPMC = 16, /* Known IPMC Packet */
    bcmStatGroupModeAttrPktTypeUnknownIPMC = 17, /* Unknown IPMC Packet */
    bcmStatGroupModeAttrPktTypeKnownMplsL2 = 18, /* Known MPLS L2 Packet */
    bcmStatGroupModeAttrPktTypeKnownMplsL3 = 19, /* Known MPLS L3 Packet */
    bcmStatGroupModeAttrPktTypeKnownMpls = 20, /* Known MPLS Packet */
    bcmStatGroupModeAttrPktTypeUnknownMpls = 21, /* Unknown MPLS Packet */
    bcmStatGroupModeAttrPktTypeKnownMplsMulticast = 22, /* Known MPLS Multicast Packet */
    bcmStatGroupModeAttrPktTypeKnownMim = 23, /* Known MiM Packet */
    bcmStatGroupModeAttrPktTypeUnknownMim = 24, /* Unknown MiM Packet */
    bcmStatGroupModeAttrPktTypeKnownTrill = 25, /* Known TRILL Packet */
    bcmStatGroupModeAttrPktTypeUnknownTrill = 26, /* Unknown TRILL Packet */
    bcmStatGroupModeAttrPktTypeKnownNiv = 27, /* Known  NIV Packet */
    bcmStatGroupModeAttrPktTypeUnknownNiv = 28 /* Unknown  NIV Packet */
} bcm_stat_group_mode_attr_pkt_type_t;

/* Stat Group Mode Attribute Selectors */
typedef enum bcm_stat_group_mode_attr_e {
    bcmStatGroupModeAttrColor = 1,      /* Color Selector: Possible
                                           Value:bcmColorGreen|Yellow|REd or
                                           oxFFFFFFFF */
    bcmStatGroupModeAttrFieldIngressColor = 2, /* Field Ingress Color Selector:
                                           Possible
                                           Values:bcmColorGreen|Yellow|REd or
                                           STAT_GROUP_MODE_ATTR_ALL_VALUES for
                                           all */
    bcmStatGroupModeAttrIntPri = 3,     /* Internal Priority Selector: Possible
                                           Values: 0 to 15 or
                                           STAT_GROUP_MODE_ATTR_ALL_VALUES for
                                           all */
    bcmStatGroupModeAttrVlan = 4,       /* Vlan Type Selector: Possible Values:
                                           bcmStatGroupModeVlanAttr */
    bcmStatGroupModeAttrOuterPri = 5,   /* Outer Vlan Priority Selector:
                                           Possible Values: 0 to 7 or
                                           STAT_GROUP_MODE_ATTR_ALL_VALUES for
                                           all */
    bcmStatGroupModeAttrInnerPri = 6,   /* Inner Vlan Priority Selector:
                                           Possible Values: 0 to 7 or
                                           STAT_GROUP_MODE_ATTR_ALL_VALUES for
                                           all */
    bcmStatGroupModeAttrPort = 7,       /* Logical Port Selector: Possible
                                           Values:<MaxLogicalPort> or
                                           STAT_GROUP_MODE_ATTR_ALL_VALUES for
                                           all */
    bcmStatGroupModeAttrTosDscp = 8,    /* Type Of Service Selector(DSCP :
                                           Differentiated services Code Point):
                                           Possible Values:<6b:TOS Val> or
                                           STAT_GROUP_MODE_ATTR_ALL_VALUES for
                                           all */
    bcmStatGroupModeAttrTosEcn = 9,     /* Type Of Service Selector(ECN:
                                           Explicit Congestion Notification):
                                           Possible Values:<2b:TOS Val> or
                                           STAT_GROUP_MODE_ATTR_ALL_VALUES for
                                           all */
    bcmStatGroupModeAttrPktType = 10,   /* Packet Type Selector: Possible
                                           Values:<bcmStatGroupModeAttrPktType*> */
    bcmStatGroupModeAttrIngNetworkGroup = 11, /* Ingress Network Group Selector:
                                           Possible Values:<Value> or
                                           STAT_GROUP_MODE_ATTR_ALL_VALUES for
                                           all */
    bcmStatGroupModeAttrEgrNetworkGroup = 12, /* Egress Network Group Selector:
                                           Possible Values:<Value> or
                                           STAT_GROUP_MODE_ATTR_ALL_VALUES for
                                           all */
    bcmStatGroupModeAttrDrop = 13,      /* Drop Selector: Possible Values:<0 or
                                           1> */
    bcmStatGroupModeAttrPacketTypeIp = 14 /* Ip Packet Selector: Possible
                                           Values:<0 or 1> */
} bcm_stat_group_mode_attr_t;

/* Unique constants */
#define BCM_STAT_GROUP_MODE_ATTR_ALL_VALUES 0xFFFFFFFF /* A unique constant for
                                                          using all attr values */

/* Stat Group Mode Flags */
#define BCM_STAT_GROUP_MODE_INGRESS 0x00000001 /* Stat Group Mode Ingress */
#define BCM_STAT_GROUP_MODE_EGRESS  0x00000002 /* Stat Group Mode Egress */

/* Ingress and Egress Statistics Accounting Objects */
typedef enum bcm_stat_object_e {
    bcmStatObjectIngPort = 0,           /* Ingress Port Object */
    bcmStatObjectIngVlan = 1,           /* Ingress Vlan Object */
    bcmStatObjectIngVlanXlate = 2,      /* Ingress Vlan Translate Object */
    bcmStatObjectIngVfi = 3,            /* Ingress VFI Object */
    bcmStatObjectIngL3Intf = 4,         /* Ingress L3 Interface Object */
    bcmStatObjectIngVrf = 5,            /* Ingress VRF Object */
    bcmStatObjectIngPolicy = 6,         /* Ingress Policy Object */
    bcmStatObjectIngMplsVcLabel = 7,    /* Ingress MPLS VC Label Object */
    bcmStatObjectIngMplsSwitchLabel = 8, /* Ingress MPLS Switch Label Object */
    bcmStatObjectIngMplsFrrLabel = 14,  /* Ingress MPLS Fast Reroute Label
                                           Object */
    bcmStatObjectIngL3Host = 15,        /* L3 Host without L3 Egress Object */
    bcmStatObjectIngTrill = 16,         /* Ingress Trill Object */
    bcmStatObjectIngMimLookupId = 17,   /* Ingress MiM I-SID Object */
    bcmStatObjectIngL2Gre = 18,         /* Ingress L2 GRE Object */
    bcmStatObjectIngEXTPolicy = 19,     /* Ingress external FP Object */
    bcmStatObjectIngVxlan = 24,         /* Ingress Vxlan Object */
    bcmStatObjectIngVsan = 25,          /* Ingress FCOE VSAN Object */
    bcmStatObjectIngFcoe = 26,          /* Ingress FCOE Object */
    bcmStatObjectIngL3Route = 27,       /* Ingress L2 Route Defip Object */
    bcmStatObjectIngNiv = 30,           /* Ingress Niv Object */
    bcmStatObjectIngIpmc = 32,          /* Ingress IPMC Object */
    bcmStatObjectEgrPort = 9,           /* Egress Port Object */
    bcmStatObjectEgrVlan = 10,          /* Egress Vlan Object */
    bcmStatObjectEgrVlanXlate = 11,     /* Egress Vlan Translate Object */
    bcmStatObjectEgrVfi = 12,           /* Egress VFI Object */
    bcmStatObjectEgrL3Intf = 13,        /* Egress L3 Interface Object */
    bcmStatObjectEgrWlan = 20,          /* Egress WLAN Object */
    bcmStatObjectEgrMim = 21,           /* Egress MiM Object */
    bcmStatObjectEgrMimLookupId = 22,   /* Egress MiM I-SID Object */
    bcmStatObjectEgrL2Gre = 23,         /* Egress L2 GRE Object */
    bcmStatObjectEgrVxlan = 28,         /* Egress Vxlan Object */
    bcmStatObjectEgrL3Nat = 29,         /* Egress L3 NAT Object */
    bcmStatObjectEgrNiv = 31,           /* Egress Niv Object */
    bcmStatObjectIngVxlanDip = 33,      /* Ingress Vxlan Dip Object */
    bcmStatObjectMaxValue = 34          /* This should be the maximum value
                                           defined in this enum */
} bcm_stat_object_t;

/* Flex stat pool direction */
typedef enum bcm_stat_flex_direction_e {
    bcmStatFlexDirectionIngress = 0,    /* Ingress direction */
    bcmStatFlexDirectionEgress = 1      /* Egress direction */
} bcm_stat_flex_direction_t;

/* Flex pool statistics information */
typedef struct bcm_stat_flex_pool_stat_info_s {
    uint32 pool_id;                     /* pool ID */
    uint32 total_entries;               /* The size of this pool */
    uint32 used_entries;                /* Entries that are allocated (but not
                                           necessarily assigned) */
    uint32 attached_entries;            /* he number of used_entries that are
                                           actually assigned to an object */
    uint32 free_entries;                /* The result of deducting used_entries
                                           from total_entries */
    SHR_BITDCL used_by_objects[_SHR_BITDCLSIZE(bcmStatObjectMaxValue)]; 
} bcm_stat_flex_pool_stat_info_t;

/* Stat Flex Group Attribute Selector */
typedef struct bcm_stat_group_mode_attr_selector_s {
    uint32 counter_offset;              /* Counter Offset */
    bcm_stat_group_mode_attr_t attr;    /* Attribute Selector */
    uint32 attr_value;                  /* Attribute Values */
} bcm_stat_group_mode_attr_selector_t;

/* Counter Statistics Values */
typedef struct bcm_stat_value_s {
    uint32 packets;     /* packets value */
    uint64 bytes;       /* bytes value */
    uint64 packets64;   /* 64-bit accumulated packets value */
} bcm_stat_value_t;

/* Statistics Group Modes */
typedef enum bcm_stat_group_mode_e {
    bcmStatGroupModeSingle = 0,         /* A single counter used for all traffic
                                           types */
    bcmStatGroupModeTrafficType = 1,    /* A dedicated counter per traffic type
                                           Unicast, multicast, broadcast */
    bcmStatGroupModeDlfAll = 2,         /* A pair of counters where the base
                                           counter is used for dlf and the other
                                           counter is used for all traffic types */
    bcmStatGroupModeDlfIntPri = 3,      /* N+1 counters where the base counter
                                           is used for dlf and next N are used
                                           per Cos */
    bcmStatGroupModeTyped = 4,          /* A dedicated counter for unknown
                                           unicast, known unicast, multicast,
                                           broadcast */
    bcmStatGroupModeTypedAll = 5,       /* A dedicated counter for unknown
                                           unicast, known unicast, multicast,
                                           broadcast and one for all traffic(not
                                           already counted) */
    bcmStatGroupModeTypedIntPri = 6,    /* A dedicated counter for unknown
                                           unicast, known unicast,
                                           multicast,broadcast and N internal
                                           priority counters for traffic (not
                                           already counted) */
    bcmStatGroupModeSingleWithControl = 7, /* A single counter used for all traffic
                                           types with an additional counter for
                                           control traffic */
    bcmStatGroupModeTrafficTypeWithControl = 8, /* A dedicated counter per traffic type
                                           unicast, multicast, broadcast with an
                                           additional counter for control
                                           traffic */
    bcmStatGroupModeDlfAllWithControl = 9, /* A pair of counters where the base
                                           counter is used for control, the next
                                           one for dlf and the other counter is
                                           used for all traffic types */
    bcmStatGroupModeDlfIntPriWithControl = 10, /* N+2 counters where the base counter
                                           is used for control, the next one for
                                           dlf and next N are used per Cos */
    bcmStatGroupModeTypedWithControl = 11, /* A dedicated counter for control,
                                           unknown unicast, known unicast,
                                           multicast, broadcast */
    bcmStatGroupModeTypedAllWithControl = 12, /* A dedicated counter for control,
                                           unknown unicast, known
                                           unicast,multicast, broadcast and one
                                           for all traffic (not already counted) */
    bcmStatGroupModeTypedIntPriWithControl = 13, /* A dedicated counter for control,
                                           unknown unicast, known unicast,
                                           multicast, broadcast and N internal
                                           priority counters for traffic (not
                                           already counted) */
    bcmStatGroupModeDot1P = 14,         /* A set of 8(2^3) counters selected
                                           based on Vlan priority */
    bcmStatGroupModeIntPri = 15,        /* A set of 16(2^4) counters based on
                                           internal priority */
    bcmStatGroupModeIntPriCng = 16,     /* A set of 64 counters(2^(4+2)) based
                                           on Internal priority+CNG */
    bcmStatGroupModeSvpType = 17,       /* A set of 2 counters(2^1) based on SVP
                                           type */
    bcmStatGroupModeDscp = 18,          /* A set of 64 counters(2^6) based on
                                           DSCP bits */
    bcmStatGroupModeDvpType = 19,       /* A set of 2 counters(2^1) based on DVP
                                           type */
    bcmStatGroupModeCng = 20            /* A set of 4 counters based on Pre IFP
                                           packet color bits */
} bcm_stat_group_mode_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Retrieves the flex counter details for a given objectId */
extern int bcm_stat_flex_pool_info_multi_get(
    int unit, 
    bcm_stat_flex_direction_t direction, 
    uint32 num_pools, 
    uint32 *actual_num_pools, 
    bcm_stat_flex_pool_stat_info_t *flex_pool_stat);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize an attribute selector of Stat Flex Group Mode */
extern void bcm_stat_group_mode_attr_selector_t_init(
    bcm_stat_group_mode_attr_selector_t *attr_selector);

/* Initialize bcm_stat_value_t structure */
extern void bcm_stat_value_t_init(
    bcm_stat_value_t *stat_value);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create Customized Stat Group mode for given Counter Attributes */
extern int bcm_stat_group_mode_id_create(
    int unit, 
    uint32 flags, 
    uint32 total_counters, 
    uint32 num_selectors, 
    bcm_stat_group_mode_attr_selector_t *attr_selectors, 
    uint32 *mode_id);

/* Retrieves Customized Stat Group mode Attributes for given mode_id */
extern int bcm_stat_group_mode_id_get(
    int unit, 
    uint32 mode_id, 
    uint32 *flags, 
    uint32 *total_counters, 
    uint32 num_selectors, 
    bcm_stat_group_mode_attr_selector_t *attr_selectors, 
    uint32 *actual_num_selectors);

/* Destroys Customized Group mode */
extern int bcm_stat_group_mode_id_destroy(
    int unit, 
    uint32 mode_id);

/* Associate an accounting object to customized group mode */
extern int bcm_stat_custom_group_create(
    int unit, 
    uint32 mode_id, 
    bcm_stat_object_t object, 
    uint32 *stat_counter_id, 
    uint32 *num_entries);

/* Create Fixed Counter Entries group for given accounting object */
extern int bcm_stat_group_create(
    int unit, 
    bcm_stat_object_t object, 
    bcm_stat_group_mode_t group_mode, 
    uint32 *stat_counter_id, 
    uint32 *num_entries);

/* Destroy counter Entries group */
extern int bcm_stat_group_destroy(
    int unit, 
    uint32 stat_counter_id);

/* Dump contents of all configured groups */
extern int bcm_stat_group_dump(
    int unit, 
    bcm_stat_object_t object, 
    bcm_stat_group_mode_t group_mode);

/* Dump contents of all configured groups */
extern int bcm_stat_group_dump_all(
    int unit);

/* Get all Stat Ids attached to the specified flex stat object. */
extern int bcm_stat_id_get_all(
    int unit, 
    bcm_stat_object_t object, 
    int stat_max, 
    uint32 *stat_array, 
    int *stat_count);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_STAT_H__ */
