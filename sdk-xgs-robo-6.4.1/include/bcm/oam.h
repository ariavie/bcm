/*
 * $Id: c3ab7d64bf0e7402fee2b2fba05d448b57052240 $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_OAM_H__
#define __BCM_OAM_H__

#include <bcm/mpls.h>

/* Miscellaneous OAM defines */
#define BCM_OAM_GROUP_NAME_LENGTH           48         /* Group name length in
                                                          bytes */
#define BCM_OAM_GROUP_INVALID               -1         /* Invalid OAM group ID */
#define BCM_OAM_ENDPOINT_INVALID            -2         /* Invalid OAM endpoint
                                                          ID. */
#define BCM_OAM_ENDPOINT_DEFAULT_INGRESS0   -3         /* OAM default endpoint,
                                                          ingress. */
#define BCM_OAM_ENDPOINT_DEFAULT_INGRESS1   -4         /* OAM default endpoint,
                                                          ingress. */
#define BCM_OAM_ENDPOINT_DEFAULT_INGRESS2   -5         /* OAM default endpoint,
                                                          ingress. */
#define BCM_OAM_ENDPOINT_DEFAULT_INGRESS3   -6         /* OAM default endpoint,
                                                          ingress. */
#define BCM_OAM_ENDPOINT_DEFAULT_EGRESS0    -1         /* OAM default endpoint,
                                                          egress. */
#define BCM_OAM_INTPRI_MAX                  16         /* Internal priority max
                                                          value */
#define BCM_OAM_CARRIER_CODE_MAX            6          /* ITU-T Carrier code
                                                          length */

/* OAM group flags */
#define BCM_OAM_GROUP_REPLACE               0x01       /* Replace an existing
                                                          OAM group */
#define BCM_OAM_GROUP_WITH_ID               0x02       /* Use the specified
                                                          group ID */
#define BCM_OAM_GROUP_REMOTE_DEFECT_TX      0x04       /* Set the remote defect
                                                          indicator in outgoing
                                                          CCMs for this group */
#define BCM_OAM_GROUP_COPY_ERRORS_TO_CPU    0x08       /* Copy mismatched MAID
                                                          packets to CPU */
#define BCM_OAM_GROUP_COPY_TO_CPU           0x10       /* Copy the received CCM
                                                          packet to the CPU */

/* OAM group fault flags */
#define BCM_OAM_GROUP_FAULT_REMOTE      0x01       /* A remote defect indicator
                                                      is set in this group */
#define BCM_OAM_GROUP_FAULT_CCM_TIMEOUT 0x02       /* A CCM timeout has occurred
                                                      in this group */
#define BCM_OAM_GROUP_FAULT_CCM_ERROR   0x04       /* A CCM error has occurred
                                                      in this group */
#define BCM_OAM_GROUP_FAULT_CCM_XCON    0x08       /* A CCM xcon has occurred in
                                                      this group */
#define BCM_OAM_GROUP_RDI_TX            BCM_OAM_GROUP_REMOTE_DEFECT_TX /* Set the remote defect
                                                      indicator in outgoing CCMs
                                                      for this group. */

/* OAM endpoint flags and flags2 */
#define BCM_OAM_ENDPOINT_REPLACE            0x0001     /* Replace an existing
                                                          OAM endpoint */
#define BCM_OAM_ENDPOINT_WITH_ID            0x0002     /* Use the specified
                                                          endpoint ID */
#define BCM_OAM_ENDPOINT_REMOTE             0x0004     /* Specifies that this is
                                                          a remote endpoint */
#define BCM_OAM_ENDPOINT_UP_FACING          0x0008     /* Specifies that this
                                                          endpoint faces the
                                                          switching logic */
#define BCM_OAM_ENDPOINT_CCM_RX             0x0010     /* Enables CCM reception.
                                                           This is only valid
                                                          for local endpoints. */
#define BCM_OAM_ENDPOINT_LOOPBACK           0x0020     /* Enables loopback
                                                          response.  This is
                                                          only valid for local
                                                          endpoints. */
#define BCM_OAM_ENDPOINT_DELAY_MEASUREMENT  0x0040     /* Enables reception and
                                                          timestamping of delay
                                                          measurement messages. 
                                                          This is only valid for
                                                          local endpoints. */
#define BCM_OAM_ENDPOINT_LINKTRACE          0x0080     /* Enables reception of
                                                          linktrace messages. 
                                                          This is only valid for
                                                          local endpoints. */
#define BCM_OAM_ENDPOINT_PORT_STATE_TX      0x0100     /* Enables the
                                                          transmission of port
                                                          state in outgoing
                                                          CCMs.  This is only
                                                          valid for local
                                                          endpoints. */
#define BCM_OAM_ENDPOINT_INTERFACE_STATE_TX 0x0200     /* Enables the
                                                          transmission of
                                                          interface state in
                                                          outgoing CCMs.  This
                                                          is only valid for
                                                          local endpoints. */
#define BCM_OAM_ENDPOINT_LOSS_MEASUREMENT   0x0400     /* Enables the processing
                                                          of loss measurement
                                                          messages.  This is
                                                          only valid for local
                                                          endpoints. */
#define BCM_OAM_ENDPOINT_INTERMEDIATE       0x0800     /* Configures this as a
                                                          MIP. */
#define BCM_OAM_ENDPOINT_PBB_TE             0x1000     /* Specifies that this is
                                                          a PBB-TE endpoint. */
#define BCM_OAM_ENDPOINT_CCM_COPYTOCPU      0x2000     /* Copy received CCM to
                                                          CPU. This is only
                                                          valid for local
                                                          endpoints. */
#define BCM_OAM_ENDPOINT_CCM_DROP           0x4000     /* Drop received CCM.
                                                          This is only valid for
                                                          local endpoints. */
#define BCM_OAM_ENDPOINT_DM_COPYTOCPU       0x8000     /* Copy received delay
                                                          measurement messages
                                                          to CPU. This is only
                                                          valid for local
                                                          endpoints. */
#define BCM_OAM_ENDPOINT_DM_DROP            0x10000    /* Drop received delay
                                                          measurement messages.
                                                          This is only valid for
                                                          local endpoints. */
#define BCM_OAM_ENDPOINT_LB_COPYTOCPU       0x20000    /* Copy received loopback
                                                          messages to CPU. This
                                                          is only valid for
                                                          local endpoints. */
#define BCM_OAM_ENDPOINT_LB_DROP            0x40000    /* Drop received loopback
                                                          messages. This is only
                                                          valid for local
                                                          endpoints. */
#define BCM_OAM_ENDPOINT_LT_COPYTOCPU       0x80000    /* Copy received loopback
                                                          messages to CPU. This
                                                          is only valid for
                                                          local endpoints. */
#define BCM_OAM_ENDPOINT_LT_DROP            0x100000   /* Drop received loopback
                                                          messages. This is only
                                                          valid for local
                                                          endpoints. */
#define BCM_OAM_ENDPOINT_USE_QOS_MAP        0x200000   /* Use QoS map profile
                                                          specified on endpoint */
#define BCM_OAM_ENDPOINT_MATCH_INNER_VLAN   0x400000   /* Selection of up MIP on
                                                          CEP (C-comp) rather
                                                          than on PEP (S-comp).
                                                          For doubly tagged
                                                          MEPs, count based on
                                                          C-comp rather than
                                                          S-comp */
#define BCM_OAM_ENDPOINT_REMOTE_DEFECT_TX   0x800000   /* Set the remote defect
                                                          indicator in outgoing
                                                          CCMs for this
                                                          endpoint. */
#define BCM_OAM_ENDPOINT_CCM_COPYFIRSTTOCPU 0x1000000  /* Copy only the first
                                                          (next) received CCM to
                                                          CPU. This is only
                                                          valid for local
                                                          endpoints. */
#define BCM_OAM_ENDPOINT_PORT_STATE_UPDATE  0x2000000  /* Update port state. 
                                                          This is only valid for
                                                          local endpoints. */
#define BCM_OAM_ENDPOINT_INTERFACE_STATE_UPDATE 0x4000000  /* Update interface
                                                          state.  This is only
                                                          valid for local
                                                          endpoints. */
#define BCM_OAM_ENDPOINT_PRI_TAG            0x8000000  /* Messages generated
                                                          from this endpoint
                                                          should include a Pri
                                                          Tag. */
#define BCM_OAM_ENDPOINT_REMOTE_EVENT_DISABLE 0x10000000 /* Do not generate
                                                          events. */
#define BCM_OAM_ENDPOINT_REMOTE_DEFECT_AUTO_UPDATE 0x20000000 /* Auto update defect
                                                          state on timeout
                                                          event. */
#define BCM_OAM_ENDPOINT_MATCH_OUTER_AND_INNER_VLAN 0x40000000 /* Selection of MEP based
                                                          on S and C VLAN */
#define BCM_OAM_ENDPOINT_LMEP_PKT_FWD       0x80000000 /* Local endpoint CCMs
                                                          must be forwarded to a
                                                          remote unit for
                                                          processing. */
#define BCM_OAM_ENDPOINT_LMEP_PKT_FWD       0x80000000 /* Local endpoint CCMs
                                                          must be forwarded to a
                                                          remote unit for
                                                          processing. */
#define BCM_OAM_ENDPOINT_RDI_TX             BCM_OAM_ENDPOINT_REMOTE_DEFECT_TX /* Set the remote defect
                                                          indicator in outgoing
                                                          CCMs for this
                                                          endpoint. */
#define BCM_OAM_ENDPOINT_RDI_AUTO_UPDATE    BCM_OAM_ENDPOINT_REMOTE_DEFECT_AUTO_UPDATE /* Auto update defect
                                                          event. */
#define BCM_OAM_ENDPOINT2_RDI_FROM_RX_DISABLE 0x1        /* RDI bit on outgoing
                                                          packets may be taken
                                                          from RDI indication on
                                                          received packets. */
#define BCM_OAM_ENDPOINT2_RDI_FROM_LOC_DISABLE 0x2        /* RDI bit on outgoing
                                                          packets may be taken
                                                          from LOC indication of
                                                          peer endpoint. */
#define BCM_OAM_ENDPOINT2_RDI_ON_LOC        0x4        /* MEP RDI update LOC
                                                          enable - update local
                                                          MEP RDI in case of
                                                          LOC. */
#define BCM_OAM_ENDPOINT2_RDI_CLEAR_ON_LOC_CLEAR 0x8        /* MEP RDI update LOC
                                                          clean enable - update
                                                          local MEP RDI in case
                                                          of LOC clear (time-in)
                                                          event detected. */
#define BCM_OAM_ENDPOINT2_RDI_ON_RX_RDI     0x10       /* MEP RDI update RX
                                                          enable - Update local
                                                          MEP RDI by copying the
                                                          RDI indication from
                                                          the last valid CCM
                                                          packet received. */
#define BCM_OAM_ENDPOINT2_REMOTE_UPDATE_STATE_DISABLE 0x20       /* Disable updating RMEP
                                                          DB. */
#define BCM_OAM_ENDPOINT2_RX_REMOTE_DEFECT_AUTO_UPDATE 0x40       /* Auto update defect
                                                          state on timeout event
                                                          for RX packets */
#define BCM_OAM_ENDPOINT2_RX_REMOTE_EVENT_DISABLE 0x80       /* Do not generate events
                                                          for RX packets. */

/* OAM loss measurment flags */
#define BCM_OAM_LM_PCP          0x0001     /* Use different counters for
                                              different vlan tag packet priority
                                              codes */

/* OAM opcode flags */
#define BCM_OAM_OPCODE_CCM_IN_HW            0x0001     /* Process CCMs in
                                                          Hardware */
#define BCM_OAM_OPCODE_CCM_COPY_TO_CPU      0x0002     /* Copy CCMs to CPU */
#define BCM_OAM_OPCODE_CCM_DROP             0x0004     /* Drop CCMs */
#define BCM_OAM_OPCODE_LBM_IN_HW            0x0008     /* Process Loopback
                                                          Messages in Hardware */
#define BCM_OAM_OPCODE_LBM_UC_COPY_TO_CPU   0x0010     /* Copy Unicast Loopback
                                                          Messages to CPU */
#define BCM_OAM_OPCODE_LBM_UC_DROP          0x0020     /* Drop Unicast Loopback
                                                          Messages */
#define BCM_OAM_OPCODE_LBM_MC_COPY_TO_CPU   0x0040     /* Copy Multicast
                                                          Loopback Messages to
                                                          CPU */
#define BCM_OAM_OPCODE_LBM_MC_DROP          0x0080     /* Drop Multicast
                                                          Loopback Messages */
#define BCM_OAM_OPCODE_LBR_COPY_TO_CPU      0x0100     /* Copy Loopback Reply to
                                                          CPU */
#define BCM_OAM_OPCODE_LBR_DROP             0x0200     /* Drop Loopback Reply */
#define BCM_OAM_OPCODE_LTM_COPY_TO_CPU      0x0400     /* Copy Linktrace
                                                          Messages to CPU */
#define BCM_OAM_OPCODE_LTM_DROP             0x0800     /* Drop Linktrace
                                                          Messages */
#define BCM_OAM_OPCODE_LTR_COPY_TO_CPU      0x1000     /* Copy Linktrace Reply
                                                          to CPU */
#define BCM_OAM_OPCODE_LTR_DROP             0x2000     /* Drop Linktrace Reply */
#define BCM_OAM_OPCODE_LMEP_PKT_FWD         0x4000     /* Forward CCMs to remote
                                                          device */
#define BCM_OAM_OPCODE_OTHER_COPY_TO_CPU    0x8000     /* Copy other OAM opcode
                                                          to CPU */
#define BCM_OAM_OPCODE_OTHER_DROP           0x10000    /* Drop other OAM opcode
                                                          to CPU */

/* OAM endpoint fault flags */
#define BCM_OAM_ENDPOINT_FAULT_CCM_TIMEOUT  0x01       /* Indicates a CCM
                                                          timeout.  This is only
                                                          valid for remote
                                                          endpoints and is
                                                          read-only. */
#define BCM_OAM_ENDPOINT_FAULT_REMOTE       0x02       /* Indicates that a
                                                          remote defect was
                                                          indicated in the last
                                                          CCM received from this
                                                          endpoint.  This is
                                                          only valid for remote
                                                          endpoints and is
                                                          read-only. */
#define BCM_OAM_ENDPOINT_FAULT_PORT_DOWN    0x04       /* Indicates that the
                                                          port on which the
                                                          endpoint resides is
                                                          down.  This is valid
                                                          for both local and
                                                          remote endpoints but
                                                          is read-only for
                                                          remote endpoints. */
#define BCM_OAM_ENDPOINT_FAULT_INTERFACE_DOWN 0x08       /* Indicates that the
                                                          interface on which teh
                                                          endpoint resides is
                                                          down.  This is valid
                                                          for both local and
                                                          remote endpoints but
                                                          is read-only for
                                                          remote endpoints. */

/* Constants for CCM periods defined by 802.1ag */
#define BCM_OAM_ENDPOINT_CCM_PERIOD_DISABLED 0          
#define BCM_OAM_ENDPOINT_CCM_PERIOD_3MS     3          
#define BCM_OAM_ENDPOINT_CCM_PERIOD_10MS    10         
#define BCM_OAM_ENDPOINT_CCM_PERIOD_100MS   100        
#define BCM_OAM_ENDPOINT_CCM_PERIOD_1S      1000       
#define BCM_OAM_ENDPOINT_CCM_PERIOD_10S     10000      
#define BCM_OAM_ENDPOINT_CCM_PERIOD_1M      60000      
#define BCM_OAM_ENDPOINT_CCM_PERIOD_10M     600000     

/* OAM loss flags */
#define BCM_OAM_LOSS_TX_ENABLE              0x0001     /* Enable Loss Packet
                                                          Transmission */
#define BCM_OAM_LOSS_SINGLE_ENDED           0x0002     /* PDU used for ETH-LM
                                                          information is LMM/R */
#define BCM_OAM_LOSS_FIRST_RX_COPY_TO_CPU   0x0004     /* Copy First received
                                                          Loss Measurement
                                                          Packet to CPU */
#define BCM_OAM_LOSS_ALL_RX_COPY_TO_CPU     0x0008     /* Copy all received Loss
                                                          Measurement Packet to
                                                          CPU */
#define BCM_OAM_LOSS_WITH_ID                0x0010     /* Use the specified loss
                                                          id */
#define BCM_OAM_LOSS_PRI_INTERNAL           0x0020     /* Selects counting based
                                                          on internal COS rather
                                                          than packet priority */
#define BCM_OAM_LOSS_DP_INTERNAL            0x0040     /* Selects counting based
                                                          on internal DP rather
                                                          than packet CFI */
#define BCM_OAM_LOSS_COUNT_POST_TRAFFIC_CONDITIONING 0x0080     /* Specifies that OEM
                                                          loss measuements are
                                                          taken on the wire side
                                                          (pre traffic
                                                          conditioning) or on
                                                          the switching side
                                                          (post traffic
                                                          conditioning) of a
                                                          forwarding function */
#define BCM_OAM_LOSS_COUNT_GREEN_AND_YELLOW 0x0100     /* Specifies whether the
                                                          OEM loss measurements
                                                          includes green only
                                                          frames or green and
                                                          yellow frames */
#define BCM_OAM_LOSS_COUNT_CPU_RX_PKT       0x0200     /* Specifies that RX LM
                                                          counter needs to be
                                                          updated for packet
                                                          received from CPU */
#define BCM_OAM_LOSS_COUNT_CPU_TX_PKT       0x0400     /* Specifies that TX LM
                                                          counter needs to be
                                                          updated for packet
                                                          received from CPU */
#define BCM_OAM_LOSS_STATISTICS_EXTENDED    0x800      /* Specifies that
                                                          extended statistics
                                                          are to be maintained */
#define BCM_OAM_LOSS_UPDATE                 0x1000     /* Update LM settings for
                                                          given endpoint (leaves
                                                          statistics unchanged). */
#define BCM_OAM_LOSS_SLM                    0x2000     /* Transmit SLM/Rs (as
                                                          opposed to LMM/Rs). */

/* OAM delay flags */
#define BCM_OAM_DELAY_TX_ENABLE             0x0001     /* Enable Delay Packet
                                                          Transmission */
#define BCM_OAM_DELAY_ONE_WAY               0x0002     /* One Way Mode */
#define BCM_OAM_DELAY_FIRST_RX_COPY_TO_CPU  0x0004     /* Copy First received
                                                          Delay Measurement
                                                          Packet to CPU */
#define BCM_OAM_DELAY_ALL_RX_COPY_TO_CPU    0x0008     /* Copy all received
                                                          Delay Measurement
                                                          Packet to CPU */
#define BCM_OAM_DELAY_WITH_ID               0x0010     /* Use the specified
                                                          delay id */
#define BCM_OAM_DELAY_UPDATE                0x20       /* Update DM settings for
                                                          given endpoint (leaves
                                                          statistics unchanged). */

/* OAM loopback flags */
#define BCM_OAM_LOOPBACK_UPDATE 0x1        /* Update Loopback settings (leaves
                                              statistics unchanged). */

/* OAM PSC flags */
#define BCM_OAM_PSC_TX_BURST                0x0001     /* Trigger PSC Burst
                                                          Transmission */
#define BCM_OAM_PSC_TX_ENABLE               0x0002     /* Enable PSC slow-rate
                                                          Transmission */
#define BCM_OAM_PSC_REVERTIVE               0x0004     /* Enable Revertive mode */
#define BCM_OAM_PSC_FIRST_RX_COPY_TO_CPU    0x0008     /* Copy First received
                                                          PSC message to CPU */
#define BCM_OAM_PSC_ALL_RX_COPY_TO_CPU      0x0010     /* Copy all received PSC
                                                          message to CPU */

/* OAM PW Status flags */
#define BCM_OAM_PW_STATUS_TX_BURST          0x0001     /* Trigger PW Status
                                                          Burst Transmission */
#define BCM_OAM_PW_STATUS_TX_ENABLE         0x0002     /* Enable PW Status
                                                          Packet Transmission */
#define BCM_OAM_PW_STATUS_FIRST_RX_COPY_TO_CPU 0x0004     /* Copy First received PW
                                                          Status message to CPU */
#define BCM_OAM_PW_STATUS_ALL_RX_COPY_TO_CPU 0x0008     /* Copy all received PW
                                                          Status message to CPU */

/* OAM event types */
typedef enum bcm_oam_endpoint_type_e {
    bcmOAMEndpointTypeEthernet = 0,     /* Ethernet endpoint */
    bcmOAMEndpointTypeMPLSPerformance = 1, /* MPLS performance monitoring endpoint */
    bcmOAMEndpointTypePSC = 2,          /* Protection coordination state
                                           protocol endpoint */
    bcmOAMEndpointTypeBHHMPLS = 3,      /* BHH for MPLS-TP */
    bcmOAMEndpointTypeBHHMPLSVccv = 4,  /* BHH for MPLS-TP Psuedowire Virtual
                                           Circuit Connectivity Verification */
    bcmOAMEndpointTypeBHHPwe = 5,       /* BHH for PWE */
    bcmOAMEndpointTypePwStatus = 6,     /* Protection coordination state
                                           protocol endpoint */
    bcmOAMEndpointTypeCount = 7 
} bcm_oam_endpoint_type_t;

/* VCCV Control Channel Type */
typedef enum bcm_oam_vccv_type_e {
    bcmOamBhhVccvChannelAch = 0,    /* Channel ACH */
    bcmOamBhhVccvRouterAlert = 1,   /* Router Alert */
    bcmOamBhhVccvTtl = 2,           /* TTL */
    bcmOamBhhVccvGal13 = 3          /* GAL 13 */
} bcm_oam_vccv_type_t;

/* OAM event types */
typedef enum bcm_oam_event_type_e {
    bcmOAMEventEndpointPortDown = 0, 
    bcmOAMEventEndpointPortUp = 1, 
    bcmOAMEventEndpointInterfaceDown = 2, 
    bcmOAMEventEndpointInterfaceUp = 3, 
    bcmOAMEventEndpointInterfaceTestingToUp = 4, 
    bcmOAMEventEndpointInterfaceUnknownToUp = 5, 
    bcmOAMEventEndpointInterfaceDormantToUp = 6, 
    bcmOAMEventEndpointInterfaceNotPresentToUp = 7, 
    bcmOAMEventEndpointInterfaceLLDownToUp = 8, 
    bcmOAMEventEndpointInterfaceTesting = 9, 
    bcmOAMEventEndpointInterfaceUnkonwn = 10, 
    bcmOAMEventEndpointInterfaceDormant = 11, 
    bcmOAMEventEndpointInterfaceNotPresent = 12, 
    bcmOAMEventEndpointInterfaceLLDown = 13, 
    bcmOAMEventGroupCCMxcon = 14, 
    bcmOAMEventGroupCCMError = 15, 
    bcmOAMEventGroupRemote = 16, 
    bcmOAMEventGroupCCMTimeout = 17, 
    bcmOAMEventBHHLBTimeout = 18, 
    bcmOAMEventBHHLBDiscoveryUpdate = 19, 
    bcmOAMEventBHHCCMTimeout = 20, 
    bcmOAMEventBHHCCMState = 21, 
    bcmOAMEventEndpointCCMTimeout = 22, 
    bcmOAMEventEndpointCCMTimein = 23, 
    bcmOAMEventEndpointCCMTimeoutEarly = 24, 
    bcmOAMEventEndpointRemote = 25, 
    bcmOAMEventEndpointRemoteUp = 26, 
    bcmOAMEventCount = 27 
} bcm_oam_event_type_t;

/* OAM Group Fault Alarm Defects and Priorities */
typedef enum bcm_oam_group_fault_alarm_defect_priority_e {
    bcmOAMGroupFaultAlarmPriorityDefectsAll = 0, /* Generate fault alarm for all defects */
    bcmOAMGroupFaultAlarmPriorityDefectRDICCM = 1, /* Generate fault alarm when CCM
                                           received by this Maintenance Endpoint
                                           from some remote Maintenance Endpoint
                                           contained RDI bit */
    bcmOAMGroupFaultAlarmPriorityDefectMACStatus = 2, /* Generate fault alarm when the last
                                           CCM received by this MEP from some
                                           remote MEP indicated that the
                                           Transmitting Maintenance Endpoint's
                                           associated MAC is reporting an error
                                           status */
    bcmOAMGroupFaultAlarmPriorityDefectRemoteCCM = 3, /* Generate fault alarm when Maintenance
                                           Endpoint is not receiving CCMs from
                                           some other Maintenance Endpoint in
                                           its configured list */
    bcmOAMGroupFaultAlarmPriorityDefectErrorCCM = 4, /* Generate fault alarm when Maintenance
                                           Endpoint is receiving Invalid CCMs */
    bcmOAMGroupFaultAlarmPriorityDefectXconCCM = 5, /* Generate fault alarm when Maintenance
                                           Endpoint is receiving CCMs that could
                                           be from some other MA */
    bcmOAMGroupFaultAlarmPriorityDefectsNone = 6, /* No Defects are reported */
    bcmOAMGroupFaultAlarmPriorityCount = 7 
} bcm_oam_group_fault_alarm_defect_priority_t;

/* OAM Timestamp Formats */
typedef enum bcm_oam_timestamp_format_e {
    bcmOAMTimestampFormatNTP = 0,       /* Network Time Protocol version 4
                                           64-bit timestamp format [RFC5905] */
    bcmOAMTimestampFormatIEEE1588v1 = 1 /* Low-order 64 bits of the IEEE
                                           1588-2008 (1588v2) Precision Time
                                           Protocol timestamp format [IEEE1588] */
} bcm_oam_timestamp_format_t;

/* OAM action types */
typedef enum bcm_oam_action_type_e {
    bcmOAMActionCountEnable = 0,        /* Enable counting. */
    bcmOAMActionMeterEnable = 1,        /* Enable metering. */
    bcmOAMActionDrop = 2,               /* Drop the packet. */
    bcmOAMActionCopyToCpu = 3,          /* Send the packet to CPU. */
    bcmOAMActionFwdAsData = 4,          /* Forward the packet as normal data
                                           packet. */
    bcmOAMActionFwd = 5,                /* Forward the packet to a specified
                                           destination. */
    bcmOAMActionUcDrop = 6,             /* Drop UC OAM packet. */
    bcmOAMActionUcCopyToCpu = 7,        /* Send UC OAM packet to CPU. */
    bcmOAMActionUcFwdAsData = 8,        /* Forward UC OAM packet as normal data
                                           packet. */
    bcmOAMActionUcFwd = 9,              /* Forward UC OAM packet to a specified
                                           destination. */
    bcmOAMActionMcDrop = 10,            /* Drop MC OAM packet. */
    bcmOAMActionMcCopyToCpu = 11,       /* Send MC OAM packet to CPU. */
    bcmOAMActionMcFwdAsData = 12,       /* Forward MC OAM packet as normal data
                                           packet. */
    bcmOAMActionMcFwd = 13,             /* Forward MC OAM packet to a specified
                                           destination. */
    bcmOAMActionLowMdlDrop = 14,        /* Drop low MDL packet. */
    bcmOAMActionLowMdlCopyToCpu = 15,   /* copy low MDL packets to CPU. */
    bcmOAMActionLowMdlFwdAsData = 16,   /* Forward low MDL packets as normal
                                           data packets. */
    bcmOAMActionLowMdlFwd = 17,         /* Forward low MDL packets to a
                                           specified destination. */
    bcmOAMActionMyStationMissCopyToCpu = 18, /* Forward MY_STATION_MISS packets to
                                           CPU. */
    bcmOAMActionMyStationMissDrop = 19, /* DROP MY_STATION_MISS packets. */
    bcmOAMActionMyStationMissFwdAsData = 20, /* Forward MY_STATION_MISS packets as
                                           normal data packets. */
    bcmOAMActionMyStationMissFwd = 21,  /* Forward MY_STATION_MISS packets to a
                                           specified destination. */
    bcmOAMActionProcessInHw = 22,       /* Process in internal OAM/CCM engine. */
    bcmOAMActionLowMdlCcmFwdAsRegularCcm = 23, /* Use same action as that of normal
                                           CCM. */
    bcmOAMActionSLMEnable = 24,         /* Count SLM packets, disable of data
                                           packets counting. */
    bcmOAMActionCount = 25              /* Always Last. Not a usable value. */
} bcm_oam_action_type_t;

/* OAM Control types */
typedef enum bcm_oam_control_type_e {
    bcmOamControlFlexibleDropPort = 0,  /* Flexible drop control for Ingress
                                           port-domain OAM */
    bcmOamControlFlexibleDropCVlan = 1, /* Flexible drop control for Ingress
                                           C-VLAN domain OAM */
    bcmOamControlFlexibleDropSVlan = 2, /* Flexible drop control for Ingress
                                           S-VLAN domain OAM */
    bcmOamControlFlexibleDropCPlusSVlan = 3, /* Flexible drop control for Ingress
                                           C+S-VLAN domain OAM */
    bcmOamControlFlexibleDropVP = 4,    /* Flexible drop control for Ingress VP
                                           based(PBB-TE) OAM domain */
    bcmOamControlFlexibleDropEgressPort = 5, /* Flexible drop control for egress
                                           port-domain OAM */
    bcmOamControlFlexibleDropEgressCVlan = 6, /* Flexible drop control for egress
                                           C-VLAN domain OAM */
    bcmOamControlFlexibleDropEgressSVlan = 7, /* Flexible drop control for egress
                                           S-VLAN domain OAM */
    bcmOamControlFlexibleDropEgressCPlusSVlan = 8, /* Flexible drop control for egress
                                           C+S-VLAN domain OAM */
    bcmOamControlFlexibleDropEgressVP = 9, /* Flexible drop control for egress VP
                                           based(PBB-TE)OAM domain */
    bcmOamControlFlexibleDropPasssiveSap = 10, /* Flexible drop control for S-VLAN
                                           domain Passive OAM filtering */
    bcmOamControlFlexibleDropEgressPasssiveSap = 11, /* Flexible drop control for egress
                                           S-VLAN domain Passive OAM filtering */
    bcmOamControlReportMode = 12,       /* Accepts of one of the
                                           bcm_oam_report_mode_type_t as the
                                           arg. */
    bcmOAMControlCount = 13             /* Always Last. Not a usable value. */
} bcm_oam_control_type_t;

/* OAM event callback flags */
#define BCM_OAM_EVENT_FLAGS_MULTIPLE    0x01       /* Indicates that more than
                                                      one event of the given
                                                      type has occurred. */

typedef struct bcm_oam_event_types_s {
    SHR_BITDCL w[_SHR_BITDCLSIZE(bcmOAMEventCount)]; 
} bcm_oam_event_types_t;

#define BCM_OAM_EVENT_TYPE_SET(_event_types, _event_type)  SHR_BITSET(((_event_types).w), (_event_type)) 

#define BCM_OAM_EVENT_TYPE_GET(_event_types, _event_type)  SHR_BITGET(((_event_types).w), (_event_type)) 

#define BCM_OAM_EVENT_TYPE_CLEAR(_event_types, _event_type)  SHR_BITCLR(((_event_types).w), (_event_type)) 

#define BCM_OAM_EVENT_TYPE_SET_ALL(_event_types)  SHR_BITSET_RANGE(((_event_types).w), 0, bcmOAMEventCount) 

#define BCM_OAM_EVENT_TYPE_CLEAR_ALL(_event_types)  SHR_BITCLR_RANGE(((_event_types).w), 0, bcmOAMEventCount) 

/* OAM Port Status TLV values */
#define BCM_OAM_PORT_TLV_BLOCKED    0x1        /* Port is blocked */
#define BCM_OAM_PORT_TLV_UP         0x2        /* Port is ready to pass data */

/* OAM Interface Status TLV Values */
#define BCM_OAM_INTERFACE_TLV_UP            0x1        /* Interface is ready to
                                                          pass packets */
#define BCM_OAM_INTERFACE_TLV_DOWN          0x2        /* Interface is down */
#define BCM_OAM_INTERFACE_TLV_TESTING       0x3        /* Interface is in some
                                                          test mode */
#define BCM_OAM_INTERFACE_TLV_UNKNOWN       0x4        /* Interface is in an
                                                          unknown state */
#define BCM_OAM_INTERFACE_TLV_DORMANT       0x5        /* Interface is in a
                                                          pending state */
#define BCM_OAM_INTERFACE_TLV_NOTPRESENT    0x6        /* Interface is down
                                                          because of hardware
                                                          component */
#define BCM_OAM_INTERFACE_TLV_LLDOWN        0x7        /* Interface is down due
                                                          to state of
                                                          lower-layer interfaces */

/* OAM group ID type */
typedef int bcm_oam_group_t;

/* 
 * OAM group object.  This is equivalent to an 802.1ag Maintenance
 * Association (MA).
 */
typedef struct bcm_oam_group_info_s {
    uint32 flags; 
    bcm_oam_group_t id; 
    uint8 name[BCM_OAM_GROUP_NAME_LENGTH]; /* This is equivalent to the Maintenance
                                           Association ID (MAID) in 802.1ag. 
                                           Note that this is not a
                                           null-terminated string but an array
                                           of bytes.  To avoid memory
                                           corruption, do not use string copy to
                                           populate this field. */
    uint32 faults;                      /* Fault flags */
    uint32 persistent_faults;           /* Persistent fault flags */
    uint32 clear_persistent_faults;     /* Persistent fault flags to clear on a
                                           'get' */
    bcm_oam_group_fault_alarm_defect_priority_t lowest_alarm_priority; /* Generate fault alarm for this
                                           maintenance endpoint when defects of
                                           greater than or equal to this
                                           priority value are detected on this
                                           maintenance endpoint */
} bcm_oam_group_info_t;

/* OAM endpoint ID type */
typedef int bcm_oam_endpoint_t;

/* 
 * OAM endpoint object.  This is equivalent to an 802.1ag Maintenance
 * Endpoint (MEP).
 */
typedef struct bcm_oam_endpoint_info_s {
    uint32 flags; 
    uint32 flags2; 
    uint32 opcode_flags;                /* OAM opcode flags */
    uint32 lm_flags;                    /* OAM loss measurment flags */
    bcm_oam_endpoint_t id; 
    bcm_oam_endpoint_type_t type; 
    bcm_oam_group_t group;              /* The ID of the group to which this
                                           endpoint belongs */
    uint16 name;                        /* A unique identifier of the endpoint
                                           within the group.  This is equivalent
                                           to the MEPID in 802.1ag. */
    bcm_oam_endpoint_t local_id;        /* Used by remote endpoints only. */
    int level;                          /* This is equivalent to the Maintenance
                                           Domain Level (MDL) in 802.1ag. */
    int ccm_period;                     /* For local endpoints, this is the CCM
                                           transmission period in ms.  For
                                           remote endpoints, this is the period
                                           on which CCM timeout is based. */
    bcm_vlan_t vlan;                    /* The VLAN associated with this
                                           endpoint */
    bcm_vlan_t inner_vlan;              /* Configure with CVID for two-tag
                                           operation or set to 0 for one-tag */
    bcm_gport_t gport;                  /* The gport associated with this
                                           endpoint */
    bcm_gport_t tx_gport;               /* TX gport associated with this
                                           endpoint */
    int trunk_index;                    /* The trunk port index for this
                                           endpoint */
    bcm_if_t intf_id;                   /* Interface Identifier */
    bcm_mpls_label_t mpls_label;        /* The MPLS label associated with
                                           packets received from the Peer
                                           Endpoint */
    bcm_mpls_egress_label_t egress_label; /* The MPLS outgoing label information
                                           for the Local Endpoint */
    bcm_mac_t dst_mac_address;          /* The destination MAC address
                                           associated with this endpoint */
    bcm_mac_t src_mac_address;          /* The source MAC address associated
                                           with this endpoint */
    uint8 pkt_pri;                      /* Egress marking for outgoing CCMs */
    uint8 inner_pkt_pri;                /* Packet priority of inner encpsulated
                                           packet */
    uint16 inner_tpid;                  /* Tpid of inner encpsulated packet */
    uint16 outer_tpid;                  /* Tpid of outer encpsulated packet */
    bcm_cos_t int_pri;                  /* Egress queuing for outgoing CCMs */
    uint8 cpu_qid;                      /* CPU queue for CCMs */
    uint8 pri_map[BCM_OAM_INTPRI_MAX];  /* Priority mapping for LM counter table */
    uint32 faults;                      /* Fault flags */
    uint32 persistent_faults;           /* Persistent fault flags */
    uint32 clear_persistent_faults;     /* Persistent fault flags to clear on a
                                           'get' */
    int ing_map;                        /* Ingress QoS map profile */
    int egr_map;                        /* Egress QoS map profile */
    uint8 ms_pw_ttl;                    /* TTL used for multi-segment pseudowire */
    uint8 port_state;                   /* Endpoint port status */
    uint8 interface_state;              /* Endpoint interface status */
    bcm_oam_vccv_type_t vccv_type;      /* VCCV pseudowire type */
    bcm_vpn_t vpn;                      /* VPN id */
    int lm_counter_base_id;             /* Counter id assosiated to the mep */
    uint8 loc_clear_threshold;          /* Number of packets required to reset
                                           the Loss-of-Continuity status per end
                                           point */
    bcm_oam_timestamp_format_t timestamp_format; /* DM time stamp format -
                                           NTP/IEEE1588(PTP) */
    uint16 subport_tpid;                /* Tpid of subport Vlan in case of
                                           triple vlan encapsulation */
    bcm_gport_t remote_gport;           /* Local endpoint CCMs are forwarded to
                                           this remote unit for processing. */
    int sampling_ratio;                 /* Percentage of packets sampled to the
                                           CPU. */
} bcm_oam_endpoint_info_t;

/* OAM loss object. */
typedef struct bcm_oam_loss_s {
    uint32 flags; 
    int loss_id;                    /* Oam Loss ID. */
    bcm_oam_endpoint_t id;          /* Endpoint ID of Local MEP. */
    bcm_oam_endpoint_t remote_id;   /* Endpoint ID of Remote MEP. */
    int period;                     /* Frequency of loss tx period in
                                       milliseconds. */
    int loss_threshold;             /* Loss ratio (expressed in 100th of
                                       percent) which if exceeded will declare
                                       the period degraded with a Loss
                                       Measurement packet exception.  A value of
                                       -1 for Loss Measurement exception on all
                                       received packets. */
    int loss_nearend;               /* Nearend loss (expressed in 100th of
                                       percent). A value os -1 if not available. */
    int loss_farend;                /* Farend loss (expressed in 100th of
                                       percent). A value os -1 if not available. */
    int loss_nearend_max;           /* Nearend maximal loss. A value os -1 if
                                       not available. Reset when read. */
    int loss_nearend_acc;           /* Nearend accumulated loss. A value os -1
                                       if not available. Reset when read. */
    int loss_farend_max;            /* Farend maximal loss. A value os -1 if not
                                       available. Reset when read. */
    int loss_farend_acc;            /* Farend accumulated loss. A value os -1 if
                                       not available. Reset when read. */
    uint32 tx_nearend;              /* Last local transmit frame count recorded
                                       at time of LMR */
    uint32 rx_nearend;              /* Last local receive frame count recorded
                                       at time of LMR */
    uint32 tx_farend;               /* Last peer transmit frame count recorded
                                       at time of LMR */
    uint32 rx_farend;               /* Last peer receive frame count recorded at
                                       time of LMR */
    uint8 pkt_pri_bitmap;           /* Bitmap of packet priorities which should
                                       be counted for LM.  A value of zero is
                                       the equivalent of all ones. */
    uint8 pkt_dp_bitmap;            /* Bitmap of packet color or DP which should
                                       be counted for LM.  A value of zero is
                                       the equivalent of all ones. */
    uint8 pkt_pri;                  /* Egress marking for outgoing LM messages */
    bcm_cos_t int_pri;              /* Egress queuing for outgoing LM messages */
    bcm_gport_t gport;              /* For CEP only; may return a diverged LP */
    uint32 rx_oam_packets;          /* Count of OAM packets received by this
                                       endpoint */
    uint32 tx_oam_packets;          /* Count of OAM packets transmitted by this
                                       endpoint */
    bcm_mac_t peer_da_mac_address;  /* MAC DA in LMM injection in case peer
                                       endpoint is not configured in remote_id */
} bcm_oam_loss_t;

/* OAM delay object. */
typedef struct bcm_oam_delay_s {
    uint32 flags; 
    int delay_id;                       /* Oam Delay ID. */
    bcm_oam_endpoint_t id;              /* Endpoint ID of Local MEP. */
    bcm_oam_endpoint_t remote_id;       /* Endpoint ID of Remote MEP. */
    int period;                         /* Frequency of delay tx period in
                                           milliseconds. Zero indicates single
                                           shot, -1 indicates disabling delay
                                           packets transmission */
    bcm_time_spec_t delay_min;          /* Minimal recorded delay to remote
                                           peer. Reset when read. */
    bcm_time_spec_t delay_max;          /* Maximul recorded delay to remote
                                           peer. Reset when read. */
    bcm_time_spec_t delay;              /* Last recorded delay to remote peer. */
    bcm_time_spec_t txf;                /* Time of transmit in forward
                                           direction. */
    bcm_time_spec_t rxf;                /* Time of reception in forward
                                           direction. */
    bcm_time_spec_t txb;                /* Time of transmit in backward
                                           direction. */
    bcm_time_spec_t rxb;                /* Time of reception in backward
                                           direction. */
    uint8 pkt_pri;                      /* Egress marking for outgoing DM
                                           messages */
    bcm_cos_t int_pri;                  /* Egress queuing for outgoing DM
                                           messages */
    uint32 rx_oam_packets;              /* Count of OAM packets received by this
                                           endpoint */
    uint32 tx_oam_packets;              /* Count of OAM packets transmitted by
                                           this endpoint */
    bcm_oam_timestamp_format_t timestamp_format; /* OAM timestamp type */
    bcm_mac_t peer_da_mac_address;      /* MAC DA in DMM injection in case peer
                                           endpoint is not configured in
                                           remote_id */
} bcm_oam_delay_t;

/* BHH Flags */
#define BCM_OAM_BHH_INC_REQUESTING_MEP_TLV  0x00000001 /* Include requesting MEP
                                                          ID TLV in message */
#define BCM_OAM_BHH_SET_TTL                 0x00000002 /* Set TLL field in LBM */
#define BCM_OAM_BHH_LBM_INGRESS_DISCOVERY_MEP_TLV 0x00000010 /* Use ingress discovery
                                                          MEP ID TLV in LBM */
#define BCM_OAM_BHH_LBM_EGRESS_DISCOVERY_MEP_TLV 0x00000020 /* Use egress discovery
                                                          MEP ID TLV in LBM */
#define BCM_OAM_BHH_LBM_ICC_MEP_TLV         0x00000040 /* Use ICC based MEP ID
                                                          TLV in LBM */
#define BCM_OAM_BHH_LBM_ICC_MIP_TLV         0x00000080 /* Use ICC based MIP ID
                                                          TLV in LBM */
#define BCM_OAM_BHH_LBR_ICC_MEP_TLV         0x00000100 /* Use ICC based MEP ID
                                                          TLV in LBR */
#define BCM_OAM_BHH_LBR_ICC_MIP_TLV         0x00000200 /* Use ICC based MIP ID
                                                          TLV in LBR */

/* OAM loopback discovery record. */
typedef struct bcm_oam_loopback_discovery_record_s {
    uint32 flags; 
    bcm_oam_endpoint_t id;  /* Endpoint ID of discovered MEP/MIP. */
    int ttl;                /* TTL value to used to discover MEP/MIP. */
} bcm_oam_loopback_discovery_record_t;

/* OAM loopback object. */
typedef struct bcm_oam_loopback_s {
    uint32 flags; 
    bcm_oam_endpoint_t id;              /* Endpoint ID of Local MEP. */
    bcm_oam_endpoint_t remote_id;       /* Endpoint ID of Remote MEP. */
    int period;                         /* Frequency of loopback tx period in
                                           milliseconds. Zero indicates single
                                           shot, -1 indicates disabling loopback
                                           packets transmission */
    int ttl;                            /* TTL value to use in loopback message. */
    bcm_oam_loopback_discovery_record_t discovered_me; /* Last ME discovered using loopback
                                           discovery. */
    uint32 rx_count;                    /* Count of received packets since
                                           loopback add or last get. */
    uint32 tx_count;                    /* Count of transmitted packets since
                                           loopback add or last get. */
    uint32 drop_count;                  /* Count of dropped packets since
                                           loopback add or last get. */
    uint32 unexpected_response;         /* Count of unexpected response packets
                                           since loopback add or last get. */
    uint32 out_of_sequence;             /* Count of out of sequence packets
                                           since loopback add or last get. */
    uint32 local_mipid_missmatch;       /* Count of local mipid missmatch
                                           packets since loopback add or last
                                           get. */
    uint32 remote_mipid_missmatch;      /* Count of remote mipid missmatch
                                           packets since loopback add or last
                                           get. */
    uint32 invalid_target_mep_tlv;      /* Count of invalid target mep TLV
                                           packets since loopback add or last
                                           get. */
    uint32 invalid_mep_tlv_subtype;     /* Count of invalid mep TLV subtype
                                           packets since loopback add or last
                                           get. */
    uint32 invalid_tlv_offset;          /* Count of invalid TLV offset packets
                                           since loopback add or last get. */
    bcm_mac_t peer_da_mac_address;      /* MAC DA in loopback injection in case
                                           remote_id is not specified */
} bcm_oam_loopback_t;

/* OAM PSC object. */
typedef struct bcm_oam_psc_s {
    uint32 flags; 
    bcm_oam_endpoint_t id;          /* Endpoint ID of Local MEP. */
    bcm_oam_endpoint_t remote_id;   /* Endpoint ID of Remote MEP. */
    int version;                    /* Version number of message. */
    int request;                    /* Request field. */
    int pt;                         /* Protection type. */
    uint8 fpath;                    /* The path reporting failure. */
    uint8 path;                     /* The currently active path. */
    int burst_rate;                 /* Burst interval in ms (suggested 3 ms). */
    int slow_rate;                  /* Slow or normal interval in ms (suggested
                                       5000 ms). */
    int tlv_length;                 /* Length of optional TLV. */
    uint8 tlv;                      /* Optional TLV(s) of tlv_length. */
} bcm_oam_psc_t;

/* OAM PW Status object. */
typedef struct bcm_oam_pw_status_s {
    uint32 flags; 
    bcm_oam_endpoint_t id;          /* Endpoint ID of Local MEP. */
    bcm_oam_endpoint_t remote_id;   /* Endpoint ID of Remote MEP. */
    int burst_rate;                 /* Burst interval in ms. */
    int refresh;                    /* Refresh timer is copied into message and
                                       sets the local transmit interval in
                                       seconds. */
    int ack;                        /* Copied into A field. */
    uint8 tlv_length;               /* Length of optional TLV. */
    uint8 tlv;                      /* Optional TLV(s) of tlv_length. */
} bcm_oam_pw_status_t;

typedef struct bcm_oam_endpoint_action_s {
    uint32 flags; 
    SHR_BITDCL opcode_bmp[_SHR_BITDCLSIZE(256)]; 
    SHR_BITDCL opcode_actions[_SHR_BITDCLSIZE(bcmOAMActionCount)]; 
    bcm_gport_t destination;            /* For remote handling. Can also be drop */
    bcm_gport_t rx_trap;                /* Return field for destination trap
                                           gport */
} bcm_oam_endpoint_action_t;

#define BCM_OAM_ACTION_SET(_action, _action_type)  SHR_BITSET(((_action).opcode_actions), (_action_type)) 

#define BCM_OAM_ACTION_GET(_action, _action_type)  SHR_BITGET(((_action).opcode_actions), (_action_type)) 

#define BCM_OAM_ACTION_CLEAR(_action, _action_type)  SHR_BITCLR(((_action).opcode_actions), (_action_type)) 

#define BCM_OAM_ACTION_CLEAR_ALL(_action)  SHR_BITCLR_RANGE(((_action).opcode_actions), 0, bcmOAMActionCount) 

#define BCM_OAM_OPCODE_SET(_action, _opcode)  SHR_BITSET(((_action).opcode_bmp), (_opcode)) 

#define BCM_OAM_OPCODE_GET(_action, _opcode)  SHR_BITGET(((_action).opcode_bmp), (_opcode)) 

#define BCM_OAM_OPCODE_CLEAR(_action, _opcode)  SHR_BITCLR(((_action).opcode_bmp), (_opcode)) 

#define BCM_OAM_OPCODE_CLEAR_ALL(_action)  SHR_BITCLR_RANGE(((_action).opcode_bmp), 0, 256) 

/* Callback function type for OAM group traversal */
typedef int (*bcm_oam_group_traverse_cb)(
    int unit, 
    bcm_oam_group_info_t *group_info, 
    void *user_data);

/* Callback function type for OAM endpoint traversal */
typedef int (*bcm_oam_endpoint_traverse_cb)(
    int unit, 
    bcm_oam_endpoint_info_t *endpoint_info, 
    void *user_data);

/* Callback function type for OAM event handling */
typedef int (*bcm_oam_event_cb)(
    int unit, 
    uint32 flags, 
    bcm_oam_event_type_t event_type, 
    bcm_oam_group_t group, 
    bcm_oam_endpoint_t endpoint, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the OAM subsystem */
extern int bcm_oam_init(
    int unit);

/* Shut down the OAM subsystem */
extern int bcm_oam_detach(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize an OAM group info structure */
extern void bcm_oam_group_info_t_init(
    bcm_oam_group_info_t *group_info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create or replace an OAM group object */
extern int bcm_oam_group_create(
    int unit, 
    bcm_oam_group_info_t *group_info);

/* Get an OAM group object */
extern int bcm_oam_group_get(
    int unit, 
    bcm_oam_group_t group, 
    bcm_oam_group_info_t *group_info);

/* 
 * Destroy an OAM group object.  All OAM endpoints associated with the
 * group will also be destroyed.
 */
extern int bcm_oam_group_destroy(
    int unit, 
    bcm_oam_group_t group);

/* 
 * Destroy all OAM group objects.  All OAM endpoints will also be
 * destroyed.
 */
extern int bcm_oam_group_destroy_all(
    int unit);

/* 
 * Traverse the entire set of OAM groups, calling a specified callback
 * for each one
 */
extern int bcm_oam_group_traverse(
    int unit, 
    bcm_oam_group_traverse_cb cb, 
    void *user_data);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize an OAM endpoint info structure */
extern void bcm_oam_endpoint_info_t_init(
    bcm_oam_endpoint_info_t *endpoint_info);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create or replace an OAM endpoint object */
extern int bcm_oam_endpoint_create(
    int unit, 
    bcm_oam_endpoint_info_t *endpoint_info);

/* Get an OAM endpoint object */
extern int bcm_oam_endpoint_get(
    int unit, 
    bcm_oam_endpoint_t endpoint, 
    bcm_oam_endpoint_info_t *endpoint_info);

/* Destroy an OAM endpoint object */
extern int bcm_oam_endpoint_destroy(
    int unit, 
    bcm_oam_endpoint_t endpoint);

/* Destroy all OAM endpoint objects associated with a given OAM group */
extern int bcm_oam_endpoint_destroy_all(
    int unit, 
    bcm_oam_group_t group);

/* 
 * Traverse the set of OAM endpoints associated with the specified group,
 * calling a specified callback for each one
 */
extern int bcm_oam_endpoint_traverse(
    int unit, 
    bcm_oam_group_t group, 
    bcm_oam_endpoint_traverse_cb cb, 
    void *user_data);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize an OAM loss structure */
extern void bcm_oam_loss_t_init(
    bcm_oam_loss_t *loss_ptr);

#ifndef BCM_HIDE_DISPATCHABLE

/* Add an OAM loss object */
extern int bcm_oam_loss_add(
    int unit, 
    bcm_oam_loss_t *loss_ptr);

/* Get an OAM loss object */
extern int bcm_oam_loss_get(
    int unit, 
    bcm_oam_loss_t *loss_ptr);

/* Delete an OAM loss object */
extern int bcm_oam_loss_delete(
    int unit, 
    bcm_oam_loss_t *loss_ptr);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize an OAM delay structure */
extern void bcm_oam_delay_t_init(
    bcm_oam_delay_t *delay_ptr);

#ifndef BCM_HIDE_DISPATCHABLE

/* Add an OAM delay object */
extern int bcm_oam_delay_add(
    int unit, 
    bcm_oam_delay_t *delay_ptr);

/* Get an OAM delay object */
extern int bcm_oam_delay_get(
    int unit, 
    bcm_oam_delay_t *delay_ptr);

/* Delete an OAM delay object */
extern int bcm_oam_delay_delete(
    int unit, 
    bcm_oam_delay_t *delay_ptr);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize an OAM PSC structure */
extern void bcm_oam_psc_t_init(
    bcm_oam_psc_t *psc_ptr);

#ifndef BCM_HIDE_DISPATCHABLE

/* Add an OAM PSC object */
extern int bcm_oam_psc_add(
    int unit, 
    bcm_oam_psc_t *psc_ptr);

/* Get an OAM PSC object */
extern int bcm_oam_psc_get(
    int unit, 
    bcm_oam_psc_t *psc_ptr);

/* Delete an OAM PSC object */
extern int bcm_oam_psc_delete(
    int unit, 
    bcm_oam_psc_t *psc_ptr);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize an OAM PW Status structure */
extern void bcm_oam_pw_status_t_init(
    bcm_oam_pw_status_t *pw_status_ptr);

#ifndef BCM_HIDE_DISPATCHABLE

/* Add an OAM PW Status object */
extern int bcm_oam_pw_status_add(
    int unit, 
    bcm_oam_pw_status_t *pw_status_ptr);

/* Get an OAM PW Status object */
extern int bcm_oam_pw_status_get(
    int unit, 
    bcm_oam_pw_status_t *pw_status_ptr);

/* Delete an OAM PW Status object */
extern int bcm_oam_pw_status_delete(
    int unit, 
    bcm_oam_pw_status_t *pw_status_ptr);

/* Register a callback for handling OAM events */
extern int bcm_oam_event_register(
    int unit, 
    bcm_oam_event_types_t event_types, 
    bcm_oam_event_cb cb, 
    void *user_data);

/* Unregister a callback for handling OAM events */
extern int bcm_oam_event_unregister(
    int unit, 
    bcm_oam_event_types_t event_types, 
    bcm_oam_event_cb cb);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize an OAM loopback structure */
extern void bcm_oam_loopback_t_init(
    bcm_oam_loopback_t *loopback_ptr);

#ifndef BCM_HIDE_DISPATCHABLE

/* Add an OAM loopback object */
extern int bcm_oam_loopback_add(
    int unit, 
    bcm_oam_loopback_t *loopback_ptr);

/* Get an OAM loopback object */
extern int bcm_oam_loopback_get(
    int unit, 
    bcm_oam_loopback_t *loopback_ptr);

/* Delete an OAM loopback object */
extern int bcm_oam_loopback_delete(
    int unit, 
    bcm_oam_loopback_t *loopback_ptr);

/* Set OAM endpoint opcode actions */
extern int bcm_oam_endpoint_action_set(
    int unit, 
    bcm_oam_endpoint_t id, 
    bcm_oam_endpoint_action_t *action);

/* Configure device-wide OAM controls */
extern int bcm_oam_control_set(
    int unit, 
    bcm_oam_control_type_t type, 
    uint64 arg);

/* Query device-wide OAM controls */
extern int bcm_oam_control_get(
    int unit, 
    bcm_oam_control_type_t type, 
    uint64 *arg);

/* Set Ethernet Y1731 opcode profile mapping. */
extern int bcm_oam_opcode_map_set(
    int unit, 
    int opcode, 
    int profile);

/* Get Ethernet Y1731 opcode profile mapping */
extern int bcm_oam_opcode_map_get(
    int unit, 
    int opcode, 
    int *profile);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * OAM report mode types. To be used as the arg parameter when calling
 * bcm_oam_control_set/get() with the type parameter set to
 * bcmOamControlReportMode.
 */
typedef enum bcm_oam_report_mode_type_e {
    bcmOamReportModeTypeNormal = 0,     /* Default report mode. */
    bcmOamReportModeTypeCompact = 1, 
    bcmOamReportModeTypeRaw = 2,        /* Report mode events will be disabled
                                           when report mode is set to raw. */
    bcmOamReportModeTypeCount = 3 
} bcm_oam_report_mode_type_t;

#endif /* __BCM_OAM_H__ */
