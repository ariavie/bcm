/*
 * $Id: 68085f8a1250b4b495bd7607bb2f34636e59cb32 $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_SUBPORT_H__
#define __BCM_SUBPORT_H__

#include <bcm/types.h>

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the BCM subport module. */
extern int bcm_subport_init(
    int unit);

/* Detach the BCM subport module. */
extern int bcm_subport_cleanup(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Subport group create flags. */
#define BCM_SUBPORT_GROUP_WITH_ID           0x00000001 /* Add using the
                                                          specified ID. */
#define BCM_SUBPORT_GROUP_TYPE_LINKPHY      0x00000002 /* Add a LinkPHY subport
                                                          group. */
#define BCM_SUBPORT_GROUP_TYPE_SUBPORT_TAG  0x00000004 /* Add a 'subport tag'
                                                          (triple vlan tag)
                                                          subport group. */
#define BCM_SUBPORT_GROUP_TYPE_SUBPORT_PKTTAG 0x00000008 /* Add a 'LLTAG tag'
                                                          (triple vlan tag)
                                                          subport group. */

/* Subport port property flags. */
#define BCM_SUBPORT_PROPERTY_PHB    0x00000001 /* Subport port PHB is valid.
                                                  Packet's 'internal priority'
                                                  and 'color' will be derived
                                                  from subport port lookup. */

#define BCM_SUBPORT_CONFIG_MAX_STREAMS  2          /* Max number of streams per
                                                      LinkPHY subport */

/* bcm_subport_group_config_t */
typedef struct bcm_subport_group_config_s {
    uint32 flags;       /* BCM_SUBPORT_GROUP_xxx. */
    bcm_gport_t port;   /* Physical GPORT Identifier */
    bcm_vlan_t vlan;    /* VLAN the group is attached to */
    int if_class;       /* Interface class ID */
    uint32 prop_flags;  /* Property flags for this subport group */
} bcm_subport_group_config_t;

/* bcm_subport_group_config_t_init */
extern void bcm_subport_group_config_t_init(
    bcm_subport_group_config_t *config);

#ifndef BCM_HIDE_DISPATCHABLE

/* bcm_subport_group_create */
extern int bcm_subport_group_create(
    int unit, 
    bcm_subport_group_config_t *config, 
    bcm_gport_t *group);

/* bcm_subport_group_destroy */
extern int bcm_subport_group_destroy(
    int unit, 
    bcm_gport_t group);

/* bcm_subport_group_get */
extern int bcm_subport_group_get(
    int unit, 
    bcm_gport_t group, 
    bcm_subport_group_config_t *config);

#endif /* BCM_HIDE_DISPATCHABLE */

/* bcm_subport_match_t */
typedef enum bcm_subport_match_e {
    BCM_SUBPORT_MATCH_INVALID = 0,      /* Illegal. */
    BCM_SUBPORT_MATCH_PKT_VID = 1,      /* Mod/port/trunk + LLTAG VID. */
    BCM_SUBPORT_MATCH_PKT_VID_INNER_VLAN = 2, /* Mod/port/trunk + LLTAG VID + inner
                                           VLAN. */
    BCM_SUBPORT_MATCH_PKT_VID_OUTER_VLAN = 3, /* Mod/port/trunk + LLTAG VID + outer
                                           VLAN. */
    BCM_SUBPORT_MATCH_COUNT = 4         /* Must be last. */
} bcm_subport_match_t;

/* bcm_subport_config_t */
typedef struct bcm_subport_config_s {
    bcm_gport_t group;                  /* Subport group */
    bcm_vlan_t pkt_vlan;                /* Packet 16-bit VLAN tag */
    bcm_vlan_t inner_vlan;              /* 12-bit inner VLAN */
    bcm_vlan_t outer_vlan;              /* 12-bit outerVLAN */
    int int_pri;                        /* Internal Priority for this subport
                                           port */
    uint32 prop_flags;                  /* Property flags for this subport port */
    uint16 stream_id_array[BCM_SUBPORT_CONFIG_MAX_STREAMS]; /* LinkPHY fragment header Stream ID
                                           array to be associated with the
                                           LinkPHY subport port. */
    int num_streams;                    /* Number of streams associated with the
                                           LinkPHY subport port. */
    bcm_color_t color;                  /* (internal) color or drop precedence
                                           for this subport port. */
    bcm_subport_match_t criteria;       /* match criteria. */
} bcm_subport_config_t;

/* bcm_subport_config_t_init */
extern void bcm_subport_config_t_init(
    bcm_subport_config_t *config);

#ifndef BCM_HIDE_DISPATCHABLE

/* bcm_subport_port_add */
extern int bcm_subport_port_add(
    int unit, 
    bcm_subport_config_t *config, 
    bcm_gport_t *port);

/* bcm_subport_port_delete */
extern int bcm_subport_port_delete(
    int unit, 
    bcm_gport_t port);

/* bcm_subport_port_get */
extern int bcm_subport_port_get(
    int unit, 
    bcm_gport_t port, 
    bcm_subport_config_t *config);

#endif /* BCM_HIDE_DISPATCHABLE */

/* bcm_subport_port_traverse_cb */
typedef int (*bcm_subport_port_traverse_cb)(
    int unit, 
    bcm_gport_t port, 
    bcm_subport_config_t *config, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* bcm_subport_port_traverse */
extern int bcm_subport_port_traverse(
    int unit, 
    bcm_subport_port_traverse_cb cb, 
    void *user_data);

/* 
 * Traverse the subports of a given subport group and call the
 * user-supplied callback function for each subport
 */
extern int bcm_subport_group_traverse(
    int unit, 
    bcm_gport_t subport_group, 
    bcm_subport_port_traverse_cb cb, 
    void *user_data);

#endif /* BCM_HIDE_DISPATCHABLE */

/* LinkPHY configuration action mask */
#define BCM_SUBPORT_LINKPHY_BASE_STREAM_ID  0x00000001 
#define BCM_SUBPORT_LINKPHY_HEADER_MODE     0x00000002 
#define BCM_SUBPORT_LINKPHY_RX_CHECK_FLAGS  0x00000004 
#define BCM_SUBPORT_LINKPHY_RX_VLAN_TPID    0x00000008 
#define BCM_SUBPORT_LINKPHY_RX_NEAREND_MAC  0x00000010 
#define BCM_SUBPORT_LINKPHY_RX_FAREND_MAC   0x00000020 
#define BCM_SUBPORT_LINKPHY_RX_DFC_DEST_MAC 0x00000040 
#define BCM_SUBPORT_LINKPHY_RX_DFC_OPCODE   0x00000080 
#define BCM_SUBPORT_LINKPHY_RX_DFC_TIME     0x00000100 
#define BCM_SUBPORT_LINKPHY_RX_DFC_MAC_TYPE 0x00000200 
#define BCM_SUBPORT_LINKPHY_TX_VLAN_TPID    0x00000400 
#define BCM_SUBPORT_LINKPHY_TX_NEAREND_MAC  0x00000800 
#define BCM_SUBPORT_LINKPHY_TX_FAREND_MAC   0x00001000 
#define BCM_SUBPORT_LINKPHY_TX_PENULTIMATE_MODE 0x00002000 /* If this flag is
                                                          selected then TX
                                                          penultimate mode is
                                                          enabled. The
                                                          penultimate-fragment
                                                          of the frame would be
                                                          64-bytes(Payload-size)
                                                          to avoid padding in
                                                          the last-fragment. If
                                                          this flag is
                                                          deselected then TX
                                                          penultimate mode is
                                                          disabled. */
#define BCM_SUBPORT_LINKPHY_ALL             0xFFFFFFFF 

/* Check flags for received LinkPHY fragments */
#define BCM_SUBPORT_LINKPHY_RX_NEAREND_MAC_CHECK 0x00000001 /* enable/disable nearend
                                                          MAC compare */
#define BCM_SUBPORT_LINKPHY_RX_FAREND_MAC_CHECK 0x00000002 /* enable/disable far end
                                                          MAC compare */
#define BCM_SUBPORT_LINKPHY_RX_DFC_DEST_MAC_CHECK 0x00000004 /* enable/disable DFC
                                                          destination MAC
                                                          compare */
#define BCM_SUBPORT_LINKPHY_RX_DFC_OPCODE_CHECK 0x00000008 /* enable/disable DFC
                                                          opcode compare */
#define BCM_SUBPORT_LINKPHY_RX_DFC_TIME_CHECK 0x00000010 /* enable/disable DFC
                                                          time compare */

/* LinkPHY fragment header mode */
typedef enum bcm_subport_group_linkphy_header_mode_e {
    bcmSubportLinkphyHeaderModeEthAdapt = 0, /* Ethernet-Adaptation LinkPHY header
                                           mode */
    bcmSubportLinkphyHeaderModeTciLength = 1 /* TCI+Length LinkPHY header mode */
} bcm_subport_group_linkphy_header_mode_t;

/* Subport statistics */
typedef enum bcm_subport_stat_e {
    bcmSubportLinkPhyStatRxFragmentBytes = 0, /* LinkPHY subport Rx fragment bytes
                                           statistics */
    bcmSubportLinkPhyStatRxFragments = 1, /* LinkPHY subport Rx fragments
                                           statistics */
    bcmSubportLinkPhyStatRxFrameBytes = 2, /* LinkPHY subport Rx frame bytes
                                           statistics */
    bcmSubportLinkPhyStatRxFrames = 3,  /* LinkPHY subport Rx frames statistics */
    bcmSubportLinkPhyStatTxFragmentBytes = 4, /* LinkPHY subport Tx fragment bytes
                                           statistics */
    bcmSubportLinkPhyStatTxFragments = 5, /* LinkPHY subport Tx fragments
                                           statistics */
    bcmSubportLinkPhyStatTxFrameBytes = 6, /* LinkPHY subport Tx frame bytes
                                           statistics */
    bcmSubportLinkPhyStatTxFrames = 7   /* LinkPHY subport Tx frames statistics */
} bcm_subport_stat_t;

/* LinkPHY configuration parameters per port. */
typedef struct bcm_subport_group_linkphy_config_s {
    uint32 action_mask;                 /* BCM_SUBPORT_LINKPHY_xxx flags */
    uint16 base_stream_id;              /* External Stream ID base */
    bcm_subport_group_linkphy_header_mode_t header_mode; /* LinkPHY fragment header mode */
    uint32 rx_check_flags;              /* flags
                                           BCM_SUBPORT_LINKPHY_RX_XXX_CHECK for
                                           comparing RXed fragment header
                                           parameters */
    uint16 rx_vlan_tpid;                /* Expected Vlan TPID in header of
                                           LinkPHY fragments RXed */
    bcm_mac_t rx_nearend_mac;           /* Expected near end MAC address in
                                           header of LinkPHY fragments RXed */
    bcm_mac_t rx_farend_mac;            /* Expected far end MAC address in
                                           header of LinkPHY fragments RXed */
    bcm_mac_t rx_dfc_dest_mac;          /* Expected Destination MAC address in
                                           header of DFC fragments RXed */
    uint16 rx_dfc_opcode;               /* Expected opcode in header of DFC
                                           fragments RXed */
    uint16 rx_dfc_time;                 /* Expected TIME in header of DFC
                                           fragments RXed */
    uint16 rx_dfc_mac_type;             /* Expected Ethertype in header of DFC
                                           fragments RXed */
    uint16 tx_vlan_tpid;                /* Vlan TPID to be set in header of
                                           LinkPHY fragments TXed */
    bcm_mac_t tx_nearend_mac;           /* Near end MAC address to be set in
                                           header of LinkPHY fragments TXed */
    bcm_mac_t tx_farend_mac;            /* Far end MAC address to be set in
                                           header of LinkPHY fragments TXed */
} bcm_subport_group_linkphy_config_t;

/* bcm_subport_group_linkphy_config_t_init */
extern void bcm_subport_group_linkphy_config_t_init(
    bcm_subport_group_linkphy_config_t *linkphy_config);

#ifndef BCM_HIDE_DISPATCHABLE

/* Set LinkPHY configuration parameters for a given port. */
extern int bcm_subport_group_linkphy_config_set(
    int unit, 
    bcm_gport_t port, 
    bcm_subport_group_linkphy_config_t *linkphy_config);

/* Get LinkPHY configuration parameters for a given port. */
extern int bcm_subport_group_linkphy_config_get(
    int unit, 
    bcm_gport_t port, 
    bcm_subport_group_linkphy_config_t *linkphy_config);

/* Set the statistics value for a given subport port and statistics type. */
extern int bcm_subport_port_stat_set(
    int unit, 
    bcm_gport_t port, 
    int stream_id, 
    bcm_subport_stat_t stat_type, 
    uint64 val);

/* Get the statistics value for a given subport port and statistics type. */
extern int bcm_subport_port_stat_get(
    int unit, 
    bcm_gport_t port, 
    int stream_id, 
    bcm_subport_stat_t stat_type, 
    uint64 *val);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_SUBPORT_H__ */
