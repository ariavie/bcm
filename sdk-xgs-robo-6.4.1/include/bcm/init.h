/*
 * $Id: 1a3503cdd4013680a5dcb840cdf4ceb043bcd5d0 $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_INIT_H__
#define __BCM_INIT_H__

#include <bcm/types.h>
#include <bcm/module.h>

/* BCM Information structure. */
typedef struct bcm_info_s {
    uint32 vendor;      /* PCI values used usually. */
    uint32 device;      /* PCI values used usually. */
    uint32 revision;    /* PCI values used usually. */
    uint32 capability; 
} bcm_info_t;

/* Capability flags. */
#define BCM_INFO_SWITCH         0x00000001 /* Network switch chip. */
#define BCM_INFO_FABRIC         0x00000002 /* Fabric chip. */
#define BCM_INFO_L3             0x00000004 /* Chip has layer 3. */
#define BCM_INFO_IPMC           0x00000008 /* Chip has IP multicast. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize the BCM software layer for a device. */
extern int bcm_init(
    int unit);

/* Initialize selected BCM modules for a device. */
extern int bcm_init_selective(
    int unit, 
    uint32 flags);

/* Check on initialization status of a unit. */
extern int bcm_init_check(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Attach a device as a BCM unit. */
extern int bcm_attach(
    int unit, 
    char *type, 
    char *subtype, 
    int remunit);

/* Detach a device as a BCM unit. */
extern int bcm_detach(
    int unit);

/* Find a matching BCM unit. */
extern int bcm_find(
    char *type, 
    char *subtype, 
    int remunit);

/* Determine if a BCM unit is attached. */
extern int bcm_attach_check(
    int unit);

/* Determine highest BCM unit currently attached. */
extern int bcm_attach_max(
    int *max_units);

#ifndef BCM_HIDE_DISPATCHABLE

/* Get information about a BCM unit. */
extern int bcm_info_get(
    int unit, 
    bcm_info_t *info);

/* Initialize a device excluding stacking functionality. */
extern int bcm_clear(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize the BCM Information structure. */
extern void bcm_info_t_init(
    bcm_info_t *info);

#if !defined(BCM_WARM_BOOT_SUPPORT)
/* Define as empty just to be safe. */
#define _bcm_shutdown(unit)     BCM_E_NONE 
#endif

#ifndef BCM_HIDE_DISPATCHABLE

#if defined(BCM_WARM_BOOT_SUPPORT)
/* _bcm_shutdown */
extern int _bcm_shutdown(
    int unit);
#endif

#endif /* BCM_HIDE_DISPATCHABLE */

/* Device State. */
typedef enum bcm_device_state_e {
    bcmDeviceStateAttach = 0,   /* Device attach. */
    bcmDeviceStateDetach = 1    /* Device detach. */
} bcm_device_state_t;

/* Attach/detach information. */
typedef struct bcm_attach_info_s {
    int unit;               /* Attach/detach unit. */
    const char *type;       /* Attach/detach type. */
    const char *subtype;    /* Attach/detach subtype. */
    int remunit;            /* Attach/detach remunit. */
} bcm_attach_info_t;

/* Initialize the BCM Attach Information structure. */
extern void bcm_attach_info_t_init(
    bcm_attach_info_t *info);

/* Attach/detach callback */
typedef int (*bcm_attach_cb_t)(
    int unit, 
    bcm_device_state_t state, 
    bcm_attach_info_t *info, 
    void *user_data);

/* Register to receive callbacks during device attach/detach. */
extern int bcm_attach_register(
    int unit, 
    bcm_attach_cb_t cb, 
    void *user_data);

/* Unregister attach callback function. */
extern int bcm_attach_unregister(
    int unit, 
    bcm_attach_cb_t cb, 
    void *user_data);

/* Detach retry. */
typedef struct bcm_detach_retry_s {
    uint32 poll_usecs;  /* Time poll interval in usecs. */
    int num_retries;    /* Number of retries. */
} bcm_detach_retry_t;

/* Initialize the BCM Detach Retry structure. */
extern void bcm_detach_retry_t_init(
    bcm_detach_retry_t *retry);

/* Set detach time poll interval and number of retries. */
extern int bcm_detach_retry_set(
    int unit, 
    bcm_detach_retry_t *retry);

/* Get detach time poll interval and number of retries. */
extern int bcm_detach_retry_get(
    int unit, 
    bcm_detach_retry_t *retry);

#endif /* __BCM_INIT_H__ */
