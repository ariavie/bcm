/*
 * $Id: b940980174b49d162f1a45ad3917dcf7274b8191 $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_ECN_H__
#define __BCM_ECN_H__

#include <bcm/types.h>

/* ECN traffic map flag. */
#define BCM_ECN_TRAFFIC_MAP_RESPONSIVE  (1 << 0)   /* 1: Responsive, 0:
                                                      Non-responsive. */

/* ECN traffic map info. */
typedef struct bcm_ecn_traffic_map_info_s {
    uint32 flags;   /* BCM_ECN_TRAFFIC_MAP_XXX flag definitions. */
    uint8 ecn;      /* ECN value of packet's IP header. */
    int int_cn;     /* Mapped internal congestion notification(int_cn) value. */
} bcm_ecn_traffic_map_info_t;

/* ECN traffic action types */
#define BCM_ECN_TRAFFIC_ACTION_TYPE_ENQUEUE (0x1)      /* Action of enqueue
                                                          stage. */
#define BCM_ECN_TRAFFIC_ACTION_TYPE_DEQUEUE (0x2)      /* Action of dequeue
                                                          stage. */
#define BCM_ECN_TRAFFIC_ACTION_TYPE_EGRESS  (0x3)      /* Action of egress
                                                          stage. */

/* ECN traffic action flags */
#define BCM_ECN_TRAFFIC_ACTION_NONE         (0x0)      /* Action none */
#define BCM_ECN_TRAFFIC_ACTION_ENQUEUE_WRED_RESPONSIVE (1 << 0)   /* If set, enabled WRED
                                                          responsive dropping.
                                                          Otherwise, enables
                                                          WRED non-responsive
                                                          dropping. */
#define BCM_ECN_TRAFFIC_ACTION_ENQUEUE_MARK_ELIGIBLE (1 << 1)   /* If set, avoids WRED
                                                          dropping when ECN
                                                          marking is enabled. */
#define BCM_ECN_TRAFFIC_ACTION_DEQUEUE_CONGESTION_INT_CN_UPDATE (1 << 2)   /* If set, updates the
                                                          value of int_cn when
                                                          congestion is
                                                          experienced. */
#define BCM_ECN_TRAFFIC_ACTION_DEQUEUE_NON_CONGESTION_INT_CN_UPDATE (1 << 3)   /* If set, updates the
                                                          value of int_cn when
                                                          congestion is not
                                                          experienced. */
#define BCM_ECN_TRAFFIC_ACTION_EGRESS_ECN_MARKING (1 << 4)   /* If set, indicates that
                                                          the packet's ECN bits
                                                          need to be updated. */
#define BCM_ECN_TRAFFIC_ACTION_EGRESS_DROP  (1 << 5)   /* If set, indicates to
                                                          drop packet. */

/* 
 * ECN traffic action configuration.
 * 
 * Contains information required for assigning the actions of ECN
 * traffic.
 */
typedef struct bcm_ecn_traffic_action_config_s {
    uint32 action_type;         /* See BCM_ECN_TRAFFIC_ACTION_TYPE_XXX flag
                                   definitions. */
    uint32 action_flags;        /* See BCM_ECN_TRAFFIC_ACTION_XXX flag
                                   definitions. */
    int int_cn;                 /* Internal congestion notification. */
    bcm_color_t color;          /* Packet color. */
    uint8 ecn;                  /* ECN value of packet;s IP header. */
    uint8 new_ecn;              /* New ECN value for remarking. */
    int congested_int_cn;       /* New int_cn to be updated when the congestion
                                   is experienced. */
    int non_congested_int_cn;   /* New int_cn to be updated when the congestion
                                   is not experienced. */
} bcm_ecn_traffic_action_config_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * To get the value of responsive indication that associated with a
 * packet based on the IP protocol value. It indicates if the transport
 * protocol of the packet's IP header is responsive or non-responsive for
 * the packet drop when congestion is experienced.
 */
extern int bcm_ecn_responsive_protocol_get(
    int unit, 
    uint8 ip_proto, 
    int *responsive);

/* 
 * To configure the value of responsive indication that associated with a
 * packet based on the IP protocol value. It indicates if the transport
 * protocol of the packet's IP header is responsive or non-responsive for
 * the packet drop when congestion is experienced.
 */
extern int bcm_ecn_responsive_protocol_set(
    int unit, 
    uint8 ip_proto, 
    int responsive);

/* 
 * To get the mapped internal congestion notification (int_cn) value
 * based on the ECN value of packet's IP header and the value of
 * responsive indication.
 */
extern int bcm_ecn_traffic_map_get(
    int unit, 
    bcm_ecn_traffic_map_info_t *map);

/* 
 * To set the mapped internal congestion notification (int_cn) value
 * based on the ECN value of packet's IP header and the value of
 * responsive indication.
 */
extern int bcm_ecn_traffic_map_set(
    int unit, 
    bcm_ecn_traffic_map_info_t *map);

/* 
 * Get the actions of the specified ECN traffic. The ECN traffic is
 * mapped by the packet's ECN value and internal congestion
 * notification(int_cn) value.
 */
extern int bcm_ecn_traffic_action_config_get(
    int unit, 
    bcm_ecn_traffic_action_config_t *ecn_config);

/* 
 * Assign the actions to the specified ECN traffic. The ECN traffic is
 * mapped by the packet's ECN value and internal congestion
 * notification(int_cn) value.
 */
extern int bcm_ecn_traffic_action_config_set(
    int unit, 
    bcm_ecn_traffic_action_config_t *ecn_config);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_ECN_H__ */
