/*
 * $Id: 9916da451787fedd41e3c24bfa2f48c892bf308b $
 * 
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_SAT_H__
#define __BCM_SAT_H__

#include <bcm/types.h>

/* SAT endpoint flags */
#define BCM_SAT_ENDPOINT_WITH_ID            0x01       /* Use the specified
                                                          endpoint ID */
#define BCM_SAT_ENDPOINT_REPLACE            0x02       /* Replace an existing
                                                          SAT endpoint */
#define BCM_SAT_ENDPOINT_UPMEP              0x04       /* Endpoint associated
                                                          with SAT UP-MEP */
#define BCM_SAT_ENDPOINT_DOWNMEP            0x08       /* Endpoint associated
                                                          with SAT DOWN-MEP */
#define BCM_SAT_ENDPOINT_MATCH_INNER_VLAN   0x10       /* Selection of SAT MEP
                                                          based on C VLAN */
#define BCM_SAT_ENDPOINT_MATCH_OUTER_VLAN   0x20       /* Selection of SAT MEP
                                                          based on C VLAN */

/* SAT action flags */
#define BCM_SAT_ACTION_FWD_ACTION_DROP      0x01       /* Forward action for the
                                                          SAT packet is to drop */
#define BCM_SAT_ACTION_FWD_ACTION_REDIRECT  0x02       /* Forward action for the
                                                          SAT packet is redirect
                                                          to DGLP port */
#define BCM_SAT_ACTION_FWD_ACTION_LLF       0x04       /* Forward action for the
                                                          SAT packet is perform
                                                          latching loop back
                                                          function (LLF) and
                                                          redirect packet to
                                                          SGLP port */
#define BCM_SAT_ACTION_COPY_TO_CPU          0x08       /* Copy SAT packet to CPU */
#define BCM_SAT_ACTION_SAMPLE_TIMESTAMP     0x10       /* Sample time stamp into
                                                          the OLP header */

/* SAT Timestamp Formats */
typedef enum bcm_sat_timestamp_format_e {
    bcmSATimestampFormatIEEE1588v1 = 0x00, /* Low-order 64 bits of the IEEE
                                           1588-2008 (1588v2) Precision Time
                                           Protocol timestamp format [IEEE1588] */
    bcmSATimestampFormatNTP = 0x01      /* Network Time Protocol version 4
                                           64-bit timestamp format [RFC5905] */
} bcm_sat_timestamp_format_t;

/* SAT endpoint ID type */
typedef int bcm_sat_endpoint_t;

/* SAT endpoint object. */
typedef struct bcm_sat_endpoint_info_s {
    bcm_sat_endpoint_t ep_id;           /* The ID associated with this endpoint */
    uint32 flags;                       /* The flags associated with this
                                           endpoint */
    bcm_gport_t src_gport;              /* The source gport associated with this
                                           endpoint */
    bcm_vlan_t outer_vlan;              /* Outer-most VLAN tag (vlanID+ 3bits
                                           dot1p +CFI) associated with this
                                           endpoint */
    bcm_vlan_t inner_vlan;              /* Configure with CVLAN tag (vlanID+
                                           3bits dot1p +CFI) for two-tag
                                           operation or set to 0 for one-tag */
    bcm_mac_t dst_mac_address;          /* The destination MAC address
                                           associated with this endpoint */
    bcm_mac_t src_mac_address;          /* The source MAC address associated
                                           with this endpoint */
    uint16 ether_type;                  /* Ether type of the packet */
    uint32 action_flags;                /* SAT action flags */
    uint8 pkt_pri;                      /* Egress priority marking for packet
                                           redirected to DGPP */
    bcm_gport_t dest_gport;             /* Local endpoint SAT PDUs are forwarded
                                           to this OLP destination port for
                                           processing */
    bcm_sat_timestamp_format_t timestamp_format; /* SAT timestamp format */
    uint16 session_id;                  /* SAT session ID to identify the test
                                           among the MEPs */
} bcm_sat_endpoint_info_t;

/* Callback function type for SAT endpoint traversal */
typedef int (*bcm_sat_endpoint_traverse_cb)(
    int unit, 
    bcm_sat_endpoint_info_t *endpoint_info, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create or replace an SAT endpoint object */
extern int bcm_sat_endpoint_create(
    int unit, 
    bcm_sat_endpoint_info_t *endpoint_info);

/* Get an SAT endpoint object */
extern int bcm_sat_endpoint_get(
    int unit, 
    bcm_sat_endpoint_t endpoint, 
    uint32 flags, 
    bcm_sat_endpoint_info_t *endpoint_info);

/* Destroy an SAT endpoint object */
extern int bcm_sat_endpoint_destroy(
    int unit, 
    bcm_sat_endpoint_t endpoint, 
    uint32 flags);

/* Destroy all SAT endpoint objects associated with a given endpoint type */
extern int bcm_sat_endpoint_destroy_all(
    int unit, 
    uint32 flags);

/* 
 * Traverse the set of SAT endpoints associated with the specified
 * endpoint type, calling a specified callback for each one
 */
extern int bcm_sat_endpoint_traverse(
    int unit, 
    uint32 flags, 
    bcm_sat_endpoint_traverse_cb cb, 
    void *user_data);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_SAT_H__ */
