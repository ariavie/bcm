/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: 25d2f6608dd226043e7053ad0af9de1a783d9fa8 $
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * File:	async_req.h
 * Purpose:	Async BCM - request structure
 * Generator:	mkdispatch 1.54
 * Generated:	Tue Jun 10 17:42:06 2014
 */

#ifndef	_BCM_INT_ASYNC_REQ_H
#define	_BCM_INT_ASYNC_REQ_H

#include <bcm/types.h>
#include <bcm/async.h>
#include <bcm/auth.h>
#include <bcm/bcmi2c.h>
#include <bcm/bfd.h>
#include <bcm/bregex.h>
#include <bcm/ces.h>
#include <bcm/cosq.h>
#include <bcm/custom.h>
#include <bcm/eav.h>
#include <bcm/ecn.h>
#include <bcm/error.h>
#include <bcm/extender.h>
#include <bcm/fabric.h>
#include <bcm/failover.h>
#include <bcm/fcmap.h>
#include <bcm/fcoe.h>
#include <bcm/field.h>
#include <bcm/init.h>
#include <bcm/ipfix.h>
#include <bcm/ipmc.h>
#include <bcm/knet.h>
#include <bcm/l2.h>
#include <bcm/l2gre.h>
#include <bcm/l3.h>
#include <bcm/link.h>
#include <bcm/macsec.h>
#include <bcm/mcast.h>
#include <bcm/mim.h>
#include <bcm/mirror.h>
#include <bcm/module.h>
#include <bcm/mpls.h>
#include <bcm/multicast.h>
#include <bcm/nat.h>
#include <bcm/niv.h>
#include <bcm/oam.h>
#include <bcm/pkt.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/proxy.h>
#include <bcm/ptp.h>
#include <bcm/qos.h>
#include <bcm/rate.h>
#include <bcm/rx.h>
#include <bcm/sat.h>
#include <bcm/stack.h>
#include <bcm/stat.h>
#include <bcm/stg.h>
#include <bcm/subport.h>
#include <bcm/switch.h>
#include <bcm/time.h>
#include <bcm/topo.h>
#include <bcm/trill.h>
#include <bcm/trunk.h>
#include <bcm/tunnel.h>
#include <bcm/tx.h>
#include <bcm/txbeacon.h>
#include <bcm/udf.h>
#include <bcm/vlan.h>
#include <bcm/vswitch.h>
#include <bcm/vxlan.h>
#include <bcm/wlan.h>

#ifdef	BCM_ASYNC_SUPPORT

typedef struct bcm_async_req_s {
	struct bcm_async_req_s *next;
	int type;
	void (*run)(struct bcm_async_req_s *);
	bcm_async_cb_t callback;
	void *cookie;
	union {
		struct {
			int unit;
		} _shutdown;
		struct {
			int unit;
			char * type;
			char * subtype;
			int remunit;
		} attach;
		struct {
			int unit;
		} attach_check;
		struct {
			int * max_units;
		} attach_max;
		struct {
			int unit;
			bcm_attach_cb_t cb;
			void * user_data;
		} attach_register;
		struct {
			int unit;
			bcm_attach_cb_t cb;
			void * user_data;
		} attach_unregister;
		struct {
			int unit;
		} auth_detach;
		struct {
			int unit;
			int port;
			int * enable;
		} auth_egress_get;
		struct {
			int unit;
			int port;
			int enable;
		} auth_egress_set;
		struct {
			int unit;
		} auth_init;
		struct {
			int unit;
			int port;
			uint8 * mac;
		} auth_mac_add;
		struct {
			int unit;
			bcm_auth_mac_control_t type;
			uint32 * value;
		} auth_mac_control_get;
		struct {
			int unit;
			bcm_auth_mac_control_t type;
			uint32 value;
		} auth_mac_control_set;
		struct {
			int unit;
			int port;
			uint8 * mac;
		} auth_mac_delete;
		struct {
			int unit;
			int port;
		} auth_mac_delete_all;
		struct {
			int unit;
			int port;
			uint32 * modep;
		} auth_mode_get;
		struct {
			int unit;
			int port;
			uint32 mode;
		} auth_mode_set;
		struct {
			int unit;
			bcm_auth_cb_t func;
			void * cookie;
		} auth_unauth_callback;
#ifdef	INCLUDE_BFD
		struct {
			int unit;
			int index;
			bcm_bfd_auth_sha1_t * sha1;
		} bfd_auth_sha1_get;
		struct {
			int unit;
			int index;
			bcm_bfd_auth_sha1_t * sha1;
		} bfd_auth_sha1_set;
		struct {
			int unit;
			int index;
			bcm_bfd_auth_simple_password_t * sp;
		} bfd_auth_simple_password_get;
		struct {
			int unit;
			int index;
			bcm_bfd_auth_simple_password_t * sp;
		} bfd_auth_simple_password_set;
		struct {
			int unit;
		} bfd_detach;
		struct {
			int unit;
			bcm_bfd_endpoint_info_t * endpoint_info;
		} bfd_endpoint_create;
		struct {
			int unit;
			bcm_bfd_endpoint_t endpoint;
		} bfd_endpoint_destroy;
		struct {
			int unit;
		} bfd_endpoint_destroy_all;
		struct {
			int unit;
			bcm_bfd_endpoint_t endpoint;
			bcm_bfd_endpoint_info_t * endpoint_info;
		} bfd_endpoint_get;
		struct {
			int unit;
			bcm_bfd_endpoint_t endpoint;
		} bfd_endpoint_poll;
		struct {
			int unit;
			bcm_bfd_endpoint_t endpoint;
			bcm_bfd_endpoint_stat_t * ctr_info;
			uint8 clear;
		} bfd_endpoint_stat_get;
		struct {
			int unit;
			bcm_bfd_event_types_t event_types;
			bcm_bfd_event_cb cb;
			void * user_data;
		} bfd_event_register;
		struct {
			int unit;
			bcm_bfd_event_types_t event_types;
			bcm_bfd_event_cb cb;
		} bfd_event_unregister;
		struct {
			int unit;
		} bfd_init;
#endif	/* INCLUDE_BFD */
#ifdef	INCLUDE_CES
		struct {
			int unit;
			int port;
		} ces_attach_ethernet;
		struct {
			int unit;
			bcm_ces_event_types_t events;
			bcm_ces_event_cb callback;
			void * user_data;
		} ces_cb_register;
		struct {
			int unit;
			bcm_ces_event_types_t events;
			bcm_ces_event_cb callback;
		} ces_cb_unregister;
		struct {
			int unit;
		} ces_detach;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			bcm_ces_service_egress_status_t * status;
		} ces_egress_status_get;
		struct {
			int unit;
			int port;
			bcm_ces_mac_cmd_config_t * config;
		} ces_ethernet_config_get;
		struct {
			int unit;
			int port;
			bcm_ces_mac_cmd_config_t * config;
		} ces_ethernet_config_set;
		struct {
			int unit;
		} ces_init;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			bcm_ces_cas_packet_control_t * cas_packet;
		} ces_service_cas_packet_enable;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			bcm_ces_service_config_t * config;
		} ces_service_config_get;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			uint16 * tx_control_word_mask;
			uint16 * tx_control_word;
			uint16 * rx_control_word;
		} ces_service_control_word_get;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			uint16 tx_control_word_mask;
			uint16 tx_control_word;
		} ces_service_control_word_set;
		struct {
			int unit;
			int flags;
			bcm_ces_service_config_t * config;
			bcm_ces_service_t * ces_service;
		} ces_service_create;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
		} ces_service_destroy;
		struct {
			int unit;
		} ces_service_destroy_all;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			int * enable;
		} ces_service_enable_get;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			int enable;
		} ces_service_enable_set;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			int * enable;
		} ces_service_ingress_cas_enable_get;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			int enable;
		} ces_service_ingress_cas_enable_set;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
		} ces_service_pm_clear;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			bcm_ces_service_pm_stats_t * stats;
		} ces_service_pm_get;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			bcm_ces_rclock_config_t * config;
		} ces_service_rclock_config_get;
		struct {
			int unit;
			bcm_ces_service_t ces_service;
			bcm_ces_rclock_config_t * config;
		} ces_service_rclock_config_set;
		struct {
			int unit;
			bcm_ces_cclk_config_t * config;
		} ces_services_cclk_config_get;
		struct {
			int unit;
			bcm_ces_cclk_config_t * config;
		} ces_services_cclk_config_set;
		struct {
			int unit;
		} ces_services_clear;
		struct {
			int unit;
		} ces_services_init;
		struct {
			int unit;
			uint32 flags;
			bcm_ces_service_traverse_cb cb;
			void * user_data;
		} ces_services_traverse;
#endif	/* INCLUDE_CES */
		struct {
			int unit;
		} clear;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
			bcm_cosq_bst_profile_t * profile;
		} cosq_bst_profile_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
			bcm_cosq_bst_profile_t * profile;
		} cosq_bst_profile_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
		} cosq_bst_stat_clear;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
			uint32 options;
			uint64 * value;
		} cosq_bst_stat_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_bst_stat_id_t bid;
			uint32 options;
			uint32 * value;
		} cosq_bst_stat_get32;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 options;
			int max_values;
			bcm_bst_stat_id_t * id_list;
			uint64 * values;
		} cosq_bst_stat_multi_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 options;
			int max_values;
			bcm_bst_stat_id_t * id_list;
			uint32 * values;
		} cosq_bst_stat_multi_get32;
		struct {
			int unit;
			bcm_bst_stat_id_t bid;
		} cosq_bst_stat_sync;
		struct {
			int unit;
			bcm_cosq_classifier_t * classifier;
			int * classifier_id;
		} cosq_classifier_create;
		struct {
			int unit;
			int classifier_id;
		} cosq_classifier_destroy;
		struct {
			int unit;
			int classifier_id;
			bcm_cosq_classifier_t * classifier;
		} cosq_classifier_get;
		struct {
			int unit;
			bcm_gport_t port;
			int classifier_id;
		} cosq_classifier_mapping_clear;
		struct {
			int unit;
			bcm_gport_t port;
			int classifier_id;
			bcm_gport_t * queue_group;
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} cosq_classifier_mapping_get;
		struct {
			int unit;
			bcm_gport_t port;
			int classifier_id;
			bcm_gport_t * queue_group;
			int array_max;
			bcm_cos_t * priority_array;
			bcm_cos_queue_t * cosq_array;
			int * array_count;
		} cosq_classifier_mapping_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			int classifier_id;
			bcm_gport_t queue_group;
			int array_count;
			bcm_cos_t * priority_array;
			bcm_cos_queue_t * cosq_array;
		} cosq_classifier_mapping_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			int classifier_id;
			bcm_gport_t queue_group;
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} cosq_classifier_mapping_set;
		struct {
			int unit;
			int * numq;
		} cosq_config_get;
		struct {
			int unit;
			int numq;
		} cosq_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			bcm_cosq_control_t type;
			int * arg;
		} cosq_control_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			bcm_cosq_control_t type;
			int arg;
		} cosq_control_set;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			int * enable;
		} cosq_cpu_cosq_enable_get;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			int enable;
		} cosq_cpu_cosq_enable_set;
		struct {
			int unit;
			int delay_tolerance_level;
			bcm_cosq_delay_tolerance_t * delay_tolerance;
		} cosq_delay_tolerance_level_get;
		struct {
			int unit;
			int delay_tolerance_level;
			bcm_cosq_delay_tolerance_t * delay_tolerance;
		} cosq_delay_tolerance_level_set;
		struct {
			int unit;
			bcm_module_t dest_modid;
			uint32 * credit_size;
		} cosq_dest_credit_size_get;
		struct {
			int unit;
			bcm_module_t dest_modid;
			uint32 credit_size;
		} cosq_dest_credit_size_set;
		struct {
			int unit;
		} cosq_detach;
		struct {
			int unit;
			uint32 * flags;
		} cosq_discard_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 color;
			int * drop_start;
			int * drop_slope;
			int * average_time;
		} cosq_discard_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 color;
			int drop_start;
			int drop_slope;
			int average_time;
		} cosq_discard_port_set;
		struct {
			int unit;
			uint32 flags;
		} cosq_discard_set;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
			int num_cos_levels;
			uint32 flags;
			bcm_gport_t * req_gport;
		} cosq_fabric_distribution_add;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
			int * num_cos_levels;
			bcm_gport_t * req_gport;
			uint32 * flags;
		} cosq_fabric_distribution_get;
		struct {
			int unit;
			bcm_cosq_fc_direction_type_t fc_direction;
			bcm_cosq_fc_endpoint_t * source;
			bcm_cosq_fc_endpoint_t * target;
		} cosq_fc_path_add;
		struct {
			int unit;
			bcm_cosq_fc_direction_type_t fc_direction;
			bcm_cosq_fc_endpoint_t * source;
			bcm_cosq_fc_endpoint_t * target;
		} cosq_fc_path_delete;
		struct {
			int unit;
			bcm_cosq_fc_direction_type_t fc_direction;
			bcm_cosq_fc_endpoint_t * source;
			int target_max;
			bcm_cosq_fc_endpoint_t * target;
			int * target_count;
		} cosq_fc_path_get;
		struct {
			int unit;
			bcm_gport_t port;
			int numq;
			uint32 flags;
			bcm_gport_t * gport;
		} cosq_gport_add;
		struct {
			int unit;
			bcm_gport_t sched_port;
			bcm_gport_t input_port;
			bcm_cos_queue_t cosq;
		} cosq_gport_attach;
		struct {
			int unit;
			bcm_gport_t sched_port;
			bcm_gport_t * input_port;
			bcm_cos_queue_t * cosq;
		} cosq_gport_attach_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 * kbits_sec_min;
			uint32 * kbits_sec_max;
			uint32 * flags;
		} cosq_gport_bandwidth_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 kbits_sec_min;
			uint32 kbits_sec_max;
			uint32 flags;
		} cosq_gport_bandwidth_set;
		struct {
			int unit;
			bcm_gport_t in_gport;
			bcm_cos_queue_t cosq;
			bcm_gport_t * out_gport;
		} cosq_gport_child_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_color_t color;
			uint32 flags;
			bcm_cosq_gport_size_t * gport_size;
		} cosq_gport_color_size_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_color_t color;
			uint32 flags;
			bcm_cosq_gport_size_t * gport_size;
		} cosq_gport_color_size_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_congestion_info_t * config;
		} cosq_gport_congestion_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_congestion_info_t * config;
		} cosq_gport_congestion_config_set;
		struct {
			int unit;
			bcm_cosq_gport_connection_t * gport_connect;
		} cosq_gport_connection_get;
		struct {
			int unit;
			bcm_cosq_gport_connection_t * gport_connect;
		} cosq_gport_connection_set;
		struct {
			int unit;
			bcm_gport_t gport;
		} cosq_gport_delete;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_t ingress_port;
			bcm_module_t dest_modid;
			int fabric_egress_port;
		} cosq_gport_destmod_attach;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_t ingress_port;
			bcm_module_t dest_modid;
			int fabric_egress_port;
		} cosq_gport_destmod_detach;
		struct {
			int unit;
			bcm_gport_t sched_port;
			bcm_gport_t input_port;
			bcm_cos_queue_t cosq;
		} cosq_gport_detach;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_discard_t * discard;
		} cosq_gport_discard_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_discard_t * discard;
		} cosq_gport_discard_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_dynamic_state_t state;
			int * weight;
		} cosq_gport_dynamic_sched_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_dynamic_state_t state;
			int weight;
		} cosq_gport_dynamic_sched_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t ingress_pri;
			bcm_color_t ingress_dp;
			bcm_cos_queue_t * offset;
		} cosq_gport_egress_map_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t ingress_pri;
			bcm_color_t ingress_dp;
			bcm_cos_queue_t offset;
		} cosq_gport_egress_map_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t ingress_pri;
			bcm_color_t ingress_dp;
			uint32 flags;
			bcm_cosq_egress_multicast_config_t * config;
		} cosq_gport_egress_multicast_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t ingress_pri;
			bcm_color_t ingress_dp;
			uint32 flags;
			bcm_cosq_egress_multicast_config_t * config;
		} cosq_gport_egress_multicast_config_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int * enable;
		} cosq_gport_enable_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int enable;
		} cosq_gport_enable_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_t int_pri;
			uint32 * flow_control_mask;
		} cosq_gport_flow_control_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_t int_pri;
			uint32 flow_control_mask;
		} cosq_gport_flow_control_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t * physical_port;
			int * num_cos_levels;
			uint32 * flags;
		} cosq_gport_get;
		struct {
			int unit;
			int core;
			bcm_cosq_gport_info_core_t * gport_info;
			bcm_gport_t * out_gport;
		} cosq_gport_handle_core_get;
		struct {
			int unit;
			bcm_cosq_gport_type_t gport_type;
			bcm_cosq_gport_info_t * gport_info;
		} cosq_gport_handle_get;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_cos_t int_pri;
			uint32 flags;
			bcm_gport_t * gport;
			bcm_cos_queue_t * cosq;
		} cosq_gport_mapping_get;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_cos_t int_pri;
			uint32 flags;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
		} cosq_gport_mapping_set;
		struct {
			int unit;
			bcm_gport_t multipath_gport;
			bcm_gport_t member_gport;
			bcm_cos_queue_t member_gport_cosq;
		} cosq_gport_multipath_add;
		struct {
			int unit;
			bcm_gport_t multipath_gport;
			bcm_gport_t member_gport;
			bcm_cos_queue_t member_gport_cosq;
		} cosq_gport_multipath_delete;
		struct {
			int unit;
			bcm_gport_t multipath_gport;
			int member_gport_max;
			bcm_gport_t * member_gport_array;
			bcm_cos_queue_t * member_gport_cosq_array;
			int * member_gport_count;
		} cosq_gport_multipath_get;
		struct {
			int unit;
			bcm_gport_t child_port;
			bcm_cos_queue_t cos;
			bcm_gport_t * parent_port;
		} cosq_gport_parent_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_pon_link_sla_t * link_sla;
		} cosq_gport_pon_link_sla_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_pon_link_sla_t * link_sla;
		} cosq_gport_pon_link_sla_set;
		struct {
			int unit;
			uint32 flags;
			bcm_gport_t ingress_queue;
			bcm_cos_t ingress_int_pri;
			bcm_gport_t egress_queue;
			bcm_cos_t egress_int_pri;
			int * attach_id;
		} cosq_gport_queue_attach;
		struct {
			int unit;
			bcm_gport_t ingress_queue;
			bcm_cos_t ingress_int_pri;
			bcm_gport_t * egress_queue;
			bcm_cos_t * egress_int_pri;
			int attach_id;
		} cosq_gport_queue_attach_get;
		struct {
			int unit;
			bcm_gport_t ingress_queue;
			bcm_cos_t ingress_int_pri;
			int attach_id;
		} cosq_gport_queue_detach;
		struct {
			int unit;
			bcm_gport_t sched_port;
			bcm_gport_t input_port;
			bcm_cos_queue_t cosq;
		} cosq_gport_reattach;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_report_threshold_t * threshold;
		} cosq_gport_report_threshold_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_report_threshold_t * threshold;
		} cosq_gport_report_threshold_set;
		struct {
			int unit;
			bcm_gport_t gport;
			int sched_mode;
			int int_pri;
			uint32 * flags;
		} cosq_gport_sched_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			int sched_mode;
			int int_pri;
			uint32 flags;
		} cosq_gport_sched_config_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int * mode;
			int * weight;
		} cosq_gport_sched_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int mode;
			int weight;
		} cosq_gport_sched_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 * bytes_min;
			uint32 * bytes_max;
		} cosq_gport_size_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 bytes_min;
			uint32 bytes_max;
		} cosq_gport_size_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t lgl_gport;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_gport_stat_profile_t * profile;
		} cosq_gport_stat_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t lgl_gport;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_gport_stat_profile_t profile;
		} cosq_gport_stat_config_set;
		struct {
			int unit;
			bcm_gport_t gport;
			int * enable;
		} cosq_gport_stat_enable_get;
		struct {
			int unit;
			bcm_gport_t gport;
			int enable;
		} cosq_gport_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_stats_t stat;
			uint64 * value;
		} cosq_gport_stat_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_stats_t stat;
			uint64 value;
		} cosq_gport_stat_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_stats_t stat;
			uint64 * value;
		} cosq_gport_stat_sync_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t lgl_gport;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_gport_stats_t stat;
			uint64 * value;
		} cosq_gport_statistic_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t lgl_gport;
			bcm_cos_queue_t cosq;
			int stat_count;
			bcm_cosq_gport_stats_t * stats_array;
			int value_count;
			uint64 * value_array;
		} cosq_gport_statistic_multi_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t lgl_gport;
			bcm_cos_queue_t cosq;
			int stat_count;
			bcm_cosq_gport_stats_t * stats_array;
			uint64 value;
		} cosq_gport_statistic_multi_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t lgl_gport;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_gport_stats_t stat;
			uint64 value;
		} cosq_gport_statistic_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_threshold_t * threshold;
		} cosq_gport_threshold_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_threshold_t * threshold;
		} cosq_gport_threshold_set;
		struct {
			int unit;
			bcm_cosq_gport_traverse_cb cb;
			void * user_data;
		} cosq_gport_traverse;
		struct {
			int unit;
			bcm_gport_t vsq;
			bcm_gport_t queue;
			bcm_cos_queue_t cosq;
		} cosq_gport_vsq_add;
		struct {
			int unit;
			bcm_cosq_vsq_info_t * vsq_info;
			bcm_gport_t * vsq_gport;
		} cosq_gport_vsq_create;
		struct {
			int unit;
			bcm_gport_t vsq;
			bcm_gport_t queue;
			bcm_cos_queue_t cosq;
		} cosq_gport_vsq_delete;
		struct {
			int unit;
			bcm_gport_t vsq;
		} cosq_gport_vsq_delete_all;
		struct {
			int unit;
			bcm_gport_t vsq_gport;
		} cosq_gport_vsq_destroy;
		struct {
			int unit;
			bcm_gport_t vsq;
			int queue_max;
			bcm_gport_t * queue_array;
			bcm_cos_queue_t * cosq_array;
			int * queue_count;
		} cosq_gport_vsq_get;
		struct {
			int unit;
		} cosq_init;
		struct {
			int unit;
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} cosq_mapping_get;
		struct {
			int unit;
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} cosq_mapping_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_pfc_config_t * config;
		} cosq_pfc_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_pfc_config_t * config;
		} cosq_pfc_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 * kbits_sec_min;
			uint32 * kbits_sec_max;
			uint32 * flags;
		} cosq_port_bandwidth_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 kbits_sec_min;
			uint32 kbits_sec_max;
			uint32 flags;
		} cosq_port_bandwidth_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} cosq_port_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} cosq_port_mapping_set;
		struct {
			int unit;
			bcm_pbmp_t pbm;
			int * mode;
			int * weights;
			int * delay;
		} cosq_port_sched_get;
		struct {
			int unit;
			bcm_pbmp_t pbm;
			int mode;
			int * weights;
			int delay;
		} cosq_port_sched_set;
		struct {
			int unit;
			int start_queue;
			int end_queue;
			int * pri_profile_id;
		} cosq_priority_get;
		struct {
			int unit;
			int pri_profile_id;
			int * count;
			bcm_cosq_gport_priority_profile_t * pri_profile;
		} cosq_priority_profile_get;
		struct {
			int unit;
			int pri_profile_id;
			int count;
			bcm_cosq_gport_priority_profile_t * pri_profile;
		} cosq_priority_profile_set;
		struct {
			int unit;
			int start_queue;
			int end_queue;
			int pri_profile_id;
		} cosq_priority_set;
		struct {
			int unit;
			bcm_gport_t gport_to_map;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_switch_profile_mapping_t * profile_mapping;
		} cosq_profile_mapping_get;
		struct {
			int unit;
			bcm_gport_t gport_to_map;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_switch_profile_mapping_t * profile_mapping;
		} cosq_profile_mapping_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_qcn_config_t * config;
		} cosq_qcn_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			uint32 flags;
			bcm_cosq_qcn_config_t * config;
		} cosq_qcn_config_set;
		struct {
			int unit;
			int * mode;
			int * weights;
			int * delay;
		} cosq_sched_get;
		struct {
			int unit;
			int mode;
			int * weights;
			int delay;
		} cosq_sched_set;
		struct {
			int unit;
			int mode;
			int * weight_max;
		} cosq_sched_weight_max_get;
		struct {
			int unit;
			bcm_service_pool_id_t id;
			bcm_cosq_service_pool_t * cosq_service_pool;
		} cosq_service_pool_get;
		struct {
			int unit;
			bcm_service_pool_id_t id;
			bcm_cosq_service_pool_t cosq_service_pool;
		} cosq_service_pool_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint64 * value;
		} cosq_stat_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint32 * value;
		} cosq_stat_get32;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint64 value;
		} cosq_stat_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint32 value;
		} cosq_stat_set32;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint64 * value;
		} cosq_stat_sync_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint32 * value;
		} cosq_stat_sync_get32;
		struct {
			int unit;
			bcm_cosq_subscriber_map_t * map;
		} cosq_subscriber_map_add;
		struct {
			int unit;
			bcm_cosq_subscriber_map_t * map;
		} cosq_subscriber_map_delete;
		struct {
			int unit;
		} cosq_subscriber_map_delete_all;
		struct {
			int unit;
			bcm_cosq_subscriber_map_t * map;
		} cosq_subscriber_map_get;
		struct {
			int unit;
			bcm_cosq_subscriber_map_traverse_cb cb;
			void * user_data;
		} cosq_subscriber_traverse;
		struct {
			int unit;
			bcm_port_t port;
			int type;
			int max_len;
			uint32 * args;
			int * actual_len;
		} custom_port_get;
		struct {
			int unit;
			bcm_port_t port;
			int type;
			int len;
			uint32 * args;
		} custom_port_set;
		struct {
			int unit;
			bcm_custom_cb_t func;
			void * user_data;
		} custom_register;
		struct {
			int unit;
		} custom_unregister;
		struct {
			int unit;
		} detach;
		struct {
			int unit;
			bcm_detach_retry_t * retry;
		} detach_retry_get;
		struct {
			int unit;
			bcm_detach_retry_t * retry;
		} detach_retry_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_eav_stream_class_t type;
			uint32 * bytes_sec;
			uint32 * bytes_burst;
		} eav_bandwidth_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_eav_stream_class_t type;
			uint32 bytes_sec;
			uint32 bytes_burst;
		} eav_bandwidth_set;
		struct {
			int unit;
			bcm_eav_control_t type;
			uint32 * arg;
			uint32 * arg2;
		} eav_control_get;
		struct {
			int unit;
			bcm_eav_control_t type;
			uint32 arg;
			uint32 arg2;
		} eav_control_set;
		struct {
			int unit;
		} eav_init;
		struct {
			int unit;
			bcm_port_t port;
			int * link;
		} eav_link_status_get;
		struct {
			int unit;
			bcm_port_t port;
			int link;
		} eav_link_status_set;
		struct {
			int unit;
			bcm_eav_stream_class_t type;
			int * pcp;
			int * remapped_pcp;
		} eav_pcp_mapping_get;
		struct {
			int unit;
			bcm_eav_stream_class_t type;
			int pcp;
			int remapped_pcp;
		} eav_pcp_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} eav_port_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} eav_port_enable_set;
		struct {
			int unit;
			uint8 * mac;
			bcm_port_ethertype_t * ethertype;
		} eav_srp_mac_ethertype_get;
		struct {
			int unit;
			uint8 * mac;
			bcm_port_ethertype_t ethertype;
		} eav_srp_mac_ethertype_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * timestamp;
		} eav_timestamp_get;
		struct {
			int unit;
			uint8 * eav_mac;
		} eav_timesync_mac_get;
		struct {
			int unit;
			uint8 * eav_mac;
		} eav_timesync_mac_set;
		struct {
			int unit;
			uint8 ip_proto;
			int * responsive;
		} ecn_responsive_protocol_get;
		struct {
			int unit;
			uint8 ip_proto;
			int responsive;
		} ecn_responsive_protocol_set;
		struct {
			int unit;
			bcm_ecn_traffic_action_config_t * ecn_config;
		} ecn_traffic_action_config_get;
		struct {
			int unit;
			bcm_ecn_traffic_action_config_t * ecn_config;
		} ecn_traffic_action_config_set;
		struct {
			int unit;
			bcm_ecn_traffic_map_info_t * map;
		} ecn_traffic_map_get;
		struct {
			int unit;
			bcm_ecn_traffic_map_info_t * map;
		} ecn_traffic_map_set;
#ifdef	INCLUDE_PTP
		struct {
			int unit;
			bcm_esmc_network_option_t opt;
			bcm_esmc_quality_level_t ql;
			uint8 * ssm_code;
		} esmc_QL_SSM_map;
		struct {
			int unit;
			bcm_esmc_network_option_t opt;
			uint8 ssm_code;
			bcm_esmc_quality_level_t * ql;
		} esmc_SSM_QL_map;
		struct {
			int unit;
			int stack_id;
			bcm_esmc_network_option_t * g781_option;
		} esmc_g781_option_get;
		struct {
			int unit;
			int stack_id;
			bcm_esmc_network_option_t g781_option;
		} esmc_g781_option_set;
		struct {
			int unit;
			int stack_id;
			bcm_esmc_rx_cb rx_cb;
		} esmc_rx_callback_register;
		struct {
			int unit;
			int stack_id;
		} esmc_rx_callback_unregister;
		struct {
			int unit;
			int stack_id;
			int * enable;
		} esmc_tunnel_get;
		struct {
			int unit;
			int stack_id;
			int enable;
		} esmc_tunnel_set;
		struct {
			int unit;
			int stack_id;
			bcm_pbmp_t pbmp;
			bcm_esmc_pdu_data_t * esmc_pdu_data;
		} esmc_tx;
#endif	/* INCLUDE_PTP */
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} extender_cleanup;
		struct {
			int unit;
			bcm_extender_encap_t * extender_encap;
		} extender_encap_create;
		struct {
			int unit;
			bcm_gport_t * extender_encap_id;
		} extender_encap_destroy;
		struct {
			int unit;
		} extender_encap_destroy_all;
		struct {
			int unit;
			bcm_extender_encap_t * extender_encap;
		} extender_encap_get;
		struct {
			int unit;
			bcm_extender_encap_traverse_cb cb;
			void * user_data;
		} extender_encap_traverse;
		struct {
			int unit;
			bcm_extender_forward_t * extender_forward_entry;
		} extender_forward_add;
		struct {
			int unit;
			bcm_extender_forward_t * extender_forward_entry;
		} extender_forward_delete;
		struct {
			int unit;
		} extender_forward_delete_all;
		struct {
			int unit;
			bcm_extender_forward_t * extender_forward_entry;
		} extender_forward_get;
		struct {
			int unit;
			bcm_extender_forward_traverse_cb cb;
			void * user_data;
		} extender_forward_traverse;
		struct {
			int unit;
		} extender_init;
		struct {
			int unit;
			bcm_extender_port_t * extender_port;
		} extender_port_add;
		struct {
			int unit;
			bcm_gport_t extender_port_id;
		} extender_port_delete;
		struct {
			int unit;
		} extender_port_delete_all;
		struct {
			int unit;
			bcm_extender_port_t * extender_port;
		} extender_port_get;
		struct {
			int unit;
			bcm_extender_port_traverse_cb cb;
			void * user_data;
		} extender_port_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_fabric_action_info_t * action_info;
			bcm_fabric_action_t * action_id;
		} fabric_action_create;
		struct {
			int unit;
			bcm_fabric_action_t action_id;
		} fabric_action_destroy;
		struct {
			int unit;
		} fabric_action_destroy_all;
		struct {
			int unit;
			bcm_fabric_action_t action_id;
			bcm_fabric_action_info_t * action_info;
		} fabric_action_get;
		struct {
			int unit;
			bcm_fabric_action_traverse_cb cb;
			void * user_data;
		} fabric_action_traverse;
		struct {
			int unit;
			int profile_count;
			bcm_fabric_bandwidth_profile_t * profile_array;
		} fabric_bandwidth_profile_get;
		struct {
			int unit;
			int profile_count;
			bcm_fabric_bandwidth_profile_t * profile_array;
		} fabric_bandwidth_profile_set;
		struct {
			int unit;
		} fabric_calendar_active;
		struct {
			int unit;
			int cindex;
			int * connection;
			bcm_gport_t * dest_port;
			bcm_cos_queue_t * dest_cosq;
		} fabric_calendar_get;
		struct {
			int unit;
			int * max_size;
		} fabric_calendar_max_get;
		struct {
			int unit;
			int array_size;
			int * connection_array;
			bcm_gport_t * dest_port_array;
			bcm_cos_queue_t * dest_cosq_array;
		} fabric_calendar_multi_get;
		struct {
			int unit;
			int array_size;
			int * connection_array;
			bcm_gport_t * dest_port_array;
			bcm_cos_queue_t * dest_cosq_array;
		} fabric_calendar_multi_set;
		struct {
			int unit;
			int cindex;
			int connection;
			bcm_gport_t dest_port;
			bcm_cos_queue_t dest_cosq;
		} fabric_calendar_set;
		struct {
			int unit;
			int * config_size;
		} fabric_calendar_size_get;
		struct {
			int unit;
			int config_size;
		} fabric_calendar_size_set;
		struct {
			int unit;
			bcm_fabric_config_discard_t * discard;
		} fabric_config_discard_get;
		struct {
			int unit;
			bcm_fabric_config_discard_t * discard;
		} fabric_config_discard_set;
		struct {
			int unit;
			bcm_module_t module_id;
			int * max_ports;
		} fabric_congestion_size_get;
		struct {
			int unit;
			bcm_module_t module_id;
			int max_ports;
		} fabric_congestion_size_set;
		struct {
			int unit;
			int src_modid;
			int dst_modid;
			bcm_fabric_connection_mode_t mode;
			int link_fail_count;
			int * max_bytes;
		} fabric_connection_bytes_get;
		struct {
			int unit;
			int link_fail_count;
			int * connection_interval;
		} fabric_connection_interval_get;
		struct {
			int unit;
			int link_fail_count;
			int * connection;
		} fabric_connection_max_get;
		struct {
			int unit;
			bcm_fabric_control_t type;
			int * arg;
		} fabric_control_get;
		struct {
			int unit;
			bcm_fabric_control_redundancy_handler_t f;
		} fabric_control_redundancy_register;
		struct {
			int unit;
			bcm_fabric_control_redundancy_handler_t f;
		} fabric_control_redundancy_unregister;
		struct {
			int unit;
			bcm_fabric_control_t type;
			int arg;
		} fabric_control_set;
		struct {
			int unit;
			int xbar;
			int src_modid;
			bcm_port_t src_xbport;
			int dst_modid;
			bcm_port_t * dst_xbport;
		} fabric_crossbar_connection_get;
		struct {
			int unit;
			int xbar;
			int src_modid;
			bcm_port_t src_xbport;
			int dst_modid;
			bcm_port_t dst_xbport;
		} fabric_crossbar_connection_set;
		struct {
			int unit;
			int src_modid;
			int dst_modid;
			bcm_fabric_connection_mode_t mode;
			uint64 * xbars;
		} fabric_crossbar_connection_status_get;
		struct {
			int unit;
			uint64 * xbars;
		} fabric_crossbar_enable_get;
		struct {
			int unit;
			uint64 xbars;
		} fabric_crossbar_enable_set;
		struct {
			int unit;
			int modid;
			int switch_fabric_arbiter_id;
			int xbar;
			bcm_port_t * port;
		} fabric_crossbar_mapping_get;
		struct {
			int unit;
			int modid;
			int switch_fabric_arbiter_id;
			int xbar;
			bcm_port_t port;
		} fabric_crossbar_mapping_set;
		struct {
			int unit;
			uint64 * xbars;
		} fabric_crossbar_status_get;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
			bcm_fabric_distribution_control_t type;
			int * value;
		} fabric_distribution_control_get;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
			bcm_fabric_distribution_control_t type;
			int value;
		} fabric_distribution_control_set;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_distribution_t * ds_id;
		} fabric_distribution_create;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
		} fabric_distribution_destroy;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
			int max_count;
			int * dist_modids;
			int * count;
		} fabric_distribution_get;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
			int modid_count;
			int * dist_modids;
		} fabric_distribution_set;
		struct {
			int unit;
		} fabric_init;
		struct {
			int unit;
			int link_partner_max;
			bcm_fabric_link_connectivity_t * link_partner_array;
			int * link_partner_count;
		} fabric_link_connectivity_status_get;
		struct {
			int unit;
			bcm_port_t link_id;
			bcm_fabric_link_connectivity_t * link_partner_info;
		} fabric_link_connectivity_status_single_get;
		struct {
			int unit;
			bcm_port_t link;
			bcm_fabric_link_control_t type;
			int * arg;
		} fabric_link_control_get;
		struct {
			int unit;
			bcm_port_t link;
			bcm_fabric_link_control_t type;
			int arg;
		} fabric_link_control_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fabric_link_remote_pipe_mapping_t * mapping_config;
		} fabric_link_remote_pipe_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fabric_link_remote_pipe_mapping_t * mapping_config;
		} fabric_link_remote_pipe_mapping_set;
		struct {
			int unit;
			bcm_port_t link_id;
			uint32 * link_status;
			uint32 * errored_token_count;
		} fabric_link_status_get;
		struct {
			int unit;
			uint32 flags;
			int * fifo_type;
		} fabric_link_threshold_add;
		struct {
			int unit;
			int fifo_type;
		} fabric_link_threshold_delete;
		struct {
			int unit;
			int fifo_type;
			uint32 links_count;
			bcm_port_t * links;
		} fabric_link_thresholds_attach;
		struct {
			int unit;
			int fifo_type;
			uint32 count;
			bcm_fabric_link_threshold_type_t * type;
			int * value;
		} fabric_link_thresholds_get;
		struct {
			int unit;
			int fifo_type;
			bcm_fabric_pipe_t pipe;
			uint32 flags;
			uint32 count;
			bcm_fabric_link_threshold_type_t * type;
			int * value;
		} fabric_link_thresholds_pipe_get;
		struct {
			int unit;
			int fifo_type;
			bcm_fabric_pipe_t pipe;
			uint32 flags;
			uint32 count;
			bcm_fabric_link_threshold_type_t * type;
			int * value;
		} fabric_link_thresholds_pipe_set;
		struct {
			int unit;
			int fifo_type;
			uint32 links_count_max;
			bcm_port_t * links;
			uint32 * links_count;
		} fabric_link_thresholds_retrieve;
		struct {
			int unit;
			int fifo_type;
			uint32 count;
			bcm_fabric_link_threshold_type_t * type;
			int * value;
		} fabric_link_thresholds_set;
		struct {
			int unit;
			bcm_module_t destination;
			int max_links_count;
			int * links_count;
			bcm_port_t * links_array;
		} fabric_link_topology_get;
		struct {
			int unit;
			bcm_module_t destination;
			int links_count;
			bcm_port_t * links_array;
		} fabric_link_topology_set;
		struct {
			int unit;
			bcm_module_t modid;
			bcm_module_t * group;
		} fabric_modid_group_find;
		struct {
			int unit;
			bcm_module_t group;
			int modid_max_count;
			bcm_module_t * modid_array;
			int * modid_count;
		} fabric_modid_group_get;
		struct {
			int unit;
			bcm_module_t group;
			int modid_count;
			bcm_module_t * modid_array;
		} fabric_modid_group_set;
		struct {
			int unit;
			bcm_module_t local_modid;
			bcm_module_t * modid;
		} fabric_modid_local_mapping_get;
		struct {
			int unit;
			bcm_module_t local_modid;
			bcm_module_t modid;
		} fabric_modid_local_mapping_set;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			int destid_count_max;
			int * destid_count;
			bcm_module_t * destid_array;
		} fabric_multicast_get;
		struct {
			int unit;
			uint32 flags;
			uint32 ngroups;
			bcm_multicast_t * groups;
			bcm_fabric_module_vector_t * dest_array;
		} fabric_multicast_multi_get;
		struct {
			int unit;
			uint32 flags;
			uint32 ngroups;
			bcm_multicast_t * groups;
			bcm_fabric_module_vector_t * dest_array;
		} fabric_multicast_multi_set;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			uint32 destid_count;
			bcm_module_t * destid_array;
		} fabric_multicast_set;
		struct {
			int unit;
			int link_fail_count;
			int * operating_interval;
		} fabric_operating_interval_get;
		struct {
			int unit;
			int pkt_adjust_selector;
			int * pkt_adjust_len;
		} fabric_packet_adjust_get;
		struct {
			int unit;
			int pkt_adjust_selector;
			int pkt_adjust_len;
		} fabric_packet_adjust_set;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t modid;
			bcm_fabric_pcp_mode_config_t * pcp_config;
		} fabric_pcp_dest_mode_config_get;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t modid;
			bcm_fabric_pcp_mode_config_t * pcp_config;
		} fabric_pcp_dest_mode_config_set;
		struct {
			int unit;
			bcm_gport_t parent_port;
			int offset;
			uint32 flags;
			bcm_gport_t * port;
		} fabric_port_create;
		struct {
			int unit;
			bcm_gport_t parent_port;
		} fabric_port_destroy;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_failover_t * failover_id;
			bcm_gport_t * failover_port;
		} fabric_port_failover_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_failover_t failover_id;
			bcm_gport_t failover_port;
		} fabric_port_failover_set;
		struct {
			int unit;
			bcm_gport_t child_port;
			uint32 flags;
			bcm_gport_t * parent_port;
		} fabric_port_get;
		struct {
			int unit;
			bcm_fabric_predicate_action_info_t * predicate_action;
			bcm_fabric_predicate_action_t * predicate_action_id;
		} fabric_predicate_action_create;
		struct {
			int unit;
			bcm_fabric_predicate_action_t predicate_action_id;
		} fabric_predicate_action_destroy;
		struct {
			int unit;
		} fabric_predicate_action_destroy_all;
		struct {
			int unit;
			bcm_fabric_predicate_action_t predicate_action_id;
			bcm_fabric_predicate_action_info_t * predicate_action_info;
		} fabric_predicate_action_get;
		struct {
			int unit;
			bcm_fabric_predicate_action_traverse_cb cb;
			void * user_data;
		} fabric_predicate_action_traverse;
		struct {
			int unit;
			bcm_fabric_predicate_info_t * pred_info;
			bcm_fabric_predicate_t * pred_id;
		} fabric_predicate_create;
		struct {
			int unit;
			bcm_fabric_predicate_t pred_id;
		} fabric_predicate_destroy;
		struct {
			int unit;
		} fabric_predicate_destroy_all;
		struct {
			int unit;
			bcm_fabric_predicate_t pred_id;
			bcm_fabric_predicate_info_t * pred_info;
		} fabric_predicate_get;
		struct {
			int unit;
			bcm_fabric_predicate_traverse_cb cb;
			void * user_data;
		} fabric_predicate_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_cos_t ingress_pri;
			bcm_color_t color;
			int * fabric_priority;
		} fabric_priority_get;
		struct {
			int unit;
			uint32 flags;
			bcm_cos_t ingress_pri;
			bcm_color_t color;
			int fabric_priority;
		} fabric_priority_set;
		struct {
			int unit;
			uint32 flags;
			int base;
			int count;
			bcm_fabric_qsel_t * qsel_id;
		} fabric_qsel_create;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
		} fabric_qsel_destroy;
		struct {
			int unit;
		} fabric_qsel_destroy_all;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			int offset;
			bcm_gport_t * queue;
			bcm_fabric_qsel_offset_t * qsel_offset_id;
		} fabric_qsel_entry_get;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			int offset;
			int count;
			bcm_gport_t * queue;
			bcm_fabric_qsel_offset_t * qsel_offset_id;
		} fabric_qsel_entry_multi_get;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			int offset;
			int count;
			bcm_gport_t * queue;
			bcm_fabric_qsel_offset_t * qsel_offset_id;
		} fabric_qsel_entry_multi_set;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			int offset;
			bcm_gport_t queue;
			bcm_fabric_qsel_offset_t qsel_offset_id;
		} fabric_qsel_entry_set;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			bcm_fabric_qsel_entry_traverse_cb cb;
			void * user_data;
		} fabric_qsel_entry_traverse;
		struct {
			int unit;
			bcm_fabric_qsel_t qsel_id;
			uint32 * flags;
			int * base;
			int * count;
		} fabric_qsel_get;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_qsel_offset_t * qsel_offset_id;
		} fabric_qsel_offset_create;
		struct {
			int unit;
			bcm_fabric_qsel_offset_t qsel_offset_id;
		} fabric_qsel_offset_destroy;
		struct {
			int unit;
		} fabric_qsel_offset_destroy_all;
		struct {
			int unit;
			bcm_fabric_qsel_offset_t qsel_offset_id;
			bcm_cos_t int_pri;
			int * offset;
		} fabric_qsel_offset_entry_get;
		struct {
			int unit;
			bcm_fabric_qsel_offset_t qsel_offset_id;
			bcm_cos_t int_pri;
			int offset;
		} fabric_qsel_offset_entry_set;
		struct {
			int unit;
			bcm_fabric_qsel_offset_t qsel_offset_id;
			bcm_fabric_qsel_offset_entry_traverse_cb cb;
			void * user_data;
		} fabric_qsel_offset_entry_traverse;
		struct {
			int unit;
			bcm_fabric_qsel_offset_traverse_cb cb;
			void * user_data;
		} fabric_qsel_offset_traverse;
		struct {
			int unit;
			bcm_fabric_qsel_traverse_cb cb;
			void * user_data;
		} fabric_qsel_traverse;
		struct {
			int unit;
			int moduleid;
			int links_max;
			uint32 * links_array;
			int * links_count;
		} fabric_reachability_status_get;
		struct {
			int unit;
			uint32 flags;
			uint32 data_out_max_size;
			uint32 * data_out;
			uint32 * data_out_size;
		} fabric_route_rx;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_route_t * route;
			uint32 data_in_size;
			uint32 * data_in;
		} fabric_route_tx;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_fabric_tdm_direct_routing_t * routing_info;
		} fabric_tdm_direct_routing_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_fabric_tdm_direct_routing_t * routing_info;
		} fabric_tdm_direct_routing_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_fabric_tdm_editing_t * editing;
		} fabric_tdm_editing_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_fabric_tdm_editing_t * editing;
		} fabric_tdm_editing_set;
		struct {
			int unit;
			int * enable;
		} fabric_tdm_enable_get;
		struct {
			int unit;
			int enable;
		} fabric_tdm_enable_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} failover_cleanup;
		struct {
			int unit;
			uint32 flags;
			bcm_failover_t * failover_id;
		} failover_create;
		struct {
			int unit;
			bcm_failover_t failover_id;
		} failover_destroy;
		struct {
			int unit;
			bcm_failover_t failover_id;
			int * enable;
		} failover_get;
		struct {
			int unit;
		} failover_init;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_failover_ring_t * failover_ring;
		} failover_ring_config_get;
		struct {
			int unit;
			bcm_failover_ring_t * failover_ring;
		} failover_ring_config_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_failover_t failover_id;
			int enable;
		} failover_set;
		struct {
			int unit;
			bcm_failover_element_t * failover;
			int * enable;
		} failover_status_get;
		struct {
			int unit;
			bcm_failover_element_t * failover;
			int enable;
		} failover_status_set;
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_FCMAP
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_diag_code_t * diag;
		} fcmap_diag_get;
		struct {
			int unit;
			bcm_fcmap_event_t t;
			int * enable;
		} fcmap_event_enable_get;
		struct {
			int unit;
			bcm_fcmap_event_t t;
			int enable;
		} fcmap_event_enable_set;
		struct {
			int unit;
			bcm_fcmap_event_cb cb;
			void * user_data;
		} fcmap_event_register;
		struct {
			int unit;
			bcm_fcmap_event_cb cb;
		} fcmap_event_unregister;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_lf_tr_t * trigger;
			bcm_fcmap_lf_rc_t * rc;
		} fcmap_linkfault_trigger_rc_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_config_t * cfg;
		} fcmap_port_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_config_t * cfg;
		} fcmap_port_config_selective_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_config_t * cfg;
		} fcmap_port_config_selective_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_config_t * cfg;
		} fcmap_port_config_set;
		struct {
			int unit;
			bcm_port_t port;
		} fcmap_port_enable;
		struct {
			int unit;
			bcm_port_t port;
		} fcmap_port_link_reset;
		struct {
			int unit;
			bcm_port_t port;
		} fcmap_port_shutdown;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_port_speed_t speed;
		} fcmap_port_speed_set;
		struct {
			int unit;
			bcm_fcmap_port_traverse_cb callbk;
			void * user_data;
		} fcmap_port_traverse;
		struct {
			int unit;
			bcm_port_t port;
		} fcmap_stat_clear;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_stat_t stat;
			uint64 * val;
		} fcmap_stat_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_stat_t stat;
			uint32 * val;
		} fcmap_stat_get32;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_vlan_vsan_map_t * vlan;
		} fcmap_vlan_map_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_vlan_vsan_map_t * vlan;
		} fcmap_vlan_map_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_fcmap_vlan_vsan_map_t * vlan;
		} fcmap_vlan_map_get;
#endif	/* INCLUDE_FCMAP */
		struct {
			int unit;
		} fcoe_cleanup;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan_id;
			bcm_fcoe_vsan_control_t type;
			int * arg;
		} fcoe_control_vsan_get;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan_id;
			bcm_fcoe_vsan_control_t type;
			int arg;
		} fcoe_control_vsan_set;
		struct {
			int unit;
		} fcoe_enable_set;
		struct {
			int unit;
			uint32 flags;
			uint8 r_ctl;
			bcm_fcoe_fc_header_type_t * hdr_type;
		} fcoe_fc_header_type_get;
		struct {
			int unit;
			uint32 flags;
			uint8 r_ctl;
			bcm_fcoe_fc_header_type_t hdr_type;
		} fcoe_fc_header_type_set;
		struct {
			int unit;
		} fcoe_init;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t intf;
			bcm_fcoe_intf_config_t * cfg;
		} fcoe_intf_config_get;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t intf;
			bcm_fcoe_intf_config_t * cfg;
		} fcoe_intf_config_set;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_add;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_delete;
		struct {
			int unit;
		} fcoe_route_delete_all;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_delete_by_interface;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_delete_by_prefix;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_find;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
			uint32 stat_counter_id;
		} fcoe_route_stat_attach;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
			bcm_fcoe_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_route_stat_counter_get;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
			bcm_fcoe_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_route_stat_counter_set;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
			bcm_fcoe_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_route_stat_counter_sync_get;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
		} fcoe_route_stat_detach;
		struct {
			int unit;
			bcm_fcoe_route_t * route;
			bcm_fcoe_route_stat_t stat;
			uint32 * stat_counter_id;
		} fcoe_route_stat_id_get;
		struct {
			int unit;
			uint32 flags;
			bcm_fcoe_route_traverse_cb trav_fn;
			void * user_data;
		} fcoe_route_traverse;
		struct {
			int unit;
			uint32 options;
			bcm_fcoe_vsan_t * vsan;
			bcm_fcoe_vsan_id_t * vsan_id;
		} fcoe_vsan_create;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan_id;
		} fcoe_vsan_destroy;
		struct {
			int unit;
		} fcoe_vsan_destroy_all;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan_id;
			bcm_fcoe_vsan_t * vsan;
		} fcoe_vsan_get;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan_id;
			bcm_fcoe_vsan_t * vsan;
		} fcoe_vsan_set;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
			uint32 stat_counter_id;
		} fcoe_vsan_stat_attach;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
			bcm_fcoe_vsan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_vsan_stat_counter_get;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
			bcm_fcoe_vsan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_vsan_stat_counter_set;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
			bcm_fcoe_vsan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} fcoe_vsan_stat_counter_sync_get;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
		} fcoe_vsan_stat_detach;
		struct {
			int unit;
			bcm_fcoe_vsan_id_t vsan;
			bcm_fcoe_vsan_stat_t stat;
			uint32 * stat_counter_id;
		} fcoe_vsan_stat_id_get;
		struct {
			int unit;
			bcm_fcoe_vsan_translate_key_config_t * key;
			bcm_fcoe_vsan_action_set_t * action;
		} fcoe_vsan_translate_action_add;
		struct {
			int unit;
			bcm_fcoe_vsan_translate_key_config_t * key;
		} fcoe_vsan_translate_action_delete;
		struct {
			int unit;
			uint32 flags;
			bcm_fcoe_vsan_traverse_cb trav_fn;
			void * user_data;
		} fcoe_vsan_traverse;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_add;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_delete;
		struct {
			int unit;
		} fcoe_zone_delete_all;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_delete_by_did;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_delete_by_sid;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_delete_by_vsan;
		struct {
			int unit;
			bcm_fcoe_zone_entry_t * zone;
		} fcoe_zone_get;
		struct {
			int unit;
			uint32 flags;
			bcm_fcoe_zone_traverse_cb trav_fn;
			void * user_data;
		} fcoe_zone_traverse;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} field_action_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} field_action_delete;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 * param0;
			uint32 * param1;
		} field_action_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint8 * mac;
		} field_action_mac_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_mac_t * mac;
		} field_action_mac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_pbmp_t pbmp;
		} field_action_ports_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_pbmp_t * pbmp;
		} field_action_ports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
		} field_action_remove;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_action_remove_all;
		struct {
			int unit;
			bcm_field_control_t control;
			uint32 * state;
		} field_control_get;
		struct {
			int unit;
			bcm_field_control_t control;
			uint32 state;
		} field_control_set;
		struct {
			int unit;
			bcm_field_data_qualifier_t * data_qualifier;
		} field_data_qualifier_create;
		struct {
			int unit;
			int qual_id;
		} field_data_qualifier_destroy;
		struct {
			int unit;
		} field_data_qualifier_destroy_all;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ethertype_t * etype;
		} field_data_qualifier_ethertype_add;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ethertype_t * etype;
		} field_data_qualifier_ethertype_delete;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_qualifier_t * qual;
		} field_data_qualifier_get;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ip_protocol_t * ip_protocol;
		} field_data_qualifier_ip_protocol_add;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ip_protocol_t * ip_protocol;
		} field_data_qualifier_ip_protocol_delete;
		struct {
			int unit;
			int qual_size;
			int * qual_array;
			int * qual_count;
		} field_data_qualifier_multi_get;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_packet_format_t * packet_format;
		} field_data_qualifier_packet_format_add;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_packet_format_t * packet_format;
		} field_data_qualifier_packet_format_delete;
		struct {
			int unit;
		} field_detach;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_extraction_action_t action;
			int count;
			bcm_field_extraction_field_t * extractions;
		} field_direct_extraction_action_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_extraction_action_t * action;
			int max_count;
			bcm_field_extraction_field_t * extractions;
			int * actual_count;
		} field_direct_extraction_action_get;
		struct {
			int unit;
			bcm_field_entry_t src_entry;
			bcm_field_entry_t * dst_entry;
		} field_entry_copy;
		struct {
			int unit;
			bcm_field_entry_t src_entry;
			bcm_field_entry_t dst_entry;
		} field_entry_copy_id;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_entry_t * entry;
		} field_entry_create;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_entry_t entry;
		} field_entry_create_id;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_destroy;
		struct {
			int unit;
		} field_entry_destroy_all;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * enable_flag;
		} field_entry_enable_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int enable_flag;
		} field_entry_enable_set;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_install;
		struct {
			int unit;
			bcm_field_group_t group;
			int entry_size;
			bcm_field_entry_t * entry_array;
			int * entry_count;
		} field_entry_multi_get;
		struct {
			int unit;
			bcm_field_entry_oper_t * entry_oper;
		} field_entry_operation;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
			int level;
			bcm_policer_t policer_id;
		} field_entry_policer_attach;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
			int level;
		} field_entry_policer_detach;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
		} field_entry_policer_detach_all;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
			int level;
			bcm_policer_t * policer_id;
		} field_entry_policer_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * prio;
		} field_entry_prio_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int prio;
		} field_entry_prio_set;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_reinstall;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_remove;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int stat_id;
		} field_entry_stat_attach;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int stat_id;
		} field_entry_stat_detach;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * stat_id;
		} field_entry_stat_get;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_aset_t * aset;
		} field_group_action_get;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_aset_t aset;
		} field_group_action_set;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_compress;
		struct {
			int unit;
			bcm_field_group_config_t * group_config;
		} field_group_config_create;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_t * group;
		} field_group_create;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_t group;
		} field_group_create_id;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_create_mode;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_create_mode_id;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_destroy;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_field_group_t group;
			int * enable;
		} field_group_enable_get;
		struct {
			int unit;
			bcm_field_group_t group;
			int enable;
		} field_group_enable_set;
		struct {
			int unit;
			bcm_field_group_t group;
			int * enable;
		} field_group_expansion_enable_get;
		struct {
			int unit;
			bcm_field_group_t group;
			int enable;
		} field_group_expansion_enable_set;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_flush;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_qset_t * qset;
		} field_group_get;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_install;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_group_mode_t * mode;
		} field_group_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_port_create_mode;
		struct {
			int unit;
			bcm_port_t port;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_port_create_mode_id;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_ports_create_mode;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_ports_create_mode_id;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_presel_set_t * presel;
		} field_group_presel_get;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_presel_set_t * presel;
		} field_group_presel_set;
		struct {
			int unit;
			bcm_field_group_t group;
			int * priority;
		} field_group_priority_get;
		struct {
			int unit;
			bcm_field_group_t group;
			int priority;
		} field_group_priority_set;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_remove;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_qset_t qset;
		} field_group_set;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_group_status_t * status;
		} field_group_status_get;
		struct {
			int unit;
			bcm_field_group_traverse_cb callback;
			void * user_data;
		} field_group_traverse;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_wlan_create_mode;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_wlan_create_mode_id;
		struct {
			int unit;
		} field_init;
		struct {
			int unit;
			bcm_field_presel_t * presel_id;
		} field_presel_create;
		struct {
			int unit;
			bcm_field_presel_t presel_id;
		} field_presel_create_id;
		struct {
			int unit;
			bcm_field_presel_t presel_id;
		} field_presel_destroy;
		struct {
			int unit;
			bcm_field_qset_t * qset;
			int qual_id;
		} field_qset_data_qualifier_add;
		struct {
			int unit;
			bcm_field_qset_t * qset;
			int qual_id;
		} field_qset_data_qualifier_delete;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int qual_max;
			int * qual_arr;
			int * qual_count;
		} field_qset_data_qualifier_get;
		struct {
			int unit;
			bcm_field_qualify_t qualifier;
			int num_objects;
			int * object_list;
			bcm_field_qset_t * qset;
		} field_qset_id_multi_delete;
		struct {
			int unit;
			bcm_field_qset_t qset;
			bcm_field_qualify_t qualifier;
			int max_objects;
			int * object_list;
			int * count_objects;
		} field_qset_id_multi_get;
		struct {
			int unit;
			bcm_field_qualify_t qualifier;
			int num_objects;
			int * object_list;
			bcm_field_qset_t * qset;
		} field_qset_id_multi_set;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_qualify_t qual_id;
		} field_qualifier_delete;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_AppType_t type;
		} field_qualify_AppType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_AppType_t * type;
		} field_qualify_AppType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ArpOpcode_t data;
		} field_qualify_ArpOpcode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ArpOpcode_t * data;
		} field_qualify_ArpOpcode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ArpSenderIp4;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ArpSenderIp4_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ArpTargetIp4;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ArpTargetIp4_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 flag;
			uint32 size;
		} field_qualify_BigIcmpCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * flag;
			uint32 * size;
		} field_qualify_BigIcmpCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_BypassFilter;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_BypassFilter32;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_BypassFilter32_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_BypassFilter_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_BypassSrcMacFilter;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_BypassSrcMacFilter_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_CascadedKeyValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_CascadedKeyValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ClassId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ClassId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_CnTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_CnTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 color;
		} field_qualify_Color;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * color;
		} field_qualify_Color_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_CpuQueue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_CpuQueue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DSCP;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DSCP_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_decap_t decap;
		} field_qualify_Decap;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Dhcp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Dhcp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DosAttack;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DosAttack_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Drop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Drop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassField;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstClassField_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassL2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstClassL2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassL3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstClassL3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
		} field_qualify_DstGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
		} field_qualify_DstGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DstHiGig;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstHiGig_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_DstIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_DstIp6High_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIp6Low;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_DstIp6Low_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_DstIp6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DstIpLocal;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIpLocal_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_DstIp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t if_id;
		} field_qualify_DstL3Egress;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstL3EgressNextHops;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstL3EgressNextHops_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t * if_id;
		} field_qualify_DstL3Egress_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_DstMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mim_port_id;
		} field_qualify_DstMimGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mim_port_id;
		} field_qualify_DstMimGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mpls_port_id;
		} field_qualify_DstMplsGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mpls_port_id;
		} field_qualify_DstMplsGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t group;
		} field_qualify_DstMulticastGroup;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * group;
		} field_qualify_DstMulticastGroup_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t mpintf;
		} field_qualify_DstMultipath;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_t * mpintf;
		} field_qualify_DstMultipath_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t niv_port_id;
		} field_qualify_DstNivGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * niv_port_id;
		} field_qualify_DstNivGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t data_modid;
			bcm_module_t mask_modid;
			bcm_port_t data_port;
			bcm_port_t mask_port;
		} field_qualify_DstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t * data_modid;
			bcm_module_t * mask_modid;
			bcm_port_t * data_port;
			bcm_port_t * mask_port;
		} field_qualify_DstPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_DstRpfGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_DstRpfGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t data;
			bcm_trunk_t mask;
		} field_qualify_DstTrunk;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t * data;
			bcm_trunk_t * mask;
		} field_qualify_DstTrunk_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t vxlan_port_id;
		} field_qualify_DstVxlanGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * vxlan_port_id;
		} field_qualify_DstVxlanGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t wlan_port_id;
		} field_qualify_DstWlanGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * wlan_port_id;
		} field_qualify_DstWlanGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ECid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ECid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ETag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ETag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_EcnValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_EcnValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassL2Gre;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassL2Gre_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassL3Interface;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassL3Interface_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassTrill;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassTrill_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EgressClassWlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClassWlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EgressClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 flag;
		} field_qualify_EqualL4Port;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * flag;
		} field_qualify_EqualL4Port_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EtherType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EtherType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExtensionHeader2Type;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExtensionHeader2Type_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExtensionHeaderSubCode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExtensionHeaderSubCode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExtensionHeaderType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExtensionHeaderType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit0;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit0_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExternalHit3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExternalHit3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue0;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue0_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_ExternalValue3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_ExternalValue3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FabricQueueTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FabricQueueTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FcoeSOF;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FcoeSOF_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FcoeVersionIsZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FcoeVersionIsZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_Fhei;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FheiSize;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FheiSize_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_Fhei_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanCSCtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanCSCtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanDFCtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanDFCtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FibreChanDstId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FibreChanDstId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FibreChanFCtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FibreChanFCtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t fibre_chan_type;
		} field_qualify_FibreChanInner;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t * fibre_chan_type;
		} field_qualify_FibreChanInner_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t fibre_chan_type;
		} field_qualify_FibreChanOuter;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t * fibre_chan_type;
		} field_qualify_FibreChanOuter_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanRCtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanRCtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanSrcBindCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanSrcBindCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanSrcFpmaCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanSrcFpmaCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FibreChanSrcId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FibreChanSrcId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_FibreChanVFTFabricId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_FibreChanVFTFabricId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanVFTHopCount;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanVFTHopCount_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanVFTPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanVFTPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanVFTValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanVFTValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanVFTVersion;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanVFTVersion_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_FibreChanVFTVsanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_FibreChanVFTVsanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanVFTVsanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanVFTVsanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_FibreChanZoneCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_FibreChanZoneCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_FlowId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_FlowId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ForwardCopy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ForwardCopy_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_data_offset_base_t base_header;
			uint32 data;
			uint32 mask;
		} field_qualify_ForwardingHeaderOffset;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_data_offset_base_t * base_header;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ForwardingHeaderOffset_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ForwardingType_t type;
		} field_qualify_ForwardingType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_ForwardingType_t * type;
		} field_qualify_ForwardingType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_ForwardingVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_ForwardingVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ForwardingVlanValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ForwardingVlanValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_GenericAssociatedChannelLabelValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_GenericAssociatedChannelLabelValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_header_format_t header_format;
		} field_qualify_HeaderFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_header_format_set_t header_format_set;
		} field_qualify_HeaderFormatSet;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_header_format_set_t * header_format_set;
		} field_qualify_HeaderFormatSet_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_header_format_t * header_format;
		} field_qualify_HeaderFormat_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGig;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGigProxy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGigProxy_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGig_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_ISid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_ISid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IcmpError;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IcmpError_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IcmpTypeCode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_IcmpTypeCode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IgmpTypeMaxRespTime;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_IgmpTypeMaxRespTime_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t data;
			bcm_port_t mask;
		} field_qualify_InPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t * data;
			bcm_port_t * mask;
		} field_qualify_InPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t data;
			bcm_pbmp_t mask;
		} field_qualify_InPorts;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t * data;
			bcm_pbmp_t * mask;
		} field_qualify_InPorts_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InVPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InVPort32;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InVPort32_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InVPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IncomingIpIfClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IncomingIpIfClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IngressClassField;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IngressClassField_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IngressECid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IngressECid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IngressInterfaceClassPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IngressInterfaceClassPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IngressStpState;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IngressStpState_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IngressVPortBridgeDisable;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IngressVPortBridgeDisable_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerDSCP;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDSCP_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_InnerDstIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDstIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDstIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerDstIp6High_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerDstIp6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_InnerDstIp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDstMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_InnerDstMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_InnerEtherType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_InnerEtherType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InnerIp6FlowLabel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InnerIp6FlowLabel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerIp6HopLimit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerIp6HopLimit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerIp6NextHeader;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerIp6NextHeader_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t frag_info;
		} field_qualify_InnerIpFrag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t * frag_info;
		} field_qualify_InnerIpFrag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerIpProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t protocol;
		} field_qualify_InnerIpProtocolCommon;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t * protocol;
		} field_qualify_InnerIpProtocolCommon_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerIpProtocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpType_t type;
		} field_qualify_InnerIpType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpType_t * type;
		} field_qualify_InnerIpType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_InnerL4DstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_InnerL4DstPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_InnerL4SrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_InnerL4SrcPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_InnerSrcIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerSrcIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerSrcIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerSrcIp6High_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerSrcIp6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_InnerSrcIp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerSrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_InnerSrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerTos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerTos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 tpid;
		} field_qualify_InnerTpid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * tpid;
		} field_qualify_InnerTpid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerTtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerTtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_InnerVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_InnerVlanActionRange;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_InnerVlanActionRange_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_InnerVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_InnerVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_InnerVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntCongestionNotification;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntCongestionNotification_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntPriority;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntPriority_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassL2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceClassL2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassL3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceClassL3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceClassPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_InterfaceClassProcessingPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_InterfaceClassProcessingPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassVPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceClassVPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_Ip6FlowLabel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_Ip6FlowLabel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6HopLimit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6HopLimit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6NextHeader;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6NextHeader_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6TrafficClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6TrafficClass_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpAddrsNormalized;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpAddrsNormalized_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpAuth;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpAuth_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t frag_info;
		} field_qualify_IpFrag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t * frag_info;
		} field_qualify_IpFrag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IpInfo;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IpInfo_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t protocol;
		} field_qualify_IpProtocolCommon;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t * protocol;
		} field_qualify_IpProtocolCommon_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpProtocol_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpTunnelHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpTunnelHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_IpTunnelValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_IpTunnelValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpType_t type;
		} field_qualify_IpType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpType_t * type;
		} field_qualify_IpType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpmcHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpmcHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpmcStarGroupHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpmcStarGroupHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_IpmcStarGroupValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_IpmcStarGroupValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_IpmcValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_IpmcValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IsEqualValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IsEqualValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2CacheHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2CacheHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2DestHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2DestHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_L2DestValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_L2DestValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_L2Format_t type;
		} field_qualify_L2Format;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_L2Format_t * type;
		} field_qualify_L2Format_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2GreFlowId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2GreFlowId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_L2GreProtocolType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_L2GreProtocolType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2GreSrcIpHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2GreSrcIpHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2GreVfiHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2GreVfiHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_L2GreVsid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L2GreVsid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2Learn;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2Learn_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data1;
			uint32 data2;
			uint32 mask1;
			uint32 mask2;
		} field_qualify_L2PayloadFirstEightBytes;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data1;
			uint32 * data2;
			uint32 * mask1;
			uint32 * mask2;
		} field_qualify_L2PayloadFirstEightBytes_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2SrcHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2SrcHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2SrcStatic;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2SrcStatic_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_L2SrcValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_L2SrcValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2StationMove;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2StationMove_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3DestHostHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3DestHostHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3DestRouteHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3DestRouteHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_L3DestRouteValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_L3DestRouteValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 intf_id;
			uint32 mask;
		} field_qualify_L3Ingress;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L3Ingress_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3Routable;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3Routable_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3SrcBind;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3SrcBind_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3SrcHostHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3SrcHostHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3SrcRouteHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3SrcRouteHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_L3SrcRouteValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_L3SrcRouteValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_L4DstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_L4DstPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_range_t range;
			int invert;
		} field_qualify_L4PortRangeCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int max_count;
			bcm_field_range_t * range;
			int * invert;
			int * count;
		} field_qualify_L4PortRangeCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L4Ports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L4Ports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_L4SrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_L4SrcPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_LearnSrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_LearnSrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_LearnSrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_LearnSrcPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_LearnVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_LearnVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_llc_header_t data;
			bcm_field_llc_header_t mask;
		} field_qualify_Llc;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_llc_header_t * data;
			bcm_field_llc_header_t * mask;
		} field_qualify_Llc_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_LlidValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_LlidValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Loopback;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_LoopbackType_t loopback_type;
		} field_qualify_LoopbackType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_LoopbackType_t * loopback_type;
		} field_qualify_LoopbackType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Loopback_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MHOpcode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MHOpcode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MacAddrsNormalized;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MacAddrsNormalized_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MimSrcGportHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimSrcGportHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MimVfiHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimVfiHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MimVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MimVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MimVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MirrorCopy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MirrorCopy_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MirrorEgressDisabled;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MirrorEgressDisabled_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsBos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsBos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsControlWord;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsControlWordValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsControlWordValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsControlWord_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsForwardingLabel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsForwardingLabelAction;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsForwardingLabelAction32;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsForwardingLabelAction32_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsForwardingLabelAction_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsForwardingLabelBos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsForwardingLabelBos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsForwardingLabelExp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsForwardingLabelExp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsForwardingLabelId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsForwardingLabelId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_MplsForwardingLabelPayload;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_MplsForwardingLabelPayload_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsForwardingLabelTtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsForwardingLabelTtl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsForwardingLabel_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel1;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel1Bos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel1Bos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel1Exp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel1Exp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel1Hit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel1Hit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel1Id;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel1Id_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel1Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel1Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel1_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel2Bos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel2Bos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel2Exp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel2Exp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel2Hit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel2Hit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel2Id;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel2Id_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel2Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel2Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel3Bos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel3Bos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel3Exp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel3Exp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_MplsLabel3Id;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel3Id_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsLabel3Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsLabel3Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_MplsLabel3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsOuterLabelPop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsOuterLabelPop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsStationHitTunnelUnterminated;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsStationHitTunnelUnterminated_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsTerminated;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsTerminatedHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsTerminatedHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_MplsTerminatedValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_MplsTerminatedValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsTerminated_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MyStationHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MyStationHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_NatDstRealmId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_NatDstRealmId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_NatNeeded;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_NatNeeded_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_NatSrcRealmId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_NatSrcRealmId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_NativeVSwitch;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_NativeVSwitchValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_NativeVSwitchValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_NativeVSwitch_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OamMdl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OamMdl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t data;
			bcm_port_t mask;
		} field_qualify_OutPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t * data;
			bcm_port_t * mask;
		} field_qualify_OutPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t data;
			bcm_pbmp_t mask;
		} field_qualify_OutPorts;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t * data;
			bcm_pbmp_t * mask;
		} field_qualify_OutPorts_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OutVPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_OutVPort32;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_OutVPort32_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OutVPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 tpid;
		} field_qualify_OuterTpid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * tpid;
		} field_qualify_OuterTpid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_OuterVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_OuterVlanActionRange;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_OuterVlanActionRange_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_OuterVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_OuterVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_OuterVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_range_t range;
			int invert;
		} field_qualify_PacketLengthRangeCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int max_count;
			bcm_field_range_t * range;
			int * invert;
			int * count;
		} field_qualify_PacketLengthRangeCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PacketRes;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_PacketRes_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PacketSize;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_PacketSize_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PacketTerminatedBytes;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_PacketTerminatedBytes_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PolicerIntPrio;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PolicerIntPrio_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_PortOrientation;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_PortOrientation_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ptch;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ptch_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_range_t range;
			int invert;
		} field_qualify_RangeCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int max_count;
			bcm_field_range_t * range;
			int * invert;
			int * count;
		} field_qualify_RangeCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RecoverableDrop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RecoverableDrop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RepCopy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RepCopy_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ReplicantAny;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ReplicantAny_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ReplicantFirst;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ReplicantFirst_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_RouterAlertLabelValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_RouterAlertLabelValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Rtag7AHashLower;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Rtag7AHashLower_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Rtag7AHashUpper;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Rtag7AHashUpper_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Rtag7BHashLower;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Rtag7BHashLower_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_Rtag7BHashUpper;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_Rtag7BHashUpper_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_rx_trap_t data;
		} field_qualify_RxTrapCode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_RxTrapCodeForSnoop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_RxTrapCodeForSnoop_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_rx_trap_t * data;
		} field_qualify_RxTrapCode_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_RxTrapData;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_RxTrapData_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_snap_header_t data;
			bcm_field_snap_header_t mask;
		} field_qualify_Snap;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_snap_header_t * data;
			bcm_field_snap_header_t * mask;
		} field_qualify_Snap_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_SnoopCopy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SnoopCopy_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassField;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SrcClassField_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassL2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SrcClassL2_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassL3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SrcClassL3_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
		} field_qualify_SrcGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
		} field_qualify_SrcGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_SrcIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_SrcIp6High_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6Low;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_SrcIp6Low_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_SrcIp6_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 flag;
		} field_qualify_SrcIpEqualDstIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * flag;
		} field_qualify_SrcIpEqualDstIp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_SrcIp_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_SrcMac_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mim_port_id;
		} field_qualify_SrcMimGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mim_port_id;
		} field_qualify_SrcMimGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_SrcModPortGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_SrcModPortGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_SrcModuleGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_SrcModuleGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t mpls_port_id;
		} field_qualify_SrcMplsGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * mpls_port_id;
		} field_qualify_SrcMplsGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t niv_port_id;
		} field_qualify_SrcNivGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * niv_port_id;
		} field_qualify_SrcNivGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t data_modid;
			bcm_module_t mask_modid;
			bcm_port_t data_port;
			bcm_port_t mask_port;
		} field_qualify_SrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t * data_modid;
			bcm_module_t * mask_modid;
			bcm_port_t * data_port;
			bcm_port_t * mask_port;
		} field_qualify_SrcPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t data;
			bcm_trunk_t mask;
		} field_qualify_SrcTrunk;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_SrcTrunkMemberGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_SrcTrunkMemberGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t * data;
			bcm_trunk_t * mask;
		} field_qualify_SrcTrunk_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_SrcVirtualPortValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcVirtualPortValid_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t vxlan_port_id;
		} field_qualify_SrcVxlanGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * vxlan_port_id;
		} field_qualify_SrcVxlanGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t wlan_port_id;
		} field_qualify_SrcWlanGport;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * wlan_port_id;
		} field_qualify_SrcWlanGport_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_stage_t data;
		} field_qualify_Stage;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_stage_t * data;
		} field_qualify_Stage_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_SubportPktTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_SubportPktTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TcpControl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TcpControl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TcpHeaderSize;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TcpHeaderSize_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 flag;
		} field_qualify_TcpSequenceZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * flag;
		} field_qualify_TcpSequenceZero_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Tos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Tos_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_TranslatedInnerVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TranslatedInnerVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TranslatedInnerVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_TranslatedInnerVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_TranslatedInnerVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TranslatedInnerVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TranslatedInnerVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_TranslatedInnerVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_TranslatedOuterVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TranslatedOuterVlanCfi;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TranslatedOuterVlanCfi_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_TranslatedOuterVlanId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_TranslatedOuterVlanId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TranslatedOuterVlanPri;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TranslatedOuterVlanPri_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_TranslatedOuterVlan_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TranslatedVlanFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TranslatedVlanFormat_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TrillEgressRbridge;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillEgressRbridgeHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillEgressRbridgeHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_TrillEgressRbridge_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillHopCount;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillHopCount_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillIVersion;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillIVersion_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_TrillIngressRbridge;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillIngressRbridgeHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillIngressRbridgeHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_TrillIngressRbridge_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillMultiDestination;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillMultiDestination_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TrillOpLength;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TrillOpLength_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_TrillPayload;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_TrillPayload_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TrunkHashResult;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_TrunkHashResult_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ttl_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_TunnelId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_TunnelId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelTerminated;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelTerminatedHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelTerminatedHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_TunnelTerminatedValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_TunnelTerminatedValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelTerminated_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_TunnelType_t tunnel_type;
		} field_qualify_TunnelType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_TunnelType_t * tunnel_type;
		} field_qualify_TunnelType_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_range_t range;
			int invert;
		} field_qualify_VPortRangeCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int max_count;
			bcm_field_range_t * range;
			int * invert;
			int * count;
		} field_qualify_VPortRangeCheck_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VlanFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VlanFormat_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VlanTranslationHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VlanTranslationHit_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 data;
			uint64 mask;
		} field_qualify_VlanTranslationValue;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint64 * data;
			uint64 * mask;
		} field_qualify_VlanTranslationValue_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_VnTag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_VnTag_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vpn_t data;
			bcm_vpn_t mask;
		} field_qualify_Vpn;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t port_id;
		} field_qualify_VpnUnknownDstMacDstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_gport_t * port_id;
		} field_qualify_VpnUnknownDstMacDstPort_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vpn_t * data;
			bcm_vpn_t * mask;
		} field_qualify_Vpn_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_Vrf;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_Vrf_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VxlanFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VxlanFlags_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_VxlanNetworkId;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_VxlanNetworkId_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_qualify_clear;
		struct {
			int unit;
			bcm_field_entry_t eid;
			int qual_id;
			uint8 * data;
			uint8 * mask;
			uint16 length;
		} field_qualify_data;
		struct {
			int unit;
			bcm_field_entry_t eid;
			int qual_id;
			uint16 length_max;
			uint8 * data;
			uint8 * mask;
			uint16 * length;
		} field_qualify_data_get;
		struct {
			int unit;
			bcm_field_entry_t eid;
			bcm_udf_id_t udf_id;
			int length;
			uint8 * data;
			uint8 * mask;
		} field_qualify_udf;
		struct {
			int unit;
			bcm_field_entry_t eid;
			bcm_udf_id_t udf_id;
			int max_length;
			uint8 * data;
			uint8 * mask;
			int * actual_length;
		} field_qualify_udf_get;
		struct {
			int unit;
			bcm_field_range_t * range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
		} field_range_create;
		struct {
			int unit;
			bcm_field_range_t range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
		} field_range_create_id;
		struct {
			int unit;
			bcm_field_range_t range;
		} field_range_destroy;
		struct {
			int unit;
			bcm_field_range_t range;
			uint32 * flags;
			bcm_l4_port_t * min;
			bcm_l4_port_t * max;
		} field_range_get;
		struct {
			int unit;
			bcm_field_range_t * range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
			bcm_if_group_t group;
		} field_range_group_create;
		struct {
			int unit;
			bcm_field_range_t range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
			bcm_if_group_t group;
		} field_range_group_create_id;
		struct {
			int unit;
			bcm_field_range_t * range_id;
			uint32 create_flags;
			int count;
			uint32 * range_flags;
			uint32 * min_value;
			uint32 * max_value;
		} field_range_multi_create;
		struct {
			int unit;
			bcm_field_range_t range_id;
			int max_count;
			uint32 * range_flags;
			uint32 * minimum_value;
			uint32 * maxamum_value;
			int * actual_count;
		} field_range_multi_get;
		struct {
			int unit;
		} field_resync;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			char * pfx;
		} field_show;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_field_stage_t stage;
			bcm_field_stage_info_t * info;
		} field_stage_info_get;
		struct {
			int unit;
			int stat_id;
			uint64 value;
		} field_stat_all_set;
		struct {
			int unit;
			int stat_id;
			uint32 value;
		} field_stat_all_set32;
		struct {
			int unit;
			bcm_field_group_t group;
			uint32 stat_counter_id;
			uint32 * stat_id;
		} field_stat_attach;
		struct {
			int unit;
			int stat_id;
			int nstat;
			bcm_field_stat_t * stat_arr;
		} field_stat_config_get;
		struct {
			int unit;
			uint32 stat_id;
			bcm_field_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} field_stat_counter_get;
		struct {
			int unit;
			uint32 stat_id;
			bcm_field_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} field_stat_counter_set;
		struct {
			int unit;
			uint32 stat_id;
			bcm_field_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} field_stat_counter_sync_get;
		struct {
			int unit;
			bcm_field_group_t group;
			int nstat;
			bcm_field_stat_t * stat_arr;
			int * stat_id;
		} field_stat_create;
		struct {
			int unit;
			bcm_field_group_t group;
			int nstat;
			bcm_field_stat_t * stat_arr;
			int stat_id;
		} field_stat_create_id;
		struct {
			int unit;
			int stat_id;
		} field_stat_destroy;
		struct {
			int unit;
			uint32 stat_id;
		} field_stat_detach;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint64 * value;
		} field_stat_get;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint32 * value;
		} field_stat_get32;
		struct {
			int unit;
			bcm_field_group_t group;
			uint32 stat_id;
			uint32 * stat_counter_id;
		} field_stat_id_get;
		struct {
			int unit;
			int stat_id;
			int nstat;
			bcm_field_stat_t * stat_arr;
			uint64 * value_arr;
		} field_stat_multi_get;
		struct {
			int unit;
			int stat_id;
			int nstat;
			bcm_field_stat_t * stat_arr;
			uint32 * value_arr;
		} field_stat_multi_get32;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint64 value;
		} field_stat_set;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint32 value;
		} field_stat_set32;
		struct {
			int unit;
			int stat_id;
			int * stat_size;
		} field_stat_size;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint64 * value;
		} field_stat_sync_get;
		struct {
			int unit;
			int stat_id;
			bcm_field_stat_t stat;
			uint32 * value;
		} field_stat_sync_get32;
		struct {
			char * type;
			char * subtype;
			int remunit;
		} find;
#ifdef	INCLUDE_I2C
		struct {
			int unit;
			int fd;
			int opcode;
			void * data;
			int len;
		} i2c_ioctl;
		struct {
			int unit;
			char * devname;
			uint32 flags;
			int speed;
		} i2c_open;
		struct {
			int unit;
			int fd;
			uint32 addr;
			uint8 * data;
			uint32 * nbytes;
		} i2c_read;
		struct {
			int unit;
			int fd;
			uint32 addr;
			uint8 * data;
			uint32 nbytes;
		} i2c_write;
#endif	/* INCLUDE_I2C */
		struct {
			int unit;
			bcm_info_t * info;
		} info_get;
		struct {
			int unit;
		} init;
		struct {
			int unit;
		} init_check;
		struct {
			int unit;
			uint32 flags;
		} init_selective;
		struct {
			uint8 * ip6;
			int len;
		} ip6_mask_create;
		struct {
			uint8 * mask;
		} ip6_mask_length;
	/* bcm_ip_mask_create has a non int return type */
		struct {
			bcm_ip_t ip;
		} ip_mask_length;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_port_t port;
			bcm_ipfix_config_t * config;
		} ipfix_config_get;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_port_t port;
			bcm_ipfix_config_t * config;
		} ipfix_config_set;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcm_ipfix_mirror_config_t * config;
		} ipfix_mirror_config_get;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcm_ipfix_mirror_config_t * config;
		} ipfix_mirror_config_set;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcm_gport_t mirror_dest_id;
		} ipfix_mirror_port_dest_add;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcm_gport_t mirror_dest_id;
		} ipfix_mirror_port_dest_delete;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
		} ipfix_mirror_port_dest_delete_all;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest_id;
			int * mirror_dest_count;
		} ipfix_mirror_port_dest_get;
		struct {
			int unit;
			bcm_ipfix_rate_t * rate_info;
		} ipfix_rate_create;
		struct {
			int unit;
			bcm_ipfix_rate_id_t rate_id;
		} ipfix_rate_destroy;
		struct {
			int unit;
		} ipfix_rate_destroy_all;
		struct {
			int unit;
			bcm_ipfix_rate_t * rate_info;
		} ipfix_rate_get;
		struct {
			int unit;
			bcm_ipfix_rate_id_t rate_id;
			bcm_gport_t mirror_dest_id;
		} ipfix_rate_mirror_add;
		struct {
			int unit;
			bcm_ipfix_rate_id_t rate_id;
			bcm_gport_t mirror_dest_id;
		} ipfix_rate_mirror_delete;
		struct {
			int unit;
			bcm_ipfix_rate_id_t rate_id;
		} ipfix_rate_mirror_delete_all;
		struct {
			int unit;
			bcm_ipfix_rate_id_t rate_id;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest_id;
			int * mirror_dest_count;
		} ipfix_rate_mirror_get;
		struct {
			int unit;
			bcm_ipfix_rate_traverse_cb cb;
			void * userdata;
		} ipfix_rate_traverse;
		struct {
			int unit;
			bcm_ipfix_callback_t callback;
			void * userdata;
		} ipfix_register;
		struct {
			int unit;
			bcm_ipfix_callback_t callback;
			void * userdata;
		} ipfix_unregister;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_ipmc_addr_t * data;
		} ipmc_add;
		struct {
			int unit;
			uint32 flags;
			bcm_ipmc_traverse_cb age_cb;
			void * user_data;
		} ipmc_age;
		struct {
			int unit;
			int ipmc_idx;
			bcm_port_t port;
			bcm_pbmp_t pbmp;
		} ipmc_bitmap_del;
		struct {
			int unit;
			int ipmc_idx;
			bcm_port_t port;
			bcm_pbmp_t * pbmp;
		} ipmc_bitmap_get;
		struct {
			int unit;
			int * max_index;
		} ipmc_bitmap_max_get;
		struct {
			int unit;
			int ipmc_idx;
			bcm_port_t port;
			bcm_pbmp_t pbmp;
		} ipmc_bitmap_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_ipmc_counters_t * counters;
		} ipmc_counters_get;
		struct {
			int unit;
		} ipmc_detach;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
			int * untag;
			bcm_vlan_t * vid;
			int * ttl_threshold;
		} ipmc_egress_port_get;
		struct {
			int unit;
		} ipmc_egress_port_init;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
			int untag;
			bcm_vlan_t vid;
			int ttl_threshold;
		} ipmc_egress_port_set;
		struct {
			int unit;
			int enable;
		} ipmc_enable;
		struct {
			int unit;
			bcm_ipmc_addr_t * data;
		} ipmc_find;
		struct {
			int unit;
		} ipmc_init;
		struct {
			int unit;
			int * range_id;
			bcm_ipmc_range_t * range;
		} ipmc_range_add;
		struct {
			int unit;
			int range_id;
		} ipmc_range_delete;
		struct {
			int unit;
		} ipmc_range_delete_all;
		struct {
			int unit;
			int range_id;
			bcm_ipmc_range_t * range;
		} ipmc_range_get;
		struct {
			int unit;
			int * size;
		} ipmc_range_size_get;
		struct {
			int unit;
			bcm_ipmc_addr_t * data;
		} ipmc_remove;
		struct {
			int unit;
		} ipmc_remove_all;
		struct {
			int unit;
			int rp_id;
			bcm_if_t intf_id;
		} ipmc_rp_add;
		struct {
			int unit;
			uint32 flags;
			int * rp_id;
		} ipmc_rp_create;
		struct {
			int unit;
			int rp_id;
			bcm_if_t intf_id;
		} ipmc_rp_delete;
		struct {
			int unit;
			int rp_id;
		} ipmc_rp_delete_all;
		struct {
			int unit;
			int rp_id;
		} ipmc_rp_destroy;
		struct {
			int unit;
			int rp_id;
			int intf_max;
			bcm_if_t * intf_array;
			int * intf_count;
		} ipmc_rp_get;
		struct {
			int unit;
			int rp_id;
			int intf_count;
			bcm_if_t * intf_array;
		} ipmc_rp_set;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			uint32 stat_counter_id;
		} ipmc_stat_attach;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			bcm_ipmc_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} ipmc_stat_counter_get;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			bcm_ipmc_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} ipmc_stat_counter_set;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			bcm_ipmc_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} ipmc_stat_counter_sync_get;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
		} ipmc_stat_detach;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			bcm_ipmc_stat_t stat;
			uint32 * stat_counter_id;
		} ipmc_stat_id_get;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			int nstat;
			bcm_ipmc_stat_t * stat_arr;
			uint64 * value_arr;
		} ipmc_stat_multi_get;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			int nstat;
			bcm_ipmc_stat_t * stat_arr;
			uint32 * value_arr;
		} ipmc_stat_multi_get32;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			int nstat;
			bcm_ipmc_stat_t * stat_arr;
			uint64 * value_arr;
		} ipmc_stat_multi_set;
		struct {
			int unit;
			bcm_ipmc_addr_t * info;
			int nstat;
			bcm_ipmc_stat_t * stat_arr;
			uint32 * value_arr;
		} ipmc_stat_multi_set32;
		struct {
			int unit;
			uint32 flags;
			bcm_ipmc_traverse_cb cb;
			void * user_data;
		} ipmc_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
		} knet_cleanup;
		struct {
			int unit;
			bcm_knet_filter_t * filter;
		} knet_filter_create;
		struct {
			int unit;
			int filter_id;
		} knet_filter_destroy;
		struct {
			int unit;
			int filter_id;
			bcm_knet_filter_t * filter;
		} knet_filter_get;
		struct {
			int unit;
			bcm_knet_filter_traverse_cb trav_fn;
			void * user_data;
		} knet_filter_traverse;
		struct {
			int unit;
		} knet_init;
		struct {
			int unit;
			bcm_knet_netif_t * netif;
		} knet_netif_create;
		struct {
			int unit;
			int netif_id;
		} knet_netif_destroy;
		struct {
			int unit;
			int netif_id;
			bcm_knet_netif_t * netif;
		} knet_netif_get;
		struct {
			int unit;
			bcm_knet_netif_traverse_cb trav_fn;
			void * user_data;
		} knet_netif_traverse;
		struct {
			int unit;
			bcm_l2_addr_t * l2addr;
		} l2_addr_add;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
		} l2_addr_delete;
		struct {
			int unit;
			uint8 * mac;
			uint32 flags;
		} l2_addr_delete_by_mac;
		struct {
			int unit;
			uint8 * mac;
			bcm_module_t mod;
			bcm_port_t port;
			uint32 flags;
		} l2_addr_delete_by_mac_port;
		struct {
			int unit;
			bcm_module_t mod;
			bcm_port_t port;
			uint32 flags;
		} l2_addr_delete_by_port;
		struct {
			int unit;
			bcm_trunk_t tid;
			uint32 flags;
		} l2_addr_delete_by_trunk;
		struct {
			int unit;
			bcm_vlan_t vid;
			uint32 flags;
		} l2_addr_delete_by_vlan;
		struct {
			int unit;
			uint32 flags;
			int num_pairs;
			bcm_vlan_t * vlan;
			bcm_gport_t * gport;
		} l2_addr_delete_by_vlan_gport_multi;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_module_t mod;
			bcm_port_t port;
			uint32 flags;
		} l2_addr_delete_by_vlan_port;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_trunk_t tid;
			uint32 flags;
		} l2_addr_delete_by_vlan_trunk;
		struct {
			int unit;
		} l2_addr_freeze;
		struct {
			int unit;
			uint8 * mac_addr;
			bcm_vlan_t vid;
			bcm_l2_addr_t * l2addr;
		} l2_addr_get;
		struct {
			int unit;
			bcm_l2_addr_distribute_t * distribution;
		} l2_addr_msg_distribute_get;
		struct {
			int unit;
			bcm_l2_addr_distribute_t * distribution;
		} l2_addr_msg_distribute_set;
		struct {
			int unit;
			bcm_l2_addr_callback_t callback;
			void * userdata;
		} l2_addr_register;
		struct {
			int unit;
		} l2_addr_thaw;
		struct {
			int unit;
			bcm_l2_addr_callback_t callback;
			void * userdata;
		} l2_addr_unregister;
		struct {
			int unit;
			int * age_seconds;
		} l2_age_timer_get;
		struct {
			int unit;
			int age_seconds;
		} l2_age_timer_set;
		struct {
			int unit;
			bcm_l2_auth_addr_t * addr;
		} l2_auth_add;
		struct {
			int unit;
			bcm_l2_auth_addr_t * addr;
		} l2_auth_delete;
		struct {
			int unit;
		} l2_auth_delete_all;
		struct {
			int unit;
			bcm_l2_auth_addr_t * addr;
		} l2_auth_get;
		struct {
			int unit;
			bcm_l2_auth_traverse_cb trav_fn;
			void * user_data;
		} l2_auth_traverse;
		struct {
			int unit;
			int index;
		} l2_cache_delete;
		struct {
			int unit;
		} l2_cache_delete_all;
		struct {
			int unit;
			int index;
			bcm_l2_cache_addr_t * addr;
		} l2_cache_get;
		struct {
			int unit;
		} l2_cache_init;
		struct {
			int unit;
			int index;
			bcm_l2_cache_addr_t * addr;
			int * index_used;
		} l2_cache_set;
		struct {
			int unit;
			int * size;
		} l2_cache_size_get;
		struct {
			int unit;
		} l2_clear;
		struct {
			int unit;
			bcm_l2_addr_t * addr;
			bcm_l2_addr_t * cf_array;
			int cf_max;
			int * cf_count;
		} l2_conflict_get;
		struct {
			int unit;
		} l2_detach;
		struct {
			int unit;
			bcm_l2_egress_t * egr;
		} l2_egress_create;
		struct {
			int unit;
			bcm_if_t encap_id;
		} l2_egress_destroy;
		struct {
			int unit;
			bcm_l2_egress_t * egr;
			bcm_if_t * encap_id;
		} l2_egress_find;
		struct {
			int unit;
			bcm_if_t encap_id;
			bcm_l2_egress_t * egr;
		} l2_egress_get;
		struct {
			int unit;
			bcm_l2_egress_traverse_cb trav_fn;
			void * user_data;
		} l2_egress_traverse;
		struct {
			int unit;
			int gport_id;
			bcm_l2_gport_forward_info_t * forward_info;
		} l2_gport_forward_info_get;
		struct {
			int unit;
		} l2_init;
		struct {
			int unit;
			char * pfx;
			bcm_l2_addr_t * entry;
			char * sfx;
		} l2_key_dump;
		struct {
			int unit;
			int lclass;
			int * lclass_prio;
			uint32 * flags;
		} l2_learn_class_get;
		struct {
			int unit;
			int lclass;
			int lclass_prio;
			uint32 flags;
		} l2_learn_class_set;
		struct {
			int unit;
			bcm_l2_learn_limit_t * limit;
		} l2_learn_limit_get;
		struct {
			int unit;
			bcm_l2_learn_limit_t * limit;
		} l2_learn_limit_set;
		struct {
			int unit;
			bcm_l2_learn_msgs_config_t * learn_msg_config;
		} l2_learn_msgs_config_get;
		struct {
			int unit;
			bcm_l2_learn_msgs_config_t * learn_msg_config;
		} l2_learn_msgs_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			int * lclass;
		} l2_learn_port_class_get;
		struct {
			int unit;
			bcm_gport_t port;
			int lclass;
		} l2_learn_port_class_set;
		struct {
			int unit;
			bcm_l2_mac_port_t * mac_port;
		} l2_mac_port_create;
		struct {
			int unit;
			bcm_gport_t mac_port_id;
		} l2_mac_port_destroy;
		struct {
			int unit;
		} l2_mac_port_destroy_all;
		struct {
			int unit;
			bcm_l2_mac_port_t * mac_port;
		} l2_mac_port_get;
		struct {
			int unit;
			bcm_l2_mac_port_traverse_cb cb;
			void * user_data;
		} l2_mac_port_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_l2_addr_t * match_addr;
			bcm_l2_addr_t * mask_addr;
			bcm_l2_traverse_cb trav_fn;
			void * user_data;
		} l2_match_masked_traverse;
		struct {
			int unit;
			uint32 flags;
			bcm_l2_addr_t * match_addr;
			bcm_l2_traverse_cb trav_fn;
			void * user_data;
		} l2_matched_traverse;
		struct {
			int unit;
			int modid;
			int port;
		} l2_port_native;
		struct {
			int unit;
			uint32 flags;
			bcm_l2_addr_t * match_addr;
			bcm_module_t new_module;
			bcm_port_t new_port;
			bcm_trunk_t new_trunk;
		} l2_replace;
		struct {
			int unit;
			uint32 flags;
			bcm_l2_addr_t * match_addr;
			bcm_l2_addr_t * mask_addr;
			bcm_l2_addr_t * replace_addr;
			bcm_l2_addr_t * replace_mask_addr;
		} l2_replace_match;
		struct {
			int unit;
			bcm_l2_ring_t * l2_ring;
		} l2_ring_replace;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			int enable;
		} l2_stat_enable_set;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint64 * val;
		} l2_stat_get;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint32 * val;
		} l2_stat_get32;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint64 val;
		} l2_stat_set;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint32 val;
		} l2_stat_set32;
		struct {
			int unit;
			int * station_id;
			bcm_l2_station_t * station;
		} l2_station_add;
		struct {
			int unit;
			int station_id;
		} l2_station_delete;
		struct {
			int unit;
		} l2_station_delete_all;
		struct {
			int unit;
			int station_id;
			bcm_l2_station_t * station;
		} l2_station_get;
		struct {
			int unit;
			int * size;
		} l2_station_size_get;
		struct {
			int unit;
			bcm_l2_traverse_cb trav_fn;
			void * user_data;
		} l2_traverse;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vlan;
		} l2_tunnel_add;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vlan;
		} l2_tunnel_delete;
		struct {
			int unit;
		} l2_tunnel_delete_all;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} l2gre_cleanup;
		struct {
			int unit;
		} l2gre_init;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_l2gre_port_t * l2gre_port;
		} l2gre_port_add;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_gport_t l2gre_port_id;
		} l2gre_port_delete;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
		} l2gre_port_delete_all;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_l2gre_port_t * l2gre_port;
		} l2gre_port_get;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			int port_max;
			bcm_l2gre_port_t * port_array;
			int * port_count;
		} l2gre_port_get_all;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			uint32 stat_counter_id;
		} l2gre_stat_attach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_l2gre_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l2gre_stat_counter_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_l2gre_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l2gre_stat_counter_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_l2gre_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l2gre_stat_counter_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
		} l2gre_stat_detach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_l2gre_stat_t stat;
			uint32 * stat_counter_id;
		} l2gre_stat_id_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_l2gre_stat_t * stat_arr;
			uint64 * value_arr;
		} l2gre_stat_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_l2gre_stat_t * stat_arr;
			uint32 * value_arr;
		} l2gre_stat_multi_get32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_l2gre_stat_t * stat_arr;
			uint64 * value_arr;
		} l2gre_stat_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_l2gre_stat_t * stat_arr;
			uint32 * value_arr;
		} l2gre_stat_multi_set32;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} l2gre_tunnel_initiator_create;
		struct {
			int unit;
			bcm_gport_t l2gre_tunnel_id;
		} l2gre_tunnel_initiator_destroy;
		struct {
			int unit;
		} l2gre_tunnel_initiator_destroy_all;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} l2gre_tunnel_initiator_get;
		struct {
			int unit;
			bcm_tunnel_initiator_traverse_cb cb;
			void * user_data;
		} l2gre_tunnel_initiator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} l2gre_tunnel_terminator_create;
		struct {
			int unit;
			bcm_gport_t l2gre_tunnel_id;
		} l2gre_tunnel_terminator_destroy;
		struct {
			int unit;
		} l2gre_tunnel_terminator_destroy_all;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} l2gre_tunnel_terminator_get;
		struct {
			int unit;
			bcm_tunnel_terminator_traverse_cb cb;
			void * user_data;
		} l2gre_tunnel_terminator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} l2gre_tunnel_terminator_update;
		struct {
			int unit;
			bcm_l2gre_vpn_config_t * info;
		} l2gre_vpn_create;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
		} l2gre_vpn_destroy;
		struct {
			int unit;
		} l2gre_vpn_destroy_all;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_l2gre_vpn_config_t * info;
		} l2gre_vpn_get;
		struct {
			int unit;
			bcm_l2gre_vpn_traverse_cb cb;
			void * user_data;
		} l2gre_vpn_traverse;
		struct {
			int unit;
		} l3_cleanup;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_egress_t * egr;
			bcm_if_t * if_id;
		} l3_egress_create;
		struct {
			int unit;
			bcm_if_t intf;
		} l3_egress_destroy;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp;
			bcm_if_t intf;
		} l3_egress_ecmp_add;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp;
			int intf_count;
			bcm_if_t * intf_array;
		} l3_egress_ecmp_create;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp;
			bcm_if_t intf;
		} l3_egress_ecmp_delete;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp;
		} l3_egress_ecmp_destroy;
		struct {
			int unit;
			uint32 * flags;
			int ethertype_max;
			int * ethertype_array;
			int * ethertype_count;
		} l3_egress_ecmp_ethertype_get;
		struct {
			int unit;
			uint32 flags;
			int ethertype_count;
			int * ethertype_array;
		} l3_egress_ecmp_ethertype_set;
		struct {
			int unit;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_l3_egress_ecmp_t * ecmp;
		} l3_egress_ecmp_find;
		struct {
			int unit;
			bcm_l3_egress_ecmp_t * ecmp;
			int intf_size;
			bcm_if_t * intf_array;
			int * intf_count;
		} l3_egress_ecmp_get;
		struct {
			int unit;
			bcm_if_t intf;
			int * status;
		} l3_egress_ecmp_member_status_get;
		struct {
			int unit;
			bcm_if_t intf;
			int status;
		} l3_egress_ecmp_member_status_set;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_egress_ecmp_resilient_entry_t * match_entry;
			int * num_entries;
			bcm_l3_egress_ecmp_resilient_entry_t * replace_entry;
		} l3_egress_ecmp_resilient_replace;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_egress_ecmp_resilient_entry_t * match_entry;
			bcm_l3_egress_ecmp_resilient_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_ecmp_resilient_traverse;
		struct {
			int unit;
			bcm_l3_egress_ecmp_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_ecmp_traverse;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			bcm_if_t * intf;
		} l3_egress_find;
		struct {
			int unit;
			bcm_if_t intf;
			bcm_l3_egress_t * egr;
		} l3_egress_get;
		struct {
			int unit;
			bcm_if_t mpintf;
			bcm_if_t intf;
		} l3_egress_multipath_add;
		struct {
			int unit;
			uint32 flags;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_if_t * mpintf;
		} l3_egress_multipath_create;
		struct {
			int unit;
			bcm_if_t mpintf;
			bcm_if_t intf;
		} l3_egress_multipath_delete;
		struct {
			int unit;
			bcm_if_t mpintf;
		} l3_egress_multipath_destroy;
		struct {
			int unit;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_if_t * mpintf;
		} l3_egress_multipath_find;
		struct {
			int unit;
			bcm_if_t mpintf;
			int intf_size;
			bcm_if_t * intf_array;
			int * intf_count;
		} l3_egress_multipath_get;
		struct {
			int unit;
			uint32 flags;
			int max_paths;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_if_t * mpintf;
		} l3_egress_multipath_max_create;
		struct {
			int unit;
			bcm_l3_egress_multipath_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_multipath_traverse;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 stat_counter_id;
		} l3_egress_stat_attach;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_egress_stat_counter_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_egress_stat_counter_set;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_egress_stat_counter_sync_get;
		struct {
			int unit;
			bcm_if_t intf_id;
		} l3_egress_stat_detach;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			int enable;
		} l3_egress_stat_enable_set;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			bcm_l3_stat_t stat;
			uint64 * val;
		} l3_egress_stat_get;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			bcm_l3_stat_t stat;
			uint32 * val;
		} l3_egress_stat_get32;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 * stat_counter_id;
		} l3_egress_stat_id_get;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			bcm_l3_stat_t stat;
			uint64 val;
		} l3_egress_stat_set;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			bcm_l3_stat_t stat;
			uint32 val;
		} l3_egress_stat_set32;
		struct {
			int unit;
			bcm_l3_egress_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_traverse;
		struct {
			int unit;
			int enable;
		} l3_enable_set;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_add;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_host_traverse_cb age_cb;
			void * user_data;
		} l3_host_age;
		struct {
			int unit;
			bcm_l3_key_t * ipkey;
			bcm_l3_key_t * cf_array;
			int cf_max;
			int * cf_count;
		} l3_host_conflict_get;
		struct {
			int unit;
			bcm_l3_host_t * ip_addr;
		} l3_host_delete;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_delete_all;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_delete_by_interface;
		struct {
			int unit;
			bcm_l3_route_t * ip_addr;
		} l3_host_delete_by_network;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_find;
		struct {
			int unit;
			bcm_ip_t info;
		} l3_host_invalidate_entry;
		struct {
			int unit;
			bcm_l3_host_t * info;
			uint32 stat_counter_id;
		} l3_host_stat_attach;
		struct {
			int unit;
			bcm_l3_host_t * info;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_host_stat_counter_get;
		struct {
			int unit;
			bcm_l3_host_t * info;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_host_stat_counter_set;
		struct {
			int unit;
			bcm_l3_host_t * info;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_host_stat_counter_sync_get;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_stat_detach;
		struct {
			int unit;
			bcm_l3_host_t * host;
			int enable;
		} l3_host_stat_enable_set;
		struct {
			int unit;
			bcm_l3_host_t * host;
			bcm_l3_stat_t stat;
			uint64 * val;
		} l3_host_stat_get;
		struct {
			int unit;
			bcm_l3_host_t * host;
			bcm_l3_stat_t stat;
			uint32 * val;
		} l3_host_stat_get32;
		struct {
			int unit;
			bcm_l3_host_t * info;
			bcm_l3_stat_t stat;
			uint32 * stat_counter_id;
		} l3_host_stat_id_get;
		struct {
			int unit;
			bcm_l3_host_t * host;
			bcm_l3_stat_t stat;
			uint64 val;
		} l3_host_stat_set;
		struct {
			int unit;
			bcm_l3_host_t * host;
			bcm_l3_stat_t stat;
			uint32 val;
		} l3_host_stat_set32;
		struct {
			int unit;
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_host_traverse_cb cb;
			void * user_data;
		} l3_host_traverse;
		struct {
			int unit;
			bcm_ip_t info;
		} l3_host_validate_entry;
		struct {
			int unit;
			bcm_l3_info_t * l3info;
		} l3_info;
		struct {
			int unit;
			bcm_l3_ingress_t * ing_intf;
			bcm_if_t * intf_id;
		} l3_ingress_create;
		struct {
			int unit;
			bcm_if_t intf_id;
		} l3_ingress_destroy;
		struct {
			int unit;
			bcm_l3_ingress_t * ing_intf;
			bcm_if_t * intf_id;
		} l3_ingress_find;
		struct {
			int unit;
			bcm_if_t intf;
			bcm_l3_ingress_t * ing_intf;
		} l3_ingress_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			uint32 stat_counter_id;
		} l3_ingress_stat_attach;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_ingress_stat_counter_get;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_ingress_stat_counter_set;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_ingress_stat_counter_sync_get;
		struct {
			int unit;
			bcm_if_t intf_id;
		} l3_ingress_stat_detach;
		struct {
			int unit;
			bcm_if_t intf_id;
			bcm_l3_stat_t stat;
			uint32 * stat_counter_id;
		} l3_ingress_stat_id_get;
		struct {
			int unit;
			bcm_l3_ingress_traverse_cb trav_fn;
			void * user_data;
		} l3_ingress_traverse;
		struct {
			int unit;
		} l3_init;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_create;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_delete;
		struct {
			int unit;
		} l3_intf_delete_all;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_find;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_find_vlan;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_get;
		struct {
			int unit;
			int ip4_options_profile_id;
			int ip4_option;
			bcm_l3_ip4_options_action_t * action;
		} l3_ip4_options_action_get;
		struct {
			int unit;
			int ip4_options_profile_id;
			int ip4_option;
			bcm_l3_ip4_options_action_t action;
		} l3_ip4_options_action_set;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_ip4_options_action_t default_action;
			int * ip4_options_profile_id;
		} l3_ip4_options_profile_create;
		struct {
			int unit;
			int ip4_options_profile_id;
		} l3_ip4_options_profile_destroy;
		struct {
			int unit;
			uint8 * ip6_addr;
		} l3_ip6_prefix_map_add;
		struct {
			int unit;
			uint8 * ip6_addr;
		} l3_ip6_prefix_map_delete;
		struct {
			int unit;
		} l3_ip6_prefix_map_delete_all;
		struct {
			int unit;
			int map_size;
			bcm_ip6_t * ip6_array;
			int * ip6_count;
		} l3_ip6_prefix_map_get;
		struct {
			int unit;
			bcm_l3_nat_egress_t * nat_info;
		} l3_nat_egress_add;
		struct {
			int unit;
			bcm_l3_nat_id_t nat_id;
		} l3_nat_egress_delete;
		struct {
			int unit;
			bcm_l3_nat_egress_t * nat_info;
		} l3_nat_egress_get;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			uint32 stat_counter_id;
		} l3_nat_egress_stat_attach;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			bcm_l3_nat_egress_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_nat_egress_stat_counter_get;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			bcm_l3_nat_egress_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_nat_egress_stat_counter_set;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			bcm_l3_nat_egress_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_nat_egress_stat_counter_sync_get;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
		} l3_nat_egress_stat_detach;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			bcm_l3_nat_egress_stat_t stat;
			uint32 * stat_counter_id;
		} l3_nat_egress_stat_id_get;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			int nstat;
			bcm_l3_nat_egress_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_nat_egress_stat_multi_get;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			int nstat;
			bcm_l3_nat_egress_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_nat_egress_stat_multi_get32;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			int nstat;
			bcm_l3_nat_egress_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_nat_egress_stat_multi_set;
		struct {
			int unit;
			bcm_l3_nat_egress_t * info;
			int nstat;
			bcm_l3_nat_egress_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_nat_egress_stat_multi_set32;
		struct {
			int unit;
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_nat_egress_traverse_cb cb;
			void * user_data;
		} l3_nat_egress_traverse;
		struct {
			int unit;
			bcm_l3_nat_ingress_t * nat_info;
		} l3_nat_ingress_add;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_nat_ingress_traverse_cb age_cb;
			void * user_data;
		} l3_nat_ingress_age;
		struct {
			int unit;
			bcm_l3_nat_ingress_t * nat_info;
		} l3_nat_ingress_delete;
		struct {
			int unit;
			bcm_l3_nat_ingress_t * nat_info;
		} l3_nat_ingress_delete_all;
		struct {
			int unit;
			bcm_l3_nat_ingress_t * nat_info;
		} l3_nat_ingress_find;
		struct {
			int unit;
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_nat_ingress_traverse_cb cb;
			void * user_data;
		} l3_nat_ingress_traverse;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_add;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_route_traverse_cb age_out;
			void * user_data;
		} l3_route_age;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_delete;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_delete_all;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_delete_by_interface;
		struct {
			int unit;
			bcm_l3_host_t * host;
			bcm_l3_route_t * route;
		} l3_route_find;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_get;
		struct {
			int unit;
			int * max;
		} l3_route_max_ecmp_get;
		struct {
			int unit;
			int max;
		} l3_route_max_ecmp_set;
		struct {
			int unit;
			bcm_l3_route_t * the_route;
			bcm_l3_route_t * path_array;
			int max_path;
			int * path_count;
		} l3_route_multipath_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
			uint32 stat_counter_id;
		} l3_route_stat_attach;
		struct {
			int unit;
			bcm_l3_route_t * info;
			bcm_l3_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_route_stat_counter_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
			bcm_l3_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_route_stat_counter_set;
		struct {
			int unit;
			bcm_l3_route_t * info;
			bcm_l3_route_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_route_stat_counter_sync_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_stat_detach;
		struct {
			int unit;
			bcm_l3_route_t * route;
			int enable;
		} l3_route_stat_enable_set;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint64 * val;
		} l3_route_stat_get;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint32 * val;
		} l3_route_stat_get32;
		struct {
			int unit;
			bcm_l3_route_t * info;
			bcm_l3_route_stat_t stat;
			uint32 * stat_counter_id;
		} l3_route_stat_id_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
			int nstat;
			bcm_l3_route_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_route_stat_multi_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
			int nstat;
			bcm_l3_route_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_route_stat_multi_get32;
		struct {
			int unit;
			bcm_l3_route_t * info;
			int nstat;
			bcm_l3_route_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_route_stat_multi_set;
		struct {
			int unit;
			bcm_l3_route_t * info;
			int nstat;
			bcm_l3_route_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_route_stat_multi_set32;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint64 val;
		} l3_route_stat_set;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint32 val;
		} l3_route_stat_set32;
		struct {
			int unit;
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_route_traverse_cb trav_fn;
			void * user_data;
		} l3_route_traverse;
		struct {
			int unit;
			bcm_l3_source_bind_t * info;
		} l3_source_bind_add;
		struct {
			int unit;
			bcm_l3_source_bind_t * info;
		} l3_source_bind_delete;
		struct {
			int unit;
		} l3_source_bind_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} l3_source_bind_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} l3_source_bind_enable_set;
		struct {
			int unit;
			bcm_l3_source_bind_t * info;
		} l3_source_bind_get;
		struct {
			int unit;
			bcm_l3_source_bind_traverse_cb cb;
			void * user_data;
		} l3_source_bind_traverse;
		struct {
			int unit;
			bcm_l3_route_t * input;
			bcm_l3_route_t * route;
		} l3_subnet_route_find;
		struct {
			int unit;
			bcm_vrf_t vrf;
			uint32 stat_counter_id;
		} l3_vrf_stat_attach;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_vrf_stat_counter_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_vrf_stat_counter_set;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} l3_vrf_stat_counter_sync_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
		} l3_vrf_stat_detach;
		struct {
			int unit;
			bcm_vrf_t vrf;
			int enable;
		} l3_vrf_stat_enable_set;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint64 * val;
		} l3_vrf_stat_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 * val;
		} l3_vrf_stat_get32;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 * stat_counter_id;
		} l3_vrf_stat_id_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_vrf_stat_multi_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_vrf_stat_multi_get32;
		struct {
			int unit;
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_vrf_stat_multi_set;
		struct {
			int unit;
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_vrf_stat_multi_set32;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint64 val;
		} l3_vrf_stat_set;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 val;
		} l3_vrf_stat_set32;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint64 * val;
		} l3_vrf_stat_sync_get;
		struct {
			int unit;
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 * val;
		} l3_vrf_stat_sync_get32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 vrid;
		} l3_vrrp_add;
		struct {
			int unit;
			uint32 flags;
			bcm_vlan_t vlan;
			uint32 vrid;
		} l3_vrrp_config_add;
		struct {
			int unit;
			uint32 flags;
			bcm_vlan_t vlan;
			uint32 vrid;
		} l3_vrrp_config_delete;
		struct {
			int unit;
			uint32 flags;
			bcm_vlan_t vlan;
		} l3_vrrp_config_delete_all;
		struct {
			int unit;
			uint32 flags;
			bcm_vlan_t vlan;
			uint32 alloc_size;
			uint32 * vrid_array;
			uint32 * count;
		} l3_vrrp_config_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 vrid;
		} l3_vrrp_delete;
		struct {
			int unit;
			bcm_vlan_t vlan;
		} l3_vrrp_delete_all;
		struct {
			int unit;
			bcm_vlan_t vlan;
			int alloc_size;
			int * vrid_array;
			int * count;
		} l3_vrrp_get;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_pbmp_t pbmp;
		} link_change;
		struct {
			int unit;
			bcm_pbmp_t * pbm;
			int us;
		} link_wait;
		struct {
			int unit;
		} linkscan_detach;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
		} linkscan_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			int * us;
		} linkscan_enable_get;
		struct {
			int unit;
			bcm_port_t port;
		} linkscan_enable_port_get;
		struct {
			int unit;
			int us;
		} linkscan_enable_set;
		struct {
			int unit;
		} linkscan_init;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} linkscan_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} linkscan_mode_set;
		struct {
			int unit;
			bcm_pbmp_t pbm;
			int mode;
		} linkscan_mode_set_pbm;
		struct {
			int unit;
			bcm_port_t port;
			bcm_linkscan_port_handler_t f;
		} linkscan_port_register;
		struct {
			int unit;
			bcm_port_t port;
			bcm_linkscan_port_handler_t f;
		} linkscan_port_unregister;
		struct {
			int unit;
			bcm_linkscan_handler_t f;
		} linkscan_register;
		struct {
			int unit;
			bcm_linkscan_handler_t f;
		} linkscan_unregister;
		struct {
			int unit;
			bcm_pbmp_t pbm;
		} linkscan_update;
#ifdef	INCLUDE_MACSEC
		struct {
			int unit;
			bcm_macsec_event_t t;
			int * enable;
		} macsec_event_enable_get;
		struct {
			int unit;
			bcm_macsec_event_t t;
			int enable;
		} macsec_event_enable_set;
		struct {
			int unit;
			bcm_macsec_event_cb cb;
			void * user_data;
		} macsec_event_register;
		struct {
			int unit;
			bcm_macsec_event_cb cb;
		} macsec_event_unregister;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_macsec_flow_match_t * flow;
			bcm_macsec_flow_action_t * action;
			int * flowId;
		} macsec_flow_create;
		struct {
			int unit;
			bcm_port_t port;
			int flowId;
		} macsec_flow_destroy;
		struct {
			int unit;
			bcm_port_t port;
			int flowId;
			bcm_macsec_flow_match_t * flow;
			bcm_macsec_flow_action_t * a;
		} macsec_flow_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_flow_traverse_cb callbk;
			void * user_data;
		} macsec_flow_traverse;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_port_capability_t * cap;
		} macsec_port_capability_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_port_config_t * cfg;
		} macsec_port_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_port_config_t * cfg;
		} macsec_port_config_set;
		struct {
			int unit;
			bcm_macsec_port_traverse_cb callbk;
			void * user_data;
		} macsec_port_traverse;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int chanId;
			bcm_macsec_secure_assoc_t * assoc;
			int * assocId;
		} macsec_secure_assoc_create;
		struct {
			int unit;
			bcm_port_t port;
			int assocId;
		} macsec_secure_assoc_destroy;
		struct {
			int unit;
			bcm_port_t port;
			int assocId;
			bcm_macsec_secure_assoc_t * assoc;
			int * chanId;
		} macsec_secure_assoc_get;
		struct {
			int unit;
			bcm_port_t port;
			int chanId;
			bcm_macsec_secure_assoc_traverse_cb cb;
			void * user_data;
		} macsec_secure_assoc_traverse;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_macsec_secure_chan_t * chan;
			int * chanId;
		} macsec_secure_chan_create;
		struct {
			int unit;
			bcm_port_t port;
			int chanId;
		} macsec_secure_chan_destroy;
		struct {
			int unit;
			bcm_port_t port;
			int chanId;
			bcm_macsec_secure_chan_t * chan;
		} macsec_secure_chan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_chan_traverse_cb calback;
			void * user_data;
		} macsec_secure_chan_traverse;
		struct {
			int unit;
			bcm_port_t port;
		} macsec_stat_clear;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_stat_t stat;
			int chanId;
			int assocId;
			uint64 * val;
		} macsec_stat_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_stat_t stat;
			int chanId;
			int assocId;
			uint32 * val;
		} macsec_stat_get32;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_stat_t stat;
			int chanId;
			int assocId;
			uint64 val;
		} macsec_stat_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_macsec_stat_t stat;
			int chanId;
			int assocId;
			uint32 val;
		} macsec_stat_set32;
#endif	/* INCLUDE_MACSEC */
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_addr_add;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_addr_add_w_l2mcindex;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
		} mcast_addr_remove;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_addr_remove_w_l2mcindex;
		struct {
			int unit;
			int mc_idx;
			bcm_port_t in_port;
			bcm_pbmp_t pbmp;
		} mcast_bitmap_del;
		struct {
			int unit;
			int mc_idx;
			bcm_port_t in_port;
			bcm_pbmp_t * pbmp;
		} mcast_bitmap_get;
		struct {
			int unit;
			int * max_index;
		} mcast_bitmap_max_get;
		struct {
			int unit;
			int mc_idx;
			bcm_port_t in_port;
			bcm_pbmp_t pbmp;
		} mcast_bitmap_set;
		struct {
			int unit;
		} mcast_init;
		struct {
			int unit;
			uint8 * mcMacAddr;
			bcm_vlan_t vlanId;
			int srcPort;
			bcm_mcast_addr_t * mcaddr;
			bcm_pbmp_t * allRouterBmp;
		} mcast_join;
		struct {
			int unit;
			uint8 * mcMacAddr;
			bcm_vlan_t vlanId;
			int srcPort;
		} mcast_leave;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_port_add;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
			bcm_mcast_addr_t * mcaddr;
		} mcast_port_get;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_port_remove;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} mim_detach;
		struct {
			int unit;
		} mim_init;
		struct {
			int unit;
			int lookup_id;
			uint32 stat_counter_id;
		} mim_lookup_id_stat_attach;
		struct {
			int unit;
			int lookup_id;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_lookup_id_stat_counter_get;
		struct {
			int unit;
			int lookup_id;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_lookup_id_stat_counter_set;
		struct {
			int unit;
			int lookup_id;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_lookup_id_stat_counter_sync_get;
		struct {
			int unit;
			int lookup_id;
		} mim_lookup_id_stat_detach;
		struct {
			int unit;
			int lookup_id;
			bcm_mim_stat_t stat;
			uint32 * stat_counter_id;
		} mim_lookup_id_stat_id_get;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_port_t * mim_port;
		} mim_port_add;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_gport_t mim_port_id;
		} mim_port_delete;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
		} mim_port_delete_all;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_port_t * mim_port;
		} mim_port_get;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			int port_max;
			bcm_mim_port_t * port_array;
			int * port_count;
		} mim_port_get_all;
		struct {
			int unit;
			bcm_mim_vpn_config_t * info;
		} mim_vpn_create;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
		} mim_vpn_destroy;
		struct {
			int unit;
		} mim_vpn_destroy_all;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_vpn_config_t * info;
		} mim_vpn_get;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			uint32 stat_counter_id;
		} mim_vpn_stat_attach;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_vpn_stat_counter_get;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_vpn_stat_counter_set;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mim_vpn_stat_counter_sync_get;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
		} mim_vpn_stat_detach;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_stat_t stat;
			uint32 * stat_counter_id;
		} mim_vpn_stat_id_get;
		struct {
			int unit;
			bcm_mim_vpn_traverse_cb cb;
			void * user_data;
		} mim_vpn_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_mirror_destination_t * mirror_dest;
		} mirror_destination_create;
		struct {
			int unit;
			bcm_gport_t mirror_dest_id;
		} mirror_destination_destroy;
		struct {
			int unit;
			bcm_gport_t mirror_dest_id;
			bcm_mirror_destination_t * mirror_dest;
		} mirror_destination_get;
		struct {
			int unit;
			bcm_mirror_destination_traverse_cb cb;
			void * user_data;
		} mirror_destination_traverse;
		struct {
			int unit;
			bcm_port_t port;
			int * val;
		} mirror_egress_get;
		struct {
			int unit;
			bcm_port_t port;
			int val;
		} mirror_egress_set;
		struct {
			int unit;
			bcm_port_t port;
			int * val;
		} mirror_ingress_get;
		struct {
			int unit;
			bcm_port_t port;
			int val;
		} mirror_ingress_set;
		struct {
			int unit;
		} mirror_init;
		struct {
			int unit;
			int * mode;
		} mirror_mode_get;
		struct {
			int unit;
			int mode;
		} mirror_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_gport_t mirror_dest_id;
		} mirror_port_dest_add;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_gport_t mirror_dest_id;
		} mirror_port_dest_delete;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} mirror_port_dest_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest;
			int * mirror_dest_count;
		} mirror_port_dest_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_gport_t mirror_dest;
			bcm_mirror_options_t options;
		} mirror_port_destination_add;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest;
			int * mirror_dest_count;
			bcm_mirror_options_t * options;
		} mirror_port_destination_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t * dest_mod;
			bcm_port_t * dest_port;
			uint32 * flags;
		} mirror_port_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_mirror_port_info_t * info;
		} mirror_port_info_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_mirror_port_info_t * info;
		} mirror_port_info_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t dest_mod;
			bcm_port_t dest_port;
			uint32 flags;
		} mirror_port_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
			bcm_gport_t destid;
		} mirror_port_vlan_dest_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
			bcm_gport_t destid;
		} mirror_port_vlan_dest_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
		} mirror_port_vlan_dest_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
			uint32 mirror_dest_size;
			bcm_gport_t * destid;
			uint32 * destcount;
		} mirror_port_vlan_dest_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
			bcm_gport_t destid;
			bcm_mirror_options_t options;
		} mirror_port_vlan_destination_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			uint32 flags;
			uint32 mirror_dest_size;
			bcm_gport_t * destid;
			uint32 * destcount;
			bcm_mirror_options_t * options;
		} mirror_port_vlan_destination_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			bcm_gport_t * dest_port;
			uint32 * flags;
		} mirror_port_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			bcm_gport_t destport;
			uint32 flags;
		} mirror_port_vlan_set;
		struct {
			int unit;
			bcm_port_t * port;
		} mirror_to_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_pbmp_t * pbmp;
		} mirror_to_pbmp_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_pbmp_t pbmp;
		} mirror_to_pbmp_set;
		struct {
			int unit;
			bcm_port_t port;
		} mirror_to_set;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * tpid;
			uint16 * vlan;
		} mirror_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
			uint16 vlan;
		} mirror_vlan_set;
	/* bcm_module_name has a non int return type */
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} mpls_cleanup;
		struct {
			int unit;
			uint32 flags;
			int * exp_map_id;
		} mpls_exp_map_create;
		struct {
			int unit;
			int exp_map_id;
		} mpls_exp_map_destroy;
		struct {
			int unit;
			int exp_map_id;
			bcm_mpls_exp_map_t * exp_map;
		} mpls_exp_map_get;
		struct {
			int unit;
			int exp_map_id;
			bcm_mpls_exp_map_t * exp_map;
		} mpls_exp_map_set;
		struct {
			int unit;
		} mpls_init;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			uint32 stat_counter_id;
		} mpls_label_stat_attach;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
		} mpls_label_stat_clear;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_label_stat_counter_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_label_stat_counter_set;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_label_stat_counter_sync_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
		} mpls_label_stat_detach;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			int enable;
		} mpls_label_stat_enable_set;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint64 * val;
		} mpls_label_stat_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 * val;
		} mpls_label_stat_get32;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 * stat_counter_id;
		} mpls_label_stat_id_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint64 * val;
		} mpls_label_stat_sync_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 * val;
		} mpls_label_stat_sync_get32;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_port_t * mpls_port;
		} mpls_port_add;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t mpls_port_id;
		} mpls_port_delete;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} mpls_port_delete_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_port_t * mpls_port;
		} mpls_port_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			int port_max;
			bcm_mpls_port_t * port_array;
			int * port_count;
		} mpls_port_get_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
			uint32 stat_counter_id;
		} mpls_port_stat_attach;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_port_stat_counter_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_port_stat_counter_set;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} mpls_port_stat_counter_sync_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
		} mpls_port_stat_detach;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			int enable;
		} mpls_port_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint64 * val;
		} mpls_port_stat_get;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint32 * val;
		} mpls_port_stat_get32;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 * stat_counter_id;
		} mpls_port_stat_id_get;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint64 val;
		} mpls_port_stat_set;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint32 val;
		} mpls_port_stat_set32;
		struct {
			int unit;
			bcm_if_t intf;
		} mpls_tunnel_initiator_clear;
		struct {
			int unit;
		} mpls_tunnel_initiator_clear_all;
		struct {
			int unit;
			bcm_if_t intf;
			int num_labels;
			bcm_mpls_egress_label_t * label_array;
		} mpls_tunnel_initiator_create;
		struct {
			int unit;
			bcm_if_t intf;
			int label_max;
			bcm_mpls_egress_label_t * label_array;
			int * label_count;
		} mpls_tunnel_initiator_get;
		struct {
			int unit;
			bcm_if_t intf;
			int num_labels;
			bcm_mpls_egress_label_t * label_array;
		} mpls_tunnel_initiator_set;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_add;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_create;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_delete;
		struct {
			int unit;
		} mpls_tunnel_switch_delete_all;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_get;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_traverse_cb cb;
			void * user_data;
		} mpls_tunnel_switch_traverse;
		struct {
			int unit;
			bcm_mpls_vpn_config_t * info;
		} mpls_vpn_id_create;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} mpls_vpn_id_destroy;
		struct {
			int unit;
		} mpls_vpn_id_destroy_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_vpn_config_t * info;
		} mpls_vpn_id_get;
		struct {
			int unit;
			bcm_mpls_vpn_traverse_cb cb;
			void * user_data;
		} mpls_vpn_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			int nof_replications;
			bcm_multicast_replication_t * rep_array;
		} multicast_add;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_multicast_control_t type;
			int * arg;
		} multicast_control_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_multicast_control_t type;
			int arg;
		} multicast_control_set;
		struct {
			int unit;
			uint32 flags;
			bcm_multicast_t * group;
		} multicast_create;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			int nof_replications;
			bcm_multicast_replication_t * rep_array;
		} multicast_delete;
		struct {
			int unit;
			bcm_multicast_t group;
		} multicast_destroy;
		struct {
			int unit;
		} multicast_detach;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_egress_add;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_egress_delete;
		struct {
			int unit;
			bcm_multicast_t group;
		} multicast_egress_delete_all;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_max;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
			int * port_count;
		} multicast_egress_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_if_t intf;
			bcm_if_t * encap_id;
		} multicast_egress_object_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_count;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
		} multicast_egress_set;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
			bcm_gport_t subscriber_queue;
		} multicast_egress_subscriber_add;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
			bcm_gport_t subscriber_queue;
		} multicast_egress_subscriber_delete;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_max;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
			bcm_gport_t * subscriber_queue_array;
			int * port_count;
		} multicast_egress_subscriber_get;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_count;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
			bcm_gport_t * subscriber_queue_array;
		} multicast_egress_subscriber_set;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t extender_port_id;
			bcm_if_t * encap_id;
		} multicast_extender_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_fabric_distribution_t * ds_id;
		} multicast_fabric_distribution_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_fabric_distribution_t ds_id;
		} multicast_fabric_distribution_set;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			int replication_max;
			bcm_multicast_replication_t * out_rep_array;
			int * rep_count;
		} multicast_get;
		struct {
			int unit;
			uint32 type_flag;
			bcm_multicast_t * group_min;
			bcm_multicast_t * group_max;
		} multicast_group_free_range_get;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 * flags;
		} multicast_group_get;
		struct {
			int unit;
			bcm_multicast_t group;
		} multicast_group_is_free;
		struct {
			int unit;
			bcm_multicast_group_traverse_cb_t trav_fn;
			uint32 flags;
			void * user_data;
		} multicast_group_traverse;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_ingress_add;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_ingress_delete;
		struct {
			int unit;
			bcm_multicast_t group;
		} multicast_ingress_delete_all;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_max;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
			int * port_count;
		} multicast_ingress_get;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_count;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
		} multicast_ingress_set;
		struct {
			int unit;
		} multicast_init;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_vlan_t vlan;
			bcm_if_t * encap_id;
		} multicast_l2_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t l2gre_port_id;
			bcm_if_t * encap_id;
		} multicast_l2gre_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t intf;
			bcm_if_t * encap_id;
		} multicast_l3_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t mac_port_id;
			bcm_if_t * encap_id;
		} multicast_mac_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t mim_port_id;
			bcm_if_t * encap_id;
		} multicast_mim_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t niv_port_id;
			bcm_if_t * encap_id;
		} multicast_niv_encap_get;
		struct {
			int unit;
			int index;
			bcm_port_t port;
			uint32 * vlan_vec;
		} multicast_repl_get;
		struct {
			int unit;
			int mc_index;
			bcm_port_t port;
			uint32 * vlan_vec;
		} multicast_repl_set;
		struct {
			int unit;
			bcm_multicast_t group;
			uint32 flags;
			int nof_replications;
			bcm_multicast_replication_t * rep_array;
		} multicast_set;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t subport;
			bcm_if_t * encap_id;
		} multicast_subport_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t intf;
			bcm_if_t * encap_id;
		} multicast_trill_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t vlan_port_id;
			bcm_if_t * encap_id;
		} multicast_vlan_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t mpls_port_id;
			bcm_if_t * encap_id;
		} multicast_vpls_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t vxlan_port_id;
			bcm_if_t * encap_id;
		} multicast_vxlan_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t wlan_port_id;
			bcm_if_t * encap_id;
		} multicast_wlan_encap_get;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} niv_cleanup;
		struct {
			int unit;
			bcm_gport_t niv_port;
			bcm_niv_egress_t * niv_egress;
		} niv_egress_add;
		struct {
			int unit;
			bcm_gport_t niv_port;
			bcm_niv_egress_t * niv_egress;
		} niv_egress_delete;
		struct {
			int unit;
			bcm_gport_t niv_port;
		} niv_egress_delete_all;
		struct {
			int unit;
			bcm_gport_t niv_port;
			int array_size;
			bcm_niv_egress_t * niv_egress_array;
			int * count;
		} niv_egress_get;
		struct {
			int unit;
			bcm_gport_t niv_port;
			int array_size;
			bcm_niv_egress_t * niv_egress_array;
		} niv_egress_set;
		struct {
			int unit;
			bcm_niv_forward_t * iv_fwd_entry;
		} niv_forward_add;
		struct {
			int unit;
			bcm_niv_forward_t * iv_fwd_entry;
		} niv_forward_delete;
		struct {
			int unit;
		} niv_forward_delete_all;
		struct {
			int unit;
			bcm_niv_forward_t * iv_fwd_entry;
		} niv_forward_get;
		struct {
			int unit;
			bcm_niv_forward_traverse_cb cb;
			void * user_data;
		} niv_forward_traverse;
		struct {
			int unit;
		} niv_init;
		struct {
			int unit;
			bcm_niv_port_t * niv_port;
		} niv_port_add;
		struct {
			int unit;
			bcm_gport_t niv_port_id;
		} niv_port_delete;
		struct {
			int unit;
		} niv_port_delete_all;
		struct {
			int unit;
			bcm_niv_port_t * niv_port;
		} niv_port_get;
		struct {
			int unit;
			bcm_niv_port_traverse_cb cb;
			void * user_data;
		} niv_port_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_oam_control_type_t type;
			uint64 * arg;
		} oam_control_get;
		struct {
			int unit;
			bcm_oam_control_type_t type;
			uint64 arg;
		} oam_control_set;
		struct {
			int unit;
			bcm_oam_delay_t * delay_ptr;
		} oam_delay_add;
		struct {
			int unit;
			bcm_oam_delay_t * delay_ptr;
		} oam_delay_delete;
		struct {
			int unit;
			bcm_oam_delay_t * delay_ptr;
		} oam_delay_get;
		struct {
			int unit;
		} oam_detach;
		struct {
			int unit;
			bcm_oam_endpoint_t id;
			bcm_oam_endpoint_action_t * action;
		} oam_endpoint_action_set;
		struct {
			int unit;
			bcm_oam_endpoint_info_t * endpoint_info;
		} oam_endpoint_create;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint;
		} oam_endpoint_destroy;
		struct {
			int unit;
			bcm_oam_group_t group;
		} oam_endpoint_destroy_all;
		struct {
			int unit;
			bcm_oam_endpoint_t endpoint;
			bcm_oam_endpoint_info_t * endpoint_info;
		} oam_endpoint_get;
		struct {
			int unit;
			bcm_oam_group_t group;
			bcm_oam_endpoint_traverse_cb cb;
			void * user_data;
		} oam_endpoint_traverse;
		struct {
			int unit;
			bcm_oam_event_types_t event_types;
			bcm_oam_event_cb cb;
			void * user_data;
		} oam_event_register;
		struct {
			int unit;
			bcm_oam_event_types_t event_types;
			bcm_oam_event_cb cb;
		} oam_event_unregister;
		struct {
			int unit;
			bcm_oam_group_info_t * group_info;
		} oam_group_create;
		struct {
			int unit;
			bcm_oam_group_t group;
		} oam_group_destroy;
		struct {
			int unit;
		} oam_group_destroy_all;
		struct {
			int unit;
			bcm_oam_group_t group;
			bcm_oam_group_info_t * group_info;
		} oam_group_get;
		struct {
			int unit;
			bcm_oam_group_traverse_cb cb;
			void * user_data;
		} oam_group_traverse;
		struct {
			int unit;
		} oam_init;
		struct {
			int unit;
			bcm_oam_loopback_t * loopback_ptr;
		} oam_loopback_add;
		struct {
			int unit;
			bcm_oam_loopback_t * loopback_ptr;
		} oam_loopback_delete;
		struct {
			int unit;
			bcm_oam_loopback_t * loopback_ptr;
		} oam_loopback_get;
		struct {
			int unit;
			bcm_oam_loss_t * loss_ptr;
		} oam_loss_add;
		struct {
			int unit;
			bcm_oam_loss_t * loss_ptr;
		} oam_loss_delete;
		struct {
			int unit;
			bcm_oam_loss_t * loss_ptr;
		} oam_loss_get;
		struct {
			int unit;
			int opcode;
			int * profile;
		} oam_opcode_map_get;
		struct {
			int unit;
			int opcode;
			int profile;
		} oam_opcode_map_set;
		struct {
			int unit;
			bcm_oam_psc_t * psc_ptr;
		} oam_psc_add;
		struct {
			int unit;
			bcm_oam_psc_t * psc_ptr;
		} oam_psc_delete;
		struct {
			int unit;
			bcm_oam_psc_t * psc_ptr;
		} oam_psc_get;
		struct {
			int unit;
			bcm_oam_pw_status_t * pw_status_ptr;
		} oam_pw_status_add;
		struct {
			int unit;
			bcm_oam_pw_status_t * pw_status_ptr;
		} oam_pw_status_delete;
		struct {
			int unit;
			bcm_oam_pw_status_t * pw_status_ptr;
		} oam_pw_status_get;
		struct {
			int unit;
			int size;
			uint32 flags;
			bcm_pkt_t ** pkt_buf;
		} pkt_alloc;
		struct {
			int unit;
			int count;
			int size;
			uint32 flags;
			bcm_pkt_t *** packet_array;
		} pkt_blk_alloc;
		struct {
			int unit;
			bcm_pkt_t ** pkt;
			int count;
		} pkt_blk_free;
		struct {
			bcm_pkt_t * pkt;
			int n;
			int * len;
			int * blk_idx;
			uint8 ** location;
		} pkt_byte_index;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			bcm_pkt_blk_t * blks;
			int blk_count;
			uint32 flags;
			bcm_pkt_t ** pkt_buf;
		} pkt_clear;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			uint32 init_flags;
		} pkt_flags_init;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			int alloc_bytes;
			int payload_len;
			uint32 flags;
		} pkt_flags_len_setup;
		struct {
			int unit;
			bcm_pkt_t * pkt;
		} pkt_free;
		struct {
			bcm_pkt_t * pkt;
			int dest_byte;
			uint8 * src;
			int len;
		} pkt_memcpy;
		struct {
			int unit;
			int len;
			bcm_pkt_t ** pkt_buf;
		} pkt_rx_alloc;
		struct {
			int unit;
			bcm_pkt_t * pkt;
		} pkt_rx_free;
		struct {
			int unit;
			uint32 action_id;
			bcm_policer_action_t action;
			uint32 param0;
		} policer_action_add;
		struct {
			int unit;
			bcm_policer_t policer_id;
			uint32 action_id;
		} policer_action_attach;
		struct {
			int unit;
			bcm_policer_t policer_id;
			uint32 * action_id;
		} policer_action_attach_get;
		struct {
			int unit;
			uint32 * action_id;
		} policer_action_create;
		struct {
			int unit;
			uint32 action_id;
		} policer_action_destroy;
		struct {
			int unit;
			bcm_policer_t policer_id;
			uint32 action_id;
		} policer_action_detach;
		struct {
			int unit;
			uint32 action_id;
			bcm_policer_action_t action;
			uint32 * param0;
		} policer_action_get;
		struct {
			int unit;
			bcm_policer_config_t * pol_cfg;
			bcm_policer_t * policer_id;
		} policer_create;
		struct {
			int unit;
			bcm_policer_t policer_id;
		} policer_destroy;
		struct {
			int unit;
		} policer_destroy_all;
		struct {
			int unit;
			uint32 flag;
			bcm_policer_t macro_flow_policer_id;
			bcm_policer_t * policer_id;
		} policer_envelop_create;
		struct {
			int unit;
			uint32 flag;
			bcm_policer_group_mode_t mode;
			bcm_policer_t macro_flow_policer_id;
			bcm_policer_t * policer_id;
			int * npolicers;
		} policer_envelop_group_create;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_policer_config_t * pol_cfg;
		} policer_get;
		struct {
			int unit;
			bcm_policer_group_mode_t mode;
			bcm_policer_t * policer_id;
			int * npolicers;
		} policer_group_create;
		struct {
			int unit;
		} policer_init;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_policer_config_t * pol_cfg;
		} policer_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
			int * enable;
		} policer_stat_enable_get;
		struct {
			int unit;
			bcm_policer_t policer_id;
			int enable;
		} policer_stat_enable_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_cos_t int_pri;
			bcm_policer_stat_t stat;
			uint64 * value;
		} policer_stat_get;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_cos_t int_pri;
			bcm_policer_stat_t stat;
			uint32 * value;
		} policer_stat_get32;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_cos_t int_pri;
			bcm_policer_stat_t stat;
			uint64 value;
		} policer_stat_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_cos_t int_pri;
			bcm_policer_stat_t stat;
			uint32 value;
		} policer_stat_set32;
		struct {
			int unit;
			bcm_policer_traverse_cb cb;
			void * user_data;
		} policer_traverse;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * ability_mask;
		} port_ability_advert_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * ability_mask;
		} port_ability_advert_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t * local_ability_mask;
		} port_ability_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * local_ability_mask;
		} port_ability_local_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * ability_mask;
		} port_ability_remote_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t * ability_mask;
		} port_advert_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t * ability_mask;
		} port_advert_remote_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t ability_mask;
		} port_advert_set;
		struct {
			int unit;
			bcm_port_t port;
			int * autoneg;
		} port_autoneg_get;
		struct {
			int unit;
			bcm_port_t port;
			int autoneg;
		} port_autoneg_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_bpdu_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_bpdu_enable_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_cable_diag_t * status;
		} port_cable_diag;
		struct {
			int unit;
			bcm_port_t port;
			int cfi;
			bcm_color_t * color;
		} port_cfi_color_get;
		struct {
			int unit;
			bcm_port_t port;
			int cfi;
			bcm_color_t color;
		} port_cfi_color_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_class_t pclass;
			uint32 * class_id;
		} port_class_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_class_t pclass;
			uint32 class_id;
		} port_class_set;
		struct {
			int unit;
		} port_clear;
		struct {
			int unit;
			bcm_port_config_t * config;
		} port_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_config_phy_oam_t * conf;
		} port_config_phy_oam_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_config_phy_oam_t * conf;
		} port_config_phy_oam_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_congestion_config_t * config;
		} port_congestion_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_congestion_config_t * config;
		} port_congestion_config_set;
		struct {
			int unit;
			bcm_gport_t congestion_port;
			bcm_gport_t port;
			uint32 flags;
			int * channel_id;
		} port_congestion_get;
		struct {
			int unit;
			bcm_gport_t congestion_port;
			bcm_gport_t port;
			uint32 flags;
			int channel_id;
		} port_congestion_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_t type;
			int * value;
		} port_control_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_phy_oam_t type;
			uint64 * value;
		} port_control_phy_oam_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_phy_oam_t type;
			uint64 value;
		} port_control_phy_oam_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_phy_timesync_t type;
			uint64 * value;
		} port_control_phy_timesync_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_phy_timesync_t type;
			uint64 value;
		} port_control_phy_timesync_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_t type;
			int value;
		} port_control_set;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_pbmp_t * detached;
		} port_detach;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_discard_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_discard_set;
		struct {
			int unit;
			bcm_port_t port;
			int srccp;
			int * mapcp;
			int * prio;
		} port_dscp_map_get;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_dscp_map_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_dscp_map_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			int srccp;
			int mapcp;
			int prio;
		} port_dscp_map_set;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int * pkt_dscp;
		} port_dscp_unmap_get;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int pkt_dscp;
		} port_dscp_unmap_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_dtag_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_dtag_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			int * duplex;
		} port_duplex_get;
		struct {
			int unit;
			bcm_port_t port;
			int duplex;
		} port_duplex_set;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			bcm_pbmp_t * pbmp;
		} port_egress_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_policer_t policer_id;
		} port_egress_policer_set;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			bcm_pbmp_t pbmp;
		} port_egress_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_enable_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_encap_config_t * encap_config;
		} port_encap_config_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_encap_config_t * encap_config;
		} port_encap_config_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_encap_get;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t encap_id;
			bcm_gport_t * port;
		} port_encap_map_get;
		struct {
			int unit;
			uint32 flags;
			bcm_if_t encap_id;
			bcm_gport_t port;
		} port_encap_map_set;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_encap_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_fault_get;
		struct {
			int unit;
			bcm_port_t ingress_port;
			bcm_port_t egress_port;
			uint32 * flags;
		} port_flood_block_get;
		struct {
			int unit;
			bcm_port_t ingress_port;
			bcm_port_t egress_port;
			uint32 flags;
		} port_flood_block_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_dest_info_t * dest_info;
		} port_force_dest_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_dest_info_t * dest_info;
		} port_force_dest_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_t * egr_port;
			int * enabled;
		} port_force_forward_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_t * egr_port;
			uint32 * flags;
		} port_force_forward_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_t egr_port;
			uint32 flags;
		} port_force_forward_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_t egr_port;
			int enable;
		} port_force_forward_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t * vlan;
			int * pkt_prio;
			uint32 * flags;
		} port_force_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int pkt_prio;
			uint32 flags;
		} port_force_vlan_set;
		struct {
			int unit;
			bcm_port_t port;
			int * size;
		} port_frame_max_get;
		struct {
			int unit;
			bcm_port_t port;
			int size;
		} port_frame_max_set;
		struct {
			int unit;
			uint32 gport_type;
			bcm_gport_t * gport_min;
			bcm_gport_t * gport_max;
		} port_gport_free_range_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_gport_t * gport;
		} port_gport_get;
		struct {
			int unit;
			bcm_gport_t gport;
		} port_gport_is_free;
		struct {
			int unit;
			bcm_port_t port;
			int speed;
			bcm_port_duplex_t duplex;
			int * bit_times;
		} port_ifg_get;
		struct {
			int unit;
			bcm_port_t port;
			int speed;
			bcm_port_duplex_t duplex;
			int bit_times;
		} port_ifg_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_ifilter_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_ifilter_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_restore;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_save;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_set;
		struct {
			int unit;
		} port_init;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * tpid;
		} port_inner_tpid_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
		} port_inner_tpid_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_interface_config_t * config;
		} port_interface_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_interface_config_t * config;
		} port_interface_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_if_t * intf;
		} port_interface_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_if_t intf;
		} port_interface_set;
		struct {
			int unit;
			uint32 flags;
			int internal_ports_max;
			bcm_gport_t * internal_gport;
			int * internal_ports_count;
		} port_internal_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_ipmc_modify_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_ipmc_modify_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_jam_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_jam_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_l3_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_l3_enable_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_l3_modify_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_l3_modify_set;
		struct {
			int unit;
			bcm_port_t port;
			int * size;
		} port_l3_mtu_get;
		struct {
			int unit;
			bcm_port_t port;
			int size;
		} port_l3_mtu_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_learn_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 add;
			uint32 remove;
		} port_learn_modify;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_learn_set;
		struct {
			int unit;
			bcm_port_t port;
		} port_link_failed_clear;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_port_link_state_t * state;
		} port_link_state_get;
		struct {
			int unit;
			bcm_port_t port;
			int * status;
		} port_link_status_get;
		struct {
			int unit;
			bcm_port_t port;
			int * linkscan;
		} port_linkscan_get;
		struct {
			int unit;
			bcm_port_t port;
			int linkscan;
		} port_linkscan_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_port_t * local_port;
		} port_local_get;
		struct {
			int unit;
			bcm_port_t port;
			int * loopback;
		} port_loopback_get;
		struct {
			int unit;
			bcm_port_t port;
			int loopback;
		} port_loopback_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_management_packet_config_t * config_array;
			int max_config;
			int * config_count;
		} port_management_packet_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_management_packet_config_t * config;
		} port_management_packet_config_set;
		struct {
			int unit;
			bcm_port_t port;
			int * ms;
		} port_master_get;
		struct {
			int unit;
			bcm_port_t port;
			int ms;
		} port_master_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_match_info_t * match;
		} port_match_add;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_match_info_t * match;
		} port_match_delete;
		struct {
			int unit;
			bcm_gport_t port;
		} port_match_delete_all;
		struct {
			int unit;
			bcm_gport_t port;
			int size;
			bcm_port_match_info_t * match_array;
			int * count;
		} port_match_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_match_info_t * old_match;
			bcm_port_match_info_t * new_match;
		} port_match_replace;
		struct {
			int unit;
			bcm_gport_t port;
			int size;
			bcm_port_match_info_t * match_array;
		} port_match_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_mdix_t * mode;
		} port_mdix_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_mdix_t mode;
		} port_mdix_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_mdix_status_t * status;
		} port_mdix_status_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_t medium;
			bcm_phy_config_t * config;
		} port_medium_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_t medium;
			bcm_phy_config_t * config;
		} port_medium_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_t * medium;
		} port_medium_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_status_cb_t callback;
			void * user_data;
		} port_medium_status_register;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_status_cb_t callback;
			void * user_data;
		} port_medium_status_unregister;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t modid;
			bcm_pbmp_t * pbmp;
		} port_modid_egress_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t modid;
			bcm_pbmp_t pbmp;
		} port_modid_egress_set;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			int * enable;
		} port_modid_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			int enable;
		} port_modid_enable_set;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
		} port_pause_addr_get;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
		} port_pause_addr_set;
		struct {
			int unit;
			bcm_port_t port;
			int * pause_tx;
			int * pause_rx;
		} port_pause_get;
		struct {
			int unit;
			bcm_port_t port;
			int pause_tx;
			int pause_rx;
		} port_pause_set;
		struct {
			int unit;
			bcm_port_t port;
			int * pause;
		} port_pause_sym_get;
		struct {
			int unit;
			bcm_port_t port;
			int pause;
		} port_pause_sym_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_pfm_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_pfm_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_control_t type;
			uint32 * value;
		} port_phy_control_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_control_t type;
			uint32 value;
		} port_phy_control_set;
		struct {
			int unit;
			bcm_port_t port;
			char * name;
			int len;
		} port_phy_drv_name_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int offset;
			uint8 * array;
			int length;
		} port_phy_firmware_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 phy_reg_addr;
			uint32 * phy_data;
		} port_phy_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 phy_reg_addr;
			uint32 phy_data;
			uint32 phy_mask;
		} port_phy_modify;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 dev_addr;
			uint32 offset;
			int max_size;
			uint8 * data;
			int * actual_size;
		} port_phy_multi_get;
		struct {
			int unit;
			bcm_port_t port;
		} port_phy_reset;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_reset_cb_t callback;
			void * user_data;
		} port_phy_reset_register;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_reset_cb_t callback;
			void * user_data;
		} port_phy_reset_unregister;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 phy_reg_addr;
			uint32 phy_data;
		} port_phy_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_timesync_config_t * conf;
		} port_phy_timesync_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_timesync_config_t * conf;
		} port_phy_timesync_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_timesync_enhanced_capture_t * value;
		} port_phy_timesync_enhanced_capture_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_policer_t * policer_id;
		} port_policer_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_policer_t policer_id;
		} port_policer_set;
		struct {
			int unit;
			bcm_port_t pon_port;
			bcm_port_pon_info_t * info;
		} port_pon_info_get;
		struct {
			int unit;
			bcm_port_t pon_port;
			bcm_port_pon_info_t * info;
		} port_pon_info_set;
		struct {
			int unit;
			bcm_gport_t pon_port;
			uint32 flags;
			bcm_gport_t * tunnel_port_id;
		} port_pon_tunnel_add;
		struct {
			int unit;
			bcm_gport_t pon_port;
			bcm_tunnel_id_t tunnel_id;
			bcm_gport_t * tunnel_port_id;
		} port_pon_tunnel_map_get;
		struct {
			int unit;
			bcm_gport_t pon_port;
			bcm_tunnel_id_t tunnel_id;
			bcm_gport_t tunnel_port_id;
		} port_pon_tunnel_map_set;
		struct {
			int unit;
			bcm_gport_t tunnel_port_id;
		} port_pon_tunnel_remove;
		struct {
			int unit;
			bcm_port_t port;
			int prio;
			bcm_color_t * color;
		} port_priority_color_get;
		struct {
			int unit;
			bcm_port_t port;
			int prio;
			bcm_color_t color;
		} port_priority_color_set;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_pbmp_t * okay_pbmp;
		} port_probe;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
			bcm_vlan_t vid;
		} port_protocol_vlan_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
		} port_protocol_vlan_delete;
		struct {
			int unit;
			bcm_port_t port;
		} port_protocol_vlan_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * count;
		} port_queued_count_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} port_rate_egress_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * pps;
			uint32 * burst;
		} port_rate_egress_pps_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 pps;
			uint32 burst;
		} port_rate_egress_pps_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} port_rate_egress_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * traffic_types;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} port_rate_egress_traffic_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 traffic_types;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} port_rate_egress_traffic_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} port_rate_ingress_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} port_rate_ingress_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * kbits_pause;
			uint32 * kbits_resume;
		} port_rate_pause_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 kbits_pause;
			uint32 kbits_resume;
		} port_rate_pause_set;
		struct {
			int unit;
			bcm_port_t port;
			int * ingress_rate;
			int * egress_rate;
		} port_sample_rate_get;
		struct {
			int unit;
			bcm_port_t port;
			int ingress_rate;
			int egress_rate;
		} port_sample_rate_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_selective_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_selective_set;
		struct {
			int unit;
			bcm_port_t port;
			int * speed;
		} port_speed_get;
		struct {
			int unit;
			bcm_port_t port;
			int * speed;
		} port_speed_max;
		struct {
			int unit;
			bcm_port_t port;
			int speed;
		} port_speed_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 stat_counter_id;
		} port_stat_attach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} port_stat_counter_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} port_stat_counter_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} port_stat_counter_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
		} port_stat_detach;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 stat_counter_id;
		} port_stat_detach_with_id;
		struct {
			int unit;
			bcm_gport_t port;
			int enable;
		} port_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint64 * val;
		} port_stat_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 * val;
		} port_stat_get32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 * stat_counter_id;
		} port_stat_id_get;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint64 * value_arr;
		} port_stat_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint32 * value_arr;
		} port_stat_multi_get32;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint64 * value_arr;
		} port_stat_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint32 * value_arr;
		} port_stat_multi_set32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint64 val;
		} port_stat_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 val;
		} port_stat_set32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint64 * val;
		} port_stat_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 * val;
		} port_stat_sync_get32;
		struct {
			int unit;
			bcm_port_t port;
			int * state;
		} port_stp_get;
		struct {
			int unit;
			bcm_port_t port;
			int state;
		} port_stp_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_pbmp_t * pbmp;
		} port_subsidiary_ports_get;
#ifdef	INCLUDE_CES
		struct {
			int unit;
			bcm_port_t tdm_port;
			bcm_tdm_port_cas_status_t status;
			uint8 * cas_abcd;
		} port_tdm_cas_abcd_get;
		struct {
			int unit;
			bcm_port_t tdm_port;
			uint32 * cas_changed;
		} port_tdm_cas_status_get;
		struct {
			int unit;
			bcm_port_t tdm_port;
			uint32 * n_ports;
			uint32 * ces_ports;
		} port_tdm_ces_ports_get;
		struct {
			int unit;
			bcm_port_t tdm_port;
			bcm_tdm_port_config_t * config;
		} port_tdm_config_get;
		struct {
			int unit;
			bcm_port_t tdm_port;
			bcm_tdm_port_config_t * config;
		} port_tdm_config_set;
#endif	/* INCLUDE_CES */
		struct {
			int unit;
			bcm_port_t port;
			int * tgid;
			int * psc;
		} port_tgid_get;
		struct {
			int unit;
			bcm_port_t port;
			int tgid;
			int psc;
		} port_tgid_set;
		struct {
			int unit;
			bcm_port_t port;
			int array_size;
			bcm_port_timesync_config_t * config_array;
			int * array_count;
		} port_timesync_config_get;
		struct {
			int unit;
			bcm_port_t port;
			int config_count;
			bcm_port_timesync_config_t * config_array;
		} port_timesync_config_set;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
			int color_select;
		} port_tpid_add;
		struct {
			int unit;
			bcm_port_tpid_class_t * tpid_class;
		} port_tpid_class_get;
		struct {
			int unit;
			bcm_port_tpid_class_t * tpid_class;
		} port_tpid_class_set;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
		} port_tpid_delete;
		struct {
			int unit;
			bcm_port_t port;
		} port_tpid_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * tpid;
		} port_tpid_get;
		struct {
			int unit;
			bcm_port_t port;
			int size;
			uint16 * tpid_array;
			int * color_array;
			int * count;
		} port_tpid_get_all;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
		} port_tpid_set;
		struct {
			int unit;
			bcm_port_t port;
			int * port_index;
		} port_trunk_index_get;
		struct {
			int unit;
			bcm_port_t port;
			int port_index;
		} port_trunk_index_set;
		struct {
			int unit;
			bcm_port_t port;
			int * priority;
		} port_untagged_priority_get;
		struct {
			int unit;
			bcm_port_t port;
			int priority;
		} port_untagged_priority_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t * vid_ptr;
		} port_untagged_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vid;
		} port_untagged_vlan_set;
		struct {
			int unit;
			bcm_port_t port;
			int link;
		} port_update;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int dscp;
			int * internal_pri;
			bcm_color_t * color;
		} port_vlan_dscp_map_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int dscp;
			int internal_pri;
			bcm_color_t color;
		} port_vlan_dscp_map_set;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * inner_tag;
		} port_vlan_inner_tag_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 inner_tag;
		} port_vlan_inner_tag_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_vlan_member_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_vlan_member_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int pkt_pri;
			int cfi;
			int * internal_pri;
			bcm_color_t * color;
		} port_vlan_pri_map_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int pkt_pri;
			int cfi;
			int internal_pri;
			bcm_color_t color;
		} port_vlan_pri_map_set;
		struct {
			int unit;
			bcm_port_t port;
			int pkt_pri;
			int cfi;
			int * internal_pri;
			bcm_color_t * color;
		} port_vlan_priority_map_get;
		struct {
			int unit;
			bcm_port_t port;
			int pkt_pri;
			int cfi;
			int internal_pri;
			bcm_color_t color;
		} port_vlan_priority_map_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vid;
			int pkt_pri;
			int cfi;
			bcm_priority_mapping_t * pri_map;
		} port_vlan_priority_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vid;
			int pkt_pri;
			int cfi;
			bcm_priority_mapping_t * pri_map;
		} port_vlan_priority_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int * pkt_pri;
			int * cfi;
		} port_vlan_priority_unmap_get;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int pkt_pri;
			int cfi;
		} port_vlan_priority_unmap_set;
		struct {
			int unit;
			bcm_gport_t port_id;
			uint32 * vlan_vec;
		} port_vlan_vector_get;
		struct {
			int unit;
			bcm_gport_t port_id;
			uint32 * vlan_vec;
		} port_vlan_vector_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} proxy_cleanup;
		struct {
			int unit;
			bcm_port_t client_port;
			bcm_proxy_proto_type_t proto_type;
			bcm_module_t server_modid;
			bcm_port_t server_port;
			int enable;
		} proxy_client_set;
		struct {
			int unit;
			uint32 flags;
			bcm_proxy_egress_t * proxy_egress;
			bcm_if_t * proxy_if_id;
		} proxy_egress_create;
		struct {
			int unit;
			bcm_if_t proxy_if_id;
		} proxy_egress_destroy;
		struct {
			int unit;
			bcm_if_t proxy_if_id;
			bcm_proxy_egress_t * proxy_egress;
		} proxy_egress_get;
		struct {
			int unit;
			bcm_proxy_egress_traverse_cb trav_fn;
			void * user_data;
		} proxy_egress_traverse;
		struct {
			int unit;
		} proxy_init;
		struct {
			int unit;
			bcm_port_t server_port;
			bcm_proxy_mode_t mode;
			int * enable;
		} proxy_server_get;
		struct {
			int unit;
			bcm_gport_t local_ingress_port;
			bcm_proxy_server_t * proxy_server;
			int * enable;
		} proxy_server_port_get;
		struct {
			int unit;
			bcm_gport_t local_ingress_port;
			bcm_proxy_server_t * proxy_server;
			int enable;
		} proxy_server_port_set;
		struct {
			int unit;
			bcm_port_t server_port;
			bcm_proxy_mode_t mode;
			int enable;
		} proxy_server_set;
#endif	/* INCLUDE_L3 */
#ifdef	INCLUDE_PTP
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int priority1_alt_value;
			bcm_ptp_clock_peer_address_t * master_info;
		} ptp_acceptable_master_add;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint8 * enabled;
		} ptp_acceptable_master_enabled_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint8 enabled;
		} ptp_acceptable_master_enabled_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int max_num_masters;
			int * num_masters;
			bcm_ptp_clock_peer_address_t * master_addr;
		} ptp_acceptable_master_list;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_peer_address_t * master_info;
		} ptp_acceptable_master_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
		} ptp_acceptable_master_table_clear;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int * max_table_entries;
		} ptp_acceptable_master_table_size_get;
		struct {
			int unit;
			bcm_ptp_cb_types_t cb_types;
			bcm_ptp_cb cb;
			void * user_data;
		} ptp_cb_register;
		struct {
			int unit;
			bcm_ptp_cb_types_t cb_types;
			bcm_ptp_cb cb;
		} ptp_cb_unregister;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_accuracy_t * accuracy;
		} ptp_clock_accuracy_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_accuracy_t * accuracy;
		} ptp_clock_accuracy_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			bcm_ptp_clock_info_t * clock_info;
		} ptp_clock_create;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_current_dataset_t * dataset;
		} ptp_clock_current_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_default_dataset_t * dataset;
		} ptp_clock_default_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 * domain;
		} ptp_clock_domain_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 domain;
		} ptp_clock_domain_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_info_t * clock_info;
		} ptp_clock_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_parent_dataset_t * dataset;
		} ptp_clock_parent_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 * timeout;
		} ptp_clock_port_announce_receipt_timeout_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 timeout;
		} ptp_clock_port_announce_receipt_timeout_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_clock_port_info_t * info;
		} ptp_clock_port_configure;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_port_dataset_t * dataset;
		} ptp_clock_port_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 * delay_mechanism;
		} ptp_clock_port_delay_mechanism_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 delay_mechanism;
		} ptp_clock_port_delay_mechanism_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
		} ptp_clock_port_disable;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
		} ptp_clock_port_enable;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_port_identity_t * identity;
		} ptp_clock_port_identity_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_clock_port_info_t * info;
		} ptp_clock_port_info_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 latency_in;
			uint32 latency_out;
		} ptp_clock_port_latency_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int * interval;
		} ptp_clock_port_log_announce_interval_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int interval;
		} ptp_clock_port_log_announce_interval_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int * interval;
		} ptp_clock_port_log_min_delay_req_interval_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int interval;
		} ptp_clock_port_log_min_delay_req_interval_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int * interval;
		} ptp_clock_port_log_min_pdelay_req_interval_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int interval;
		} ptp_clock_port_log_min_pdelay_req_interval_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int * interval;
		} ptp_clock_port_log_sync_interval_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			int interval;
		} ptp_clock_port_log_sync_interval_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_mac_t * mac;
		} ptp_clock_port_mac_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_protocol_t * protocol;
		} ptp_clock_port_protocol_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			bcm_ptp_port_type_t * type;
		} ptp_clock_port_type_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 clock_port;
			uint32 * version;
		} ptp_clock_port_version_number_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 * priority1;
		} ptp_clock_priority1_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 priority1;
		} ptp_clock_priority1_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 * priority2;
		} ptp_clock_priority2_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 priority2;
		} ptp_clock_priority2_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 * slaveonly;
		} ptp_clock_slaveonly_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint32 slaveonly;
		} ptp_clock_slaveonly_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_timestamp_t * time;
		} ptp_clock_time_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_time_properties_t * data;
		} ptp_clock_time_properties_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_timestamp_t * time;
		} ptp_clock_time_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_timescale_t * timescale;
		} ptp_clock_timescale_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_timescale_t * timescale;
		} ptp_clock_timescale_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_trace_t * trace;
		} ptp_clock_traceability_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_trace_t * trace;
		} ptp_clock_traceability_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 * desc;
		} ptp_clock_user_description_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_utc_t * utc;
		} ptp_clock_utc_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_utc_t * utc;
		} ptp_clock_utc_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_ctdev_alarm_cb alarm_cb;
		} ptp_ctdev_alarm_callback_register;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
		} ptp_ctdev_alarm_callback_unregister;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint16 * alpha_numerator;
			uint16 * alpha_denominator;
		} ptp_ctdev_alpha_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint16 alpha_numerator;
			uint16 alpha_denominator;
		} ptp_ctdev_alpha_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * enable;
			uint32 * flags;
		} ptp_ctdev_enable_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int enable;
			uint32 flags;
		} ptp_ctdev_enable_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * verbose;
		} ptp_ctdev_verbose_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int verbose;
		} ptp_ctdev_verbose_set;
		struct {
			int unit;
		} ptp_detach;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_foreign_master_dataset_t * data_set;
		} ptp_foreign_master_dataset_get;
		struct {
			int unit;
		} ptp_init;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int channel_select_mode;
		} ptp_input_channel_precedence_mode_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int channel_switching_mode;
		} ptp_input_channel_switching_mode_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * num_channels;
			bcm_ptp_channel_t * channels;
		} ptp_input_channels_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int num_channels;
			bcm_ptp_channel_t * channels;
		} ptp_input_channels_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * enable;
			uint32 * flags;
		} ptp_modular_enable_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int enable;
			uint32 flags;
		} ptp_modular_enable_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * phyts;
			int * framesync_pin;
		} ptp_modular_phyts_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int phyts;
			int framesync_pin;
		} ptp_modular_phyts_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_pbmp_t * pbmp;
		} ptp_modular_portbitmap_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_pbmp_t pbmp;
		} ptp_modular_portbitmap_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * verbose;
		} ptp_modular_verbose_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int verbose;
		} ptp_modular_verbose_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_packet_counters_t * counters;
		} ptp_packet_counters_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int max_num_peers;
			bcm_ptp_peer_entry_t * peers;
			int * num_peers;
		} ptp_peer_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * primary_domain;
		} ptp_primary_domain_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int primary_domain;
		} ptp_primary_domain_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_servo_config_t * config;
		} ptp_servo_configuration_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_servo_config_t * config;
		} ptp_servo_configuration_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_servo_status_t * status;
		} ptp_servo_status_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * signal_output_count;
			bcm_ptp_signal_output_t * signal_output_id;
		} ptp_signal_output_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int signal_output_id;
		} ptp_signal_output_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * signal_output_id;
			bcm_ptp_signal_output_t * output_info;
		} ptp_signal_output_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_unicast_master_t * master_info;
			uint32 mask;
		} ptp_signaled_unicast_master_add;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_peer_address_t * master_info;
		} ptp_signaled_unicast_master_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int max_num_slaves;
			int * num_slaves;
			bcm_ptp_clock_peer_t * slave_info;
		} ptp_signaled_unicast_slave_list;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int callstack;
		} ptp_signaled_unicast_slave_table_clear;
		struct {
			int unit;
			bcm_ptp_stack_info_t * ptp_info;
		} ptp_stack_create;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_unicast_master_t * master_info;
		} ptp_static_unicast_master_add;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int max_num_masters;
			int * num_masters;
			bcm_ptp_clock_peer_address_t * master_addr;
		} ptp_static_unicast_master_list;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_peer_address_t * master_info;
		} ptp_static_unicast_master_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
		} ptp_static_unicast_master_table_clear;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int * max_table_entries;
		} ptp_static_unicast_master_table_size_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_peer_t * slave_info;
		} ptp_static_unicast_slave_add;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			int max_num_slaves;
			int * num_slaves;
			bcm_ptp_clock_peer_t * slave_info;
		} ptp_static_unicast_slave_list;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_peer_t * slave_info;
		} ptp_static_unicast_slave_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
		} ptp_static_unicast_slave_table_clear;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_sync_phy_input_t sync_input;
		} ptp_sync_phy;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
		} ptp_telecom_g8265_init;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_network_option_t * network_option;
		} ptp_telecom_g8265_network_option_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_network_option_t network_option;
		} ptp_telecom_g8265_network_option_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_add;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_pktmaster_t * pktmaster;
		} ptp_telecom_g8265_packet_master_best_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_clock_port_address_t * address;
			bcm_ptp_telecom_g8265_pktmaster_t * pktmaster;
		} ptp_telecom_g8265_packet_master_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int max_master_count;
			int * num_masters;
			int * best_master;
			bcm_ptp_telecom_g8265_pktmaster_t * pktmaster;
		} ptp_telecom_g8265_packet_master_list;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 lockout;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_lockout_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 nonres;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_non_reversion_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint8 override;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_priority_override;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint16 priority;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_priority_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint64 wait_sec;
			bcm_ptp_clock_port_address_t * address;
		} ptp_telecom_g8265_packet_master_wait_duration_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_pktstats_t * thresholds;
		} ptp_telecom_g8265_pktstats_thresholds_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_pktstats_t thresholds;
		} ptp_telecom_g8265_pktstats_thresholds_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_telecom_g8265_quality_level_t ql;
		} ptp_telecom_g8265_quality_level_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_message_type_t message_type;
			uint32 * receipt_timeout;
		} ptp_telecom_g8265_receipt_timeout_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_message_type_t message_type;
			uint32 receipt_timeout;
		} ptp_telecom_g8265_receipt_timeout_set;
		struct {
			int unit;
		} ptp_telecom_g8265_shutdown;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			bcm_ptp_time_type_t type;
		} ptp_time_format_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_timesource_status_t * status;
		} ptp_timesource_input_status_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * num_tod_sources;
			bcm_ptp_tod_input_t * tod_sources;
		} ptp_tod_input_sources_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int num_tod_sources;
			bcm_ptp_tod_input_t * tod_sources;
		} ptp_tod_input_sources_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * tod_output_count;
			bcm_ptp_tod_output_t * tod_output;
		} ptp_tod_output_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int tod_output_id;
		} ptp_tod_output_remove;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int * tod_output_id;
			bcm_ptp_tod_output_t * output_info;
		} ptp_tod_output_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			bcm_ptp_transparent_clock_default_dataset_t * data_set;
		} ptp_transparent_clock_default_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			uint16 clock_port;
			bcm_ptp_transparent_clock_port_dataset_t * data_set;
		} ptp_transparent_clock_port_dataset_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 * duration;
		} ptp_unicast_request_duration_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 * duration_max;
		} ptp_unicast_request_duration_max_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 duration_max;
		} ptp_unicast_request_duration_max_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 * duration_min;
		} ptp_unicast_request_duration_min_get;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 duration_min;
		} ptp_unicast_request_duration_min_set;
		struct {
			int unit;
			bcm_ptp_stack_id_t ptp_id;
			int clock_num;
			int port_num;
			uint32 duration;
		} ptp_unicast_request_duration_set;
#endif	/* INCLUDE_PTP */
		struct {
			int unit;
		} qos_detach;
		struct {
			int unit;
		} qos_init;
		struct {
			int unit;
			uint32 flags;
			bcm_qos_map_t * map;
			int map_id;
		} qos_map_add;
		struct {
			int unit;
			uint32 flags;
			int * map_id;
		} qos_map_create;
		struct {
			int unit;
			uint32 flags;
			bcm_qos_map_t * map;
			int map_id;
		} qos_map_delete;
		struct {
			int unit;
			int map_id;
		} qos_map_destroy;
		struct {
			int unit;
			uint32 flags;
			int map_id;
			int array_size;
			bcm_qos_map_t * array;
			int * array_count;
		} qos_map_multi_get;
		struct {
			int unit;
			int array_size;
			int * map_ids_array;
			int * flags_array;
			int * array_count;
		} qos_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			int * ing_map;
			int * egr_map;
		} qos_port_map_get;
		struct {
			int unit;
			bcm_gport_t port;
			int ing_map;
			int egr_map;
		} qos_port_map_set;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			int * map_id;
		} qos_port_map_type_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vid;
			int * ing_map;
			int * egr_map;
		} qos_port_vlan_map_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vid;
			int ing_map;
			int egr_map;
		} qos_port_vlan_map_set;
		struct {
			int unit;
			bcm_port_t port;
			int flags;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} rate_bandwidth_get;
		struct {
			int unit;
			bcm_port_t port;
			int flags;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} rate_bandwidth_set;
		struct {
			int unit;
			int * pps;
			int * flags;
			int port;
		} rate_bcast_get;
		struct {
			int unit;
			int pps;
			int flags;
			int port;
		} rate_bcast_set;
		struct {
			int unit;
			int * pps;
			int * flags;
			int port;
		} rate_dlfbc_get;
		struct {
			int unit;
			int pps;
			int flags;
			int port;
		} rate_dlfbc_set;
		struct {
			int unit;
			int * pps;
			int * flags;
		} rate_get;
		struct {
			int unit;
			int * pps;
			int * flags;
			int port;
		} rate_mcast_get;
		struct {
			int unit;
			int pps;
			int flags;
			int port;
		} rate_mcast_set;
		struct {
			int unit;
			int pps;
			int flags;
		} rate_set;
		struct {
			int unit;
			bcm_rate_limit_t * rl;
		} rate_type_get;
		struct {
			int unit;
			bcm_rate_limit_t * rl;
		} rate_type_set;
#ifdef	INCLUDE_REGEX
		struct {
			int unit;
			bcm_regex_config_t * config;
		} regex_config_get;
		struct {
			int unit;
			bcm_regex_config_t * config;
		} regex_config_set;
		struct {
			int unit;
			bcm_regex_engine_config_t * config;
			bcm_regex_engine_t * engid;
		} regex_engine_create;
		struct {
			int unit;
			bcm_regex_engine_t engid;
		} regex_engine_destroy;
		struct {
			int unit;
			bcm_regex_engine_t engid;
			bcm_regex_engine_config_t * config;
		} regex_engine_get;
		struct {
			int unit;
			int engine_id;
			bcm_regex_engine_info_t * regex_engine_info;
		} regex_engine_info_get;
		struct {
			int unit;
			bcm_regex_engine_traverse_cb cb;
			void * user_data;
		} regex_engine_traverse;
		struct {
			int unit;
			uint8 protocol;
			uint16 l4_start;
			uint16 l4_end;
		} regex_exclude_add;
		struct {
			int unit;
			uint8 protocol;
			uint16 l4_start;
			uint16 l4_end;
		} regex_exclude_delete;
		struct {
			int unit;
		} regex_exclude_delete_all;
		struct {
			int unit;
			int array_size;
			uint8 * protocol;
			uint16 * l4low;
			uint16 * l4high;
			int * array_count;
		} regex_exclude_get;
		struct {
			int unit;
			int signature_id;
			int * match_id;
		} regex_get_match_id;
		struct {
			int unit;
			int match_id;
			int * signature_id;
		} regex_get_sig_id;
		struct {
			int unit;
			bcm_regex_info_t * regex_info;
		} regex_info_get;
		struct {
			int unit;
		} regex_init;
		struct {
			int unit;
			bcm_regex_match_t * matches;
			int count;
			int * metric;
		} regex_match_check;
		struct {
			int unit;
			bcm_regex_engine_t engid;
			bcm_regex_match_t * matches;
			int count;
		} regex_match_set;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} regex_policy_action_add;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} regex_policy_action_delete;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			uint32 * param0;
			uint32 * param1;
		} regex_policy_action_get;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			uint8 * mac;
		} regex_policy_action_mac_add;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			bcm_mac_t * mac;
		} regex_policy_action_mac_get;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			bcm_pbmp_t pbmp;
		} regex_policy_action_ports_add;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
			bcm_pbmp_t * pbmp;
		} regex_policy_action_ports_get;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			bcm_field_action_t action;
		} regex_policy_action_remove;
		struct {
			int unit;
			bcm_regex_policy_t policy;
		} regex_policy_action_remove_all;
		struct {
			int unit;
			int flags;
			bcm_regex_policy_t * policy;
		} regex_policy_create;
		struct {
			int unit;
			bcm_regex_policy_t policy;
		} regex_policy_destroy;
		struct {
			int unit;
		} regex_policy_destroy_all;
		struct {
			int unit;
			bcm_regex_policy_t policy;
		} regex_policy_install;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int level;
			bcm_policer_t policer_id;
		} regex_policy_policer_attach;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int level;
		} regex_policy_policer_detach;
		struct {
			int unit;
			bcm_regex_policy_t policy;
		} regex_policy_policer_detach_all;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int level;
			bcm_policer_t * policer_id;
		} regex_policy_policer_get;
		struct {
			int unit;
			bcm_regex_policy_t policy;
		} regex_policy_remove;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int stat_id;
		} regex_policy_stat_attach;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int stat_id;
		} regex_policy_stat_detach;
		struct {
			int unit;
			bcm_regex_policy_t policy;
			int * stat_id;
		} regex_policy_stat_get;
		struct {
			int unit;
			uint32 reports;
			bcm_regex_report_cb callback;
			void * user_data;
		} regex_report_register;
		struct {
			int unit;
			uint32 reports;
			bcm_regex_report_cb callback;
			void * user_data;
		} regex_report_unregister;
		struct {
			int unit;
			int flags;
			bcm_regex_session_key_t * key;
			bcm_regex_session_t * session;
		} regex_session_add;
		struct {
			int unit;
			bcm_regex_session_key_t * key;
		} regex_session_delete;
		struct {
			int unit;
		} regex_session_delete_all;
		struct {
			int unit;
			int flags;
			bcm_regex_session_key_t * key;
			bcm_regex_session_t * session;
		} regex_session_get;
		struct {
			int unit;
			int flags;
			int flow_index;
			bcm_regex_policy_t policy;
		} regex_session_policy_update;
		struct {
			int unit;
			int flags;
			bcm_regex_session_traverse_cb cb;
			void * user_data;
		} regex_session_traverse;
		struct {
			int unit;
			int flags;
			int nstat;
			bcm_field_stat_t * stat_arr;
			int * stat_id;
		} regex_stat_create;
		struct {
			int unit;
			int stat_id;
		} regex_stat_destroy;
		struct {
			int unit;
			bcm_regex_stat_t type;
			uint64 * val;
		} regex_stat_get;
		struct {
			int unit;
			bcm_regex_stat_t type;
			uint64 val;
		} regex_stat_set;
#endif	/* INCLUDE_REGEX */
		struct {
			int unit;
		} rx_active;
		struct {
			int unit;
			int pkt_size;
			uint32 flags;
			void ** buf;
		} rx_alloc;
		struct {
			int unit;
			int * burst;
		} rx_burst_get;
		struct {
			int unit;
			int burst;
		} rx_burst_set;
		struct {
			int unit;
			bcm_rx_cfg_t * cfg;
		} rx_cfg_get;
		struct {
			int unit;
		} rx_cfg_init;
		struct {
			int unit;
			uint32 * channels;
		} rx_channels_running;
		struct {
			int unit;
		} rx_clear;
		struct {
			int unit;
			bcm_rx_control_t type;
			int * arg;
		} rx_control_get;
		struct {
			int unit;
			bcm_rx_control_t type;
			int arg;
		} rx_control_set;
		struct {
			int unit;
			int cos;
			int * burst;
		} rx_cos_burst_get;
		struct {
			int unit;
			int cos;
			int burst;
		} rx_cos_burst_set;
		struct {
			int unit;
			int cos;
			int * max_q_len;
		} rx_cos_max_len_get;
		struct {
			int unit;
			int cos;
			int max_q_len;
		} rx_cos_max_len_set;
		struct {
			int unit;
			int cos;
			int * pps;
		} rx_cos_rate_get;
		struct {
			int unit;
			int cos;
			int pps;
		} rx_cos_rate_set;
		struct {
			int unit;
			int index;
		} rx_cosq_mapping_delete;
		struct {
			int unit;
			int index;
			bcm_rx_reasons_t * reasons;
			bcm_rx_reasons_t * reasons_mask;
			uint8 * int_prio;
			uint8 * int_prio_mask;
			uint32 * packet_type;
			uint32 * packet_type_mask;
			bcm_cos_queue_t * cosq;
		} rx_cosq_mapping_get;
		struct {
			int unit;
			bcm_rx_reasons_t * reasons;
		} rx_cosq_mapping_reasons_get;
		struct {
			int unit;
			int index;
			bcm_rx_reasons_t reasons;
			bcm_rx_reasons_t reasons_mask;
			uint8 int_prio;
			uint8 int_prio_mask;
			uint32 packet_type;
			uint32 packet_type_mask;
			bcm_cos_queue_t cosq;
		} rx_cosq_mapping_set;
		struct {
			int unit;
			int * size;
		} rx_cosq_mapping_size_get;
		struct {
			int unit;
			int * pps;
		} rx_cpu_rate_get;
		struct {
			int unit;
			int pps;
		} rx_cpu_rate_set;
		struct {
			int unit;
			void * pkt_data;
		} rx_free;
		struct {
			int unit;
			void * pkt_data;
		} rx_free_enqueue;
		struct {
			int unit;
		} rx_init;
		struct {
			int unit;
			int size;
			uint32 flags;
			void ** pool;
		} rx_pool_alloc;
		struct {
			int unit;
			void * buf;
		} rx_pool_free;
		struct {
			int pkt_count;
			int bytes_per_pkt;
		} rx_pool_setup;
		struct {
			int unit;
			bcm_cos_queue_t queue_id;
			bcm_rx_chan_t * chan_id;
		} rx_queue_channel_get;
		struct {
			int unit;
			bcm_cos_queue_t queue_id;
			bcm_rx_chan_t chan_id;
		} rx_queue_channel_set;
		struct {
			int unit;
			bcm_cos_queue_t * cosq;
		} rx_queue_max_get;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			int * packet_count;
		} rx_queue_packet_count_get;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			int * packet_tokens;
		} rx_queue_rate_limit_status_get;
		struct {
			int unit;
			char * name;
			bcm_cos_queue_t cosq;
			bcm_rx_cb_f callback;
			uint8 priority;
			void * cookie;
			uint32 flags;
		} rx_queue_register;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			bcm_rx_cb_f callback;
			uint8 priority;
		} rx_queue_unregister;
		struct {
			int unit;
			int * pps;
		} rx_rate_get;
		struct {
			int unit;
			int pps;
		} rx_rate_set;
		struct {
			int unit;
			bcm_rx_reasons_t * reasons;
		} rx_reasons_get;
		struct {
			int unit;
			bcm_rx_reasons_t rx_reasons;
			bcm_policer_t polid;
		} rx_reasons_policer_set;
		struct {
			int unit;
			bcm_rx_redirect_t mode;
			bcm_rx_reasons_t * reasons;
		} rx_redirect_reasons_get;
		struct {
			int unit;
			bcm_rx_redirect_t mode;
			bcm_rx_reasons_t reasons;
		} rx_redirect_reasons_set;
		struct {
			int unit;
			char * name;
			bcm_rx_cb_f callback;
			uint8 priority;
			void * cookie;
			uint32 flags;
		} rx_register;
#ifdef	BCM_RPC_SUPPORT
		struct {
			int len;
			bcm_pkt_t ** pkt;
		} rx_remote_pkt_alloc;
#endif	/* BCM_RPC_SUPPORT */
		struct {
			int unit;
			bcm_pkt_t * pkt;
		} rx_remote_pkt_enqueue;
#ifdef	BCM_RPC_SUPPORT
		struct {
			bcm_pkt_t * pkt;
		} rx_remote_pkt_free;
#endif	/* BCM_RPC_SUPPORT */
		struct {
			int unit;
			bcm_rx_sched_cb sched_cb;
		} rx_sched_register;
		struct {
			int unit;
		} rx_sched_unregister;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
		} rx_show;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			int flags;
			int * snoop_cmnd;
		} rx_snoop_create;
		struct {
			int unit;
			int flags;
			int snoop_cmnd;
		} rx_snoop_destroy;
		struct {
			int unit;
			int snoop_cmnd;
			bcm_rx_snoop_config_t * config;
		} rx_snoop_get;
		struct {
			int unit;
			int snoop_cmnd;
			bcm_rx_snoop_config_t * config;
		} rx_snoop_set;
		struct {
			int unit;
			bcm_rx_cfg_t * cfg;
		} rx_start;
		struct {
			int unit;
			bcm_rx_cfg_t * cfg;
		} rx_stop;
		struct {
			int unit;
			int trap_id;
			bcm_rx_trap_config_t * config;
		} rx_trap_get;
		struct {
			int unit;
			int trap_id;
			bcm_rx_trap_config_t * config;
		} rx_trap_set;
		struct {
			int unit;
			int flags;
			bcm_rx_trap_t type;
			int * trap_id;
		} rx_trap_type_create;
		struct {
			int unit;
			int trap_id;
		} rx_trap_type_destroy;
		struct {
			int unit;
			int * next_unit;
		} rx_unit_next_get;
		struct {
			int unit;
			bcm_rx_cb_f callback;
			uint8 priority;
		} rx_unregister;
		struct {
			int unit;
			bcm_sat_endpoint_info_t * endpoint_info;
		} sat_endpoint_create;
		struct {
			int unit;
			bcm_sat_endpoint_t endpoint;
			uint32 flags;
		} sat_endpoint_destroy;
		struct {
			int unit;
			uint32 flags;
		} sat_endpoint_destroy_all;
		struct {
			int unit;
			bcm_sat_endpoint_t endpoint;
			uint32 flags;
			bcm_sat_endpoint_info_t * endpoint_info;
		} sat_endpoint_get;
		struct {
			int unit;
			uint32 flags;
			bcm_sat_endpoint_traverse_cb cb;
			void * user_data;
		} sat_endpoint_traverse;
		struct {
			int unit;
			bcm_port_t port;
		} stat_clear;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
		} stat_custom_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
			int * result;
		} stat_custom_check;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
		} stat_custom_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
		} stat_custom_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint32 * flags;
		} stat_custom_get;
		struct {
			int unit;
			uint32 mode_id;
			bcm_stat_object_t object;
			uint32 * stat_counter_id;
			uint32 * num_entries;
		} stat_custom_group_create;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint32 flags;
		} stat_custom_set;
		struct {
			int unit;
			bcm_stat_flex_direction_t direction;
			uint32 num_pools;
			uint32 * actual_num_pools;
			bcm_stat_flex_pool_stat_info_t * flex_pool_stat;
		} stat_flex_pool_info_multi_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint64 * value;
		} stat_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint32 * value;
		} stat_get32;
		struct {
			int unit;
			bcm_stat_object_t object;
			bcm_stat_group_mode_t group_mode;
			uint32 * stat_counter_id;
			uint32 * num_entries;
		} stat_group_create;
		struct {
			int unit;
			uint32 stat_counter_id;
		} stat_group_destroy;
		struct {
			int unit;
			bcm_stat_object_t object;
			bcm_stat_group_mode_t group_mode;
		} stat_group_dump;
		struct {
			int unit;
		} stat_group_dump_all;
		struct {
			int unit;
			uint32 flags;
			uint32 total_counters;
			uint32 num_selectors;
			bcm_stat_group_mode_attr_selector_t * attr_selectors;
			uint32 * mode_id;
		} stat_group_mode_id_create;
		struct {
			int unit;
			uint32 mode_id;
		} stat_group_mode_id_destroy;
		struct {
			int unit;
			uint32 mode_id;
			uint32 * flags;
			uint32 * total_counters;
			uint32 num_selectors;
			bcm_stat_group_mode_attr_selector_t * attr_selectors;
			uint32 * actual_num_selectors;
		} stat_group_mode_id_get;
		struct {
			int unit;
			bcm_stat_object_t object;
			int stat_max;
			uint32 * stat_array;
			int * stat_count;
		} stat_id_get_all;
		struct {
			int unit;
		} stat_init;
		struct {
			int unit;
			bcm_port_t port;
			int nstat;
			bcm_stat_val_t * stat_arr;
			uint64 * value_arr;
		} stat_multi_get;
		struct {
			int unit;
			bcm_port_t port;
			int nstat;
			bcm_stat_val_t * stat_arr;
			uint32 * value_arr;
		} stat_multi_get32;
		struct {
			int unit;
		} stat_sync;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint64 * value;
		} stat_sync_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint32 * value;
		} stat_sync_get32;
		struct {
			int unit;
			bcm_port_t port;
			int nstat;
			bcm_stat_val_t * stat_arr;
			uint64 * value_arr;
		} stat_sync_multi_get;
		struct {
			int unit;
			bcm_port_t port;
			int nstat;
			bcm_stat_val_t * stat_arr;
			uint32 * value_arr;
		} stat_sync_multi_get32;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t stat;
			bcm_stat_threshold_t * threshold;
		} stat_threshold_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t stat;
			bcm_stat_threshold_t * threshold;
		} stat_threshold_set;
		struct {
			int unit;
		} stg_clear;
		struct {
			int unit;
			int * max_stg;
		} stg_count_get;
		struct {
			int unit;
			bcm_stg_t * stg_ptr;
		} stg_create;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_create_id;
		struct {
			int unit;
			bcm_stg_t * stg_ptr;
		} stg_default_get;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_default_set;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_destroy;
		struct {
			int unit;
		} stg_init;
		struct {
			int unit;
			bcm_stg_t ** list;
			int * count;
		} stg_list;
		struct {
			int unit;
			bcm_stg_t * list;
			int count;
		} stg_list_destroy;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_port_t port;
			int * stp_state;
		} stg_stp_get;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_port_t port;
			int stp_state;
		} stg_stp_set;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_vlan_t vid;
		} stg_vlan_add;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_vlan_t ** list;
			int * count;
		} stg_vlan_list;
		struct {
			int unit;
			bcm_vlan_t * list;
			int count;
		} stg_vlan_list_destroy;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_vlan_t vid;
		} stg_vlan_remove;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_vlan_remove_all;
		struct {
			int unit;
			int tm_domain;
			bcm_trunk_t stk_trunk;
		} stk_domain_stk_trunk_add;
		struct {
			int unit;
			int tm_domain;
			bcm_trunk_t stk_trunk;
		} stk_domain_stk_trunk_delete;
		struct {
			int unit;
			bcm_trunk_t stk_trunk;
			int domain_max;
			int * domain_array;
			int * domain_count;
		} stk_domain_stk_trunk_get;
		struct {
			int unit;
			bcm_gport_t switch_port;
			bcm_gport_t * fabric_port;
		} stk_fabric_map_get;
		struct {
			int unit;
			bcm_gport_t switch_port;
			bcm_gport_t fabric_port;
		} stk_fabric_map_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t * fmod;
			bcm_module_t * lmod;
		} stk_fmod_lmod_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t fmod;
			bcm_module_t lmod;
		} stk_fmod_lmod_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t fmod;
			bcm_module_t * smod;
			bcm_port_t * sport;
			uint32 * nports;
		} stk_fmod_smod_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t fmod;
			bcm_module_t smod;
			bcm_port_t sport;
			uint32 nports;
		} stk_fmod_smod_mapping_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t * sysport;
		} stk_gport_sysport_get;
		struct {
			int unit;
		} stk_init;
		struct {
			int unit;
			uint32 * flags;
		} stk_mode_get;
		struct {
			int unit;
			uint32 flags;
		} stk_mode_set;
		struct {
			int unit;
			bcm_stk_modid_config_t * modid;
		} stk_modid_config_get;
		struct {
			int unit;
			bcm_stk_modid_config_t * modid;
		} stk_modid_config_set;
		struct {
			int unit;
			int * num_modid;
		} stk_modid_count;
		struct {
			int unit;
			int modid;
			int tm_domain;
		} stk_modid_domain_add;
		struct {
			int unit;
			int modid;
			int tm_domain;
		} stk_modid_domain_delete;
		struct {
			int unit;
			int tm_domain;
			int mod_max;
			int * mod_array;
			int * mod_count;
		} stk_modid_domain_get;
		struct {
			int unit;
			int * modid;
		} stk_modid_get;
		struct {
			int unit;
			int modid;
		} stk_modid_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} stk_modmap_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} stk_modmap_enable_set;
		struct {
			int unit;
			int setget;
			bcm_module_t mod_in;
			bcm_port_t port_in;
			bcm_module_t * mod_out;
			bcm_port_t * port_out;
		} stk_modmap_map;
		struct {
			int unit;
			bcm_stk_modmap_cb_t func;
		} stk_modmap_register;
		struct {
			int unit;
		} stk_modmap_unregister;
		struct {
			int unit;
			int modid;
			bcm_port_t port;
		} stk_modport_add;
		struct {
			int unit;
			int modid;
		} stk_modport_clear;
		struct {
			int unit;
		} stk_modport_clear_all;
		struct {
			int unit;
			int modid;
			bcm_port_t port;
		} stk_modport_delete;
		struct {
			int unit;
			int modid;
			int * port;
		} stk_modport_get;
		struct {
			int unit;
			int modid;
			int port_max;
			int * port_array;
			int * port_count;
		} stk_modport_get_all;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			int * remote_modid;
			bcm_port_t * remote_port;
		} stk_modport_remote_map_get;
		struct {
			int unit;
			bcm_gport_t port;
			uint32 flags;
			int remote_modid;
			bcm_port_t remote_port;
		} stk_modport_remote_map_set;
		struct {
			int unit;
			int modid;
			int port;
		} stk_modport_set;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t module;
			bcm_stk_module_control_t control;
			int * arg;
		} stk_module_control_get;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t module;
			bcm_stk_module_control_t control;
			int arg;
		} stk_module_control_set;
		struct {
			int unit;
			bcm_module_t modid;
			int nports;
			int enable;
		} stk_module_enable;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t * max_module;
		} stk_module_max_get;
		struct {
			int unit;
			uint32 flags;
			bcm_module_t max_module;
		} stk_module_max_set;
		struct {
			int unit;
			bcm_module_t modid;
			bcm_module_protocol_t * protocol;
		} stk_module_protocol_get;
		struct {
			int unit;
			bcm_module_t modid;
			bcm_module_protocol_t protocol;
		} stk_module_protocol_set;
		struct {
			int unit;
			int * my_modid;
		} stk_my_modid_get;
		struct {
			int unit;
			int my_modid;
		} stk_my_modid_set;
		struct {
			int unit;
			bcm_pbmp_t * cur_pbm;
			bcm_pbmp_t * inactive_pbm;
		} stk_pbmp_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} stk_port_get;
		struct {
			int unit;
			bcm_port_t port;
			int * group;
		} stk_port_modmap_group_get;
		struct {
			int unit;
			int * max_group;
		} stk_port_modmap_group_max_get;
		struct {
			int unit;
			bcm_port_t port;
			int group;
		} stk_port_modmap_group_set;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
			bcm_port_t dest_port;
		} stk_port_modport_add;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
		} stk_port_modport_clear;
		struct {
			int unit;
			bcm_port_t ing_port;
		} stk_port_modport_clear_all;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
			bcm_port_t dest_port;
		} stk_port_modport_delete;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
			bcm_port_t * dest_port;
		} stk_port_modport_get;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
			int dest_port_max;
			bcm_port_t * dest_port_array;
			int * dest_port_count;
		} stk_port_modport_get_all;
		struct {
			int unit;
			bcm_port_t ing_port;
			bcm_module_t dest_modid;
			bcm_port_t dest_port;
		} stk_port_modport_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} stk_port_set;
		struct {
			int unit;
			int steer_id;
		} stk_steering_clear;
		struct {
			int unit;
		} stk_steering_clear_all;
		struct {
			int unit;
			int steer_id;
			bcm_multicast_t mgid_lo;
			bcm_multicast_t mgid_hi;
			int num_queue_groups;
			bcm_gport_t * queue_group;
		} stk_steering_multicast_set;
		struct {
			int unit;
			int steer_id;
			bcm_module_t destmod_lo;
			bcm_module_t destmod_hi;
			int num_queue_groups;
			bcm_gport_t * queue_group;
		} stk_steering_unicast_set;
		struct {
			int unit;
			bcm_gport_t sysport;
			bcm_gport_t * gport;
		} stk_sysport_gport_get;
		struct {
			int unit;
			bcm_gport_t sysport;
			bcm_gport_t gport;
		} stk_sysport_gport_set;
		struct {
			int unit;
			bcm_stk_system_gport_map_t * sys_gport_map;
		} stk_system_gport_map_create;
		struct {
			int unit;
			bcm_gport_t system_gport;
		} stk_system_gport_map_destroy;
		struct {
			int unit;
			bcm_stk_system_gport_map_t * sys_gport_map;
		} stk_system_gport_map_get;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			bcm_pbmp_t pbmp;
		} stk_ucbitmap_del;
		struct {
			int unit;
			int port;
			int modid;
			bcm_pbmp_t * pbmp;
		} stk_ucbitmap_get;
		struct {
			int unit;
			int port;
			int modid;
			bcm_pbmp_t pbmp;
		} stk_ucbitmap_set;
		struct {
			int unit;
			bcm_stk_cb_f cb;
			void * cookie;
		} stk_update_callback_register;
		struct {
			int unit;
			bcm_stk_cb_f cb;
			void * cookie;
		} stk_update_callback_unregister;
		struct {
			int unit;
		} subport_cleanup;
		struct {
			int unit;
			bcm_subport_group_config_t * config;
			bcm_gport_t * group;
		} subport_group_create;
		struct {
			int unit;
			bcm_gport_t group;
		} subport_group_destroy;
		struct {
			int unit;
			bcm_gport_t group;
			bcm_subport_group_config_t * config;
		} subport_group_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_subport_group_linkphy_config_t * linkphy_config;
		} subport_group_linkphy_config_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_subport_group_linkphy_config_t * linkphy_config;
		} subport_group_linkphy_config_set;
		struct {
			int unit;
			bcm_gport_t subport_group;
			bcm_subport_port_traverse_cb cb;
			void * user_data;
		} subport_group_traverse;
		struct {
			int unit;
		} subport_init;
		struct {
			int unit;
			bcm_subport_config_t * config;
			bcm_gport_t * port;
		} subport_port_add;
		struct {
			int unit;
			bcm_gport_t port;
		} subport_port_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_subport_config_t * config;
		} subport_port_get;
		struct {
			int unit;
			bcm_gport_t port;
			int stream_id;
			bcm_subport_stat_t stat_type;
			uint64 * val;
		} subport_port_stat_get;
		struct {
			int unit;
			bcm_gport_t port;
			int stream_id;
			bcm_subport_stat_t stat_type;
			uint64 val;
		} subport_port_stat_set;
		struct {
			int unit;
			bcm_subport_port_traverse_cb cb;
			void * user_data;
		} subport_port_traverse;
		struct {
			int unit;
			bcm_switch_control_t type;
			int * arg;
		} switch_control_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_switch_control_t type;
			int * arg;
		} switch_control_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_switch_control_t type;
			int arg;
		} switch_control_port_set;
		struct {
			int unit;
			bcm_switch_control_t type;
			int arg;
		} switch_control_set;
		struct {
			int unit;
			bcm_switch_event_t event;
			bcm_switch_event_control_t type;
			uint32 * value;
		} switch_event_control_get;
		struct {
			int unit;
			bcm_switch_event_t event;
			bcm_switch_event_control_t type;
			uint32 value;
		} switch_event_control_set;
		struct {
			int unit;
			bcm_switch_event_cb_t cb;
			void * userdata;
		} switch_event_register;
		struct {
			int unit;
			bcm_switch_event_cb_t cb;
			void * userdata;
		} switch_event_unregister;
		struct {
			int unit;
			bcm_switch_hash_table_t hash_table;
			uint32 bank_num;
			int * hash_type;
			uint32 * hash_offset;
		} switch_hash_banks_config_get;
		struct {
			int unit;
			bcm_switch_hash_table_t hash_table;
			uint32 bank_num;
			int hash_type;
			uint32 hash_offset;
		} switch_hash_banks_config_set;
		struct {
			int unit;
			bcm_switch_hash_table_t hash_table;
			uint32 * bank_count;
		} switch_hash_banks_max_get;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_hash_entry_t * entry;
		} switch_hash_entry_create;
		struct {
			int unit;
			bcm_field_qset_t qset;
			bcm_hash_entry_t * entry;
		} switch_hash_entry_create_qset;
		struct {
			int unit;
			bcm_hash_entry_t entry;
		} switch_hash_entry_destroy;
		struct {
			int unit;
			bcm_hash_entry_t entry;
			uint32 offset;
		} switch_hash_entry_install;
		struct {
			int unit;
			bcm_hash_entry_t entry;
			uint32 offset;
		} switch_hash_entry_reinstall;
		struct {
			int unit;
			bcm_hash_entry_t entry;
		} switch_hash_entry_remove;
		struct {
			int unit;
			bcm_hash_entry_t entry;
			int qual_id;
			uint32 data;
			uint32 mask;
		} switch_hash_qualify_data;
		struct {
			int unit;
			bcm_ip6_t * ip6_addr;
			bcm_ip6_t * ip6_mask;
		} switch_ipv6_reserved_multicast_addr_get;
		struct {
			int unit;
			uint8 * ip6_addr;
			uint8 * ip6_mask;
		} switch_ipv6_reserved_multicast_addr_set;
		struct {
			int unit;
			uint32 * group_members;
			bcm_l3_protocol_group_id_t * group_id;
		} switch_l3_protocol_group_get;
		struct {
			int unit;
			uint32 group_members;
			bcm_l3_protocol_group_id_t group_id;
		} switch_l3_protocol_group_set;
		struct {
			int unit;
			bcm_switch_network_group_t source_network_group_id;
			bcm_switch_network_group_config_t * config;
		} switch_network_group_config_get;
		struct {
			int unit;
			bcm_switch_network_group_t source_network_group_id;
			bcm_switch_network_group_config_t * config;
		} switch_network_group_config_set;
		struct {
			int unit;
			bcm_switch_object_t object;
			int * entries;
		} switch_object_count_get;
		struct {
			int unit;
			int object_size;
			bcm_switch_object_t * object_array;
			int * entries;
		} switch_object_count_multi_get;
		struct {
			int unit;
			bcm_switch_pkt_info_t * pkt_info;
			bcm_gport_t * dst_gport;
			bcm_if_t * dst_intf;
		} switch_pkt_info_hash_get;
		struct {
			int unit;
			int decap_pri;
			int * internal_cpu_pri;
		} switch_rcpu_decap_priority_map_get;
		struct {
			int unit;
			int decap_pri;
			int internal_cpu_pri;
		} switch_rcpu_decap_priority_map_set;
		struct {
			int unit;
			uint32 flags;
			int internal_cpu_pri;
			int * encap_pri;
		} switch_rcpu_encap_priority_map_get;
		struct {
			int unit;
			uint32 flags;
			int internal_cpu_pri;
			int encap_pri;
		} switch_rcpu_encap_priority_map_set;
		struct {
			int unit;
			bcm_switch_service_t service;
			bcm_switch_service_config_t * config;
		} switch_service_get;
		struct {
			int unit;
			bcm_switch_service_t service;
			bcm_switch_service_config_t * config;
		} switch_service_set;
		struct {
			int unit;
			bcm_switch_read_func_t rf;
			bcm_switch_write_func_t wf;
		} switch_stable_register;
		struct {
			int unit;
			int temperature_max;
			bcm_switch_temperature_monitor_t * temperature_array;
			int * temperature_count;
		} switch_temperature_monitor_get;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_user_buffer_type_t buff_type;
			uint8 * buf;
			int offset;
			int nbytes;
		} switch_user_buffer_read;
		struct {
			int unit;
			uint32 flags;
			bcm_switch_user_buffer_type_t buff_type;
			uint8 * buf;
			int offset;
			int nbytes;
		} switch_user_buffer_write;
#ifdef	INCLUDE_PTP
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_bandwidth_t * bandwidth;
		} tdpll_dpll_bandwidth_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_bandwidth_t * bandwidth;
		} tdpll_dpll_bandwidth_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_bindings_t * bindings;
		} tdpll_dpll_bindings_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_bindings_t * bindings;
		} tdpll_dpll_bindings_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_phase_control_t * phase_control;
		} tdpll_dpll_phase_control_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_tdpll_dpll_phase_control_t * phase_control;
		} tdpll_dpll_phase_control_set;
		struct {
			int unit;
			int stack_id;
			int max_num_dpll;
			int * dpll_ref;
			int * num_dpll;
		} tdpll_dpll_reference_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_esmc_quality_level_t * ql;
		} tdpll_esmc_holdover_ql_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_esmc_quality_level_t ql;
		} tdpll_esmc_holdover_ql_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_mac_t * mac;
		} tdpll_esmc_mac_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_mac_t * mac;
		} tdpll_esmc_mac_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_esmc_quality_level_t * ql;
		} tdpll_esmc_ql_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_esmc_quality_level_t ql;
		} tdpll_esmc_ql_set;
		struct {
			int unit;
			int stack_id;
			int * enable;
		} tdpll_esmc_rx_enable_get;
		struct {
			int unit;
			int stack_id;
			int enable;
		} tdpll_esmc_rx_enable_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_pbmp_t * pbmp;
		} tdpll_esmc_rx_portbitmap_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_pbmp_t pbmp;
		} tdpll_esmc_rx_portbitmap_set;
		struct {
			int unit;
			int stack_id;
			int ingress_port;
			bcm_esmc_pdu_data_t * esmc_pdu_data;
		} tdpll_esmc_rx_state_machine;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int * enable;
		} tdpll_esmc_tx_enable_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int enable;
		} tdpll_esmc_tx_enable_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_pbmp_t * pbmp;
		} tdpll_esmc_tx_portbitmap_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			bcm_pbmp_t pbmp;
		} tdpll_esmc_tx_portbitmap_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int * best_clock;
		} tdpll_input_clock_best_get;
		struct {
			int unit;
			int stack_id;
			int enable;
		} tdpll_input_clock_control;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * enable;
		} tdpll_input_clock_enable_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int enable;
		} tdpll_input_clock_enable_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * freq_error_ppb;
		} tdpll_input_clock_frequency_error_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 * clock_frequency;
			uint32 * tsevent_frequency;
		} tdpll_input_clock_frequency_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 clock_frequency;
			uint32 tsevent_frequency;
		} tdpll_input_clock_frequency_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_input_clock_l1mux_t * l1mux;
		} tdpll_input_clock_l1mux_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_input_clock_l1mux_t * l1mux;
		} tdpll_input_clock_l1mux_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * lockout;
		} tdpll_input_clock_lockout_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int lockout;
		} tdpll_input_clock_lockout_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_mac_t * mac;
		} tdpll_input_clock_mac_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_mac_t * mac;
		} tdpll_input_clock_mac_set;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_input_clock_monitor_cb monitor_cb;
		} tdpll_input_clock_monitor_callback_register;
		struct {
			int unit;
			int stack_id;
		} tdpll_input_clock_monitor_callback_unregister;
		struct {
			int unit;
			int stack_id;
			uint32 * monitor_interval;
		} tdpll_input_clock_monitor_interval_get;
		struct {
			int unit;
			int stack_id;
			uint32 monitor_interval;
		} tdpll_input_clock_monitor_interval_set;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_input_clock_monitor_type_t threshold_type;
			uint32 * threshold;
		} tdpll_input_clock_monitor_threshold_get;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_input_clock_monitor_type_t threshold_type;
			uint32 threshold;
		} tdpll_input_clock_monitor_threshold_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * priority;
		} tdpll_input_clock_priority_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int priority;
		} tdpll_input_clock_priority_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int * ql_enabled;
		} tdpll_input_clock_ql_enabled_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int ql_enabled;
		} tdpll_input_clock_ql_enabled_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_esmc_quality_level_t * ql;
		} tdpll_input_clock_ql_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_esmc_quality_level_t ql;
		} tdpll_input_clock_ql_set;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int * revertive;
		} tdpll_input_clock_revertive_get;
		struct {
			int unit;
			int stack_id;
			int dpll_index;
			int revertive;
		} tdpll_input_clock_revertive_set;
		struct {
			int unit;
			int stack_id;
			bcm_tdpll_input_clock_selector_cb selector_cb;
		} tdpll_input_clock_selector_callback_register;
		struct {
			int unit;
			int stack_id;
		} tdpll_input_clock_selector_callback_unregister;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_input_clock_monitor_type_t threshold_type;
			int * threshold_state;
		} tdpll_input_clock_threshold_state_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * valid;
		} tdpll_input_clock_valid_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int valid;
		} tdpll_input_clock_valid_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 * deriv_frequency;
		} tdpll_output_clock_deriv_frequency_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 deriv_frequency;
		} tdpll_output_clock_deriv_frequency_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int * enable;
		} tdpll_output_clock_enable_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			int enable;
		} tdpll_output_clock_enable_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_holdover_data_t * hdata;
		} tdpll_output_clock_holdover_data_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_frequency_correction_t hfreq;
		} tdpll_output_clock_holdover_frequency_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_holdover_mode_t * hmode;
		} tdpll_output_clock_holdover_mode_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			bcm_tdpll_holdover_mode_t hmode;
		} tdpll_output_clock_holdover_mode_set;
		struct {
			int unit;
			int stack_id;
			int clock_index;
		} tdpll_output_clock_holdover_reset;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 * synth_frequency;
			uint32 * tsevent_frequency;
		} tdpll_output_clock_synth_frequency_get;
		struct {
			int unit;
			int stack_id;
			int clock_index;
			uint32 synth_frequency;
			uint32 tsevent_frequency;
		} tdpll_output_clock_synth_frequency_set;
#endif	/* INCLUDE_PTP */
		struct {
			int unit;
			bcm_time_if_t intf_id;
			bcm_time_capture_t * time;
		} time_capture_get;
		struct {
			int unit;
		} time_deinit;
		struct {
			int unit;
			bcm_time_if_t id;
			int * enable;
		} time_heartbeat_enable_get;
		struct {
			int unit;
			bcm_time_if_t id;
			int enable;
		} time_heartbeat_enable_set;
		struct {
			int unit;
			bcm_time_if_t id;
			bcm_time_heartbeat_cb f;
			void * user_data;
		} time_heartbeat_register;
		struct {
			int unit;
			bcm_time_if_t id;
		} time_heartbeat_unregister;
		struct {
			int unit;
		} time_init;
		struct {
			int unit;
			bcm_time_interface_t * intf;
		} time_interface_add;
		struct {
			int unit;
			bcm_time_if_t intf_id;
		} time_interface_delete;
		struct {
			int unit;
		} time_interface_delete_all;
		struct {
			int unit;
			bcm_time_interface_t * intf;
		} time_interface_get;
		struct {
			int unit;
			bcm_time_interface_traverse_cb cb;
			void * user_data;
		} time_interface_traverse;
		struct {
			int unit;
			bcm_time_if_t id;
			uint32 * mode_flags;
		} time_trigger_enable_get;
		struct {
			int unit;
			bcm_time_if_t id;
			uint32 mode_flags;
		} time_trigger_enable_set;
		struct {
			int unit;
			int dest_modid;
			bcm_port_t * exit_port;
		} topo_port_get;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} trill_cleanup;
		struct {
			int unit;
		} trill_init;
		struct {
			int unit;
			bcm_trill_multicast_adjacency_t * trill_multicast_adjacency;
		} trill_multicast_adjacency_add;
		struct {
			int unit;
			bcm_trill_multicast_adjacency_t * trill_multicast_adjacency;
		} trill_multicast_adjacency_delete;
		struct {
			int unit;
		} trill_multicast_adjacency_delete_all;
		struct {
			int unit;
			bcm_trill_multicast_adjacency_traverse_cb cb;
			void * user_data;
		} trill_multicast_adjacency_traverse;
		struct {
			int unit;
			bcm_trill_name_t root_name;
		} trill_multicast_delete_all;
		struct {
			int unit;
			bcm_trill_multicast_entry_t * trill_mc_entry;
		} trill_multicast_entry_add;
		struct {
			int unit;
			bcm_trill_multicast_entry_t * trill_mc_entry;
		} trill_multicast_entry_delete;
		struct {
			int unit;
			bcm_trill_multicast_entry_t * trill_mc_entry;
		} trill_multicast_entry_get;
		struct {
			int unit;
			bcm_trill_multicast_entry_traverse_cb cb;
			void * user_data;
		} trill_multicast_entry_traverse;
		struct {
			int unit;
			bcm_trill_name_t root_name;
			bcm_trill_name_t source_rbridge_name;
			bcm_gport_t port;
			bcm_if_t encap_intf;
		} trill_multicast_source_add;
		struct {
			int unit;
			bcm_trill_name_t root_name;
			bcm_trill_name_t source_rbridge_name;
			bcm_gport_t port;
			bcm_if_t encap_intf;
		} trill_multicast_source_delete;
		struct {
			int unit;
			bcm_trill_name_t root_name;
			bcm_trill_name_t source_rbridge_name;
			bcm_gport_t * port;
		} trill_multicast_source_get;
		struct {
			int unit;
			bcm_trill_multicast_source_traverse_cb cb;
			void * user_data;
		} trill_multicast_source_traverse;
		struct {
			int unit;
			bcm_trill_port_t * trill_port;
		} trill_port_add;
		struct {
			int unit;
			bcm_gport_t trill_port_id;
		} trill_port_delete;
		struct {
			int unit;
		} trill_port_delete_all;
		struct {
			int unit;
			bcm_trill_port_t * trill_port;
		} trill_port_get;
		struct {
			int unit;
			int port_max;
			bcm_trill_port_t * port_array;
			int * port_count;
		} trill_port_get_all;
		struct {
			int unit;
			bcm_trill_rbridge_t * trill_entry;
		} trill_rbridge_entry_add;
		struct {
			int unit;
			bcm_trill_rbridge_t * trill_entry;
		} trill_rbridge_entry_delete;
		struct {
			int unit;
			bcm_trill_rbridge_t * trill_entry;
		} trill_rbridge_entry_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trill_stat_t stat;
		} trill_stat_clear;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trill_stat_t stat;
			uint64 * val;
		} trill_stat_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trill_stat_t stat;
			uint32 * val;
		} trill_stat_get32;
		struct {
			int unit;
			bcm_trill_vpn_config_t * info;
		} trill_vpn_create;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} trill_vpn_destroy;
		struct {
			int unit;
		} trill_vpn_destroy_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_trill_vpn_config_t * info;
		} trill_vpn_get;
		struct {
			int unit;
			bcm_trill_vpn_traverse_cb cb;
			void * user_data;
		} trill_vpn_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_pbmp_t * pbmp_ptr;
		} trunk_bitmap_expand;
		struct {
			int unit;
			bcm_trunk_chip_info_t * ta_info;
		} trunk_chip_info_get;
		struct {
			int unit;
			uint32 flags;
			bcm_trunk_t * tid;
		} trunk_create;
		struct {
			int unit;
			bcm_trunk_t tid;
		} trunk_destroy;
		struct {
			int unit;
		} trunk_detach;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_pbmp_t * pbmp;
		} trunk_egress_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_pbmp_t pbmp;
		} trunk_egress_set;
		struct {
			int unit;
			uint32 * flags;
			int ethertype_max;
			int * ethertype_array;
			int * ethertype_count;
		} trunk_ethertype_get;
		struct {
			int unit;
			uint32 flags;
			int ethertype_count;
			int * ethertype_array;
		} trunk_ethertype_set;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_gport_t failport;
			int * psc;
			uint32 * flags;
			int array_size;
			bcm_gport_t * fail_to_array;
			int * array_count;
		} trunk_failover_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_gport_t failport;
			int psc;
			uint32 flags;
			int count;
			bcm_gport_t * fail_to_array;
		} trunk_failover_set;
		struct {
			int unit;
			bcm_module_t modid;
			bcm_port_t port;
			bcm_trunk_t * tid;
		} trunk_find;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_info_t * t_data;
			int member_max;
			bcm_trunk_member_t * member_array;
			int * member_count;
		} trunk_get;
		struct {
			int unit;
		} trunk_init;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_vlan_t vid;
			uint8 * mac;
		} trunk_mcast_join;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_member_t * member;
		} trunk_member_add;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_member_t * member;
		} trunk_member_delete;
		struct {
			int unit;
			bcm_trunk_t tid;
		} trunk_member_delete_all;
		struct {
			int unit;
			bcm_gport_t member;
			int * status;
		} trunk_member_status_get;
		struct {
			int unit;
			bcm_gport_t member;
			int status;
		} trunk_member_status_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int * enable;
		} trunk_override_ipmc_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int enable;
		} trunk_override_ipmc_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int * enable;
		} trunk_override_mcast_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int enable;
		} trunk_override_mcast_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int modid;
			int * enable;
		} trunk_override_ucast_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int modid;
			int enable;
		} trunk_override_ucast_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			bcm_vlan_t vid;
			int * enable;
		} trunk_override_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			bcm_vlan_t vid;
			int enable;
		} trunk_override_vlan_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int * size;
			int * weights;
		} trunk_pool_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int size;
			int * weights;
		} trunk_pool_set;
		struct {
			int unit;
			bcm_trunk_t tid;
			int * psc;
		} trunk_psc_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			int psc;
		} trunk_psc_set;
		struct {
			int unit;
			uint32 flags;
			bcm_trunk_resilient_entry_t * match_entry;
			int * num_entries;
			bcm_trunk_resilient_entry_t * replace_entry;
		} trunk_resilient_replace;
		struct {
			int unit;
			uint32 flags;
			bcm_trunk_resilient_entry_t * match_entry;
			bcm_trunk_resilient_traverse_cb trav_fn;
			void * user_data;
		} trunk_resilient_traverse;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_info_t * trunk_info;
			int member_count;
			bcm_trunk_member_t * member_array;
		} trunk_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_tunnel_config_t * tconfig;
		} tunnel_config_get;
		struct {
			int unit;
			bcm_tunnel_config_t * tconfig;
		} tunnel_config_set;
		struct {
			int unit;
			uint32 flags;
			int * dscp_map_id;
		} tunnel_dscp_map_create;
		struct {
			int unit;
			int dscp_map_id;
		} tunnel_dscp_map_destroy;
		struct {
			int unit;
			int dscp_map_id;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_port_set;
		struct {
			int unit;
			int dscp_map_id;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_set;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} tunnel_initiator_clear;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
			bcm_tunnel_initiator_t * tunnel;
		} tunnel_initiator_create;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
			bcm_tunnel_initiator_t * tunnel;
		} tunnel_initiator_get;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
			bcm_tunnel_initiator_t * tunnel;
		} tunnel_initiator_set;
		struct {
			int unit;
			bcm_tunnel_initiator_traverse_cb cb;
			void * user_data;
		} tunnel_initiator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_add;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_create;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_delete;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_get;
		struct {
			int unit;
			bcm_tunnel_terminator_traverse_cb cb;
			void * user_data;
		} tunnel_terminator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_update;
		struct {
			int unit;
			bcm_gport_t tunnel;
			bcm_vlan_vector_t * vlan_vec;
		} tunnel_terminator_vlan_get;
		struct {
			int unit;
			bcm_gport_t tunnel;
			uint32 * vlan_vec;
		} tunnel_terminator_vlan_set;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_pkt_t * tx_pkt;
			void * cookie;
		} tx;
		struct {
			int unit;
			bcm_pkt_t ** pkt;
			int count;
			bcm_pkt_cb_f all_done_cb;
			void * cookie;
		} tx_array;
#ifdef	BCM_RPC_SUPPORT
		struct {
			bcm_pkt_t * pkt;
			int dest_unit;
			int remote_port;
			uint32 flags;
			bcm_cpu_tunnel_mode_t mode;
		} tx_cpu_tunnel;
		struct {
			bcm_tx_cpu_tunnel_f * f;
		} tx_cpu_tunnel_get;
		struct {
			bcm_tx_cpu_tunnel_f f;
		} tx_cpu_tunnel_set;
#endif	/* BCM_RPC_SUPPORT */
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			void * dv_p;
		} tx_dv_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
		} tx_init;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			bcm_pkt_cb_f all_done_cb;
			void * cookie;
		} tx_list;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			uint8 * dest_mac;
			int vid;
		} tx_pkt_l2_map;
		struct {
			int unit;
			bcm_pkt_t * tx_pkt;
		} tx_pkt_setup;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
		} tx_show;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_txbeacon_pkt_id_t pkt_id;
		} txbeacon_destroy;
		struct {
			int unit;
			int uC;
		} txbeacon_init;
		struct {
			int unit;
			bcm_txbeacon_t * txbeacon;
		} txbeacon_pkt_get;
		struct {
			int unit;
			bcm_txbeacon_t * txbeacon;
		} txbeacon_pkt_setup;
		struct {
			int unit;
			bcm_txbeacon_pkt_id_t pkt_id;
		} txbeacon_start;
		struct {
			int unit;
			bcm_txbeacon_pkt_id_t pkt_id;
		} txbeacon_stop;
		struct {
			int unit;
			bcm_txbeacon_traverse_cb_t trav_fn;
			void * user_data;
		} txbeacon_traverse;
		struct {
			int unit;
			bcm_udf_alloc_hints_t * hints;
			bcm_udf_t * udf_info;
			bcm_udf_id_t * udf_id;
		} udf_create;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
		} udf_destroy;
		struct {
			int unit;
		} udf_detach;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
			bcm_udf_t * udf_info;
		} udf_get;
		struct {
			int unit;
			int max;
			bcm_udf_id_t * udf_id_list;
			int * actual;
		} udf_get_all;
		struct {
			int unit;
		} udf_init;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
			bcm_udf_pkt_format_id_t pkt_format_id;
		} udf_pkt_format_add;
		struct {
			int unit;
			bcm_udf_pkt_format_options_t options;
			bcm_udf_pkt_format_info_t * pkt_format;
			bcm_udf_pkt_format_id_t * pkt_format_id;
		} udf_pkt_format_create;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
			bcm_udf_pkt_format_id_t pkt_format_id;
		} udf_pkt_format_delete;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
		} udf_pkt_format_delete_all;
		struct {
			int unit;
			bcm_udf_pkt_format_id_t pkt_format_id;
		} udf_pkt_format_destroy;
		struct {
			int unit;
			bcm_udf_pkt_format_id_t pkt_format_id;
			int max;
			bcm_udf_id_t * udf_id_list;
			int * actual;
		} udf_pkt_format_get;
		struct {
			int unit;
			bcm_udf_id_t udf_id;
			int max;
			bcm_udf_pkt_format_id_t * pkt_format_id_list;
			int * actual;
		} udf_pkt_format_get_all;
		struct {
			int unit;
			bcm_udf_pkt_format_id_t pkt_format_id;
			bcm_udf_pkt_format_info_t * pkt_format;
		} udf_pkt_format_info_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_block_t * vlan_block;
		} vlan_block_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_block_t * vlan_block;
		} vlan_block_set;
		struct {
			int unit;
			bcm_vlan_control_t type;
			int * arg;
		} vlan_control_get;
		struct {
			int unit;
			int port;
			bcm_vlan_control_port_t type;
			int * arg;
		} vlan_control_port_get;
		struct {
			int unit;
			int port;
			bcm_vlan_control_port_t type;
			int arg;
		} vlan_control_port_set;
		struct {
			int unit;
			bcm_vlan_control_t type;
			int arg;
		} vlan_control_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_control_vlan_t * control;
		} vlan_control_vlan_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 valid_fields;
			bcm_vlan_control_vlan_t * control;
		} vlan_control_vlan_selective_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 valid_fields;
			bcm_vlan_control_vlan_t * control;
		} vlan_control_vlan_selective_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_control_vlan_t control;
		} vlan_control_vlan_set;
		struct {
			int unit;
			bcm_vlan_t vid;
		} vlan_create;
		struct {
			int unit;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_gport_t port_1;
			bcm_gport_t port_2;
		} vlan_cross_connect_add;
		struct {
			int unit;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_cross_connect_delete;
		struct {
			int unit;
		} vlan_cross_connect_delete_all;
		struct {
			int unit;
			bcm_vlan_cross_connect_traverse_cb cb;
			void * user_data;
		} vlan_cross_connect_traverse;
		struct {
			int unit;
			bcm_vlan_t * vid_ptr;
		} vlan_default_get;
		struct {
			int unit;
			bcm_vlan_t vid;
		} vlan_default_set;
		struct {
			int unit;
			bcm_vlan_t vid;
		} vlan_destroy;
		struct {
			int unit;
		} vlan_destroy_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_dtag_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
		} vlan_dtag_delete;
		struct {
			int unit;
		} vlan_dtag_delete_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_dtag_get;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t new_vid;
			int int_prio;
		} vlan_dtag_range_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
		} vlan_dtag_range_delete;
		struct {
			int unit;
		} vlan_dtag_range_delete_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_dtag_range_get;
		struct {
			int unit;
			bcm_vlan_dtag_range_traverse_cb cb;
			void * user_data;
		} vlan_dtag_range_traverse;
		struct {
			int unit;
			bcm_vlan_dtag_traverse_cb cb;
			void * user_data;
		} vlan_dtag_traverse;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_policer_t * policer_id;
		} vlan_egress_policer_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_policer_t policer_id;
		} vlan_egress_policer_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_gport_t port;
			int flags;
		} vlan_gport_add;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_gport_t port;
		} vlan_gport_delete;
		struct {
			int unit;
			bcm_vlan_t vlan;
		} vlan_gport_delete_all;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_gport_t port;
			int * flags;
		} vlan_gport_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			int array_max;
			bcm_gport_t * gport_array;
			int * flags_array;
			int * array_size;
		} vlan_gport_get_all;
		struct {
			int unit;
			bcm_vlan_gport_info_t * vlan_gport_info;
		} vlan_gport_info_get;
		struct {
			int unit;
		} vlan_init;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
			bcm_vlan_action_set_t * action;
		} vlan_ip_action_add;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
		} vlan_ip_action_delete;
		struct {
			int unit;
		} vlan_ip_action_delete_all;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
			bcm_vlan_action_set_t * action;
		} vlan_ip_action_get;
		struct {
			int unit;
			bcm_vlan_ip_action_traverse_cb cb;
			void * user_data;
		} vlan_ip_action_traverse;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
		} vlan_ip_add;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
		} vlan_ip_delete;
		struct {
			int unit;
		} vlan_ip_delete_all;
		struct {
			int unit;
			bcm_vlan_data_t ** listp;
			int * countp;
		} vlan_list;
		struct {
			int unit;
			bcm_pbmp_t ports;
			bcm_vlan_data_t ** listp;
			int * countp;
		} vlan_list_by_pbmp;
		struct {
			int unit;
			bcm_vlan_data_t * list;
			int count;
		} vlan_list_destroy;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_action_set_t * action;
		} vlan_mac_action_add;
		struct {
			int unit;
			uint8 * mac;
		} vlan_mac_action_delete;
		struct {
			int unit;
		} vlan_mac_action_delete_all;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_action_set_t * action;
		} vlan_mac_action_get;
		struct {
			int unit;
			bcm_vlan_mac_action_traverse_cb cb;
			void * user_data;
		} vlan_mac_action_traverse;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
			int prio;
		} vlan_mac_add;
		struct {
			int unit;
			uint8 * mac;
		} vlan_mac_delete;
		struct {
			int unit;
		} vlan_mac_delete_all;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_mcast_flood_t * mode;
		} vlan_mcast_flood_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_mcast_flood_t mode;
		} vlan_mcast_flood_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_policer_t * policer_id;
		} vlan_policer_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_policer_t policer_id;
		} vlan_policer_set;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_pbmp_t pbmp;
			bcm_pbmp_t ubmp;
		} vlan_port_add;
		struct {
			int unit;
			bcm_vlan_port_t * vlan_port;
		} vlan_port_create;
		struct {
			int unit;
			bcm_port_t port;
		} vlan_port_default_action_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_default_action_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_default_action_set;
		struct {
			int unit;
			bcm_gport_t gport;
		} vlan_port_destroy;
		struct {
			int unit;
			bcm_port_t port;
		} vlan_port_egress_default_action_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_egress_default_action_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_egress_default_action_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_policer_t * policer_id;
		} vlan_port_egress_policer_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_policer_t policer_id;
		} vlan_port_egress_policer_set;
		struct {
			int unit;
			bcm_vlan_port_t * vlan_port;
		} vlan_port_find;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_pbmp_t * pbmp;
			bcm_pbmp_t * ubmp;
		} vlan_port_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_policer_t * policer_id;
		} vlan_port_policer_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_policer_t policer_id;
		} vlan_port_policer_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
			bcm_vlan_action_set_t * action;
		} vlan_port_protocol_action_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
		} vlan_port_protocol_action_delete;
		struct {
			int unit;
			bcm_port_t port;
		} vlan_port_protocol_action_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
			bcm_vlan_action_set_t * action;
		} vlan_port_protocol_action_get;
		struct {
			int unit;
			bcm_vlan_port_protocol_action_traverse_cb cb;
			void * user_data;
		} vlan_port_protocol_action_traverse;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_pbmp_t pbmp;
		} vlan_port_remove;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			int * enable;
		} vlan_port_stat_enable_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			int enable;
		} vlan_port_stat_enable_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_port_stat_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_port_stat_get32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_port_stat_multi_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_port_stat_multi_get32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_port_stat_multi_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_port_stat_multi_set32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 val;
		} vlan_port_stat_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_port_t port;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 val;
		} vlan_port_stat_set32;
		struct {
			int unit;
			bcm_vlan_port_translation_t * vlan_port_translation;
		} vlan_port_translation_get;
		struct {
			int unit;
			bcm_vlan_port_translation_t * vlan_port_translation;
		} vlan_port_translation_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			int qmid;
		} vlan_queue_map_attach;
		struct {
			int unit;
			bcm_vlan_t vlan;
			int * qmid;
		} vlan_queue_map_attach_get;
		struct {
			int unit;
			uint32 flags;
			int * qmid;
		} vlan_queue_map_create;
		struct {
			int unit;
			int qmid;
		} vlan_queue_map_destroy;
		struct {
			int unit;
		} vlan_queue_map_destroy_all;
		struct {
			int unit;
			bcm_vlan_t vlan;
		} vlan_queue_map_detach;
		struct {
			int unit;
		} vlan_queue_map_detach_all;
		struct {
			int unit;
			int qmid;
			int pkt_pri;
			int cfi;
			int * queue;
			int * color;
		} vlan_queue_map_get;
		struct {
			int unit;
			int qmid;
			int pkt_pri;
			int cfi;
			int queue;
			int color;
		} vlan_queue_map_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 stat_counter_id;
		} vlan_stat_attach;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_stat_counter_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_stat_counter_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_stat_counter_sync_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
		} vlan_stat_detach;
		struct {
			int unit;
			bcm_vlan_t vlan;
			uint32 stat_counter_id;
		} vlan_stat_detach_with_id;
		struct {
			int unit;
			bcm_vlan_t vlan;
			int enable;
		} vlan_stat_enable_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_stat_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_stat_get32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_stat_t stat;
			uint32 * stat_counter_id;
		} vlan_stat_id_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_stat_multi_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_stat_multi_get32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_stat_multi_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_stat_multi_set32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 val;
		} vlan_stat_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 val;
		} vlan_stat_set32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_stat_sync_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_stat_sync_get32;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_stg_t * stg_ptr;
		} vlan_stg_get;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_stg_t stg;
		} vlan_stg_set;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_port_t port;
			int * stp_state;
		} vlan_stp_get;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_port_t port;
			int stp_state;
		} vlan_stp_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_add;
		struct {
			int unit;
			bcm_vlan_translate_action_class_t * action_class;
		} vlan_translate_action_class_get;
		struct {
			int unit;
			bcm_vlan_translate_action_class_t * action_class;
		} vlan_translate_action_class_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_create;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_action_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_get;
		struct {
			int unit;
			uint32 flags;
			int * action_id;
		} vlan_translate_action_id_create;
		struct {
			int unit;
			uint32 flags;
			int action_id;
		} vlan_translate_action_id_destroy;
		struct {
			int unit;
			uint32 flags;
		} vlan_translate_action_id_destroy_all;
		struct {
			int unit;
			uint32 flags;
			int action_id;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_id_get;
		struct {
			int unit;
			uint32 flags;
			int action_id;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_id_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_range_add;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
		} vlan_translate_action_range_delete;
		struct {
			int unit;
		} vlan_translate_action_range_delete_all;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_range_get;
		struct {
			int unit;
			bcm_vlan_translate_action_range_traverse_cb cb;
			void * user_data;
		} vlan_translate_action_range_traverse;
		struct {
			int unit;
			bcm_vlan_translate_action_traverse_cb cb;
			void * user_data;
		} vlan_translate_action_traverse;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_translate_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
		} vlan_translate_delete;
		struct {
			int unit;
		} vlan_translate_delete_all;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_egress_action_add;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_egress_action_delete;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_egress_action_get;
		struct {
			int unit;
			bcm_vlan_translate_egress_action_traverse_cb cb;
			void * user_data;
		} vlan_translate_egress_action_traverse;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_translate_egress_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
		} vlan_translate_egress_delete;
		struct {
			int unit;
		} vlan_translate_egress_delete_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_translate_egress_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			uint32 stat_counter_id;
		} vlan_translate_egress_stat_attach;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_egress_stat_counter_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_egress_stat_counter_set;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_egress_stat_counter_sync_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_egress_stat_detach;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int enable;
		} vlan_translate_egress_stat_enable_set;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_translate_egress_stat_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_translate_egress_stat_get32;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * stat_counter_id;
		} vlan_translate_egress_stat_id_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_egress_stat_multi_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_egress_stat_multi_get32;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_egress_stat_multi_set;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_egress_stat_multi_set32;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 val;
		} vlan_translate_egress_stat_set;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 val;
		} vlan_translate_egress_stat_set32;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_translate_egress_stat_sync_get;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_translate_egress_stat_sync_get32;
		struct {
			int unit;
			bcm_vlan_translate_egress_traverse_cb cb;
			void * user_data;
		} vlan_translate_egress_traverse;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_translate_get;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t new_vid;
			int int_prio;
		} vlan_translate_range_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
		} vlan_translate_range_delete;
		struct {
			int unit;
		} vlan_translate_range_delete_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t * new_vid;
			int * int_prio;
		} vlan_translate_range_get;
		struct {
			int unit;
			bcm_vlan_translate_range_traverse_cb cb;
			void * user_data;
		} vlan_translate_range_traverse;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			uint32 stat_counter_id;
		} vlan_translate_stat_attach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_stat_counter_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_stat_counter_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vlan_translate_stat_counter_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_stat_detach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int enable;
		} vlan_translate_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_translate_stat_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_translate_stat_get32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * stat_counter_id;
		} vlan_translate_stat_id_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_stat_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_stat_multi_get32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_stat_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_stat_multi_set32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 val;
		} vlan_translate_stat_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 val;
		} vlan_translate_stat_set32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_translate_stat_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_translate_stat_sync_get32;
		struct {
			int unit;
			bcm_vlan_translate_traverse_cb cb;
			void * user_data;
		} vlan_translate_traverse;
		struct {
			int unit;
			uint32 * vlan_vector;
			uint32 flags_mask;
			uint32 flags_value;
		} vlan_vector_flags_set;
		struct {
			int unit;
			uint32 * vlan_vector;
			bcm_port_t port;
			int stp_state;
		} vlan_vector_stp_set;
		struct {
			int unit;
			bcm_vlan_t * vsi;
		} vswitch_create;
		struct {
			int unit;
			bcm_vlan_t vsi;
		} vswitch_create_with_id;
		struct {
			int unit;
			bcm_vswitch_cross_connect_t * gports;
		} vswitch_cross_connect_add;
		struct {
			int unit;
			bcm_vswitch_cross_connect_t * gports;
		} vswitch_cross_connect_delete;
		struct {
			int unit;
		} vswitch_cross_connect_delete_all;
		struct {
			int unit;
			bcm_vswitch_cross_connect_t * gports;
		} vswitch_cross_connect_get;
		struct {
			int unit;
			bcm_vswitch_cross_connect_traverse_cb cb;
			void * user_data;
		} vswitch_cross_connect_traverse;
		struct {
			int unit;
			bcm_vlan_t vsi;
		} vswitch_destroy;
		struct {
			int unit;
		} vswitch_destroy_all;
		struct {
			int unit;
		} vswitch_detach;
		struct {
			int unit;
		} vswitch_init;
		struct {
			int unit;
			bcm_vlan_t vsi;
			bcm_gport_t port;
		} vswitch_port_add;
		struct {
			int unit;
			bcm_vlan_t vsi;
			bcm_gport_t port;
		} vswitch_port_delete;
		struct {
			int unit;
			bcm_vlan_t vsi;
		} vswitch_port_delete_all;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t * vsi;
		} vswitch_port_get;
		struct {
			int unit;
			bcm_vlan_t vsi;
			bcm_vswitch_port_traverse_cb cb;
			void * user_data;
		} vswitch_port_traverse;
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} vxlan_cleanup;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			uint32 stat_counter_id;
		} vxlan_dip_stat_attach;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			bcm_vxlan_dip_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vxlan_dip_stat_counter_get;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			bcm_vxlan_dip_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vxlan_dip_stat_counter_set;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
		} vxlan_dip_stat_detach;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			bcm_vxlan_dip_stat_t stat;
			uint32 * stat_counter_id;
		} vxlan_dip_stat_id_get;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			int nstat;
			bcm_vxlan_dip_stat_t * stat_arr;
			uint64 * value_arr;
		} vxlan_dip_stat_multi_get;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			int nstat;
			bcm_vxlan_dip_stat_t * stat_arr;
			uint32 * value_arr;
		} vxlan_dip_stat_multi_get32;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			int nstat;
			bcm_vxlan_dip_stat_t * stat_arr;
			uint64 * value_arr;
		} vxlan_dip_stat_multi_set;
		struct {
			int unit;
			bcm_ip_t vxlan_dip;
			int nstat;
			bcm_vxlan_dip_stat_t * stat_arr;
			uint32 * value_arr;
		} vxlan_dip_stat_multi_set32;
		struct {
			int unit;
		} vxlan_init;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_vxlan_port_t * vxlan_port;
		} vxlan_port_add;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_gport_t vxlan_port_id;
		} vxlan_port_delete;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
		} vxlan_port_delete_all;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_vxlan_port_t * vxlan_port;
		} vxlan_port_get;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			int port_max;
			bcm_vxlan_port_t * port_array;
			int * port_count;
		} vxlan_port_get_all;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			uint32 stat_counter_id;
		} vxlan_stat_attach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_vxlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vxlan_stat_counter_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_vxlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vxlan_stat_counter_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_vxlan_stat_t stat;
			uint32 num_entries;
			uint32 * counter_indexes;
			bcm_stat_value_t * counter_values;
		} vxlan_stat_counter_sync_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
		} vxlan_stat_detach;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int enable;
		} vxlan_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			bcm_vxlan_stat_t stat;
			uint32 * stat_counter_id;
		} vxlan_stat_id_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_vxlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vxlan_stat_multi_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_vxlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vxlan_stat_multi_get32;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_vxlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vxlan_stat_multi_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vpn_t vpn;
			int nstat;
			bcm_vxlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vxlan_stat_multi_set32;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} vxlan_tunnel_initiator_create;
		struct {
			int unit;
			bcm_gport_t vxlan_tunnel_id;
		} vxlan_tunnel_initiator_destroy;
		struct {
			int unit;
		} vxlan_tunnel_initiator_destroy_all;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} vxlan_tunnel_initiator_get;
		struct {
			int unit;
			bcm_tunnel_initiator_traverse_cb cb;
			void * user_data;
		} vxlan_tunnel_initiator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} vxlan_tunnel_terminator_create;
		struct {
			int unit;
			bcm_gport_t vxlan_tunnel_id;
		} vxlan_tunnel_terminator_destroy;
		struct {
			int unit;
		} vxlan_tunnel_terminator_destroy_all;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} vxlan_tunnel_terminator_get;
		struct {
			int unit;
			bcm_tunnel_terminator_traverse_cb cb;
			void * user_data;
		} vxlan_tunnel_terminator_traverse;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} vxlan_tunnel_terminator_update;
		struct {
			int unit;
			bcm_vxlan_vpn_config_t * info;
		} vxlan_vpn_create;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
		} vxlan_vpn_destroy;
		struct {
			int unit;
		} vxlan_vpn_destroy_all;
		struct {
			int unit;
			bcm_vpn_t l2vpn;
			bcm_vxlan_vpn_config_t * info;
		} vxlan_vpn_get;
		struct {
			int unit;
			bcm_vxlan_vpn_traverse_cb cb;
			void * user_data;
		} vxlan_vpn_traverse;
		struct {
			int unit;
			bcm_wlan_client_t * info;
		} wlan_client_add;
		struct {
			int unit;
			uint8 * mac;
		} wlan_client_delete;
		struct {
			int unit;
		} wlan_client_delete_all;
		struct {
			int unit;
			uint8 * mac;
			bcm_wlan_client_t * info;
		} wlan_client_get;
		struct {
			int unit;
			bcm_wlan_client_traverse_cb cb;
			void * user_data;
		} wlan_client_traverse;
		struct {
			int unit;
		} wlan_detach;
		struct {
			int unit;
		} wlan_init;
		struct {
			int unit;
			bcm_wlan_port_t * info;
		} wlan_port_add;
		struct {
			int unit;
			bcm_gport_t wlan_port_id;
		} wlan_port_delete;
		struct {
			int unit;
		} wlan_port_delete_all;
		struct {
			int unit;
			bcm_gport_t wlan_port_id;
			bcm_wlan_port_t * info;
		} wlan_port_get;
		struct {
			int unit;
			bcm_wlan_port_traverse_cb cb;
			void * user_data;
		} wlan_port_traverse;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} wlan_tunnel_initiator_create;
		struct {
			int unit;
			bcm_gport_t wlan_tunnel_id;
		} wlan_tunnel_initiator_destroy;
		struct {
			int unit;
			bcm_tunnel_initiator_t * info;
		} wlan_tunnel_initiator_get;
#endif	/* INCLUDE_L3 */
	} args;
} bcm_async_req_t;

typedef enum {
	BCM_ASYNC_ENTRY_NONE = 0,
	BCM_ASYNC_ENTRY_SHUTDOWN,
	BCM_ASYNC_ENTRY_ATTACH,
	BCM_ASYNC_ENTRY_ATTACH_CHECK,
	BCM_ASYNC_ENTRY_ATTACH_MAX,
	BCM_ASYNC_ENTRY_ATTACH_REGISTER,
	BCM_ASYNC_ENTRY_ATTACH_UNREGISTER,
	BCM_ASYNC_ENTRY_AUTH_DETACH,
	BCM_ASYNC_ENTRY_AUTH_EGRESS_GET,
	BCM_ASYNC_ENTRY_AUTH_EGRESS_SET,
	BCM_ASYNC_ENTRY_AUTH_INIT,
	BCM_ASYNC_ENTRY_AUTH_MAC_ADD,
	BCM_ASYNC_ENTRY_AUTH_MAC_CONTROL_GET,
	BCM_ASYNC_ENTRY_AUTH_MAC_CONTROL_SET,
	BCM_ASYNC_ENTRY_AUTH_MAC_DELETE,
	BCM_ASYNC_ENTRY_AUTH_MAC_DELETE_ALL,
	BCM_ASYNC_ENTRY_AUTH_MODE_GET,
	BCM_ASYNC_ENTRY_AUTH_MODE_SET,
	BCM_ASYNC_ENTRY_AUTH_UNAUTH_CALLBACK,
	BCM_ASYNC_ENTRY_BFD_AUTH_SHA1_GET,
	BCM_ASYNC_ENTRY_BFD_AUTH_SHA1_SET,
	BCM_ASYNC_ENTRY_BFD_AUTH_SIMPLE_PASSWORD_GET,
	BCM_ASYNC_ENTRY_BFD_AUTH_SIMPLE_PASSWORD_SET,
	BCM_ASYNC_ENTRY_BFD_DETACH,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_CREATE,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_DESTROY,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_DESTROY_ALL,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_GET,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_POLL,
	BCM_ASYNC_ENTRY_BFD_ENDPOINT_STAT_GET,
	BCM_ASYNC_ENTRY_BFD_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_BFD_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_BFD_INIT,
	BCM_ASYNC_ENTRY_CES_ATTACH_ETHERNET,
	BCM_ASYNC_ENTRY_CES_CB_REGISTER,
	BCM_ASYNC_ENTRY_CES_CB_UNREGISTER,
	BCM_ASYNC_ENTRY_CES_DETACH,
	BCM_ASYNC_ENTRY_CES_EGRESS_STATUS_GET,
	BCM_ASYNC_ENTRY_CES_ETHERNET_CONFIG_GET,
	BCM_ASYNC_ENTRY_CES_ETHERNET_CONFIG_SET,
	BCM_ASYNC_ENTRY_CES_INIT,
	BCM_ASYNC_ENTRY_CES_SERVICE_CAS_PACKET_ENABLE,
	BCM_ASYNC_ENTRY_CES_SERVICE_CONFIG_GET,
	BCM_ASYNC_ENTRY_CES_SERVICE_CONTROL_WORD_GET,
	BCM_ASYNC_ENTRY_CES_SERVICE_CONTROL_WORD_SET,
	BCM_ASYNC_ENTRY_CES_SERVICE_CREATE,
	BCM_ASYNC_ENTRY_CES_SERVICE_DESTROY,
	BCM_ASYNC_ENTRY_CES_SERVICE_DESTROY_ALL,
	BCM_ASYNC_ENTRY_CES_SERVICE_ENABLE_GET,
	BCM_ASYNC_ENTRY_CES_SERVICE_ENABLE_SET,
	BCM_ASYNC_ENTRY_CES_SERVICE_INGRESS_CAS_ENABLE_GET,
	BCM_ASYNC_ENTRY_CES_SERVICE_INGRESS_CAS_ENABLE_SET,
	BCM_ASYNC_ENTRY_CES_SERVICE_PM_CLEAR,
	BCM_ASYNC_ENTRY_CES_SERVICE_PM_GET,
	BCM_ASYNC_ENTRY_CES_SERVICE_RCLOCK_CONFIG_GET,
	BCM_ASYNC_ENTRY_CES_SERVICE_RCLOCK_CONFIG_SET,
	BCM_ASYNC_ENTRY_CES_SERVICES_CCLK_CONFIG_GET,
	BCM_ASYNC_ENTRY_CES_SERVICES_CCLK_CONFIG_SET,
	BCM_ASYNC_ENTRY_CES_SERVICES_CLEAR,
	BCM_ASYNC_ENTRY_CES_SERVICES_INIT,
	BCM_ASYNC_ENTRY_CES_SERVICES_TRAVERSE,
	BCM_ASYNC_ENTRY_CLEAR,
	BCM_ASYNC_ENTRY_COSQ_BST_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_BST_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_CLEAR,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_GET,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_GET32,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_COSQ_BST_STAT_SYNC,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_CREATE,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_DESTROY,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_GET,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_MAPPING_CLEAR,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_MAPPING_MULTI_GET,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_MAPPING_MULTI_SET,
	BCM_ASYNC_ENTRY_COSQ_CLASSIFIER_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_CPU_COSQ_ENABLE_GET,
	BCM_ASYNC_ENTRY_COSQ_CPU_COSQ_ENABLE_SET,
	BCM_ASYNC_ENTRY_COSQ_DELAY_TOLERANCE_LEVEL_GET,
	BCM_ASYNC_ENTRY_COSQ_DELAY_TOLERANCE_LEVEL_SET,
	BCM_ASYNC_ENTRY_COSQ_DEST_CREDIT_SIZE_GET,
	BCM_ASYNC_ENTRY_COSQ_DEST_CREDIT_SIZE_SET,
	BCM_ASYNC_ENTRY_COSQ_DETACH,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_GET,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_PORT_GET,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_PORT_SET,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_SET,
	BCM_ASYNC_ENTRY_COSQ_FABRIC_DISTRIBUTION_ADD,
	BCM_ASYNC_ENTRY_COSQ_FABRIC_DISTRIBUTION_GET,
	BCM_ASYNC_ENTRY_COSQ_FC_PATH_ADD,
	BCM_ASYNC_ENTRY_COSQ_FC_PATH_DELETE,
	BCM_ASYNC_ENTRY_COSQ_FC_PATH_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ADD,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ATTACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ATTACH_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_CHILD_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_COLOR_SIZE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_COLOR_SIZE_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_CONGESTION_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_CONGESTION_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_CONNECTION_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_CONNECTION_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DELETE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DESTMOD_ATTACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DESTMOD_DETACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DETACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DISCARD_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DISCARD_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DYNAMIC_SCHED_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DYNAMIC_SCHED_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_EGRESS_MAP_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_EGRESS_MAP_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_EGRESS_MULTICAST_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_EGRESS_MULTICAST_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ENABLE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ENABLE_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_FLOW_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_FLOW_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_HANDLE_CORE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_HANDLE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MULTIPATH_ADD,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MULTIPATH_DELETE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MULTIPATH_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_PARENT_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_PON_LINK_SLA_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_PON_LINK_SLA_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_QUEUE_ATTACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_QUEUE_ATTACH_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_QUEUE_DETACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_REATTACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_REPORT_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_REPORT_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SCHED_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SCHED_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SCHED_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SCHED_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SIZE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SIZE_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_ENABLE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STATISTIC_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STATISTIC_MULTI_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STATISTIC_MULTI_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STATISTIC_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_TRAVERSE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_ADD,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_CREATE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_DELETE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_DELETE_ALL,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_DESTROY,
	BCM_ASYNC_ENTRY_COSQ_GPORT_VSQ_GET,
	BCM_ASYNC_ENTRY_COSQ_INIT,
	BCM_ASYNC_ENTRY_COSQ_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_PFC_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_PFC_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_SCHED_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_SCHED_SET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_GET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_PROFILE_GET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_PROFILE_SET,
	BCM_ASYNC_ENTRY_COSQ_PRIORITY_SET,
	BCM_ASYNC_ENTRY_COSQ_PROFILE_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_PROFILE_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_QCN_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_QCN_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_SCHED_GET,
	BCM_ASYNC_ENTRY_COSQ_SCHED_SET,
	BCM_ASYNC_ENTRY_COSQ_SCHED_WEIGHT_MAX_GET,
	BCM_ASYNC_ENTRY_COSQ_SERVICE_POOL_GET,
	BCM_ASYNC_ENTRY_COSQ_SERVICE_POOL_SET,
	BCM_ASYNC_ENTRY_COSQ_STAT_GET,
	BCM_ASYNC_ENTRY_COSQ_STAT_GET32,
	BCM_ASYNC_ENTRY_COSQ_STAT_SET,
	BCM_ASYNC_ENTRY_COSQ_STAT_SET32,
	BCM_ASYNC_ENTRY_COSQ_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_COSQ_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_COSQ_SUBSCRIBER_MAP_ADD,
	BCM_ASYNC_ENTRY_COSQ_SUBSCRIBER_MAP_DELETE,
	BCM_ASYNC_ENTRY_COSQ_SUBSCRIBER_MAP_DELETE_ALL,
	BCM_ASYNC_ENTRY_COSQ_SUBSCRIBER_MAP_GET,
	BCM_ASYNC_ENTRY_COSQ_SUBSCRIBER_TRAVERSE,
	BCM_ASYNC_ENTRY_CUSTOM_PORT_GET,
	BCM_ASYNC_ENTRY_CUSTOM_PORT_SET,
	BCM_ASYNC_ENTRY_CUSTOM_REGISTER,
	BCM_ASYNC_ENTRY_CUSTOM_UNREGISTER,
	BCM_ASYNC_ENTRY_DETACH,
	BCM_ASYNC_ENTRY_DETACH_RETRY_GET,
	BCM_ASYNC_ENTRY_DETACH_RETRY_SET,
	BCM_ASYNC_ENTRY_EAV_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_EAV_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_EAV_CONTROL_GET,
	BCM_ASYNC_ENTRY_EAV_CONTROL_SET,
	BCM_ASYNC_ENTRY_EAV_INIT,
	BCM_ASYNC_ENTRY_EAV_LINK_STATUS_GET,
	BCM_ASYNC_ENTRY_EAV_LINK_STATUS_SET,
	BCM_ASYNC_ENTRY_EAV_PCP_MAPPING_GET,
	BCM_ASYNC_ENTRY_EAV_PCP_MAPPING_SET,
	BCM_ASYNC_ENTRY_EAV_PORT_ENABLE_GET,
	BCM_ASYNC_ENTRY_EAV_PORT_ENABLE_SET,
	BCM_ASYNC_ENTRY_EAV_SRP_MAC_ETHERTYPE_GET,
	BCM_ASYNC_ENTRY_EAV_SRP_MAC_ETHERTYPE_SET,
	BCM_ASYNC_ENTRY_EAV_TIMESTAMP_GET,
	BCM_ASYNC_ENTRY_EAV_TIMESYNC_MAC_GET,
	BCM_ASYNC_ENTRY_EAV_TIMESYNC_MAC_SET,
	BCM_ASYNC_ENTRY_ECN_RESPONSIVE_PROTOCOL_GET,
	BCM_ASYNC_ENTRY_ECN_RESPONSIVE_PROTOCOL_SET,
	BCM_ASYNC_ENTRY_ECN_TRAFFIC_ACTION_CONFIG_GET,
	BCM_ASYNC_ENTRY_ECN_TRAFFIC_ACTION_CONFIG_SET,
	BCM_ASYNC_ENTRY_ECN_TRAFFIC_MAP_GET,
	BCM_ASYNC_ENTRY_ECN_TRAFFIC_MAP_SET,
	BCM_ASYNC_ENTRY_ESMC_QL_SSM_MAP,
	BCM_ASYNC_ENTRY_ESMC_SSM_QL_MAP,
	BCM_ASYNC_ENTRY_ESMC_G781_OPTION_GET,
	BCM_ASYNC_ENTRY_ESMC_G781_OPTION_SET,
	BCM_ASYNC_ENTRY_ESMC_RX_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_ESMC_RX_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_ESMC_TUNNEL_GET,
	BCM_ASYNC_ENTRY_ESMC_TUNNEL_SET,
	BCM_ASYNC_ENTRY_ESMC_TX,
	BCM_ASYNC_ENTRY_EXTENDER_CLEANUP,
	BCM_ASYNC_ENTRY_EXTENDER_ENCAP_CREATE,
	BCM_ASYNC_ENTRY_EXTENDER_ENCAP_DESTROY,
	BCM_ASYNC_ENTRY_EXTENDER_ENCAP_DESTROY_ALL,
	BCM_ASYNC_ENTRY_EXTENDER_ENCAP_GET,
	BCM_ASYNC_ENTRY_EXTENDER_ENCAP_TRAVERSE,
	BCM_ASYNC_ENTRY_EXTENDER_FORWARD_ADD,
	BCM_ASYNC_ENTRY_EXTENDER_FORWARD_DELETE,
	BCM_ASYNC_ENTRY_EXTENDER_FORWARD_DELETE_ALL,
	BCM_ASYNC_ENTRY_EXTENDER_FORWARD_GET,
	BCM_ASYNC_ENTRY_EXTENDER_FORWARD_TRAVERSE,
	BCM_ASYNC_ENTRY_EXTENDER_INIT,
	BCM_ASYNC_ENTRY_EXTENDER_PORT_ADD,
	BCM_ASYNC_ENTRY_EXTENDER_PORT_DELETE,
	BCM_ASYNC_ENTRY_EXTENDER_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_EXTENDER_PORT_GET,
	BCM_ASYNC_ENTRY_EXTENDER_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_ACTION_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_ACTION_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_ACTION_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FABRIC_ACTION_GET,
	BCM_ASYNC_ENTRY_FABRIC_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_BANDWIDTH_PROFILE_GET,
	BCM_ASYNC_ENTRY_FABRIC_BANDWIDTH_PROFILE_SET,
	BCM_ASYNC_ENTRY_FABRIC_CALENDAR_ACTIVE,
	BCM_ASYNC_ENTRY_FABRIC_CALENDAR_GET,
	BCM_ASYNC_ENTRY_FABRIC_CALENDAR_MAX_GET,
	BCM_ASYNC_ENTRY_FABRIC_CALENDAR_MULTI_GET,
	BCM_ASYNC_ENTRY_FABRIC_CALENDAR_MULTI_SET,
	BCM_ASYNC_ENTRY_FABRIC_CALENDAR_SET,
	BCM_ASYNC_ENTRY_FABRIC_CALENDAR_SIZE_GET,
	BCM_ASYNC_ENTRY_FABRIC_CALENDAR_SIZE_SET,
	BCM_ASYNC_ENTRY_FABRIC_CONFIG_DISCARD_GET,
	BCM_ASYNC_ENTRY_FABRIC_CONFIG_DISCARD_SET,
	BCM_ASYNC_ENTRY_FABRIC_CONGESTION_SIZE_GET,
	BCM_ASYNC_ENTRY_FABRIC_CONGESTION_SIZE_SET,
	BCM_ASYNC_ENTRY_FABRIC_CONNECTION_BYTES_GET,
	BCM_ASYNC_ENTRY_FABRIC_CONNECTION_INTERVAL_GET,
	BCM_ASYNC_ENTRY_FABRIC_CONNECTION_MAX_GET,
	BCM_ASYNC_ENTRY_FABRIC_CONTROL_GET,
	BCM_ASYNC_ENTRY_FABRIC_CONTROL_REDUNDANCY_REGISTER,
	BCM_ASYNC_ENTRY_FABRIC_CONTROL_REDUNDANCY_UNREGISTER,
	BCM_ASYNC_ENTRY_FABRIC_CONTROL_SET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_CONNECTION_GET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_CONNECTION_SET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_CONNECTION_STATUS_GET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_ENABLE_GET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_ENABLE_SET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_MAPPING_GET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_MAPPING_SET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_STATUS_GET,
	BCM_ASYNC_ENTRY_FABRIC_DISTRIBUTION_CONTROL_GET,
	BCM_ASYNC_ENTRY_FABRIC_DISTRIBUTION_CONTROL_SET,
	BCM_ASYNC_ENTRY_FABRIC_DISTRIBUTION_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_DISTRIBUTION_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_DISTRIBUTION_GET,
	BCM_ASYNC_ENTRY_FABRIC_DISTRIBUTION_SET,
	BCM_ASYNC_ENTRY_FABRIC_INIT,
	BCM_ASYNC_ENTRY_FABRIC_LINK_CONNECTIVITY_STATUS_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_CONNECTIVITY_STATUS_SINGLE_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_CONTROL_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_CONTROL_SET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_REMOTE_PIPE_MAPPING_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_REMOTE_PIPE_MAPPING_SET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_STATUS_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLD_ADD,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLD_DELETE,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_ATTACH,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_PIPE_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_PIPE_SET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_RETRIEVE,
	BCM_ASYNC_ENTRY_FABRIC_LINK_THRESHOLDS_SET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_TOPOLOGY_GET,
	BCM_ASYNC_ENTRY_FABRIC_LINK_TOPOLOGY_SET,
	BCM_ASYNC_ENTRY_FABRIC_MODID_GROUP_FIND,
	BCM_ASYNC_ENTRY_FABRIC_MODID_GROUP_GET,
	BCM_ASYNC_ENTRY_FABRIC_MODID_GROUP_SET,
	BCM_ASYNC_ENTRY_FABRIC_MODID_LOCAL_MAPPING_GET,
	BCM_ASYNC_ENTRY_FABRIC_MODID_LOCAL_MAPPING_SET,
	BCM_ASYNC_ENTRY_FABRIC_MULTICAST_GET,
	BCM_ASYNC_ENTRY_FABRIC_MULTICAST_MULTI_GET,
	BCM_ASYNC_ENTRY_FABRIC_MULTICAST_MULTI_SET,
	BCM_ASYNC_ENTRY_FABRIC_MULTICAST_SET,
	BCM_ASYNC_ENTRY_FABRIC_OPERATING_INTERVAL_GET,
	BCM_ASYNC_ENTRY_FABRIC_PACKET_ADJUST_GET,
	BCM_ASYNC_ENTRY_FABRIC_PACKET_ADJUST_SET,
	BCM_ASYNC_ENTRY_FABRIC_PCP_DEST_MODE_CONFIG_GET,
	BCM_ASYNC_ENTRY_FABRIC_PCP_DEST_MODE_CONFIG_SET,
	BCM_ASYNC_ENTRY_FABRIC_PORT_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_PORT_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_PORT_FAILOVER_GET,
	BCM_ASYNC_ENTRY_FABRIC_PORT_FAILOVER_SET,
	BCM_ASYNC_ENTRY_FABRIC_PORT_GET,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_ACTION_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_ACTION_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_ACTION_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_ACTION_GET,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_GET,
	BCM_ASYNC_ENTRY_FABRIC_PREDICATE_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_PRIORITY_GET,
	BCM_ASYNC_ENTRY_FABRIC_PRIORITY_SET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_ENTRY_GET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_ENTRY_MULTI_GET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_ENTRY_MULTI_SET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_ENTRY_SET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_ENTRY_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_GET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_ENTRY_GET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_ENTRY_SET,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_ENTRY_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_OFFSET_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_QSEL_TRAVERSE,
	BCM_ASYNC_ENTRY_FABRIC_REACHABILITY_STATUS_GET,
	BCM_ASYNC_ENTRY_FABRIC_ROUTE_RX,
	BCM_ASYNC_ENTRY_FABRIC_ROUTE_TX,
	BCM_ASYNC_ENTRY_FABRIC_TDM_DIRECT_ROUTING_GET,
	BCM_ASYNC_ENTRY_FABRIC_TDM_DIRECT_ROUTING_SET,
	BCM_ASYNC_ENTRY_FABRIC_TDM_EDITING_GET,
	BCM_ASYNC_ENTRY_FABRIC_TDM_EDITING_SET,
	BCM_ASYNC_ENTRY_FABRIC_TDM_ENABLE_GET,
	BCM_ASYNC_ENTRY_FABRIC_TDM_ENABLE_SET,
	BCM_ASYNC_ENTRY_FAILOVER_CLEANUP,
	BCM_ASYNC_ENTRY_FAILOVER_CREATE,
	BCM_ASYNC_ENTRY_FAILOVER_DESTROY,
	BCM_ASYNC_ENTRY_FAILOVER_GET,
	BCM_ASYNC_ENTRY_FAILOVER_INIT,
	BCM_ASYNC_ENTRY_FAILOVER_RING_CONFIG_GET,
	BCM_ASYNC_ENTRY_FAILOVER_RING_CONFIG_SET,
	BCM_ASYNC_ENTRY_FAILOVER_SET,
	BCM_ASYNC_ENTRY_FAILOVER_STATUS_GET,
	BCM_ASYNC_ENTRY_FAILOVER_STATUS_SET,
	BCM_ASYNC_ENTRY_FCMAP_DIAG_GET,
	BCM_ASYNC_ENTRY_FCMAP_EVENT_ENABLE_GET,
	BCM_ASYNC_ENTRY_FCMAP_EVENT_ENABLE_SET,
	BCM_ASYNC_ENTRY_FCMAP_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_FCMAP_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_FCMAP_LINKFAULT_TRIGGER_RC_GET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_CONFIG_GET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_CONFIG_SELECTIVE_GET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_CONFIG_SELECTIVE_SET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_CONFIG_SET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_ENABLE,
	BCM_ASYNC_ENTRY_FCMAP_PORT_LINK_RESET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_SHUTDOWN,
	BCM_ASYNC_ENTRY_FCMAP_PORT_SPEED_SET,
	BCM_ASYNC_ENTRY_FCMAP_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_FCMAP_STAT_CLEAR,
	BCM_ASYNC_ENTRY_FCMAP_STAT_GET,
	BCM_ASYNC_ENTRY_FCMAP_STAT_GET32,
	BCM_ASYNC_ENTRY_FCMAP_VLAN_MAP_ADD,
	BCM_ASYNC_ENTRY_FCMAP_VLAN_MAP_DELETE,
	BCM_ASYNC_ENTRY_FCMAP_VLAN_MAP_GET,
	BCM_ASYNC_ENTRY_FCOE_CLEANUP,
	BCM_ASYNC_ENTRY_FCOE_CONTROL_VSAN_GET,
	BCM_ASYNC_ENTRY_FCOE_CONTROL_VSAN_SET,
	BCM_ASYNC_ENTRY_FCOE_ENABLE_SET,
	BCM_ASYNC_ENTRY_FCOE_FC_HEADER_TYPE_GET,
	BCM_ASYNC_ENTRY_FCOE_FC_HEADER_TYPE_SET,
	BCM_ASYNC_ENTRY_FCOE_INIT,
	BCM_ASYNC_ENTRY_FCOE_INTF_CONFIG_GET,
	BCM_ASYNC_ENTRY_FCOE_INTF_CONFIG_SET,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_ADD,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_DELETE,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_DELETE_ALL,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_DELETE_BY_INTERFACE,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_DELETE_BY_PREFIX,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_FIND,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_DETACH,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FCOE_ROUTE_TRAVERSE,
	BCM_ASYNC_ENTRY_FCOE_VSAN_CREATE,
	BCM_ASYNC_ENTRY_FCOE_VSAN_DESTROY,
	BCM_ASYNC_ENTRY_FCOE_VSAN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FCOE_VSAN_GET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_SET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_DETACH,
	BCM_ASYNC_ENTRY_FCOE_VSAN_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FCOE_VSAN_TRANSLATE_ACTION_ADD,
	BCM_ASYNC_ENTRY_FCOE_VSAN_TRANSLATE_ACTION_DELETE,
	BCM_ASYNC_ENTRY_FCOE_VSAN_TRAVERSE,
	BCM_ASYNC_ENTRY_FCOE_ZONE_ADD,
	BCM_ASYNC_ENTRY_FCOE_ZONE_DELETE,
	BCM_ASYNC_ENTRY_FCOE_ZONE_DELETE_ALL,
	BCM_ASYNC_ENTRY_FCOE_ZONE_DELETE_BY_DID,
	BCM_ASYNC_ENTRY_FCOE_ZONE_DELETE_BY_SID,
	BCM_ASYNC_ENTRY_FCOE_ZONE_DELETE_BY_VSAN,
	BCM_ASYNC_ENTRY_FCOE_ZONE_GET,
	BCM_ASYNC_ENTRY_FCOE_ZONE_TRAVERSE,
	BCM_ASYNC_ENTRY_FIELD_ACTION_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_DELETE,
	BCM_ASYNC_ENTRY_FIELD_ACTION_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_MAC_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_MAC_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_PORTS_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_PORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_REMOVE,
	BCM_ASYNC_ENTRY_FIELD_ACTION_REMOVE_ALL,
	BCM_ASYNC_ENTRY_FIELD_CONTROL_GET,
	BCM_ASYNC_ENTRY_FIELD_CONTROL_SET,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_CREATE,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_ETHERTYPE_ADD,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_ETHERTYPE_DELETE,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_GET,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_IP_PROTOCOL_ADD,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_IP_PROTOCOL_DELETE,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_MULTI_GET,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_PACKET_FORMAT_ADD,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_PACKET_FORMAT_DELETE,
	BCM_ASYNC_ENTRY_FIELD_DETACH,
	BCM_ASYNC_ENTRY_FIELD_DIRECT_EXTRACTION_ACTION_ADD,
	BCM_ASYNC_ENTRY_FIELD_DIRECT_EXTRACTION_ACTION_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_COPY,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_COPY_ID,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_CREATE,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_DUMP,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_ENABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_ENABLE_SET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_INSTALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_MULTI_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_OPERATION,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_DETACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_DETACH_ALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_PRIO_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_PRIO_SET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_REINSTALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_REMOVE,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_STAT_DETACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_STAT_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ACTION_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ACTION_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_COMPRESS,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CONFIG_CREATE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE_MODE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE_MODE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_GROUP_DUMP,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ENABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ENABLE_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_EXPANSION_ENABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_EXPANSION_ENABLE_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_FLUSH,
	BCM_ASYNC_ENTRY_FIELD_GROUP_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_INSTALL,
	BCM_ASYNC_ENTRY_FIELD_GROUP_MODE_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORT_CREATE_MODE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORT_CREATE_MODE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORTS_CREATE_MODE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORTS_CREATE_MODE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PRESEL_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PRESEL_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PRIORITY_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PRIORITY_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_REMOVE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_STATUS_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_TRAVERSE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_WLAN_CREATE_MODE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_WLAN_CREATE_MODE_ID,
	BCM_ASYNC_ENTRY_FIELD_INIT,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_CREATE,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_PRESEL_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_QSET_DATA_QUALIFIER_ADD,
	BCM_ASYNC_ENTRY_FIELD_QSET_DATA_QUALIFIER_DELETE,
	BCM_ASYNC_ENTRY_FIELD_QSET_DATA_QUALIFIER_GET,
	BCM_ASYNC_ENTRY_FIELD_QSET_ID_MULTI_DELETE,
	BCM_ASYNC_ENTRY_FIELD_QSET_ID_MULTI_GET,
	BCM_ASYNC_ENTRY_FIELD_QSET_ID_MULTI_SET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFIER_DELETE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_APPTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_APPTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPOPCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPOPCODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPSENDERIP4,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPSENDERIP4_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPTARGETIP4,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ARPTARGETIP4_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BIGICMPCHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BIGICMPCHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSFILTER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSFILTER32,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSFILTER32_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSFILTER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSSRCMACFILTER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BYPASSSRCMACFILTER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CASCADEDKEYVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CASCADEDKEYVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CLASSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CLASSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CNTAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CNTAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COLOR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_COLOR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CPUQUEUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CPUQUEUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSCP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSCP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DECAP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DHCP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DHCP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DOSATTACK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DOSATTACK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DROP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DROP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSFIELD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSFIELD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTHIGIG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTHIGIG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6HIGH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6LOW,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6LOW_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPLOCAL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIPLOCAL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESSNEXTHOPS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESSNEXTHOPS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMIMGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMIMGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMPLSGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMPLSGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTICASTGROUP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTICASTGROUP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTNIVGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTNIVGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTRPFGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTRPFGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTTRUNK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTTRUNK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTVXLANGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTVXLANGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTWLANGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTWLANGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ECID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ECID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ECNVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ECNVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSL2GRE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSL2GRE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSL3INTERFACE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSL3INTERFACE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSTRILL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSTRILL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSWLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASSWLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EGRESSCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EQUALL4PORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EQUALL4PORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADER2TYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADER2TYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERSUBCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERSUBCODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT0,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT0_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALHIT3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE0,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE0_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTERNALVALUE3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FABRICQUEUETAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FABRICQUEUETAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOESOF,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOESOF_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOEVERSIONISZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FCOEVERSIONISZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FHEI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FHEISIZE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FHEISIZE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FHEI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANCSCTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANCSCTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDFCTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDFCTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANDSTID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANFCTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANFCTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANINNER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANINNER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANOUTER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANOUTER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANRCTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANRCTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCBINDCHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCBINDCHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCFPMACHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCFPMACHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANSRCID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTFABRICID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTFABRICID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTHOPCOUNT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTHOPCOUNT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVERSION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVERSION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVSANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVSANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVSANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANVFTVSANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANZONECHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANZONECHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FLOWID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDCOPY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDCOPY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGHEADEROFFSET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGHEADEROFFSET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GENERICASSOCIATEDCHANNELLABELVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_GENERICASSOCIATEDCHANNELLABELVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HEADERFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HEADERFORMATSET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HEADERFORMATSET_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HEADERFORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPROXY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIGPROXY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ISID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ISID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ICMPERROR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ICMPERROR_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ICMPTYPECODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ICMPTYPECODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IGMPTYPEMAXRESPTIME,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IGMPTYPEMAXRESPTIME_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORT32,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORT32_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INVPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INCOMINGIPIFCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INCOMINGIPIFCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSCLASSFIELD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSCLASSFIELD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSECID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSECID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSINTERFACECLASSPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSINTERFACECLASSPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSSTPSTATE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSSTPSTATE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSVPORTBRIDGEDISABLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSVPORTBRIDGEDISABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSCP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSCP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6HIGH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERETHERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERETHERTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6FLOWLABEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6FLOWLABEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6HOPLIMIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6HOPLIMIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6NEXTHEADER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6NEXTHEADER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPFRAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPFRAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOLCOMMON,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOLCOMMON_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4DSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4DSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4SRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4SRCPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6HIGH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTPID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTPID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANACTIONRANGE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANACTIONRANGE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTCONGESTIONNOTIFICATION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTCONGESTIONNOTIFICATION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPRIORITY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTPRIORITY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSPROCESSINGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSPROCESSINGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSVPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSVPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6FLOWLABEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6FLOWLABEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6HOPLIMIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6HOPLIMIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6NEXTHEADER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6NEXTHEADER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6TRAFFICCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6TRAFFICCLASS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPADDRSNORMALIZED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPADDRSNORMALIZED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPAUTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPAUTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPINFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPINFO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOLCOMMON,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOLCOMMON_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTUNNELVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCSTARGROUPHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCSTARGROUPHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCSTARGROUPVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCSTARGROUPVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ISEQUALVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ISEQUALVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2CACHEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2CACHEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2FORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2FORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREFLOWID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREFLOWID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREPROTOCOLTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREPROTOCOLTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GRESRCIPHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GRESRCIPHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREVFIHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREVFIHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREVSID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2GREVSID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2LEARN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2LEARN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2PAYLOADFIRSTEIGHTBYTES,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2PAYLOADFIRSTEIGHTBYTES_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCSTATIC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCSTATIC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2STATIONMOVE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2STATIONMOVE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTHOSTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTHOSTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTROUTEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTROUTEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTROUTEVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTROUTEVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3INGRESS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3INGRESS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3ROUTABLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3ROUTABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCBIND,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCBIND_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCHOSTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCHOSTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCROUTEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCROUTEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCROUTEVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCROUTEVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4DSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4DSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4PORTRANGECHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4PORTRANGECHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4PORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4PORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4SRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4SRCPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNSRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNSRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNSRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNSRCPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LEARNVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LLC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LLC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LLIDVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LLIDVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MHOPCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MHOPCODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACADDRSNORMALIZED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MACADDRSNORMALIZED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMSRCGPORTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMSRCGPORTHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVFIHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVFIHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIMVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORCOPY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORCOPY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRROREGRESSDISABLED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRROREGRESSDISABLED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSBOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSBOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCONTROLWORD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCONTROLWORDVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCONTROLWORDVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSCONTROLWORD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELACTION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELACTION32,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELACTION32_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELACTION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELBOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELBOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELEXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELEXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELPAYLOAD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELPAYLOAD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELTTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABELTTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSFORWARDINGLABEL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1BOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1BOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1EXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1EXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1HIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1HIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1ID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1ID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL1_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2BOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2BOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2EXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2EXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2HIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2HIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2ID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2ID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3BOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3BOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3EXP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3EXP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3ID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3ID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSLABEL3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOUTERLABELPOP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSOUTERLABELPOP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSSTATIONHITTUNNELUNTERMINATED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSSTATIONHITTUNNELUNTERMINATED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATEDHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATEDHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATEDVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATEDVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MYSTATIONHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MYSTATIONHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATDSTREALMID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATDSTREALMID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATNEEDED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATNEEDED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATSRCREALMID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATSRCREALMID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATIVEVSWITCH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATIVEVSWITCHVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATIVEVSWITCHVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_NATIVEVSWITCH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMMDL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OAMMDL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTVPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTVPORT32,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTVPORT32_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTVPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERTPID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERTPID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANACTIONRANGE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANACTIONRANGE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETLENGTHRANGECHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETLENGTHRANGECHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETRES,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETRES_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETSIZE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETSIZE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETTERMINATEDBYTES,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETTERMINATEDBYTES_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_POLICERINTPRIO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_POLICERINTPRIO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PORTORIENTATION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PORTORIENTATION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTCH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PTCH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RANGECHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RANGECHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECOVERABLEDROP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RECOVERABLEDROP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPCOPY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPCOPY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPLICANTANY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPLICANTANY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPLICANTFIRST,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_REPLICANTFIRST_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROUTERALERTLABELVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ROUTERALERTLABELVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7AHASHLOWER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7AHASHLOWER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7AHASHUPPER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7AHASHUPPER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7BHASHLOWER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7BHASHLOWER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7BHASHUPPER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RTAG7BHASHUPPER_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPCODEFORSNOOP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPCODEFORSNOOP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPCODE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPDATA,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RXTRAPDATA_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SNAP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SNAP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SNOOPCOPY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SNOOPCOPY_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSFIELD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSFIELD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL2_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL3_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6HIGH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6LOW,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6LOW_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPEQUALDSTIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPEQUALDSTIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMAC_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMIMGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMIMGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODPORTGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODPORTGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODULEGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODULEGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMPLSGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMPLSGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCNIVGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCNIVGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCTRUNK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCTRUNKMEMBERGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCTRUNKMEMBERGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCTRUNK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVIRTUALPORTVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVIRTUALPORTVALID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVXLANGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCVXLANGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCWLANGPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCWLANGPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SUBPORTPKTTAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SUBPORTPKTTAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPCONTROL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPCONTROL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPHEADERSIZE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPHEADERSIZE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPSEQUENCEZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPSEQUENCEZERO_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TOS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDINNERVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANCFI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANCFI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANPRI,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLANPRI_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDOUTERVLAN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDVLANFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDVLANFORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLEGRESSRBRIDGE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLEGRESSRBRIDGEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLEGRESSRBRIDGEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLEGRESSRBRIDGE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLHOPCOUNT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLHOPCOUNT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLIVERSION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLIVERSION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLINGRESSRBRIDGE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLINGRESSRBRIDGEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLINGRESSRBRIDGEHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLINGRESSRBRIDGE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLMULTIDESTINATION,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLMULTIDESTINATION_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLOPLENGTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLOPLENGTH_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLPAYLOAD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRILLPAYLOAD_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRUNKHASHRESULT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TRUNKHASHRESULT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TTL_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATEDHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATEDHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATEDVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATEDVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATED_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPORTRANGECHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPORTRANGECHECK_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANFORMAT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATIONHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATIONHIT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATIONVALUE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATIONVALUE_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VNTAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VNTAG_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPNUNKNOWNDSTMACDSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPNUNKNOWNDSTMACDSTPORT_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VPN_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VRF,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VRF_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANFLAGS_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANNETWORKID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VXLANNETWORKID_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CLEAR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DATA,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DATA_GET,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_UDF,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_UDF_GET,
	BCM_ASYNC_ENTRY_FIELD_RANGE_CREATE,
	BCM_ASYNC_ENTRY_FIELD_RANGE_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_RANGE_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_RANGE_GET,
	BCM_ASYNC_ENTRY_FIELD_RANGE_GROUP_CREATE,
	BCM_ASYNC_ENTRY_FIELD_RANGE_GROUP_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_RANGE_MULTI_CREATE,
	BCM_ASYNC_ENTRY_FIELD_RANGE_MULTI_GET,
	BCM_ASYNC_ENTRY_FIELD_RESYNC,
	BCM_ASYNC_ENTRY_FIELD_SHOW,
	BCM_ASYNC_ENTRY_FIELD_STAGE_INFO_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_ALL_SET,
	BCM_ASYNC_ENTRY_FIELD_STAT_ALL_SET32,
	BCM_ASYNC_ENTRY_FIELD_STAT_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_STAT_CONFIG_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_FIELD_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_CREATE,
	BCM_ASYNC_ENTRY_FIELD_STAT_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_STAT_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_STAT_DETACH,
	BCM_ASYNC_ENTRY_FIELD_STAT_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_GET32,
	BCM_ASYNC_ENTRY_FIELD_STAT_ID_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_FIELD_STAT_SET,
	BCM_ASYNC_ENTRY_FIELD_STAT_SET32,
	BCM_ASYNC_ENTRY_FIELD_STAT_SIZE,
	BCM_ASYNC_ENTRY_FIELD_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_FIELD_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_FIND,
	BCM_ASYNC_ENTRY_I2C_IOCTL,
	BCM_ASYNC_ENTRY_I2C_OPEN,
	BCM_ASYNC_ENTRY_I2C_READ,
	BCM_ASYNC_ENTRY_I2C_WRITE,
	BCM_ASYNC_ENTRY_INFO_GET,
	BCM_ASYNC_ENTRY_INIT,
	BCM_ASYNC_ENTRY_INIT_CHECK,
	BCM_ASYNC_ENTRY_INIT_SELECTIVE,
	BCM_ASYNC_ENTRY_IP6_MASK_CREATE,
	BCM_ASYNC_ENTRY_IP6_MASK_LENGTH,
	BCM_ASYNC_ENTRY_IP_MASK_LENGTH,
	BCM_ASYNC_ENTRY_IPFIX_CONFIG_GET,
	BCM_ASYNC_ENTRY_IPFIX_CONFIG_SET,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_CONFIG_GET,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_CONFIG_SET,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_ADD,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_DELETE,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_DELETE_ALL,
	BCM_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_GET,
	BCM_ASYNC_ENTRY_IPFIX_RATE_CREATE,
	BCM_ASYNC_ENTRY_IPFIX_RATE_DESTROY,
	BCM_ASYNC_ENTRY_IPFIX_RATE_DESTROY_ALL,
	BCM_ASYNC_ENTRY_IPFIX_RATE_GET,
	BCM_ASYNC_ENTRY_IPFIX_RATE_MIRROR_ADD,
	BCM_ASYNC_ENTRY_IPFIX_RATE_MIRROR_DELETE,
	BCM_ASYNC_ENTRY_IPFIX_RATE_MIRROR_DELETE_ALL,
	BCM_ASYNC_ENTRY_IPFIX_RATE_MIRROR_GET,
	BCM_ASYNC_ENTRY_IPFIX_RATE_TRAVERSE,
	BCM_ASYNC_ENTRY_IPFIX_REGISTER,
	BCM_ASYNC_ENTRY_IPFIX_UNREGISTER,
	BCM_ASYNC_ENTRY_IPMC_ADD,
	BCM_ASYNC_ENTRY_IPMC_AGE,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_DEL,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_GET,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_MAX_GET,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_SET,
	BCM_ASYNC_ENTRY_IPMC_COUNTERS_GET,
	BCM_ASYNC_ENTRY_IPMC_DETACH,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_PORT_GET,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_PORT_INIT,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_PORT_SET,
	BCM_ASYNC_ENTRY_IPMC_ENABLE,
	BCM_ASYNC_ENTRY_IPMC_FIND,
	BCM_ASYNC_ENTRY_IPMC_INIT,
	BCM_ASYNC_ENTRY_IPMC_RANGE_ADD,
	BCM_ASYNC_ENTRY_IPMC_RANGE_DELETE,
	BCM_ASYNC_ENTRY_IPMC_RANGE_DELETE_ALL,
	BCM_ASYNC_ENTRY_IPMC_RANGE_GET,
	BCM_ASYNC_ENTRY_IPMC_RANGE_SIZE_GET,
	BCM_ASYNC_ENTRY_IPMC_REMOVE,
	BCM_ASYNC_ENTRY_IPMC_REMOVE_ALL,
	BCM_ASYNC_ENTRY_IPMC_RP_ADD,
	BCM_ASYNC_ENTRY_IPMC_RP_CREATE,
	BCM_ASYNC_ENTRY_IPMC_RP_DELETE,
	BCM_ASYNC_ENTRY_IPMC_RP_DELETE_ALL,
	BCM_ASYNC_ENTRY_IPMC_RP_DESTROY,
	BCM_ASYNC_ENTRY_IPMC_RP_GET,
	BCM_ASYNC_ENTRY_IPMC_RP_SET,
	BCM_ASYNC_ENTRY_IPMC_STAT_ATTACH,
	BCM_ASYNC_ENTRY_IPMC_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_IPMC_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_IPMC_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_IPMC_STAT_DETACH,
	BCM_ASYNC_ENTRY_IPMC_STAT_ID_GET,
	BCM_ASYNC_ENTRY_IPMC_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_IPMC_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_IPMC_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_IPMC_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_IPMC_TRAVERSE,
	BCM_ASYNC_ENTRY_KNET_CLEANUP,
	BCM_ASYNC_ENTRY_KNET_FILTER_CREATE,
	BCM_ASYNC_ENTRY_KNET_FILTER_DESTROY,
	BCM_ASYNC_ENTRY_KNET_FILTER_GET,
	BCM_ASYNC_ENTRY_KNET_FILTER_TRAVERSE,
	BCM_ASYNC_ENTRY_KNET_INIT,
	BCM_ASYNC_ENTRY_KNET_NETIF_CREATE,
	BCM_ASYNC_ENTRY_KNET_NETIF_DESTROY,
	BCM_ASYNC_ENTRY_KNET_NETIF_GET,
	BCM_ASYNC_ENTRY_KNET_NETIF_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_ADDR_ADD,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_MAC,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_MAC_PORT,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_PORT,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_TRUNK,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN_GPORT_MULTI,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN_PORT,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN_TRUNK,
	BCM_ASYNC_ENTRY_L2_ADDR_FREEZE,
	BCM_ASYNC_ENTRY_L2_ADDR_GET,
	BCM_ASYNC_ENTRY_L2_ADDR_MSG_DISTRIBUTE_GET,
	BCM_ASYNC_ENTRY_L2_ADDR_MSG_DISTRIBUTE_SET,
	BCM_ASYNC_ENTRY_L2_ADDR_REGISTER,
	BCM_ASYNC_ENTRY_L2_ADDR_THAW,
	BCM_ASYNC_ENTRY_L2_ADDR_UNREGISTER,
	BCM_ASYNC_ENTRY_L2_AGE_TIMER_GET,
	BCM_ASYNC_ENTRY_L2_AGE_TIMER_SET,
	BCM_ASYNC_ENTRY_L2_AUTH_ADD,
	BCM_ASYNC_ENTRY_L2_AUTH_DELETE,
	BCM_ASYNC_ENTRY_L2_AUTH_DELETE_ALL,
	BCM_ASYNC_ENTRY_L2_AUTH_GET,
	BCM_ASYNC_ENTRY_L2_AUTH_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_CACHE_DELETE,
	BCM_ASYNC_ENTRY_L2_CACHE_DELETE_ALL,
	BCM_ASYNC_ENTRY_L2_CACHE_GET,
	BCM_ASYNC_ENTRY_L2_CACHE_INIT,
	BCM_ASYNC_ENTRY_L2_CACHE_SET,
	BCM_ASYNC_ENTRY_L2_CACHE_SIZE_GET,
	BCM_ASYNC_ENTRY_L2_CLEAR,
	BCM_ASYNC_ENTRY_L2_CONFLICT_GET,
	BCM_ASYNC_ENTRY_L2_DETACH,
	BCM_ASYNC_ENTRY_L2_EGRESS_CREATE,
	BCM_ASYNC_ENTRY_L2_EGRESS_DESTROY,
	BCM_ASYNC_ENTRY_L2_EGRESS_FIND,
	BCM_ASYNC_ENTRY_L2_EGRESS_GET,
	BCM_ASYNC_ENTRY_L2_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_GPORT_FORWARD_INFO_GET,
	BCM_ASYNC_ENTRY_L2_INIT,
	BCM_ASYNC_ENTRY_L2_KEY_DUMP,
	BCM_ASYNC_ENTRY_L2_LEARN_CLASS_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_CLASS_SET,
	BCM_ASYNC_ENTRY_L2_LEARN_LIMIT_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_LIMIT_SET,
	BCM_ASYNC_ENTRY_L2_LEARN_MSGS_CONFIG_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_MSGS_CONFIG_SET,
	BCM_ASYNC_ENTRY_L2_LEARN_PORT_CLASS_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_PORT_CLASS_SET,
	BCM_ASYNC_ENTRY_L2_MAC_PORT_CREATE,
	BCM_ASYNC_ENTRY_L2_MAC_PORT_DESTROY,
	BCM_ASYNC_ENTRY_L2_MAC_PORT_DESTROY_ALL,
	BCM_ASYNC_ENTRY_L2_MAC_PORT_GET,
	BCM_ASYNC_ENTRY_L2_MAC_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_MATCH_MASKED_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_MATCHED_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_PORT_NATIVE,
	BCM_ASYNC_ENTRY_L2_REPLACE,
	BCM_ASYNC_ENTRY_L2_REPLACE_MATCH,
	BCM_ASYNC_ENTRY_L2_RING_REPLACE,
	BCM_ASYNC_ENTRY_L2_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L2_STAT_GET,
	BCM_ASYNC_ENTRY_L2_STAT_GET32,
	BCM_ASYNC_ENTRY_L2_STAT_SET,
	BCM_ASYNC_ENTRY_L2_STAT_SET32,
	BCM_ASYNC_ENTRY_L2_STATION_ADD,
	BCM_ASYNC_ENTRY_L2_STATION_DELETE,
	BCM_ASYNC_ENTRY_L2_STATION_DELETE_ALL,
	BCM_ASYNC_ENTRY_L2_STATION_GET,
	BCM_ASYNC_ENTRY_L2_STATION_SIZE_GET,
	BCM_ASYNC_ENTRY_L2_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_TUNNEL_ADD,
	BCM_ASYNC_ENTRY_L2_TUNNEL_DELETE,
	BCM_ASYNC_ENTRY_L2_TUNNEL_DELETE_ALL,
	BCM_ASYNC_ENTRY_L2GRE_CLEANUP,
	BCM_ASYNC_ENTRY_L2GRE_INIT,
	BCM_ASYNC_ENTRY_L2GRE_PORT_ADD,
	BCM_ASYNC_ENTRY_L2GRE_PORT_DELETE,
	BCM_ASYNC_ENTRY_L2GRE_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_L2GRE_PORT_GET,
	BCM_ASYNC_ENTRY_L2GRE_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_L2GRE_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L2GRE_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_DETACH,
	BCM_ASYNC_ENTRY_L2GRE_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_L2GRE_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_L2GRE_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_INITIATOR_DESTROY,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_INITIATOR_DESTROY_ALL,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_INITIATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_CREATE,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_DESTROY,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_DESTROY_ALL,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_GET,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_L2GRE_TUNNEL_TERMINATOR_UPDATE,
	BCM_ASYNC_ENTRY_L2GRE_VPN_CREATE,
	BCM_ASYNC_ENTRY_L2GRE_VPN_DESTROY,
	BCM_ASYNC_ENTRY_L2GRE_VPN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_L2GRE_VPN_GET,
	BCM_ASYNC_ENTRY_L2GRE_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_CLEANUP,
	BCM_ASYNC_ENTRY_L3_EGRESS_CREATE,
	BCM_ASYNC_ENTRY_L3_EGRESS_DESTROY,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_ADD,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_CREATE,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_DELETE,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_DESTROY,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_ETHERTYPE_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_ETHERTYPE_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_FIND,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_MEMBER_STATUS_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_MEMBER_STATUS_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_RESILIENT_REPLACE,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_RESILIENT_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_EGRESS_ECMP_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_EGRESS_FIND,
	BCM_ASYNC_ENTRY_L3_EGRESS_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_ADD,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_CREATE,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_DELETE,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_DESTROY,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_FIND,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_MAX_CREATE,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_GET32,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_SET32,
	BCM_ASYNC_ENTRY_L3_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_HOST_ADD,
	BCM_ASYNC_ENTRY_L3_HOST_AGE,
	BCM_ASYNC_ENTRY_L3_HOST_CONFLICT_GET,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE_BY_INTERFACE,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE_BY_NETWORK,
	BCM_ASYNC_ENTRY_L3_HOST_FIND,
	BCM_ASYNC_ENTRY_L3_HOST_INVALIDATE_ENTRY,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_GET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_GET32,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_SET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_SET32,
	BCM_ASYNC_ENTRY_L3_HOST_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_HOST_VALIDATE_ENTRY,
	BCM_ASYNC_ENTRY_L3_INFO,
	BCM_ASYNC_ENTRY_L3_INGRESS_CREATE,
	BCM_ASYNC_ENTRY_L3_INGRESS_DESTROY,
	BCM_ASYNC_ENTRY_L3_INGRESS_FIND,
	BCM_ASYNC_ENTRY_L3_INGRESS_GET,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_INGRESS_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_INGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_INIT,
	BCM_ASYNC_ENTRY_L3_INTF_CREATE,
	BCM_ASYNC_ENTRY_L3_INTF_DELETE,
	BCM_ASYNC_ENTRY_L3_INTF_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_INTF_FIND,
	BCM_ASYNC_ENTRY_L3_INTF_FIND_VLAN,
	BCM_ASYNC_ENTRY_L3_INTF_GET,
	BCM_ASYNC_ENTRY_L3_IP4_OPTIONS_ACTION_GET,
	BCM_ASYNC_ENTRY_L3_IP4_OPTIONS_ACTION_SET,
	BCM_ASYNC_ENTRY_L3_IP4_OPTIONS_PROFILE_CREATE,
	BCM_ASYNC_ENTRY_L3_IP4_OPTIONS_PROFILE_DESTROY,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_ADD,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_DELETE,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_GET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_ADD,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_GET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_L3_NAT_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_ADD,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_AGE,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_DELETE,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_FIND,
	BCM_ASYNC_ENTRY_L3_NAT_INGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_ROUTE_ADD,
	BCM_ASYNC_ENTRY_L3_ROUTE_AGE,
	BCM_ASYNC_ENTRY_L3_ROUTE_DELETE,
	BCM_ASYNC_ENTRY_L3_ROUTE_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_ROUTE_DELETE_BY_INTERFACE,
	BCM_ASYNC_ENTRY_L3_ROUTE_FIND,
	BCM_ASYNC_ENTRY_L3_ROUTE_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_MAX_ECMP_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_MAX_ECMP_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_MULTIPATH_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_GET32,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_SET32,
	BCM_ASYNC_ENTRY_L3_ROUTE_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_ADD,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_DELETE,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_ENABLE_GET,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_GET,
	BCM_ASYNC_ENTRY_L3_SOURCE_BIND_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_SUBNET_ROUTE_FIND,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_ATTACH,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_DETACH,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_GET32,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_ID_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_SET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_SET32,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_L3_VRF_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_L3_VRRP_ADD,
	BCM_ASYNC_ENTRY_L3_VRRP_CONFIG_ADD,
	BCM_ASYNC_ENTRY_L3_VRRP_CONFIG_DELETE,
	BCM_ASYNC_ENTRY_L3_VRRP_CONFIG_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_VRRP_CONFIG_GET,
	BCM_ASYNC_ENTRY_L3_VRRP_DELETE,
	BCM_ASYNC_ENTRY_L3_VRRP_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_VRRP_GET,
	BCM_ASYNC_ENTRY_LINK_CHANGE,
	BCM_ASYNC_ENTRY_LINK_WAIT,
	BCM_ASYNC_ENTRY_LINKSCAN_DETACH,
	BCM_ASYNC_ENTRY_LINKSCAN_DUMP,
	BCM_ASYNC_ENTRY_LINKSCAN_ENABLE_GET,
	BCM_ASYNC_ENTRY_LINKSCAN_ENABLE_PORT_GET,
	BCM_ASYNC_ENTRY_LINKSCAN_ENABLE_SET,
	BCM_ASYNC_ENTRY_LINKSCAN_INIT,
	BCM_ASYNC_ENTRY_LINKSCAN_MODE_GET,
	BCM_ASYNC_ENTRY_LINKSCAN_MODE_SET,
	BCM_ASYNC_ENTRY_LINKSCAN_MODE_SET_PBM,
	BCM_ASYNC_ENTRY_LINKSCAN_PORT_REGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_PORT_UNREGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_REGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_UNREGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_UPDATE,
	BCM_ASYNC_ENTRY_MACSEC_EVENT_ENABLE_GET,
	BCM_ASYNC_ENTRY_MACSEC_EVENT_ENABLE_SET,
	BCM_ASYNC_ENTRY_MACSEC_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_MACSEC_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_MACSEC_FLOW_CREATE,
	BCM_ASYNC_ENTRY_MACSEC_FLOW_DESTROY,
	BCM_ASYNC_ENTRY_MACSEC_FLOW_GET,
	BCM_ASYNC_ENTRY_MACSEC_FLOW_TRAVERSE,
	BCM_ASYNC_ENTRY_MACSEC_PORT_CAPABILITY_GET,
	BCM_ASYNC_ENTRY_MACSEC_PORT_CONFIG_GET,
	BCM_ASYNC_ENTRY_MACSEC_PORT_CONFIG_SET,
	BCM_ASYNC_ENTRY_MACSEC_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_ASSOC_CREATE,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_ASSOC_DESTROY,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_ASSOC_GET,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_ASSOC_TRAVERSE,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_CHAN_CREATE,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_CHAN_DESTROY,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_CHAN_GET,
	BCM_ASYNC_ENTRY_MACSEC_SECURE_CHAN_TRAVERSE,
	BCM_ASYNC_ENTRY_MACSEC_STAT_CLEAR,
	BCM_ASYNC_ENTRY_MACSEC_STAT_GET,
	BCM_ASYNC_ENTRY_MACSEC_STAT_GET32,
	BCM_ASYNC_ENTRY_MACSEC_STAT_SET,
	BCM_ASYNC_ENTRY_MACSEC_STAT_SET32,
	BCM_ASYNC_ENTRY_MCAST_ADDR_ADD,
	BCM_ASYNC_ENTRY_MCAST_ADDR_ADD_W_L2MCINDEX,
	BCM_ASYNC_ENTRY_MCAST_ADDR_REMOVE,
	BCM_ASYNC_ENTRY_MCAST_ADDR_REMOVE_W_L2MCINDEX,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_DEL,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_GET,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_MAX_GET,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_SET,
	BCM_ASYNC_ENTRY_MCAST_INIT,
	BCM_ASYNC_ENTRY_MCAST_JOIN,
	BCM_ASYNC_ENTRY_MCAST_LEAVE,
	BCM_ASYNC_ENTRY_MCAST_PORT_ADD,
	BCM_ASYNC_ENTRY_MCAST_PORT_GET,
	BCM_ASYNC_ENTRY_MCAST_PORT_REMOVE,
	BCM_ASYNC_ENTRY_MIM_DETACH,
	BCM_ASYNC_ENTRY_MIM_INIT,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_ATTACH,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_DETACH,
	BCM_ASYNC_ENTRY_MIM_LOOKUP_ID_STAT_ID_GET,
	BCM_ASYNC_ENTRY_MIM_PORT_ADD,
	BCM_ASYNC_ENTRY_MIM_PORT_DELETE,
	BCM_ASYNC_ENTRY_MIM_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_MIM_PORT_GET,
	BCM_ASYNC_ENTRY_MIM_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_MIM_VPN_CREATE,
	BCM_ASYNC_ENTRY_MIM_VPN_DESTROY,
	BCM_ASYNC_ENTRY_MIM_VPN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_MIM_VPN_GET,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_ATTACH,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_DETACH,
	BCM_ASYNC_ENTRY_MIM_VPN_STAT_ID_GET,
	BCM_ASYNC_ENTRY_MIM_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_CREATE,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_DESTROY,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_GET,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_TRAVERSE,
	BCM_ASYNC_ENTRY_MIRROR_EGRESS_GET,
	BCM_ASYNC_ENTRY_MIRROR_EGRESS_SET,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_GET,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_SET,
	BCM_ASYNC_ENTRY_MIRROR_INIT,
	BCM_ASYNC_ENTRY_MIRROR_MODE_GET,
	BCM_ASYNC_ENTRY_MIRROR_MODE_SET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_ADD,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_DELETE,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_DELETE_ALL,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DESTINATION_ADD,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DESTINATION_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_INFO_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_INFO_SET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_SET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DEST_ADD,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DEST_DELETE,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DEST_DELETE_ALL,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DEST_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DESTINATION_ADD,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_DESTINATION_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_VLAN_SET,
	BCM_ASYNC_ENTRY_MIRROR_TO_GET,
	BCM_ASYNC_ENTRY_MIRROR_TO_PBMP_GET,
	BCM_ASYNC_ENTRY_MIRROR_TO_PBMP_SET,
	BCM_ASYNC_ENTRY_MIRROR_TO_SET,
	BCM_ASYNC_ENTRY_MIRROR_VLAN_GET,
	BCM_ASYNC_ENTRY_MIRROR_VLAN_SET,
	BCM_ASYNC_ENTRY_MPLS_CLEANUP,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_CREATE,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_DESTROY,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_GET,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_SET,
	BCM_ASYNC_ENTRY_MPLS_INIT,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_ATTACH,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_CLEAR,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_DETACH,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_GET32,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_ID_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_MPLS_PORT_ADD,
	BCM_ASYNC_ENTRY_MPLS_PORT_DELETE,
	BCM_ASYNC_ENTRY_MPLS_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_PORT_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_ATTACH,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_DETACH,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_GET32,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_ID_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_SET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_SET32,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_CLEAR,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_CLEAR_ALL,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_SET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_ADD,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_CREATE,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_DELETE,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_TRAVERSE,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_CREATE,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_DESTROY,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_DESTROY_ALL,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_GET,
	BCM_ASYNC_ENTRY_MPLS_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_MULTICAST_ADD,
	BCM_ASYNC_ENTRY_MULTICAST_CONTROL_GET,
	BCM_ASYNC_ENTRY_MULTICAST_CONTROL_SET,
	BCM_ASYNC_ENTRY_MULTICAST_CREATE,
	BCM_ASYNC_ENTRY_MULTICAST_DELETE,
	BCM_ASYNC_ENTRY_MULTICAST_DESTROY,
	BCM_ASYNC_ENTRY_MULTICAST_DETACH,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_ADD,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_GET,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_OBJECT_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SET,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SUBSCRIBER_ADD,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SUBSCRIBER_DELETE,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SUBSCRIBER_GET,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SUBSCRIBER_SET,
	BCM_ASYNC_ENTRY_MULTICAST_EXTENDER_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_FABRIC_DISTRIBUTION_GET,
	BCM_ASYNC_ENTRY_MULTICAST_FABRIC_DISTRIBUTION_SET,
	BCM_ASYNC_ENTRY_MULTICAST_GET,
	BCM_ASYNC_ENTRY_MULTICAST_GROUP_FREE_RANGE_GET,
	BCM_ASYNC_ENTRY_MULTICAST_GROUP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_GROUP_IS_FREE,
	BCM_ASYNC_ENTRY_MULTICAST_GROUP_TRAVERSE,
	BCM_ASYNC_ENTRY_MULTICAST_INGRESS_ADD,
	BCM_ASYNC_ENTRY_MULTICAST_INGRESS_DELETE,
	BCM_ASYNC_ENTRY_MULTICAST_INGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_MULTICAST_INGRESS_GET,
	BCM_ASYNC_ENTRY_MULTICAST_INGRESS_SET,
	BCM_ASYNC_ENTRY_MULTICAST_INIT,
	BCM_ASYNC_ENTRY_MULTICAST_L2_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_L2GRE_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_L3_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_MAC_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_MIM_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_NIV_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_REPL_GET,
	BCM_ASYNC_ENTRY_MULTICAST_REPL_SET,
	BCM_ASYNC_ENTRY_MULTICAST_SET,
	BCM_ASYNC_ENTRY_MULTICAST_SUBPORT_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_TRILL_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_VLAN_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_VPLS_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_VXLAN_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_WLAN_ENCAP_GET,
	BCM_ASYNC_ENTRY_NIV_CLEANUP,
	BCM_ASYNC_ENTRY_NIV_EGRESS_ADD,
	BCM_ASYNC_ENTRY_NIV_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_NIV_EGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_NIV_EGRESS_GET,
	BCM_ASYNC_ENTRY_NIV_EGRESS_SET,
	BCM_ASYNC_ENTRY_NIV_FORWARD_ADD,
	BCM_ASYNC_ENTRY_NIV_FORWARD_DELETE,
	BCM_ASYNC_ENTRY_NIV_FORWARD_DELETE_ALL,
	BCM_ASYNC_ENTRY_NIV_FORWARD_GET,
	BCM_ASYNC_ENTRY_NIV_FORWARD_TRAVERSE,
	BCM_ASYNC_ENTRY_NIV_INIT,
	BCM_ASYNC_ENTRY_NIV_PORT_ADD,
	BCM_ASYNC_ENTRY_NIV_PORT_DELETE,
	BCM_ASYNC_ENTRY_NIV_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_NIV_PORT_GET,
	BCM_ASYNC_ENTRY_NIV_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_OAM_CONTROL_GET,
	BCM_ASYNC_ENTRY_OAM_CONTROL_SET,
	BCM_ASYNC_ENTRY_OAM_DELAY_ADD,
	BCM_ASYNC_ENTRY_OAM_DELAY_DELETE,
	BCM_ASYNC_ENTRY_OAM_DELAY_GET,
	BCM_ASYNC_ENTRY_OAM_DETACH,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_ACTION_SET,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_CREATE,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_DESTROY,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_DESTROY_ALL,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_GET,
	BCM_ASYNC_ENTRY_OAM_ENDPOINT_TRAVERSE,
	BCM_ASYNC_ENTRY_OAM_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_OAM_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_OAM_GROUP_CREATE,
	BCM_ASYNC_ENTRY_OAM_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_OAM_GROUP_DESTROY_ALL,
	BCM_ASYNC_ENTRY_OAM_GROUP_GET,
	BCM_ASYNC_ENTRY_OAM_GROUP_TRAVERSE,
	BCM_ASYNC_ENTRY_OAM_INIT,
	BCM_ASYNC_ENTRY_OAM_LOOPBACK_ADD,
	BCM_ASYNC_ENTRY_OAM_LOOPBACK_DELETE,
	BCM_ASYNC_ENTRY_OAM_LOOPBACK_GET,
	BCM_ASYNC_ENTRY_OAM_LOSS_ADD,
	BCM_ASYNC_ENTRY_OAM_LOSS_DELETE,
	BCM_ASYNC_ENTRY_OAM_LOSS_GET,
	BCM_ASYNC_ENTRY_OAM_OPCODE_MAP_GET,
	BCM_ASYNC_ENTRY_OAM_OPCODE_MAP_SET,
	BCM_ASYNC_ENTRY_OAM_PSC_ADD,
	BCM_ASYNC_ENTRY_OAM_PSC_DELETE,
	BCM_ASYNC_ENTRY_OAM_PSC_GET,
	BCM_ASYNC_ENTRY_OAM_PW_STATUS_ADD,
	BCM_ASYNC_ENTRY_OAM_PW_STATUS_DELETE,
	BCM_ASYNC_ENTRY_OAM_PW_STATUS_GET,
	BCM_ASYNC_ENTRY_PKT_ALLOC,
	BCM_ASYNC_ENTRY_PKT_BLK_ALLOC,
	BCM_ASYNC_ENTRY_PKT_BLK_FREE,
	BCM_ASYNC_ENTRY_PKT_BYTE_INDEX,
	BCM_ASYNC_ENTRY_PKT_CLEAR,
	BCM_ASYNC_ENTRY_PKT_FLAGS_INIT,
	BCM_ASYNC_ENTRY_PKT_FLAGS_LEN_SETUP,
	BCM_ASYNC_ENTRY_PKT_FREE,
	BCM_ASYNC_ENTRY_PKT_MEMCPY,
	BCM_ASYNC_ENTRY_PKT_RX_ALLOC,
	BCM_ASYNC_ENTRY_PKT_RX_FREE,
	BCM_ASYNC_ENTRY_POLICER_ACTION_ADD,
	BCM_ASYNC_ENTRY_POLICER_ACTION_ATTACH,
	BCM_ASYNC_ENTRY_POLICER_ACTION_ATTACH_GET,
	BCM_ASYNC_ENTRY_POLICER_ACTION_CREATE,
	BCM_ASYNC_ENTRY_POLICER_ACTION_DESTROY,
	BCM_ASYNC_ENTRY_POLICER_ACTION_DETACH,
	BCM_ASYNC_ENTRY_POLICER_ACTION_GET,
	BCM_ASYNC_ENTRY_POLICER_CREATE,
	BCM_ASYNC_ENTRY_POLICER_DESTROY,
	BCM_ASYNC_ENTRY_POLICER_DESTROY_ALL,
	BCM_ASYNC_ENTRY_POLICER_ENVELOP_CREATE,
	BCM_ASYNC_ENTRY_POLICER_ENVELOP_GROUP_CREATE,
	BCM_ASYNC_ENTRY_POLICER_GET,
	BCM_ASYNC_ENTRY_POLICER_GROUP_CREATE,
	BCM_ASYNC_ENTRY_POLICER_INIT,
	BCM_ASYNC_ENTRY_POLICER_SET,
	BCM_ASYNC_ENTRY_POLICER_STAT_ENABLE_GET,
	BCM_ASYNC_ENTRY_POLICER_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_POLICER_STAT_GET,
	BCM_ASYNC_ENTRY_POLICER_STAT_GET32,
	BCM_ASYNC_ENTRY_POLICER_STAT_SET,
	BCM_ASYNC_ENTRY_POLICER_STAT_SET32,
	BCM_ASYNC_ENTRY_POLICER_TRAVERSE,
	BCM_ASYNC_ENTRY_PORT_ABILITY_ADVERT_GET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_ADVERT_SET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_GET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_LOCAL_GET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_REMOTE_GET,
	BCM_ASYNC_ENTRY_PORT_ADVERT_GET,
	BCM_ASYNC_ENTRY_PORT_ADVERT_REMOTE_GET,
	BCM_ASYNC_ENTRY_PORT_ADVERT_SET,
	BCM_ASYNC_ENTRY_PORT_AUTONEG_GET,
	BCM_ASYNC_ENTRY_PORT_AUTONEG_SET,
	BCM_ASYNC_ENTRY_PORT_BPDU_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_BPDU_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_CABLE_DIAG,
	BCM_ASYNC_ENTRY_PORT_CFI_COLOR_GET,
	BCM_ASYNC_ENTRY_PORT_CFI_COLOR_SET,
	BCM_ASYNC_ENTRY_PORT_CLASS_GET,
	BCM_ASYNC_ENTRY_PORT_CLASS_SET,
	BCM_ASYNC_ENTRY_PORT_CLEAR,
	BCM_ASYNC_ENTRY_PORT_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_CONFIG_PHY_OAM_GET,
	BCM_ASYNC_ENTRY_PORT_CONFIG_PHY_OAM_SET,
	BCM_ASYNC_ENTRY_PORT_CONGESTION_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_CONGESTION_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_CONGESTION_GET,
	BCM_ASYNC_ENTRY_PORT_CONGESTION_SET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_GET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_PHY_OAM_GET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_PHY_OAM_SET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_PHY_TIMESYNC_GET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_PHY_TIMESYNC_SET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_SET,
	BCM_ASYNC_ENTRY_PORT_DETACH,
	BCM_ASYNC_ENTRY_PORT_DISCARD_GET,
	BCM_ASYNC_ENTRY_PORT_DISCARD_SET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_MODE_GET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_MODE_SET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_DSCP_UNMAP_GET,
	BCM_ASYNC_ENTRY_PORT_DSCP_UNMAP_SET,
	BCM_ASYNC_ENTRY_PORT_DTAG_MODE_GET,
	BCM_ASYNC_ENTRY_PORT_DTAG_MODE_SET,
	BCM_ASYNC_ENTRY_PORT_DUPLEX_GET,
	BCM_ASYNC_ENTRY_PORT_DUPLEX_SET,
	BCM_ASYNC_ENTRY_PORT_EGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_EGRESS_POLICER_SET,
	BCM_ASYNC_ENTRY_PORT_EGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_GET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_SET,
	BCM_ASYNC_ENTRY_PORT_FAULT_GET,
	BCM_ASYNC_ENTRY_PORT_FLOOD_BLOCK_GET,
	BCM_ASYNC_ENTRY_PORT_FLOOD_BLOCK_SET,
	BCM_ASYNC_ENTRY_PORT_FORCE_DEST_GET,
	BCM_ASYNC_ENTRY_PORT_FORCE_DEST_SET,
	BCM_ASYNC_ENTRY_PORT_FORCE_FORWARD_GET,
	BCM_ASYNC_ENTRY_PORT_FORCE_FORWARD_MODE_GET,
	BCM_ASYNC_ENTRY_PORT_FORCE_FORWARD_MODE_SET,
	BCM_ASYNC_ENTRY_PORT_FORCE_FORWARD_SET,
	BCM_ASYNC_ENTRY_PORT_FORCE_VLAN_GET,
	BCM_ASYNC_ENTRY_PORT_FORCE_VLAN_SET,
	BCM_ASYNC_ENTRY_PORT_FRAME_MAX_GET,
	BCM_ASYNC_ENTRY_PORT_FRAME_MAX_SET,
	BCM_ASYNC_ENTRY_PORT_GPORT_FREE_RANGE_GET,
	BCM_ASYNC_ENTRY_PORT_GPORT_GET,
	BCM_ASYNC_ENTRY_PORT_GPORT_IS_FREE,
	BCM_ASYNC_ENTRY_PORT_IFG_GET,
	BCM_ASYNC_ENTRY_PORT_IFG_SET,
	BCM_ASYNC_ENTRY_PORT_IFILTER_GET,
	BCM_ASYNC_ENTRY_PORT_IFILTER_SET,
	BCM_ASYNC_ENTRY_PORT_INFO_GET,
	BCM_ASYNC_ENTRY_PORT_INFO_RESTORE,
	BCM_ASYNC_ENTRY_PORT_INFO_SAVE,
	BCM_ASYNC_ENTRY_PORT_INFO_SET,
	BCM_ASYNC_ENTRY_PORT_INIT,
	BCM_ASYNC_ENTRY_PORT_INNER_TPID_GET,
	BCM_ASYNC_ENTRY_PORT_INNER_TPID_SET,
	BCM_ASYNC_ENTRY_PORT_INTERFACE_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_INTERFACE_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_INTERFACE_GET,
	BCM_ASYNC_ENTRY_PORT_INTERFACE_SET,
	BCM_ASYNC_ENTRY_PORT_INTERNAL_GET,
	BCM_ASYNC_ENTRY_PORT_IPMC_MODIFY_GET,
	BCM_ASYNC_ENTRY_PORT_IPMC_MODIFY_SET,
	BCM_ASYNC_ENTRY_PORT_JAM_GET,
	BCM_ASYNC_ENTRY_PORT_JAM_SET,
	BCM_ASYNC_ENTRY_PORT_L3_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_L3_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_L3_MODIFY_GET,
	BCM_ASYNC_ENTRY_PORT_L3_MODIFY_SET,
	BCM_ASYNC_ENTRY_PORT_L3_MTU_GET,
	BCM_ASYNC_ENTRY_PORT_L3_MTU_SET,
	BCM_ASYNC_ENTRY_PORT_LEARN_GET,
	BCM_ASYNC_ENTRY_PORT_LEARN_MODIFY,
	BCM_ASYNC_ENTRY_PORT_LEARN_SET,
	BCM_ASYNC_ENTRY_PORT_LINK_FAILED_CLEAR,
	BCM_ASYNC_ENTRY_PORT_LINK_STATE_GET,
	BCM_ASYNC_ENTRY_PORT_LINK_STATUS_GET,
	BCM_ASYNC_ENTRY_PORT_LINKSCAN_GET,
	BCM_ASYNC_ENTRY_PORT_LINKSCAN_SET,
	BCM_ASYNC_ENTRY_PORT_LOCAL_GET,
	BCM_ASYNC_ENTRY_PORT_LOOPBACK_GET,
	BCM_ASYNC_ENTRY_PORT_LOOPBACK_SET,
	BCM_ASYNC_ENTRY_PORT_MANAGEMENT_PACKET_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_MANAGEMENT_PACKET_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_MASTER_GET,
	BCM_ASYNC_ENTRY_PORT_MASTER_SET,
	BCM_ASYNC_ENTRY_PORT_MATCH_ADD,
	BCM_ASYNC_ENTRY_PORT_MATCH_DELETE,
	BCM_ASYNC_ENTRY_PORT_MATCH_DELETE_ALL,
	BCM_ASYNC_ENTRY_PORT_MATCH_MULTI_GET,
	BCM_ASYNC_ENTRY_PORT_MATCH_REPLACE,
	BCM_ASYNC_ENTRY_PORT_MATCH_SET,
	BCM_ASYNC_ENTRY_PORT_MDIX_GET,
	BCM_ASYNC_ENTRY_PORT_MDIX_SET,
	BCM_ASYNC_ENTRY_PORT_MDIX_STATUS_GET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_GET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_STATUS_REGISTER,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_STATUS_UNREGISTER,
	BCM_ASYNC_ENTRY_PORT_MODID_EGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_MODID_EGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_MODID_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_MODID_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_ADDR_GET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_ADDR_SET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_GET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_SET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_SYM_GET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_SYM_SET,
	BCM_ASYNC_ENTRY_PORT_PFM_GET,
	BCM_ASYNC_ENTRY_PORT_PFM_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_CONTROL_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_CONTROL_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_DRV_NAME_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_FIRMWARE_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_MODIFY,
	BCM_ASYNC_ENTRY_PORT_PHY_MULTI_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_RESET,
	BCM_ASYNC_ENTRY_PORT_PHY_RESET_REGISTER,
	BCM_ASYNC_ENTRY_PORT_PHY_RESET_UNREGISTER,
	BCM_ASYNC_ENTRY_PORT_PHY_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_TIMESYNC_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_TIMESYNC_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_TIMESYNC_ENHANCED_CAPTURE_GET,
	BCM_ASYNC_ENTRY_PORT_POLICER_GET,
	BCM_ASYNC_ENTRY_PORT_POLICER_SET,
	BCM_ASYNC_ENTRY_PORT_PON_INFO_GET,
	BCM_ASYNC_ENTRY_PORT_PON_INFO_SET,
	BCM_ASYNC_ENTRY_PORT_PON_TUNNEL_ADD,
	BCM_ASYNC_ENTRY_PORT_PON_TUNNEL_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_PON_TUNNEL_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_PON_TUNNEL_REMOVE,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_COLOR_GET,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_COLOR_SET,
	BCM_ASYNC_ENTRY_PORT_PROBE,
	BCM_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_ADD,
	BCM_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_DELETE,
	BCM_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_DELETE_ALL,
	BCM_ASYNC_ENTRY_PORT_QUEUED_COUNT_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_PPS_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_PPS_SET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_TRAFFIC_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_TRAFFIC_SET,
	BCM_ASYNC_ENTRY_PORT_RATE_INGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_INGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_RATE_PAUSE_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_PAUSE_SET,
	BCM_ASYNC_ENTRY_PORT_SAMPLE_RATE_GET,
	BCM_ASYNC_ENTRY_PORT_SAMPLE_RATE_SET,
	BCM_ASYNC_ENTRY_PORT_SELECTIVE_GET,
	BCM_ASYNC_ENTRY_PORT_SELECTIVE_SET,
	BCM_ASYNC_ENTRY_PORT_SPEED_GET,
	BCM_ASYNC_ENTRY_PORT_SPEED_MAX,
	BCM_ASYNC_ENTRY_PORT_SPEED_SET,
	BCM_ASYNC_ENTRY_PORT_STAT_ATTACH,
	BCM_ASYNC_ENTRY_PORT_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_PORT_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_DETACH,
	BCM_ASYNC_ENTRY_PORT_STAT_DETACH_WITH_ID,
	BCM_ASYNC_ENTRY_PORT_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_STAT_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_GET32,
	BCM_ASYNC_ENTRY_PORT_STAT_ID_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_PORT_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_PORT_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_PORT_STAT_SET,
	BCM_ASYNC_ENTRY_PORT_STAT_SET32,
	BCM_ASYNC_ENTRY_PORT_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_PORT_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_PORT_STP_GET,
	BCM_ASYNC_ENTRY_PORT_STP_SET,
	BCM_ASYNC_ENTRY_PORT_SUBSIDIARY_PORTS_GET,
	BCM_ASYNC_ENTRY_PORT_TDM_CAS_ABCD_GET,
	BCM_ASYNC_ENTRY_PORT_TDM_CAS_STATUS_GET,
	BCM_ASYNC_ENTRY_PORT_TDM_CES_PORTS_GET,
	BCM_ASYNC_ENTRY_PORT_TDM_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_TDM_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_TGID_GET,
	BCM_ASYNC_ENTRY_PORT_TGID_SET,
	BCM_ASYNC_ENTRY_PORT_TIMESYNC_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_TIMESYNC_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_TPID_ADD,
	BCM_ASYNC_ENTRY_PORT_TPID_CLASS_GET,
	BCM_ASYNC_ENTRY_PORT_TPID_CLASS_SET,
	BCM_ASYNC_ENTRY_PORT_TPID_DELETE,
	BCM_ASYNC_ENTRY_PORT_TPID_DELETE_ALL,
	BCM_ASYNC_ENTRY_PORT_TPID_GET,
	BCM_ASYNC_ENTRY_PORT_TPID_GET_ALL,
	BCM_ASYNC_ENTRY_PORT_TPID_SET,
	BCM_ASYNC_ENTRY_PORT_TRUNK_INDEX_GET,
	BCM_ASYNC_ENTRY_PORT_TRUNK_INDEX_SET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_PRIORITY_GET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_PRIORITY_SET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_VLAN_GET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_VLAN_SET,
	BCM_ASYNC_ENTRY_PORT_UPDATE,
	BCM_ASYNC_ENTRY_PORT_VLAN_DSCP_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_DSCP_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_INNER_TAG_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_INNER_TAG_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_MEMBER_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_MEMBER_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRI_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRI_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAPPING_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAPPING_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_UNMAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_UNMAP_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_VECTOR_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_VECTOR_SET,
	BCM_ASYNC_ENTRY_PROXY_CLEANUP,
	BCM_ASYNC_ENTRY_PROXY_CLIENT_SET,
	BCM_ASYNC_ENTRY_PROXY_EGRESS_CREATE,
	BCM_ASYNC_ENTRY_PROXY_EGRESS_DESTROY,
	BCM_ASYNC_ENTRY_PROXY_EGRESS_GET,
	BCM_ASYNC_ENTRY_PROXY_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_PROXY_INIT,
	BCM_ASYNC_ENTRY_PROXY_SERVER_GET,
	BCM_ASYNC_ENTRY_PROXY_SERVER_PORT_GET,
	BCM_ASYNC_ENTRY_PROXY_SERVER_PORT_SET,
	BCM_ASYNC_ENTRY_PROXY_SERVER_SET,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_ADD,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_ENABLED_GET,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_ENABLED_SET,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_LIST,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_REMOVE,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_TABLE_CLEAR,
	BCM_ASYNC_ENTRY_PTP_ACCEPTABLE_MASTER_TABLE_SIZE_GET,
	BCM_ASYNC_ENTRY_PTP_CB_REGISTER,
	BCM_ASYNC_ENTRY_PTP_CB_UNREGISTER,
	BCM_ASYNC_ENTRY_PTP_CLOCK_ACCURACY_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_ACCURACY_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_CREATE,
	BCM_ASYNC_ENTRY_PTP_CLOCK_CURRENT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_DEFAULT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_DOMAIN_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_DOMAIN_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PARENT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_ANNOUNCE_RECEIPT_TIMEOUT_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_ANNOUNCE_RECEIPT_TIMEOUT_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_CONFIGURE,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_DELAY_MECHANISM_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_DELAY_MECHANISM_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_DISABLE,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_ENABLE,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_IDENTITY_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_INFO_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LATENCY_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_ANNOUNCE_INTERVAL_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_ANNOUNCE_INTERVAL_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_MIN_DELAY_REQ_INTERVAL_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_MIN_DELAY_REQ_INTERVAL_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_MIN_PDELAY_REQ_INTERVAL_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_MIN_PDELAY_REQ_INTERVAL_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_SYNC_INTERVAL_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_LOG_SYNC_INTERVAL_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_MAC_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_PROTOCOL_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_TYPE_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PORT_VERSION_NUMBER_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PRIORITY1_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PRIORITY1_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PRIORITY2_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_PRIORITY2_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_SLAVEONLY_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_SLAVEONLY_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TIME_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TIME_PROPERTIES_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TIME_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TIMESCALE_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TIMESCALE_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TRACEABILITY_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_TRACEABILITY_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_USER_DESCRIPTION_SET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_UTC_GET,
	BCM_ASYNC_ENTRY_PTP_CLOCK_UTC_SET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ALARM_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ALARM_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ALPHA_GET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ALPHA_SET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ENABLE_GET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_ENABLE_SET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_VERBOSE_GET,
	BCM_ASYNC_ENTRY_PTP_CTDEV_VERBOSE_SET,
	BCM_ASYNC_ENTRY_PTP_DETACH,
	BCM_ASYNC_ENTRY_PTP_FOREIGN_MASTER_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_INIT,
	BCM_ASYNC_ENTRY_PTP_INPUT_CHANNEL_PRECEDENCE_MODE_SET,
	BCM_ASYNC_ENTRY_PTP_INPUT_CHANNEL_SWITCHING_MODE_SET,
	BCM_ASYNC_ENTRY_PTP_INPUT_CHANNELS_GET,
	BCM_ASYNC_ENTRY_PTP_INPUT_CHANNELS_SET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_ENABLE_GET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_ENABLE_SET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_PHYTS_GET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_PHYTS_SET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_PORTBITMAP_GET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_PORTBITMAP_SET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_VERBOSE_GET,
	BCM_ASYNC_ENTRY_PTP_MODULAR_VERBOSE_SET,
	BCM_ASYNC_ENTRY_PTP_PACKET_COUNTERS_GET,
	BCM_ASYNC_ENTRY_PTP_PEER_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_PRIMARY_DOMAIN_GET,
	BCM_ASYNC_ENTRY_PTP_PRIMARY_DOMAIN_SET,
	BCM_ASYNC_ENTRY_PTP_SERVO_CONFIGURATION_GET,
	BCM_ASYNC_ENTRY_PTP_SERVO_CONFIGURATION_SET,
	BCM_ASYNC_ENTRY_PTP_SERVO_STATUS_GET,
	BCM_ASYNC_ENTRY_PTP_SIGNAL_OUTPUT_GET,
	BCM_ASYNC_ENTRY_PTP_SIGNAL_OUTPUT_REMOVE,
	BCM_ASYNC_ENTRY_PTP_SIGNAL_OUTPUT_SET,
	BCM_ASYNC_ENTRY_PTP_SIGNALED_UNICAST_MASTER_ADD,
	BCM_ASYNC_ENTRY_PTP_SIGNALED_UNICAST_MASTER_REMOVE,
	BCM_ASYNC_ENTRY_PTP_SIGNALED_UNICAST_SLAVE_LIST,
	BCM_ASYNC_ENTRY_PTP_SIGNALED_UNICAST_SLAVE_TABLE_CLEAR,
	BCM_ASYNC_ENTRY_PTP_STACK_CREATE,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_MASTER_ADD,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_MASTER_LIST,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_MASTER_REMOVE,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_MASTER_TABLE_CLEAR,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_MASTER_TABLE_SIZE_GET,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_SLAVE_ADD,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_SLAVE_LIST,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_SLAVE_REMOVE,
	BCM_ASYNC_ENTRY_PTP_STATIC_UNICAST_SLAVE_TABLE_CLEAR,
	BCM_ASYNC_ENTRY_PTP_SYNC_PHY,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_INIT,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_NETWORK_OPTION_GET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_NETWORK_OPTION_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_ADD,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_BEST_GET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_GET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_LIST,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_LOCKOUT_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_NON_REVERSION_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_PRIORITY_OVERRIDE,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_PRIORITY_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_REMOVE,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PACKET_MASTER_WAIT_DURATION_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PKTSTATS_THRESHOLDS_GET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_PKTSTATS_THRESHOLDS_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_QUALITY_LEVEL_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_RECEIPT_TIMEOUT_GET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_RECEIPT_TIMEOUT_SET,
	BCM_ASYNC_ENTRY_PTP_TELECOM_G8265_SHUTDOWN,
	BCM_ASYNC_ENTRY_PTP_TIME_FORMAT_SET,
	BCM_ASYNC_ENTRY_PTP_TIMESOURCE_INPUT_STATUS_GET,
	BCM_ASYNC_ENTRY_PTP_TOD_INPUT_SOURCES_GET,
	BCM_ASYNC_ENTRY_PTP_TOD_INPUT_SOURCES_SET,
	BCM_ASYNC_ENTRY_PTP_TOD_OUTPUT_GET,
	BCM_ASYNC_ENTRY_PTP_TOD_OUTPUT_REMOVE,
	BCM_ASYNC_ENTRY_PTP_TOD_OUTPUT_SET,
	BCM_ASYNC_ENTRY_PTP_TRANSPARENT_CLOCK_DEFAULT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_TRANSPARENT_CLOCK_PORT_DATASET_GET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_GET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_MAX_GET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_MAX_SET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_MIN_GET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_MIN_SET,
	BCM_ASYNC_ENTRY_PTP_UNICAST_REQUEST_DURATION_SET,
	BCM_ASYNC_ENTRY_QOS_DETACH,
	BCM_ASYNC_ENTRY_QOS_INIT,
	BCM_ASYNC_ENTRY_QOS_MAP_ADD,
	BCM_ASYNC_ENTRY_QOS_MAP_CREATE,
	BCM_ASYNC_ENTRY_QOS_MAP_DELETE,
	BCM_ASYNC_ENTRY_QOS_MAP_DESTROY,
	BCM_ASYNC_ENTRY_QOS_MAP_MULTI_GET,
	BCM_ASYNC_ENTRY_QOS_MULTI_GET,
	BCM_ASYNC_ENTRY_QOS_PORT_MAP_GET,
	BCM_ASYNC_ENTRY_QOS_PORT_MAP_SET,
	BCM_ASYNC_ENTRY_QOS_PORT_MAP_TYPE_GET,
	BCM_ASYNC_ENTRY_QOS_PORT_VLAN_MAP_GET,
	BCM_ASYNC_ENTRY_QOS_PORT_VLAN_MAP_SET,
	BCM_ASYNC_ENTRY_RATE_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_RATE_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_RATE_BCAST_GET,
	BCM_ASYNC_ENTRY_RATE_BCAST_SET,
	BCM_ASYNC_ENTRY_RATE_DLFBC_GET,
	BCM_ASYNC_ENTRY_RATE_DLFBC_SET,
	BCM_ASYNC_ENTRY_RATE_GET,
	BCM_ASYNC_ENTRY_RATE_MCAST_GET,
	BCM_ASYNC_ENTRY_RATE_MCAST_SET,
	BCM_ASYNC_ENTRY_RATE_SET,
	BCM_ASYNC_ENTRY_RATE_TYPE_GET,
	BCM_ASYNC_ENTRY_RATE_TYPE_SET,
	BCM_ASYNC_ENTRY_REGEX_CONFIG_GET,
	BCM_ASYNC_ENTRY_REGEX_CONFIG_SET,
	BCM_ASYNC_ENTRY_REGEX_ENGINE_CREATE,
	BCM_ASYNC_ENTRY_REGEX_ENGINE_DESTROY,
	BCM_ASYNC_ENTRY_REGEX_ENGINE_GET,
	BCM_ASYNC_ENTRY_REGEX_ENGINE_INFO_GET,
	BCM_ASYNC_ENTRY_REGEX_ENGINE_TRAVERSE,
	BCM_ASYNC_ENTRY_REGEX_EXCLUDE_ADD,
	BCM_ASYNC_ENTRY_REGEX_EXCLUDE_DELETE,
	BCM_ASYNC_ENTRY_REGEX_EXCLUDE_DELETE_ALL,
	BCM_ASYNC_ENTRY_REGEX_EXCLUDE_GET,
	BCM_ASYNC_ENTRY_REGEX_GET_MATCH_ID,
	BCM_ASYNC_ENTRY_REGEX_GET_SIG_ID,
	BCM_ASYNC_ENTRY_REGEX_INFO_GET,
	BCM_ASYNC_ENTRY_REGEX_INIT,
	BCM_ASYNC_ENTRY_REGEX_MATCH_CHECK,
	BCM_ASYNC_ENTRY_REGEX_MATCH_SET,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_ADD,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_DELETE,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_GET,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_MAC_ADD,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_MAC_GET,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_PORTS_ADD,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_PORTS_GET,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_REMOVE,
	BCM_ASYNC_ENTRY_REGEX_POLICY_ACTION_REMOVE_ALL,
	BCM_ASYNC_ENTRY_REGEX_POLICY_CREATE,
	BCM_ASYNC_ENTRY_REGEX_POLICY_DESTROY,
	BCM_ASYNC_ENTRY_REGEX_POLICY_DESTROY_ALL,
	BCM_ASYNC_ENTRY_REGEX_POLICY_INSTALL,
	BCM_ASYNC_ENTRY_REGEX_POLICY_POLICER_ATTACH,
	BCM_ASYNC_ENTRY_REGEX_POLICY_POLICER_DETACH,
	BCM_ASYNC_ENTRY_REGEX_POLICY_POLICER_DETACH_ALL,
	BCM_ASYNC_ENTRY_REGEX_POLICY_POLICER_GET,
	BCM_ASYNC_ENTRY_REGEX_POLICY_REMOVE,
	BCM_ASYNC_ENTRY_REGEX_POLICY_STAT_ATTACH,
	BCM_ASYNC_ENTRY_REGEX_POLICY_STAT_DETACH,
	BCM_ASYNC_ENTRY_REGEX_POLICY_STAT_GET,
	BCM_ASYNC_ENTRY_REGEX_REPORT_REGISTER,
	BCM_ASYNC_ENTRY_REGEX_REPORT_UNREGISTER,
	BCM_ASYNC_ENTRY_REGEX_SESSION_ADD,
	BCM_ASYNC_ENTRY_REGEX_SESSION_DELETE,
	BCM_ASYNC_ENTRY_REGEX_SESSION_DELETE_ALL,
	BCM_ASYNC_ENTRY_REGEX_SESSION_GET,
	BCM_ASYNC_ENTRY_REGEX_SESSION_POLICY_UPDATE,
	BCM_ASYNC_ENTRY_REGEX_SESSION_TRAVERSE,
	BCM_ASYNC_ENTRY_REGEX_STAT_CREATE,
	BCM_ASYNC_ENTRY_REGEX_STAT_DESTROY,
	BCM_ASYNC_ENTRY_REGEX_STAT_GET,
	BCM_ASYNC_ENTRY_REGEX_STAT_SET,
	BCM_ASYNC_ENTRY_RX_ACTIVE,
	BCM_ASYNC_ENTRY_RX_ALLOC,
	BCM_ASYNC_ENTRY_RX_BURST_GET,
	BCM_ASYNC_ENTRY_RX_BURST_SET,
	BCM_ASYNC_ENTRY_RX_CFG_GET,
	BCM_ASYNC_ENTRY_RX_CFG_INIT,
	BCM_ASYNC_ENTRY_RX_CHANNELS_RUNNING,
	BCM_ASYNC_ENTRY_RX_CLEAR,
	BCM_ASYNC_ENTRY_RX_CONTROL_GET,
	BCM_ASYNC_ENTRY_RX_CONTROL_SET,
	BCM_ASYNC_ENTRY_RX_COS_BURST_GET,
	BCM_ASYNC_ENTRY_RX_COS_BURST_SET,
	BCM_ASYNC_ENTRY_RX_COS_MAX_LEN_GET,
	BCM_ASYNC_ENTRY_RX_COS_MAX_LEN_SET,
	BCM_ASYNC_ENTRY_RX_COS_RATE_GET,
	BCM_ASYNC_ENTRY_RX_COS_RATE_SET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_DELETE,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_GET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_REASONS_GET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_SET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_SIZE_GET,
	BCM_ASYNC_ENTRY_RX_CPU_RATE_GET,
	BCM_ASYNC_ENTRY_RX_CPU_RATE_SET,
	BCM_ASYNC_ENTRY_RX_FREE,
	BCM_ASYNC_ENTRY_RX_FREE_ENQUEUE,
	BCM_ASYNC_ENTRY_RX_INIT,
	BCM_ASYNC_ENTRY_RX_POOL_ALLOC,
	BCM_ASYNC_ENTRY_RX_POOL_CLEANUP,
	BCM_ASYNC_ENTRY_RX_POOL_FREE,
	BCM_ASYNC_ENTRY_RX_POOL_SETUP,
	BCM_ASYNC_ENTRY_RX_POOL_SETUP_DONE,
	BCM_ASYNC_ENTRY_RX_QUEUE_CHANNEL_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_CHANNEL_SET,
	BCM_ASYNC_ENTRY_RX_QUEUE_MAX_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_PACKET_COUNT_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_RATE_LIMIT_STATUS_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_REGISTER,
	BCM_ASYNC_ENTRY_RX_QUEUE_UNREGISTER,
	BCM_ASYNC_ENTRY_RX_RATE_GET,
	BCM_ASYNC_ENTRY_RX_RATE_SET,
	BCM_ASYNC_ENTRY_RX_REASONS_GET,
	BCM_ASYNC_ENTRY_RX_REASONS_POLICER_SET,
	BCM_ASYNC_ENTRY_RX_REDIRECT_REASONS_GET,
	BCM_ASYNC_ENTRY_RX_REDIRECT_REASONS_SET,
	BCM_ASYNC_ENTRY_RX_REGISTER,
	BCM_ASYNC_ENTRY_RX_REMOTE_PKT_ALLOC,
	BCM_ASYNC_ENTRY_RX_REMOTE_PKT_ENQUEUE,
	BCM_ASYNC_ENTRY_RX_REMOTE_PKT_FREE,
	BCM_ASYNC_ENTRY_RX_SCHED_REGISTER,
	BCM_ASYNC_ENTRY_RX_SCHED_UNREGISTER,
	BCM_ASYNC_ENTRY_RX_SHOW,
	BCM_ASYNC_ENTRY_RX_SNOOP_CREATE,
	BCM_ASYNC_ENTRY_RX_SNOOP_DESTROY,
	BCM_ASYNC_ENTRY_RX_SNOOP_GET,
	BCM_ASYNC_ENTRY_RX_SNOOP_SET,
	BCM_ASYNC_ENTRY_RX_START,
	BCM_ASYNC_ENTRY_RX_STOP,
	BCM_ASYNC_ENTRY_RX_TRAP_GET,
	BCM_ASYNC_ENTRY_RX_TRAP_SET,
	BCM_ASYNC_ENTRY_RX_TRAP_TYPE_CREATE,
	BCM_ASYNC_ENTRY_RX_TRAP_TYPE_DESTROY,
	BCM_ASYNC_ENTRY_RX_UNIT_NEXT_GET,
	BCM_ASYNC_ENTRY_RX_UNREGISTER,
	BCM_ASYNC_ENTRY_SAT_ENDPOINT_CREATE,
	BCM_ASYNC_ENTRY_SAT_ENDPOINT_DESTROY,
	BCM_ASYNC_ENTRY_SAT_ENDPOINT_DESTROY_ALL,
	BCM_ASYNC_ENTRY_SAT_ENDPOINT_GET,
	BCM_ASYNC_ENTRY_SAT_ENDPOINT_TRAVERSE,
	BCM_ASYNC_ENTRY_STAT_CLEAR,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_ADD,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_CHECK,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_DELETE,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_DELETE_ALL,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_GET,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_GROUP_CREATE,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_SET,
	BCM_ASYNC_ENTRY_STAT_FLEX_POOL_INFO_MULTI_GET,
	BCM_ASYNC_ENTRY_STAT_GET,
	BCM_ASYNC_ENTRY_STAT_GET32,
	BCM_ASYNC_ENTRY_STAT_GROUP_CREATE,
	BCM_ASYNC_ENTRY_STAT_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_STAT_GROUP_DUMP,
	BCM_ASYNC_ENTRY_STAT_GROUP_DUMP_ALL,
	BCM_ASYNC_ENTRY_STAT_GROUP_MODE_ID_CREATE,
	BCM_ASYNC_ENTRY_STAT_GROUP_MODE_ID_DESTROY,
	BCM_ASYNC_ENTRY_STAT_GROUP_MODE_ID_GET,
	BCM_ASYNC_ENTRY_STAT_ID_GET_ALL,
	BCM_ASYNC_ENTRY_STAT_INIT,
	BCM_ASYNC_ENTRY_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_STAT_SYNC,
	BCM_ASYNC_ENTRY_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_STAT_SYNC_MULTI_GET,
	BCM_ASYNC_ENTRY_STAT_SYNC_MULTI_GET32,
	BCM_ASYNC_ENTRY_STAT_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_STAT_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_STG_CLEAR,
	BCM_ASYNC_ENTRY_STG_COUNT_GET,
	BCM_ASYNC_ENTRY_STG_CREATE,
	BCM_ASYNC_ENTRY_STG_CREATE_ID,
	BCM_ASYNC_ENTRY_STG_DEFAULT_GET,
	BCM_ASYNC_ENTRY_STG_DEFAULT_SET,
	BCM_ASYNC_ENTRY_STG_DESTROY,
	BCM_ASYNC_ENTRY_STG_INIT,
	BCM_ASYNC_ENTRY_STG_LIST,
	BCM_ASYNC_ENTRY_STG_LIST_DESTROY,
	BCM_ASYNC_ENTRY_STG_STP_GET,
	BCM_ASYNC_ENTRY_STG_STP_SET,
	BCM_ASYNC_ENTRY_STG_VLAN_ADD,
	BCM_ASYNC_ENTRY_STG_VLAN_LIST,
	BCM_ASYNC_ENTRY_STG_VLAN_LIST_DESTROY,
	BCM_ASYNC_ENTRY_STG_VLAN_REMOVE,
	BCM_ASYNC_ENTRY_STG_VLAN_REMOVE_ALL,
	BCM_ASYNC_ENTRY_STK_DOMAIN_STK_TRUNK_ADD,
	BCM_ASYNC_ENTRY_STK_DOMAIN_STK_TRUNK_DELETE,
	BCM_ASYNC_ENTRY_STK_DOMAIN_STK_TRUNK_GET,
	BCM_ASYNC_ENTRY_STK_FABRIC_MAP_GET,
	BCM_ASYNC_ENTRY_STK_FABRIC_MAP_SET,
	BCM_ASYNC_ENTRY_STK_FMOD_LMOD_MAPPING_GET,
	BCM_ASYNC_ENTRY_STK_FMOD_LMOD_MAPPING_SET,
	BCM_ASYNC_ENTRY_STK_FMOD_SMOD_MAPPING_GET,
	BCM_ASYNC_ENTRY_STK_FMOD_SMOD_MAPPING_SET,
	BCM_ASYNC_ENTRY_STK_GPORT_SYSPORT_GET,
	BCM_ASYNC_ENTRY_STK_INIT,
	BCM_ASYNC_ENTRY_STK_MODE_GET,
	BCM_ASYNC_ENTRY_STK_MODE_SET,
	BCM_ASYNC_ENTRY_STK_MODID_CONFIG_GET,
	BCM_ASYNC_ENTRY_STK_MODID_CONFIG_SET,
	BCM_ASYNC_ENTRY_STK_MODID_COUNT,
	BCM_ASYNC_ENTRY_STK_MODID_DOMAIN_ADD,
	BCM_ASYNC_ENTRY_STK_MODID_DOMAIN_DELETE,
	BCM_ASYNC_ENTRY_STK_MODID_DOMAIN_GET,
	BCM_ASYNC_ENTRY_STK_MODID_GET,
	BCM_ASYNC_ENTRY_STK_MODID_SET,
	BCM_ASYNC_ENTRY_STK_MODMAP_ENABLE_GET,
	BCM_ASYNC_ENTRY_STK_MODMAP_ENABLE_SET,
	BCM_ASYNC_ENTRY_STK_MODMAP_MAP,
	BCM_ASYNC_ENTRY_STK_MODMAP_REGISTER,
	BCM_ASYNC_ENTRY_STK_MODMAP_UNREGISTER,
	BCM_ASYNC_ENTRY_STK_MODPORT_ADD,
	BCM_ASYNC_ENTRY_STK_MODPORT_CLEAR,
	BCM_ASYNC_ENTRY_STK_MODPORT_CLEAR_ALL,
	BCM_ASYNC_ENTRY_STK_MODPORT_DELETE,
	BCM_ASYNC_ENTRY_STK_MODPORT_GET,
	BCM_ASYNC_ENTRY_STK_MODPORT_GET_ALL,
	BCM_ASYNC_ENTRY_STK_MODPORT_REMOTE_MAP_GET,
	BCM_ASYNC_ENTRY_STK_MODPORT_REMOTE_MAP_SET,
	BCM_ASYNC_ENTRY_STK_MODPORT_SET,
	BCM_ASYNC_ENTRY_STK_MODULE_CONTROL_GET,
	BCM_ASYNC_ENTRY_STK_MODULE_CONTROL_SET,
	BCM_ASYNC_ENTRY_STK_MODULE_ENABLE,
	BCM_ASYNC_ENTRY_STK_MODULE_MAX_GET,
	BCM_ASYNC_ENTRY_STK_MODULE_MAX_SET,
	BCM_ASYNC_ENTRY_STK_MODULE_PROTOCOL_GET,
	BCM_ASYNC_ENTRY_STK_MODULE_PROTOCOL_SET,
	BCM_ASYNC_ENTRY_STK_MY_MODID_GET,
	BCM_ASYNC_ENTRY_STK_MY_MODID_SET,
	BCM_ASYNC_ENTRY_STK_PBMP_GET,
	BCM_ASYNC_ENTRY_STK_PORT_GET,
	BCM_ASYNC_ENTRY_STK_PORT_MODMAP_GROUP_GET,
	BCM_ASYNC_ENTRY_STK_PORT_MODMAP_GROUP_MAX_GET,
	BCM_ASYNC_ENTRY_STK_PORT_MODMAP_GROUP_SET,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_ADD,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_CLEAR,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_CLEAR_ALL,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_DELETE,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_GET,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_GET_ALL,
	BCM_ASYNC_ENTRY_STK_PORT_MODPORT_SET,
	BCM_ASYNC_ENTRY_STK_PORT_SET,
	BCM_ASYNC_ENTRY_STK_STEERING_CLEAR,
	BCM_ASYNC_ENTRY_STK_STEERING_CLEAR_ALL,
	BCM_ASYNC_ENTRY_STK_STEERING_MULTICAST_SET,
	BCM_ASYNC_ENTRY_STK_STEERING_UNICAST_SET,
	BCM_ASYNC_ENTRY_STK_SYSPORT_GPORT_GET,
	BCM_ASYNC_ENTRY_STK_SYSPORT_GPORT_SET,
	BCM_ASYNC_ENTRY_STK_SYSTEM_GPORT_MAP_CREATE,
	BCM_ASYNC_ENTRY_STK_SYSTEM_GPORT_MAP_DESTROY,
	BCM_ASYNC_ENTRY_STK_SYSTEM_GPORT_MAP_GET,
	BCM_ASYNC_ENTRY_STK_UCBITMAP_DEL,
	BCM_ASYNC_ENTRY_STK_UCBITMAP_GET,
	BCM_ASYNC_ENTRY_STK_UCBITMAP_SET,
	BCM_ASYNC_ENTRY_STK_UPDATE_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_STK_UPDATE_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_SUBPORT_CLEANUP,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_CREATE,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_GET,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_LINKPHY_CONFIG_GET,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_LINKPHY_CONFIG_SET,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_TRAVERSE,
	BCM_ASYNC_ENTRY_SUBPORT_INIT,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_ADD,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_DELETE,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_GET,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_STAT_GET,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_STAT_SET,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_GET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_PORT_GET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_PORT_SET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_SET,
	BCM_ASYNC_ENTRY_SWITCH_EVENT_CONTROL_GET,
	BCM_ASYNC_ENTRY_SWITCH_EVENT_CONTROL_SET,
	BCM_ASYNC_ENTRY_SWITCH_EVENT_REGISTER,
	BCM_ASYNC_ENTRY_SWITCH_EVENT_UNREGISTER,
	BCM_ASYNC_ENTRY_SWITCH_HASH_BANKS_CONFIG_GET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_BANKS_CONFIG_SET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_BANKS_MAX_GET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_CREATE,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_CREATE_QSET,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_DESTROY,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_INSTALL,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_REINSTALL,
	BCM_ASYNC_ENTRY_SWITCH_HASH_ENTRY_REMOVE,
	BCM_ASYNC_ENTRY_SWITCH_HASH_QUALIFY_DATA,
	BCM_ASYNC_ENTRY_SWITCH_IPV6_RESERVED_MULTICAST_ADDR_GET,
	BCM_ASYNC_ENTRY_SWITCH_IPV6_RESERVED_MULTICAST_ADDR_SET,
	BCM_ASYNC_ENTRY_SWITCH_L3_PROTOCOL_GROUP_GET,
	BCM_ASYNC_ENTRY_SWITCH_L3_PROTOCOL_GROUP_SET,
	BCM_ASYNC_ENTRY_SWITCH_NETWORK_GROUP_CONFIG_GET,
	BCM_ASYNC_ENTRY_SWITCH_NETWORK_GROUP_CONFIG_SET,
	BCM_ASYNC_ENTRY_SWITCH_OBJECT_COUNT_GET,
	BCM_ASYNC_ENTRY_SWITCH_OBJECT_COUNT_MULTI_GET,
	BCM_ASYNC_ENTRY_SWITCH_PKT_INFO_HASH_GET,
	BCM_ASYNC_ENTRY_SWITCH_RCPU_DECAP_PRIORITY_MAP_GET,
	BCM_ASYNC_ENTRY_SWITCH_RCPU_DECAP_PRIORITY_MAP_SET,
	BCM_ASYNC_ENTRY_SWITCH_RCPU_ENCAP_PRIORITY_MAP_GET,
	BCM_ASYNC_ENTRY_SWITCH_RCPU_ENCAP_PRIORITY_MAP_SET,
	BCM_ASYNC_ENTRY_SWITCH_SERVICE_GET,
	BCM_ASYNC_ENTRY_SWITCH_SERVICE_SET,
	BCM_ASYNC_ENTRY_SWITCH_STABLE_REGISTER,
	BCM_ASYNC_ENTRY_SWITCH_TEMPERATURE_MONITOR_GET,
	BCM_ASYNC_ENTRY_SWITCH_USER_BUFFER_READ,
	BCM_ASYNC_ENTRY_SWITCH_USER_BUFFER_WRITE,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_BINDINGS_GET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_BINDINGS_SET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_PHASE_CONTROL_GET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_PHASE_CONTROL_SET,
	BCM_ASYNC_ENTRY_TDPLL_DPLL_REFERENCE_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_HOLDOVER_QL_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_HOLDOVER_QL_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_MAC_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_MAC_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_QL_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_QL_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_RX_ENABLE_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_RX_ENABLE_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_RX_PORTBITMAP_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_RX_PORTBITMAP_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_RX_STATE_MACHINE,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_TX_ENABLE_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_TX_ENABLE_SET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_TX_PORTBITMAP_GET,
	BCM_ASYNC_ENTRY_TDPLL_ESMC_TX_PORTBITMAP_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_BEST_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_CONTROL,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_ENABLE_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_ENABLE_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_FREQUENCY_ERROR_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_FREQUENCY_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_FREQUENCY_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_L1MUX_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_L1MUX_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_LOCKOUT_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_LOCKOUT_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MAC_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MAC_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_INTERVAL_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_INTERVAL_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_THRESHOLD_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_MONITOR_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_PRIORITY_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_PRIORITY_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_QL_ENABLED_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_QL_ENABLED_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_QL_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_QL_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_REVERTIVE_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_REVERTIVE_SET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_SELECTOR_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_SELECTOR_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_THRESHOLD_STATE_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_VALID_GET,
	BCM_ASYNC_ENTRY_TDPLL_INPUT_CLOCK_VALID_SET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_DERIV_FREQUENCY_GET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_DERIV_FREQUENCY_SET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_ENABLE_GET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_ENABLE_SET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_HOLDOVER_DATA_GET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_HOLDOVER_FREQUENCY_SET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_HOLDOVER_MODE_GET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_HOLDOVER_MODE_SET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_HOLDOVER_RESET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_SYNTH_FREQUENCY_GET,
	BCM_ASYNC_ENTRY_TDPLL_OUTPUT_CLOCK_SYNTH_FREQUENCY_SET,
	BCM_ASYNC_ENTRY_TIME_CAPTURE_GET,
	BCM_ASYNC_ENTRY_TIME_DEINIT,
	BCM_ASYNC_ENTRY_TIME_HEARTBEAT_ENABLE_GET,
	BCM_ASYNC_ENTRY_TIME_HEARTBEAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_TIME_HEARTBEAT_REGISTER,
	BCM_ASYNC_ENTRY_TIME_HEARTBEAT_UNREGISTER,
	BCM_ASYNC_ENTRY_TIME_INIT,
	BCM_ASYNC_ENTRY_TIME_INTERFACE_ADD,
	BCM_ASYNC_ENTRY_TIME_INTERFACE_DELETE,
	BCM_ASYNC_ENTRY_TIME_INTERFACE_DELETE_ALL,
	BCM_ASYNC_ENTRY_TIME_INTERFACE_GET,
	BCM_ASYNC_ENTRY_TIME_INTERFACE_TRAVERSE,
	BCM_ASYNC_ENTRY_TIME_TRIGGER_ENABLE_GET,
	BCM_ASYNC_ENTRY_TIME_TRIGGER_ENABLE_SET,
	BCM_ASYNC_ENTRY_TOPO_PORT_GET,
	BCM_ASYNC_ENTRY_TRILL_CLEANUP,
	BCM_ASYNC_ENTRY_TRILL_INIT,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ADJACENCY_ADD,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ADJACENCY_DELETE,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ADJACENCY_DELETE_ALL,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ADJACENCY_TRAVERSE,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_DELETE_ALL,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ENTRY_ADD,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ENTRY_GET,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_ENTRY_TRAVERSE,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_SOURCE_ADD,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_SOURCE_DELETE,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_SOURCE_GET,
	BCM_ASYNC_ENTRY_TRILL_MULTICAST_SOURCE_TRAVERSE,
	BCM_ASYNC_ENTRY_TRILL_PORT_ADD,
	BCM_ASYNC_ENTRY_TRILL_PORT_DELETE,
	BCM_ASYNC_ENTRY_TRILL_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_TRILL_PORT_GET,
	BCM_ASYNC_ENTRY_TRILL_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_TRILL_RBRIDGE_ENTRY_ADD,
	BCM_ASYNC_ENTRY_TRILL_RBRIDGE_ENTRY_DELETE,
	BCM_ASYNC_ENTRY_TRILL_RBRIDGE_ENTRY_GET,
	BCM_ASYNC_ENTRY_TRILL_STAT_CLEAR,
	BCM_ASYNC_ENTRY_TRILL_STAT_GET,
	BCM_ASYNC_ENTRY_TRILL_STAT_GET32,
	BCM_ASYNC_ENTRY_TRILL_VPN_CREATE,
	BCM_ASYNC_ENTRY_TRILL_VPN_DESTROY,
	BCM_ASYNC_ENTRY_TRILL_VPN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_TRILL_VPN_GET,
	BCM_ASYNC_ENTRY_TRILL_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_TRUNK_BITMAP_EXPAND,
	BCM_ASYNC_ENTRY_TRUNK_CHIP_INFO_GET,
	BCM_ASYNC_ENTRY_TRUNK_CREATE,
	BCM_ASYNC_ENTRY_TRUNK_DESTROY,
	BCM_ASYNC_ENTRY_TRUNK_DETACH,
	BCM_ASYNC_ENTRY_TRUNK_EGRESS_GET,
	BCM_ASYNC_ENTRY_TRUNK_EGRESS_SET,
	BCM_ASYNC_ENTRY_TRUNK_ETHERTYPE_GET,
	BCM_ASYNC_ENTRY_TRUNK_ETHERTYPE_SET,
	BCM_ASYNC_ENTRY_TRUNK_FAILOVER_GET,
	BCM_ASYNC_ENTRY_TRUNK_FAILOVER_SET,
	BCM_ASYNC_ENTRY_TRUNK_FIND,
	BCM_ASYNC_ENTRY_TRUNK_GET,
	BCM_ASYNC_ENTRY_TRUNK_INIT,
	BCM_ASYNC_ENTRY_TRUNK_MCAST_JOIN,
	BCM_ASYNC_ENTRY_TRUNK_MEMBER_ADD,
	BCM_ASYNC_ENTRY_TRUNK_MEMBER_DELETE,
	BCM_ASYNC_ENTRY_TRUNK_MEMBER_DELETE_ALL,
	BCM_ASYNC_ENTRY_TRUNK_MEMBER_STATUS_GET,
	BCM_ASYNC_ENTRY_TRUNK_MEMBER_STATUS_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_IPMC_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_IPMC_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_MCAST_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_MCAST_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_UCAST_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_UCAST_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_VLAN_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_VLAN_SET,
	BCM_ASYNC_ENTRY_TRUNK_POOL_GET,
	BCM_ASYNC_ENTRY_TRUNK_POOL_SET,
	BCM_ASYNC_ENTRY_TRUNK_PSC_GET,
	BCM_ASYNC_ENTRY_TRUNK_PSC_SET,
	BCM_ASYNC_ENTRY_TRUNK_RESILIENT_REPLACE,
	BCM_ASYNC_ENTRY_TRUNK_RESILIENT_TRAVERSE,
	BCM_ASYNC_ENTRY_TRUNK_SET,
	BCM_ASYNC_ENTRY_TUNNEL_CONFIG_GET,
	BCM_ASYNC_ENTRY_TUNNEL_CONFIG_SET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_CREATE,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_DESTROY,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_GET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_PORT_GET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_PORT_SET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_SET,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_CLEAR,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_SET,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_ADD,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_CREATE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_DELETE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_GET,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_UPDATE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_VLAN_GET,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_VLAN_SET,
	BCM_ASYNC_ENTRY_TX,
	BCM_ASYNC_ENTRY_TX_ARRAY,
	BCM_ASYNC_ENTRY_TX_CPU_TUNNEL,
	BCM_ASYNC_ENTRY_TX_CPU_TUNNEL_GET,
	BCM_ASYNC_ENTRY_TX_CPU_TUNNEL_SET,
	BCM_ASYNC_ENTRY_TX_DV_DUMP,
	BCM_ASYNC_ENTRY_TX_INIT,
	BCM_ASYNC_ENTRY_TX_LIST,
	BCM_ASYNC_ENTRY_TX_PKT_L2_MAP,
	BCM_ASYNC_ENTRY_TX_PKT_SETUP,
	BCM_ASYNC_ENTRY_TX_SHOW,
	BCM_ASYNC_ENTRY_TXBEACON_DESTROY,
	BCM_ASYNC_ENTRY_TXBEACON_INIT,
	BCM_ASYNC_ENTRY_TXBEACON_PKT_GET,
	BCM_ASYNC_ENTRY_TXBEACON_PKT_SETUP,
	BCM_ASYNC_ENTRY_TXBEACON_START,
	BCM_ASYNC_ENTRY_TXBEACON_STOP,
	BCM_ASYNC_ENTRY_TXBEACON_TRAVERSE,
	BCM_ASYNC_ENTRY_UDF_CREATE,
	BCM_ASYNC_ENTRY_UDF_DESTROY,
	BCM_ASYNC_ENTRY_UDF_DETACH,
	BCM_ASYNC_ENTRY_UDF_GET,
	BCM_ASYNC_ENTRY_UDF_GET_ALL,
	BCM_ASYNC_ENTRY_UDF_INIT,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_ADD,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_CREATE,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_DELETE,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_DELETE_ALL,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_DESTROY,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_GET,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_GET_ALL,
	BCM_ASYNC_ENTRY_UDF_PKT_FORMAT_INFO_GET,
	BCM_ASYNC_ENTRY_VLAN_BLOCK_GET,
	BCM_ASYNC_ENTRY_VLAN_BLOCK_SET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_GET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_PORT_GET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_PORT_SET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_SET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_VLAN_GET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_VLAN_SELECTIVE_GET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_VLAN_SELECTIVE_SET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_VLAN_SET,
	BCM_ASYNC_ENTRY_VLAN_CREATE,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_ADD,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_DELETE,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_DEFAULT_GET,
	BCM_ASYNC_ENTRY_VLAN_DEFAULT_SET,
	BCM_ASYNC_ENTRY_VLAN_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VLAN_DTAG_ADD,
	BCM_ASYNC_ENTRY_VLAN_DTAG_DELETE,
	BCM_ASYNC_ENTRY_VLAN_DTAG_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_DTAG_GET,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_ADD,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_GET,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_DTAG_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_EGRESS_POLICER_GET,
	BCM_ASYNC_ENTRY_VLAN_EGRESS_POLICER_SET,
	BCM_ASYNC_ENTRY_VLAN_GPORT_ADD,
	BCM_ASYNC_ENTRY_VLAN_GPORT_DELETE,
	BCM_ASYNC_ENTRY_VLAN_GPORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_GPORT_GET,
	BCM_ASYNC_ENTRY_VLAN_GPORT_GET_ALL,
	BCM_ASYNC_ENTRY_VLAN_GPORT_INFO_GET,
	BCM_ASYNC_ENTRY_VLAN_INIT,
	BCM_ASYNC_ENTRY_VLAN_IP_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_IP_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_IP_ACTION_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_IP_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_IP_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_IP_ADD,
	BCM_ASYNC_ENTRY_VLAN_IP_DELETE,
	BCM_ASYNC_ENTRY_VLAN_IP_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_LIST,
	BCM_ASYNC_ENTRY_VLAN_LIST_BY_PBMP,
	BCM_ASYNC_ENTRY_VLAN_LIST_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_MAC_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_MAC_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_MAC_ACTION_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_MAC_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_MAC_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_MAC_ADD,
	BCM_ASYNC_ENTRY_VLAN_MAC_DELETE,
	BCM_ASYNC_ENTRY_VLAN_MAC_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_MCAST_FLOOD_GET,
	BCM_ASYNC_ENTRY_VLAN_MCAST_FLOOD_SET,
	BCM_ASYNC_ENTRY_VLAN_POLICER_GET,
	BCM_ASYNC_ENTRY_VLAN_POLICER_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_ADD,
	BCM_ASYNC_ENTRY_VLAN_PORT_CREATE,
	BCM_ASYNC_ENTRY_VLAN_PORT_DEFAULT_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_PORT_DEFAULT_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_DEFAULT_ACTION_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_PORT_EGRESS_DEFAULT_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_PORT_EGRESS_DEFAULT_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_EGRESS_DEFAULT_ACTION_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_EGRESS_POLICER_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_EGRESS_POLICER_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_FIND,
	BCM_ASYNC_ENTRY_VLAN_PORT_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_POLICER_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_POLICER_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_PORT_REMOVE,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_ENABLE_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_GET32,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_STAT_SET32,
	BCM_ASYNC_ENTRY_VLAN_PORT_TRANSLATION_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_TRANSLATION_SET,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_ATTACH,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_ATTACH_GET,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_CREATE,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_DETACH,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_DETACH_ALL,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_GET,
	BCM_ASYNC_ENTRY_VLAN_QUEUE_MAP_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_ATTACH,
	BCM_ASYNC_ENTRY_VLAN_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_DETACH,
	BCM_ASYNC_ENTRY_VLAN_STAT_DETACH_WITH_ID,
	BCM_ASYNC_ENTRY_VLAN_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_GET32,
	BCM_ASYNC_ENTRY_VLAN_STAT_ID_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VLAN_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VLAN_STAT_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_SET32,
	BCM_ASYNC_ENTRY_VLAN_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_VLAN_STG_GET,
	BCM_ASYNC_ENTRY_VLAN_STG_SET,
	BCM_ASYNC_ENTRY_VLAN_STP_GET,
	BCM_ASYNC_ENTRY_VLAN_STP_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_CLASS_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_CLASS_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_CREATE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ID_CREATE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ID_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ID_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ID_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ID_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_ATTACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_DETACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_ID_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_SET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_ATTACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_DETACH,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_ID_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_SET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_SYNC_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_SYNC_GET32,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_VECTOR_FLAGS_SET,
	BCM_ASYNC_ENTRY_VLAN_VECTOR_STP_SET,
	BCM_ASYNC_ENTRY_VSWITCH_CREATE,
	BCM_ASYNC_ENTRY_VSWITCH_CREATE_WITH_ID,
	BCM_ASYNC_ENTRY_VSWITCH_CROSS_CONNECT_ADD,
	BCM_ASYNC_ENTRY_VSWITCH_CROSS_CONNECT_DELETE,
	BCM_ASYNC_ENTRY_VSWITCH_CROSS_CONNECT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VSWITCH_CROSS_CONNECT_GET,
	BCM_ASYNC_ENTRY_VSWITCH_CROSS_CONNECT_TRAVERSE,
	BCM_ASYNC_ENTRY_VSWITCH_DESTROY,
	BCM_ASYNC_ENTRY_VSWITCH_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VSWITCH_DETACH,
	BCM_ASYNC_ENTRY_VSWITCH_INIT,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_ADD,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_DELETE,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_GET,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_VXLAN_CLEANUP,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_ATTACH,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_DETACH,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_ID_GET,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VXLAN_DIP_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VXLAN_INIT,
	BCM_ASYNC_ENTRY_VXLAN_PORT_ADD,
	BCM_ASYNC_ENTRY_VXLAN_PORT_DELETE,
	BCM_ASYNC_ENTRY_VXLAN_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VXLAN_PORT_GET,
	BCM_ASYNC_ENTRY_VXLAN_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_VXLAN_STAT_ATTACH,
	BCM_ASYNC_ENTRY_VXLAN_STAT_COUNTER_GET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_COUNTER_SET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_COUNTER_SYNC_GET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_DETACH,
	BCM_ASYNC_ENTRY_VXLAN_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_ID_GET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_MULTI_GET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_MULTI_GET32,
	BCM_ASYNC_ENTRY_VXLAN_STAT_MULTI_SET,
	BCM_ASYNC_ENTRY_VXLAN_STAT_MULTI_SET32,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_INITIATOR_DESTROY,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_INITIATOR_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_INITIATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_CREATE,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_DESTROY,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_GET,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_TRAVERSE,
	BCM_ASYNC_ENTRY_VXLAN_TUNNEL_TERMINATOR_UPDATE,
	BCM_ASYNC_ENTRY_VXLAN_VPN_CREATE,
	BCM_ASYNC_ENTRY_VXLAN_VPN_DESTROY,
	BCM_ASYNC_ENTRY_VXLAN_VPN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VXLAN_VPN_GET,
	BCM_ASYNC_ENTRY_VXLAN_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_WLAN_CLIENT_ADD,
	BCM_ASYNC_ENTRY_WLAN_CLIENT_DELETE,
	BCM_ASYNC_ENTRY_WLAN_CLIENT_DELETE_ALL,
	BCM_ASYNC_ENTRY_WLAN_CLIENT_GET,
	BCM_ASYNC_ENTRY_WLAN_CLIENT_TRAVERSE,
	BCM_ASYNC_ENTRY_WLAN_DETACH,
	BCM_ASYNC_ENTRY_WLAN_INIT,
	BCM_ASYNC_ENTRY_WLAN_PORT_ADD,
	BCM_ASYNC_ENTRY_WLAN_PORT_DELETE,
	BCM_ASYNC_ENTRY_WLAN_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_WLAN_PORT_GET,
	BCM_ASYNC_ENTRY_WLAN_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_WLAN_TUNNEL_INITIATOR_CREATE,
	BCM_ASYNC_ENTRY_WLAN_TUNNEL_INITIATOR_DESTROY,
	BCM_ASYNC_ENTRY_WLAN_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_COUNT
} bcm_async_entry_t;

#endif	/* BCM_ASYNC_SUPPORT */
#endif	/* !_BCM_INT_ASYNC_REQ_H */
