/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: 571e98963441a6fb67f54ecda649b6f77d1ec547 $
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * File:	xasync_req.h
 * Purpose:	Async BCMX - request structure
 * Generator:	mkdispatch 1.54
 * Generated:	Thu Feb 21 13:03:48 2013
 */

#ifndef	_BCM_INT_XASYNC_REQ_H
#define	_BCM_INT_XASYNC_REQ_H

#include <bcm/types.h>
#include <bcmx/async.h>
#include <bcmx/auth.h>
#include <bcmx/bcmx.h>
#include <bcmx/cosq.h>
#include <bcmx/custom.h>
#include <bcmx/failover.h>
#include <bcmx/field.h>
#include <bcmx/ipfix.h>
#include <bcmx/ipmc.h>
#include <bcmx/l2.h>
#include <bcmx/l3.h>
#include <bcmx/link.h>
#include <bcmx/mcast.h>
#include <bcmx/mim.h>
#include <bcmx/mirror.h>
#include <bcmx/mpls.h>
#include <bcmx/multicast.h>
#include <bcmx/niv.h>
#include <bcmx/oam.h>
#include <bcmx/policer.h>
#include <bcmx/port.h>
#include <bcmx/proxy.h>
#include <bcmx/qos.h>
#include <bcmx/rate.h>
#include <bcmx/rx.h>
#include <bcmx/stat.h>
#include <bcmx/stg.h>
#include <bcmx/subport.h>
#include <bcmx/switch.h>
#include <bcmx/trill.h>
#include <bcmx/trunk.h>
#include <bcmx/tunnel.h>
#include <bcmx/tx.h>
#include <bcmx/vlan.h>
#include <bcmx/wlan.h>

#ifdef	BCM_ASYNC_SUPPORT

typedef struct bcmx_async_req_s {
	struct bcmx_async_req_s *next;
	int type;
	void (*run)(struct bcmx_async_req_s *);
	bcmx_async_cb_t callback;
	void *cookie;
	union {
		struct {
			bcmx_lport_t port;
			int * enable;
		} auth_egress_get;
		struct {
			bcmx_lport_t port;
			int enable;
		} auth_egress_set;
		struct {
			bcmx_lport_t port;
			uint8 * mac;
		} auth_mac_add;
		struct {
			bcmx_lport_t port;
			uint8 * mac;
		} auth_mac_delete;
		struct {
			bcmx_lport_t port;
		} auth_mac_delete_all;
		struct {
			bcmx_lport_t port;
			uint32 * modep;
		} auth_mode_get;
		struct {
			bcmx_lport_t port;
			uint32 mode;
		} auth_mode_set;
		struct {
			bcmx_auth_cb_t func;
			void * cookie;
		} auth_unauth_callback;
		struct {
			int * numq;
		} cosq_config_get;
		struct {
			int numq;
		} cosq_config_set;
		struct {
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			bcm_cosq_control_t type;
			int * arg;
		} cosq_control_get;
		struct {
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			bcm_cosq_control_t type;
			int arg;
		} cosq_control_set;
		struct {
			uint32 * flags;
		} cosq_discard_get;
		struct {
			bcmx_lport_t port;
			bcm_cos_queue_t cosq;
			uint32 color;
			int * drop_start;
			int * drop_slope;
			int * average_time;
		} cosq_discard_port_get;
		struct {
			bcmx_lport_t port;
			bcm_cos_queue_t cosq;
			uint32 color;
			int drop_start;
			int drop_slope;
			int average_time;
		} cosq_discard_port_set;
		struct {
			uint32 flags;
		} cosq_discard_set;
		struct {
			bcm_gport_t port;
			int numq;
			uint32 flags;
			bcm_gport_t * gport;
		} cosq_gport_add;
		struct {
			bcm_gport_t sched_port;
			bcm_gport_t input_port;
			bcm_cos_queue_t cosq;
		} cosq_gport_attach;
		struct {
			bcm_gport_t sched_port;
			bcm_gport_t * input_port;
			bcm_cos_queue_t * cosq;
		} cosq_gport_attach_get;
		struct {
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 * kbits_sec_min;
			uint32 * kbits_sec_max;
			uint32 * flags;
		} cosq_gport_bandwidth_get;
		struct {
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 kbits_sec_min;
			uint32 kbits_sec_max;
			uint32 flags;
		} cosq_gport_bandwidth_set;
		struct {
			bcm_gport_t gport;
		} cosq_gport_delete;
		struct {
			bcm_gport_t gport;
			bcm_gport_t ingress_port;
			bcm_module_t dest_modid;
			int fabric_egress_port;
		} cosq_gport_destmod_attach;
		struct {
			bcm_gport_t gport;
			bcm_gport_t ingress_port;
			bcm_module_t dest_modid;
			int fabric_egress_port;
		} cosq_gport_destmod_detach;
		struct {
			bcm_gport_t sched_port;
			bcm_gport_t input_port;
			bcm_cos_queue_t cosq;
		} cosq_gport_detach;
		struct {
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcmx_cosq_gport_discard_t * discard;
		} cosq_gport_discard_get;
		struct {
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcmx_cosq_gport_discard_t * discard;
		} cosq_gport_discard_set;
		struct {
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int * mode;
			int * weight;
		} cosq_gport_sched_get;
		struct {
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int mode;
			int weight;
		} cosq_gport_sched_set;
		struct {
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} cosq_mapping_get;
		struct {
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} cosq_mapping_set;
		struct {
			bcmx_lport_t port;
			bcm_cos_queue_t cosq;
			uint32 * kbits_sec_min;
			uint32 * kbits_sec_max;
			uint32 * flags;
		} cosq_port_bandwidth_get;
		struct {
			bcmx_lport_t port;
			bcm_cos_queue_t cosq;
			uint32 kbits_sec_min;
			uint32 kbits_sec_max;
			uint32 flags;
		} cosq_port_bandwidth_set;
		struct {
			bcmx_lport_t port;
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} cosq_port_mapping_get;
		struct {
			bcmx_lport_t port;
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} cosq_port_mapping_set;
		struct {
			bcmx_lplist_t lplist;
			int * mode;
			int * weights;
			int * delay;
		} cosq_port_sched_get;
		struct {
			bcmx_lplist_t lplist;
			int mode;
			int * weights;
			int delay;
		} cosq_port_sched_set;
		struct {
			int * mode;
			int * weights;
			int * delay;
		} cosq_sched_get;
		struct {
			int mode;
			int * weights;
			int delay;
		} cosq_sched_set;
		struct {
			int mode;
			int * weight_max;
		} cosq_sched_weight_max_get;
		struct {
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint64 * value;
		} cosq_stat_get;
		struct {
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint32 * value;
		} cosq_stat_get32;
		struct {
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint64 value;
		} cosq_stat_set;
		struct {
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_stat_t stat;
			uint32 value;
		} cosq_stat_set32;
		struct {
			bcmx_lport_t port;
			int type;
			int max_len;
			uint32 * args;
			int * actual_len;
		} custom_port_get;
		struct {
			bcmx_lport_t port;
			int type;
			int len;
			uint32 * args;
		} custom_port_set;
		struct {
			int type;
			int max_len;
			uint32 * args;
			int * actual_len;
		} custom_unit_get;
		struct {
			int type;
			int len;
			uint32 * args;
		} custom_unit_set;
		struct {
			int unit;
		} device_attach;
		struct {
			int unit;
		} device_detach;
		struct {
			uint32 flags;
			bcm_failover_t * failover_id;
		} failover_create;
		struct {
			bcm_failover_t failover_id;
		} failover_destroy;
		struct {
			bcm_failover_t failover_id;
			int * enable;
		} failover_get;
		struct {
			bcm_failover_t failover_id;
			int enable;
		} failover_set;
		struct {
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} field_action_add;
		struct {
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} field_action_delete;
		struct {
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 * param0;
			uint32 * param1;
		} field_action_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint8 * mac;
		} field_action_mac_add;
		struct {
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_mac_t * mac;
		} field_action_mac_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcmx_lplist_t lplist;
		} field_action_ports_add;
		struct {
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcmx_lplist_t * lplist;
		} field_action_ports_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_action_t action;
		} field_action_remove;
		struct {
			bcm_field_entry_t entry;
		} field_action_remove_all;
		struct {
			bcm_field_control_t control;
			uint32 * state;
		} field_control_get;
		struct {
			bcm_field_control_t control;
			uint32 state;
		} field_control_set;
		struct {
			bcmx_field_data_qualifier_t * data_qualifier;
		} field_data_qualifier_create;
		struct {
			int qual_id;
		} field_data_qualifier_destroy;
		struct {
			int qual_id;
			bcmx_field_data_ethertype_t * etype;
		} field_data_qualifier_ethertype_add;
		struct {
			int qual_id;
			bcmx_field_data_ethertype_t * etype;
		} field_data_qualifier_ethertype_delete;
		struct {
			int qual_id;
			bcmx_field_data_qualifier_t * qual;
		} field_data_qualifier_get;
		struct {
			int qual_id;
			bcmx_field_data_ip_protocol_t * ip_protocol;
		} field_data_qualifier_ip_protocol_add;
		struct {
			int qual_id;
			bcmx_field_data_ip_protocol_t * ip_protocol;
		} field_data_qualifier_ip_protocol_delete;
		struct {
			int qual_size;
			int * qual_array;
			int * qual_count;
		} field_data_qualifier_multi_get;
		struct {
			int qual_id;
			bcmx_field_data_packet_format_t * packet_format;
		} field_data_qualifier_packet_format_add;
		struct {
			int qual_id;
			bcmx_field_data_packet_format_t * packet_format;
		} field_data_qualifier_packet_format_delete;
		struct {
			bcm_field_entry_t src_entry;
			bcm_field_entry_t * dst_entry;
		} field_entry_copy;
		struct {
			bcm_field_group_t group;
			bcm_field_entry_t * entry;
		} field_entry_create;
		struct {
			bcm_field_group_t group;
			bcm_field_entry_t entry;
		} field_entry_create_id;
		struct {
			bcm_field_entry_t entry;
		} field_entry_destroy;
		struct {
			bcm_field_entry_t entry;
		} field_entry_install;
		struct {
			bcm_field_group_t group;
			int entry_size;
			bcm_field_entry_t * entry_array;
			int * entry_count;
		} field_entry_multi_get;
		struct {
			bcm_field_entry_t entry_id;
			int level;
			bcm_policer_t policer_id;
		} field_entry_policer_attach;
		struct {
			bcm_field_entry_t entry_id;
			int level;
		} field_entry_policer_detach;
		struct {
			bcm_field_entry_t entry_id;
		} field_entry_policer_detach_all;
		struct {
			bcm_field_entry_t entry_id;
			int level;
			bcm_policer_t * policer_id;
		} field_entry_policer_get;
		struct {
			bcm_field_entry_t entry;
			int * prio;
		} field_entry_prio_get;
		struct {
			bcm_field_entry_t entry;
			int prio;
		} field_entry_prio_set;
		struct {
			bcm_field_entry_t entry;
		} field_entry_reinstall;
		struct {
			bcm_field_entry_t entry;
		} field_entry_remove;
		struct {
			bcm_field_entry_t entry;
			int stat_id;
		} field_entry_stat_attach;
		struct {
			bcm_field_entry_t entry;
			int stat_id;
		} field_entry_stat_detach;
		struct {
			bcm_field_entry_t entry;
			int * stat_id;
		} field_entry_stat_get;
		struct {
			bcm_field_group_t group;
		} field_group_compress;
		struct {
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_t * group;
		} field_group_create;
		struct {
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_t group;
		} field_group_create_id;
		struct {
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_create_mode;
		struct {
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_create_mode_id;
		struct {
			bcm_field_group_t group;
		} field_group_destroy;
		struct {
			bcm_field_group_t group;
			int * enable;
		} field_group_enable_get;
		struct {
			bcm_field_group_t group;
			int enable;
		} field_group_enable_set;
		struct {
			bcm_field_group_t group;
			bcm_field_qset_t * qset;
		} field_group_get;
		struct {
			bcm_field_group_t group;
		} field_group_install;
		struct {
			bcm_field_group_t group;
			bcm_field_group_mode_t * mode;
		} field_group_mode_get;
		struct {
			bcmx_lport_t port;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_port_create_mode;
		struct {
			bcmx_lport_t port;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_port_create_mode_id;
		struct {
			bcmx_lplist_t lplist;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_ports_create_mode;
		struct {
			bcmx_lplist_t lplist;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_ports_create_mode_id;
		struct {
			bcm_field_group_t group;
			int * priority;
		} field_group_priority_get;
		struct {
			bcm_field_group_t group;
			int priority;
		} field_group_priority_set;
		struct {
			bcm_field_group_t group;
		} field_group_remove;
		struct {
			bcm_field_group_t group;
			bcm_field_qset_t qset;
		} field_group_set;
		struct {
			bcm_field_group_traverse_cb callback;
			void * user_data;
		} field_group_traverse;
		struct {
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_wlan_create_mode;
		struct {
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_wlan_create_mode_id;
		struct {
			bcm_field_qset_t * qset;
			int qual_id;
		} field_qset_data_qualifier_add;
		struct {
			bcm_field_qset_t * qset;
			int qual_max;
			int * qual_arr;
			int * qual_count;
		} field_qset_data_qualifier_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_qualify_t qual_id;
		} field_qualifier_delete;
		struct {
			bcm_field_entry_t entry;
			uint32 * flag;
			uint32 * size;
		} field_qualify_BigIcmpCheck_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_CnTag;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_CnTag_get;
		struct {
			bcm_field_entry_t entry;
			uint8 color;
		} field_qualify_Color;
		struct {
			bcm_field_entry_t entry;
			uint8 * color;
		} field_qualify_Color_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DSCP;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DSCP_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_decap_t decap;
		} field_qualify_Decap;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DosAttack;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DosAttack_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Drop;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Drop_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassField;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstClassField_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassL2;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstClassL2_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassL3;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_DstClassL3_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DstHiGig;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstHiGig_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_DstIp;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIp6;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIp6High;
		struct {
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_DstIp6High_get;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIp6Low;
		struct {
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_DstIp6Low_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_DstIp6_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_DstIp_get;
		struct {
			bcm_field_entry_t entry;
			bcm_if_t if_id;
		} field_qualify_DstL3Egress;
		struct {
			bcm_field_entry_t entry;
			bcm_if_t * if_id;
		} field_qualify_DstL3Egress_get;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstMac;
		struct {
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_DstMac_get;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t mim_port_id;
		} field_qualify_DstMimGport;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t * mim_port_id;
		} field_qualify_DstMimGport_get;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t mpls_port_id;
		} field_qualify_DstMplsGport;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t * mpls_port_id;
		} field_qualify_DstMplsGport_get;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t group;
		} field_qualify_DstMulticastGroup;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t * group;
		} field_qualify_DstMulticastGroup_get;
		struct {
			bcm_field_entry_t entry;
			bcm_if_t mpintf;
		} field_qualify_DstMultipath;
		struct {
			bcm_field_entry_t entry;
			bcm_if_t * mpintf;
		} field_qualify_DstMultipath_get;
		struct {
			bcm_field_entry_t entry;
			bcmx_lport_t port;
		} field_qualify_DstPort;
		struct {
			bcm_field_entry_t entry;
			bcm_module_t * data_modid;
			bcm_module_t * mask_modid;
			bcm_port_t * data_port;
			bcm_port_t * mask_port;
		} field_qualify_DstPort_get;
		struct {
			bcm_field_entry_t entry;
			bcm_trunk_t tid;
		} field_qualify_DstTrunk;
		struct {
			bcm_field_entry_t entry;
			bcm_trunk_t * data;
			bcm_trunk_t * mask;
		} field_qualify_DstTrunk_get;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t wlan_port_id;
		} field_qualify_DstWlanGport;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t * wlan_port_id;
		} field_qualify_DstWlanGport_get;
		struct {
			bcm_field_entry_t entry;
			uint32 flag;
		} field_qualify_EqualL4Port;
		struct {
			bcm_field_entry_t entry;
			uint32 * flag;
		} field_qualify_EqualL4Port_get;
		struct {
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EtherType;
		struct {
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_EtherType_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExtensionHeader2Type;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExtensionHeader2Type_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExtensionHeaderSubCode;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExtensionHeaderSubCode_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExtensionHeaderType;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ExtensionHeaderType_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_FabricQueueTag;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_FabricQueueTag_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t fibre_chan_type;
		} field_qualify_FibreChanInner;
		struct {
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t * fibre_chan_type;
		} field_qualify_FibreChanInner_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t fibre_chan_type;
		} field_qualify_FibreChanOuter;
		struct {
			bcm_field_entry_t entry;
			bcm_field_FibreChan_t * fibre_chan_type;
		} field_qualify_FibreChanOuter_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_ForwardingType_t type;
		} field_qualify_ForwardingType;
		struct {
			bcm_field_entry_t entry;
			bcm_field_ForwardingType_t * type;
		} field_qualify_ForwardingType_get;
		struct {
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_ForwardingVlanId;
		struct {
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_ForwardingVlanId_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ForwardingVlanValid;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_ForwardingVlanValid_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGig;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_HiGig_get;
		struct {
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_IcmpTypeCode_get;
		struct {
			bcm_field_entry_t entry;
			uint16 * data;
			uint16 * mask;
		} field_qualify_IgmpTypeMaxRespTime_get;
		struct {
			bcm_field_entry_t entry;
			bcmx_lport_t port;
		} field_qualify_InPort;
		struct {
			bcm_field_entry_t entry;
			bcm_port_t * data;
			bcm_port_t * mask;
		} field_qualify_InPort_get;
		struct {
			bcm_field_entry_t entry;
			bcmx_lplist_t lplist;
		} field_qualify_InPorts;
		struct {
			bcm_field_entry_t entry;
			bcm_pbmp_t * data;
			bcm_pbmp_t * mask;
		} field_qualify_InPorts_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IngressStpState;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IngressStpState_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerDSCP;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDSCP_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_InnerDstIp;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDstIp6;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDstIp6High;
		struct {
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerDstIp6High_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerDstIp6_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_InnerDstIp_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InnerIp6FlowLabel;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InnerIp6FlowLabel_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t frag_info;
		} field_qualify_InnerIpFrag;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t * frag_info;
		} field_qualify_InnerIpFrag_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerIpProtocol;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t protocol;
		} field_qualify_InnerIpProtocolCommon;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t * protocol;
		} field_qualify_InnerIpProtocolCommon_get;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerIpProtocol_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpType_t type;
		} field_qualify_InnerIpType;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpType_t * type;
		} field_qualify_InnerIpType_get;
		struct {
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_InnerL4DstPort;
		struct {
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_InnerL4DstPort_get;
		struct {
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_InnerL4SrcPort;
		struct {
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_InnerL4SrcPort_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_InnerSrcIp;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerSrcIp6;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerSrcIp6High;
		struct {
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerSrcIp6High_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_InnerSrcIp6_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_InnerSrcIp_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerTos;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerTos_get;
		struct {
			bcm_field_entry_t entry;
			uint16 tpid;
		} field_qualify_InnerTpid;
		struct {
			bcm_field_entry_t entry;
			uint16 * tpid;
		} field_qualify_InnerTpid_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerTtl;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerTtl_get;
		struct {
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_InnerVlan;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerVlanCfi;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerVlanCfi_get;
		struct {
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_InnerVlanId;
		struct {
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_InnerVlanId_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerVlanPri;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerVlanPri_get;
		struct {
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_InnerVlan_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IntPriority;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IntPriority_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassL2;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceClassL2_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassL3;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceClassL3_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassPort;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_InterfaceClassPort_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_Ip6FlowLabel;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_Ip6FlowLabel_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6HopLimit;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6HopLimit_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6NextHeader;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6NextHeader_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6TrafficClass;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ip6TrafficClass_get;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpAuth_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpFlags;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpFlags_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t frag_info;
		} field_qualify_IpFrag;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t * frag_info;
		} field_qualify_IpFrag_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IpInfo;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_IpInfo_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpProtocol;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t protocol;
		} field_qualify_IpProtocolCommon;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t * protocol;
		} field_qualify_IpProtocolCommon_get;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpProtocol_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpType_t type;
		} field_qualify_IpType;
		struct {
			bcm_field_entry_t entry;
			bcm_field_IpType_t * type;
		} field_qualify_IpType_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpmcStarGroupHit;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_IpmcStarGroupHit_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2CacheHit;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2CacheHit_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2DestHit;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2DestHit_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_L2Format_t type;
		} field_qualify_L2Format;
		struct {
			bcm_field_entry_t entry;
			bcm_field_L2Format_t * type;
		} field_qualify_L2Format_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data1;
			uint32 data2;
			uint32 mask1;
			uint32 mask2;
		} field_qualify_L2PayloadFirstEightBytes;
		struct {
			bcm_field_entry_t entry;
			uint32 * data1;
			uint32 * data2;
			uint32 * mask1;
			uint32 * mask2;
		} field_qualify_L2PayloadFirstEightBytes_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2SrcHit;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2SrcHit_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2SrcStatic;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2SrcStatic_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2StationMove;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L2StationMove_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3DestHostHit;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3DestHostHit_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3DestRouteHit;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3DestRouteHit_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_L3Ingress;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_L3Ingress_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3Routable;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3Routable_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3SrcHostHit;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L3SrcHostHit_get;
		struct {
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_L4DstPort;
		struct {
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_L4DstPort_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L4Ports;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_L4Ports_get;
		struct {
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_L4SrcPort;
		struct {
			bcm_field_entry_t entry;
			bcm_l4_port_t * data;
			bcm_l4_port_t * mask;
		} field_qualify_L4SrcPort_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_llc_header_t data;
			bcm_field_llc_header_t mask;
		} field_qualify_Llc;
		struct {
			bcm_field_entry_t entry;
			bcm_field_llc_header_t * data;
			bcm_field_llc_header_t * mask;
		} field_qualify_Llc_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Loopback;
		struct {
			bcm_field_entry_t entry;
			bcm_field_LoopbackType_t loopback_type;
		} field_qualify_LoopbackType;
		struct {
			bcm_field_entry_t entry;
			bcm_field_LoopbackType_t * loopback_type;
		} field_qualify_LoopbackType_get;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Loopback_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MHOpcode;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MHOpcode_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MirrorCopy;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MirrorCopy_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsTerminated;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MplsTerminated_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MyStationHit;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_MyStationHit_get;
		struct {
			bcm_field_entry_t entry;
			bcmx_lport_t port;
		} field_qualify_OutPort;
		struct {
			bcm_field_entry_t entry;
			bcm_port_t * data;
			bcm_port_t * mask;
		} field_qualify_OutPort_get;
		struct {
			bcm_field_entry_t entry;
			bcmx_lplist_t lplist;
		} field_qualify_OutPorts;
		struct {
			bcm_field_entry_t entry;
			bcm_pbmp_t * data;
			bcm_pbmp_t * mask;
		} field_qualify_OutPorts_get;
		struct {
			bcm_field_entry_t entry;
			uint16 tpid;
		} field_qualify_OuterTpid;
		struct {
			bcm_field_entry_t entry;
			uint16 * tpid;
		} field_qualify_OuterTpid_get;
		struct {
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_OuterVlan;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterVlanCfi;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterVlanCfi_get;
		struct {
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_OuterVlanId;
		struct {
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_OuterVlanId_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_OuterVlanPri;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_OuterVlanPri_get;
		struct {
			bcm_field_entry_t entry;
			bcm_vlan_t * data;
			bcm_vlan_t * mask;
		} field_qualify_OuterVlan_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PacketRes;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_PacketRes_get;
		struct {
			bcm_field_entry_t entry;
			int range;
			int result;
		} field_qualify_RangeCheck;
		struct {
			bcm_field_entry_t entry;
			int max_count;
			bcm_field_range_t * range;
			int * invert;
			int * count;
		} field_qualify_RangeCheck_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_snap_header_t data;
			bcm_field_snap_header_t mask;
		} field_qualify_Snap;
		struct {
			bcm_field_entry_t entry;
			bcm_field_snap_header_t * data;
			bcm_field_snap_header_t * mask;
		} field_qualify_Snap_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassField;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SrcClassField_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassL2;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SrcClassL2_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassL3;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_SrcClassL3_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_SrcIp;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6High;
		struct {
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_SrcIp6High_get;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6Low;
		struct {
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_SrcIp6Low_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip6_t * data;
			bcm_ip6_t * mask;
		} field_qualify_SrcIp6_get;
		struct {
			bcm_field_entry_t entry;
			uint32 flag;
		} field_qualify_SrcIpEqualDstIp;
		struct {
			bcm_field_entry_t entry;
			uint32 * flag;
		} field_qualify_SrcIpEqualDstIp_get;
		struct {
			bcm_field_entry_t entry;
			bcm_ip_t * data;
			bcm_ip_t * mask;
		} field_qualify_SrcIp_get;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcMac;
		struct {
			bcm_field_entry_t entry;
			bcm_mac_t * data;
			bcm_mac_t * mask;
		} field_qualify_SrcMac_get;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t mim_port_id;
		} field_qualify_SrcMimGport;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t * mim_port_id;
		} field_qualify_SrcMimGport_get;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_SrcModPortGport;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_SrcModPortGport_get;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t data;
		} field_qualify_SrcModuleGport;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t * data;
		} field_qualify_SrcModuleGport_get;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t mpls_port_id;
		} field_qualify_SrcMplsGport;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t * mpls_port_id;
		} field_qualify_SrcMplsGport_get;
		struct {
			bcm_field_entry_t entry;
			bcmx_lport_t port;
		} field_qualify_SrcPort;
		struct {
			bcm_field_entry_t entry;
			bcm_module_t * data_modid;
			bcm_module_t * mask_modid;
			bcm_port_t * data_port;
			bcm_port_t * mask_port;
		} field_qualify_SrcPort_get;
		struct {
			bcm_field_entry_t entry;
			bcm_trunk_t tid;
		} field_qualify_SrcTrunk;
		struct {
			bcm_field_entry_t entry;
			bcm_trunk_t * data;
			bcm_trunk_t * mask;
		} field_qualify_SrcTrunk_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_SrcVirtualPortValid;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcVirtualPortValid_get;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t wlan_port_id;
		} field_qualify_SrcWlanGport;
		struct {
			bcm_field_entry_t entry;
			bcm_gport_t * wlan_port_id;
		} field_qualify_SrcWlanGport_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TcpControl;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TcpControl_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TcpHeaderSize;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TcpHeaderSize_get;
		struct {
			bcm_field_entry_t entry;
			uint32 flag;
		} field_qualify_TcpSequenceZero;
		struct {
			bcm_field_entry_t entry;
			uint32 * flag;
		} field_qualify_TcpSequenceZero_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Tos;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Tos_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TranslatedVlanFormat;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TranslatedVlanFormat_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ttl;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_Ttl_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelTerminated;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_TunnelTerminated_get;
		struct {
			bcm_field_entry_t entry;
			bcm_field_TunnelType_t tunnel_type;
		} field_qualify_TunnelType;
		struct {
			bcm_field_entry_t entry;
			bcm_field_TunnelType_t * tunnel_type;
		} field_qualify_TunnelType_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VlanFormat;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VlanFormat_get;
		struct {
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VlanTranslationHit;
		struct {
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_VlanTranslationHit_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_VnTag;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_VnTag_get;
		struct {
			bcm_field_entry_t entry;
			bcm_vpn_t data;
			bcm_vpn_t mask;
		} field_qualify_Vpn;
		struct {
			bcm_field_entry_t entry;
			bcm_vpn_t * data;
			bcm_vpn_t * mask;
		} field_qualify_Vpn_get;
		struct {
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_Vrf;
		struct {
			bcm_field_entry_t entry;
			uint32 * data;
			uint32 * mask;
		} field_qualify_Vrf_get;
		struct {
			bcm_field_entry_t entry;
		} field_qualify_clear;
		struct {
			bcm_field_entry_t eid;
			int qual_id;
			uint8 * data;
			uint8 * mask;
			uint16 length;
		} field_qualify_data;
		struct {
			bcm_field_range_t * range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
		} field_range_create;
		struct {
			bcm_field_range_t range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
		} field_range_create_id;
		struct {
			bcm_field_range_t range;
		} field_range_destroy;
		struct {
			bcm_field_range_t range;
			uint32 * flags;
			bcm_l4_port_t * min;
			bcm_l4_port_t * max;
		} field_range_get;
		struct {
			bcm_field_range_t * range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
			bcm_if_group_t group;
		} field_range_group_create;
		struct {
			bcm_field_range_t range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
			bcm_if_group_t group;
		} field_range_group_create_id;
		struct {
			int stat_id;
			uint64 value;
		} field_stat_all_set;
		struct {
			int stat_id;
			uint32 value;
		} field_stat_all_set32;
		struct {
			int stat_id;
			int nstat;
			bcm_field_stat_t * stat_arr;
		} field_stat_config_get;
		struct {
			bcm_field_group_t group;
			int nstat;
			bcm_field_stat_t * stat_arr;
			int * stat_id;
		} field_stat_create;
		struct {
			bcm_field_group_t group;
			int nstat;
			bcm_field_stat_t * stat_arr;
			int stat_id;
		} field_stat_create_id;
		struct {
			int stat_id;
		} field_stat_destroy;
		struct {
			int stat_id;
			bcm_field_stat_t stat;
			uint64 * value;
		} field_stat_get;
		struct {
			int stat_id;
			bcm_field_stat_t stat;
			uint32 * value;
		} field_stat_get32;
		struct {
			int stat_id;
			int nstat;
			bcm_field_stat_t * stat_arr;
			uint64 * value_arr;
		} field_stat_multi_get;
		struct {
			int stat_id;
			int nstat;
			bcm_field_stat_t * stat_arr;
			uint32 * value_arr;
		} field_stat_multi_get32;
		struct {
			int stat_id;
			bcm_field_stat_t stat;
			uint64 value;
		} field_stat_set;
		struct {
			int stat_id;
			bcm_field_stat_t stat;
			uint32 value;
		} field_stat_set32;
		struct {
			int stat_id;
			int * stat_size;
		} field_stat_size;
		struct {
			bcm_ipfix_stage_t stage;
			bcmx_lport_t port;
			bcmx_ipfix_config_t * config;
		} ipfix_config_get;
		struct {
			bcm_ipfix_stage_t stage;
			bcmx_lport_t port;
			bcmx_ipfix_config_t * config;
		} ipfix_config_set;
		struct {
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcmx_ipfix_mirror_config_t * config;
		} ipfix_mirror_config_get;
		struct {
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcmx_ipfix_mirror_config_t * config;
		} ipfix_mirror_config_set;
		struct {
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcm_gport_t mirror_dest_id;
		} ipfix_mirror_port_dest_add;
		struct {
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			bcm_gport_t mirror_dest_id;
		} ipfix_mirror_port_dest_delete;
		struct {
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
		} ipfix_mirror_port_dest_delete_all;
		struct {
			bcm_ipfix_stage_t stage;
			bcm_gport_t port;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest_id;
			int * mirror_dest_count;
		} ipfix_mirror_port_dest_get;
		struct {
			bcmx_ipfix_rate_t * rate_info;
		} ipfix_rate_create;
		struct {
			bcm_ipfix_rate_id_t rate_id;
		} ipfix_rate_destroy;
		struct {
			bcmx_ipfix_rate_t * rate_info;
		} ipfix_rate_get;
		struct {
			bcm_ipfix_rate_id_t rate_id;
			bcm_gport_t mirror_dest_id;
		} ipfix_rate_mirror_add;
		struct {
			bcm_ipfix_rate_id_t rate_id;
			bcm_gport_t mirror_dest_id;
		} ipfix_rate_mirror_delete;
		struct {
			bcm_ipfix_rate_id_t rate_id;
		} ipfix_rate_mirror_delete_all;
		struct {
			bcm_ipfix_rate_id_t rate_id;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest_id;
			int * mirror_dest_count;
		} ipfix_rate_mirror_get;
#ifdef	INCLUDE_L3
		struct {
			bcmx_ipmc_addr_t * data;
		} ipmc_add;
		struct {
			uint32 flags;
			bcm_ipmc_traverse_cb age_cb;
			void * user_data;
		} ipmc_age;
		struct {
			bcmx_lport_t port;
			bcm_ipmc_counters_t * counters;
		} ipmc_counters_get;
		struct {
			bcmx_lport_t port;
			uint8 * mac;
			int * untag;
			bcm_vlan_t * vid;
			int * ttl_threshold;
		} ipmc_egress_port_get;
		struct {
			bcmx_lport_t port;
			uint8 * mac;
			int untag;
			bcm_vlan_t vid;
			int ttl_threshold;
		} ipmc_egress_port_set;
		struct {
			int enable;
		} ipmc_enable;
		struct {
			bcmx_ipmc_addr_t * data;
		} ipmc_find;
		struct {
			bcmx_ipmc_addr_t * data;
		} ipmc_remove;
		struct {
			uint32 flags;
			bcm_ipmc_traverse_cb cb;
			void * user_data;
		} ipmc_traverse;
#endif	/* INCLUDE_L3 */
		struct {
			bcmx_l2_addr_t * l2addr;
			bcmx_lplist_t * port_block;
		} l2_addr_add;
		struct {
			uint8 * mac;
			bcm_vlan_t vid;
		} l2_addr_delete;
		struct {
			uint8 * mac;
			uint32 flags;
		} l2_addr_delete_by_mac;
		struct {
			uint8 * mac;
			bcmx_lport_t port;
			uint32 flags;
		} l2_addr_delete_by_mac_port;
		struct {
			bcmx_lport_t port;
			uint32 flags;
		} l2_addr_delete_by_port;
		struct {
			bcm_trunk_t tid;
			uint32 flags;
		} l2_addr_delete_by_trunk;
		struct {
			bcm_vlan_t vid;
			uint32 flags;
		} l2_addr_delete_by_vlan;
		struct {
			bcm_vlan_t vid;
			bcmx_lport_t port;
			uint32 flags;
		} l2_addr_delete_by_vlan_port;
		struct {
			bcm_vlan_t vid;
			bcm_trunk_t tid;
			uint32 flags;
		} l2_addr_delete_by_vlan_trunk;
		struct {
			bcmx_l2_addr_t * dest;
			bcmx_lplist_t * port_block;
			bcm_l2_addr_t * source;
		} l2_addr_from_bcm;
		struct {
			uint8 * mac_addr;
			bcm_vlan_t vid;
			bcmx_l2_addr_t * l2addr;
			bcmx_lplist_t * port_block;
		} l2_addr_get;
		struct {
			uint8 * mac_addr;
			bcm_vlan_t vid;
			bcmx_l2_addr_t * l2addr;
		} l2_addr_native_get;
		struct {
			bcmx_lport_t port;
			uint8 * mac_addr;
			bcm_vlan_t vid;
			bcmx_l2_addr_t * l2addr;
		} l2_addr_port_get;
		struct {
			bcmx_l2_addr_t * l2addr;
			bcmx_lplist_t * port_block;
		} l2_addr_refresh;
		struct {
			int bcm_unit;
			bcm_l2_addr_t * dest;
			bcmx_l2_addr_t * source;
			bcmx_lplist_t * port_block;
		} l2_addr_to_bcm;
		struct {
			int * age_seconds;
		} l2_age_timer_get;
		struct {
			int age_seconds;
		} l2_age_timer_set;
		struct {
			int index;
		} l2_cache_delete;
		struct {
			int index;
			bcmx_l2_cache_addr_t * addr;
		} l2_cache_get;
		struct {
			int index;
			bcmx_l2_cache_addr_t * addr;
			int * index_used;
		} l2_cache_set;
		struct {
			int * size;
		} l2_cache_size_get;
		struct {
			bcmx_l2_addr_t * addr;
			bcmx_l2_addr_t * cf_array;
			int cf_max;
			int * cf_count;
		} l2_conflict_get;
		struct {
			int bcm_unit;
		} l2_device_add;
		struct {
			int bcm_unit;
		} l2_device_remove;
		struct {
			int lclass;
			int * lclass_prio;
			uint32 * flags;
		} l2_learn_class_get;
		struct {
			int lclass;
			int lclass_prio;
			uint32 flags;
		} l2_learn_class_set;
		struct {
			bcmx_l2_learn_limit_t * limit;
		} l2_learn_limit_get;
		struct {
			bcmx_l2_learn_limit_t * limit;
		} l2_learn_limit_set;
		struct {
			bcmx_lport_t port;
			int * lclass;
		} l2_learn_port_class_get;
		struct {
			bcmx_lport_t port;
			int lclass;
		} l2_learn_port_class_set;
		struct {
			bcmx_l2_notify_f callback;
			void * userdata;
		} l2_notify_register;
		struct {
			bcmx_l2_notify_f callback;
			void * userdata;
		} l2_notify_unregister;
		struct {
			uint32 flags;
			bcmx_l2_addr_t * match_addr;
			bcmx_lport_t new_port;
			bcm_trunk_t new_trunk;
		} l2_replace;
		struct {
			uint8 * mac;
			bcm_vlan_t vlan;
		} l2_tunnel_add;
		struct {
			uint8 * mac;
			bcm_vlan_t vlan;
		} l2_tunnel_delete;
#ifdef	INCLUDE_L3
		struct {
			uint32 flags;
			bcmx_l3_egress_t * egr;
			bcm_if_t * intf;
		} l3_egress_create;
		struct {
			bcm_if_t intf;
		} l3_egress_destroy;
		struct {
			bcmx_l3_egress_t * egr;
			bcm_if_t * intf;
		} l3_egress_find;
		struct {
			bcm_if_t intf;
			bcmx_l3_egress_t * egr;
		} l3_egress_get;
		struct {
			bcm_if_t mpintf;
			bcm_if_t intf;
		} l3_egress_multipath_add;
		struct {
			uint32 flags;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_if_t * mpintf;
		} l3_egress_multipath_create;
		struct {
			bcm_if_t mpintf;
			bcm_if_t intf;
		} l3_egress_multipath_delete;
		struct {
			bcm_if_t mpintf;
		} l3_egress_multipath_destroy;
		struct {
			int intf_count;
			bcm_if_t * intf_array;
			bcm_if_t * mpintf;
		} l3_egress_multipath_find;
		struct {
			bcm_if_t mpintf;
			int intf_size;
			bcm_if_t * intf_array;
			int * intf_count;
		} l3_egress_multipath_get;
		struct {
			uint32 flags;
			int max_paths;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_if_t * mpintf;
		} l3_egress_multipath_max_create;
		struct {
			bcm_l3_egress_multipath_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_multipath_traverse;
		struct {
			bcm_l3_egress_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_traverse;
		struct {
			int enable;
		} l3_enable_set;
		struct {
			bcmx_l3_host_t * info;
		} l3_host_add;
		struct {
			uint32 flags;
			bcm_l3_host_traverse_cb age_cb;
			void * user_data;
		} l3_host_age;
		struct {
			bcm_l3_key_t * ipkey;
			bcm_l3_key_t * cf_array;
			int cf_max;
			int * cf_count;
		} l3_host_conflict_get;
		struct {
			bcmx_l3_host_t * ip_addr;
		} l3_host_delete;
		struct {
			bcmx_l3_host_t * info;
		} l3_host_delete_all;
		struct {
			bcmx_l3_host_t * info;
		} l3_host_delete_by_interface;
		struct {
			bcmx_l3_route_t * ip_addr;
		} l3_host_delete_by_network;
		struct {
			bcmx_l3_host_t * info;
		} l3_host_find;
		struct {
			bcm_ip_t info;
		} l3_host_invalidate_entry;
		struct {
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_host_traverse_cb cb;
			void * user_data;
		} l3_host_traverse;
		struct {
			bcm_ip_t info;
		} l3_host_validate_entry;
		struct {
			bcm_l3_info_t * l3info;
		} l3_info;
		struct {
			bcmx_l3_ingress_t * ing_intf;
			bcm_if_t * intf_id;
		} l3_ingress_create;
		struct {
			bcm_if_t intf_id;
		} l3_ingress_destroy;
		struct {
			bcmx_l3_ingress_t * ing_intf;
			bcm_if_t * intf_id;
		} l3_ingress_find;
		struct {
			bcm_if_t intf;
			bcmx_l3_ingress_t * ing_intf;
		} l3_ingress_get;
		struct {
			bcm_l3_intf_t * intf;
		} l3_intf_create;
		struct {
			bcm_l3_intf_t * intf;
		} l3_intf_delete;
		struct {
			bcm_l3_intf_t * intf;
		} l3_intf_find;
		struct {
			bcm_l3_intf_t * intf;
		} l3_intf_find_vlan;
		struct {
			bcm_l3_intf_t * intf;
		} l3_intf_get;
		struct {
			uint8 * ip6_addr;
		} l3_ip6_prefix_map_add;
		struct {
			uint8 * ip6_addr;
		} l3_ip6_prefix_map_delete;
		struct {
			int map_size;
			bcm_ip6_t * ip6_array;
			int * ip6_count;
		} l3_ip6_prefix_map_get;
		struct {
			bcmx_l3_route_t * info;
		} l3_route_add;
		struct {
			uint32 flags;
			bcm_l3_route_traverse_cb age_out;
			void * user_data;
		} l3_route_age;
		struct {
			bcmx_l3_route_t * info;
		} l3_route_delete;
		struct {
			bcmx_l3_route_t * info;
		} l3_route_delete_all;
		struct {
			bcmx_l3_route_t * info;
		} l3_route_delete_by_interface;
		struct {
			bcmx_l3_route_t * info;
		} l3_route_get;
		struct {
			int * max;
		} l3_route_max_ecmp_get;
		struct {
			int max;
		} l3_route_max_ecmp_set;
		struct {
			bcmx_l3_route_t * the_route;
			bcmx_l3_route_t * path_array;
			int max_path;
			int * path_count;
		} l3_route_multipath_get;
		struct {
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_route_traverse_cb trav_fn;
			void * user_data;
		} l3_route_traverse;
		struct {
			bcmx_l3_source_bind_t * info;
		} l3_source_bind_add;
		struct {
			bcmx_l3_source_bind_t * info;
		} l3_source_bind_delete;
		struct {
			bcm_gport_t port;
			int * enable;
		} l3_source_bind_enable_get;
		struct {
			bcm_gport_t port;
			int enable;
		} l3_source_bind_enable_set;
		struct {
			bcmx_l3_source_bind_t * info;
		} l3_source_bind_get;
		struct {
			bcm_vrf_t vrf;
			int enable;
		} l3_vrf_stat_enable_set;
		struct {
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint64 * val;
		} l3_vrf_stat_get;
		struct {
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 * val;
		} l3_vrf_stat_get32;
		struct {
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_vrf_stat_multi_get;
		struct {
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_vrf_stat_multi_get32;
		struct {
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint64 * value_arr;
		} l3_vrf_stat_multi_set;
		struct {
			bcm_vrf_t vrf;
			int nstat;
			bcm_l3_vrf_stat_t * stat_arr;
			uint32 * value_arr;
		} l3_vrf_stat_multi_set32;
		struct {
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint64 val;
		} l3_vrf_stat_set;
		struct {
			bcm_vrf_t vrf;
			bcm_l3_vrf_stat_t stat;
			uint32 val;
		} l3_vrf_stat_set32;
		struct {
			bcm_vlan_t vlan;
			uint32 vrid;
		} l3_vrrp_add;
		struct {
			bcm_vlan_t vlan;
			uint32 vrid;
		} l3_vrrp_delete;
		struct {
			bcm_vlan_t vlan;
		} l3_vrrp_delete_all;
		struct {
			bcm_vlan_t vlan;
			int alloc_size;
			int * vrid_array;
			int * count;
		} l3_vrrp_get;
#endif	/* INCLUDE_L3 */
		struct {
			int bcm_unit;
		} linkscan_device_add;
		struct {
			int bcm_unit;
		} linkscan_device_remove;
		struct {
			int * us;
			int * consistent;
		} linkscan_enable_get;
		struct {
			bcmx_lport_t lport;
		} linkscan_enable_port_get;
		struct {
			int us;
		} linkscan_enable_set;
		struct {
			bcmx_link_notify_f ln_cb;
		} linkscan_register;
		struct {
			bcmx_link_notify_f ln_cb;
		} linkscan_unregister;
		struct {
			bcmx_mcast_addr_t * mcaddr;
		} mcast_addr_add;
		struct {
			uint8 * mac;
			bcm_vlan_t vid;
		} mcast_addr_remove;
		struct {
			uint8 * mac;
			bcm_vlan_t vid;
			bcmx_lport_t port;
			bcmx_mcast_addr_t * mcaddr;
			bcmx_lplist_t * allrtr;
		} mcast_join;
		struct {
			uint8 * mac;
			bcm_vlan_t vid;
			bcmx_lport_t port;
		} mcast_leave;
		struct {
			bcmx_mcast_addr_t * mcaddr;
		} mcast_port_add;
		struct {
			uint8 * mac;
			bcm_vlan_t vid;
			bcmx_mcast_addr_t * mcaddr;
		} mcast_port_get;
		struct {
			bcmx_mcast_addr_t * mcaddr;
		} mcast_port_remove;
#ifdef	INCLUDE_L3
		struct {
			bcm_mim_vpn_t vpn;
			bcmx_mim_port_t * mim_port;
		} mim_port_add;
		struct {
			bcm_mim_vpn_t vpn;
			bcm_gport_t mim_port_id;
		} mim_port_delete;
		struct {
			bcm_mim_vpn_t vpn;
		} mim_port_delete_all;
		struct {
			bcm_mim_vpn_t vpn;
			bcmx_mim_port_t * mim_port;
		} mim_port_get;
		struct {
			bcm_mim_vpn_t vpn;
			int port_max;
			bcmx_mim_port_t * port_array;
			int * port_count;
		} mim_port_get_all;
		struct {
			bcmx_mim_vpn_config_t * info;
		} mim_vpn_create;
		struct {
			bcm_mim_vpn_t vpn;
		} mim_vpn_destroy;
		struct {
			bcm_mim_vpn_t vpn;
			bcmx_mim_vpn_config_t * info;
		} mim_vpn_get;
#endif	/* INCLUDE_L3 */
		struct {
			bcmx_mirror_destination_t * mirror_dest;
		} mirror_destination_create;
		struct {
			bcm_gport_t mirror_dest_id;
		} mirror_destination_destroy;
		struct {
			bcm_gport_t mirror_dest_id;
			bcmx_mirror_destination_t * mirror_dest;
		} mirror_destination_get;
		struct {
			bcmx_lport_t port;
			int * val;
		} mirror_egress_get;
		struct {
			bcmx_lport_t port;
			int val;
		} mirror_egress_set;
		struct {
			bcmx_lport_t port;
			bcmx_lplist_t * lplist;
		} mirror_fabric_list_get;
		struct {
			bcmx_lport_t port;
			bcmx_lplist_t lplist;
		} mirror_fabric_list_set;
		struct {
			bcmx_lport_t port;
			int * val;
		} mirror_ingress_get;
		struct {
			bcmx_lport_t port;
			int val;
		} mirror_ingress_set;
		struct {
			int * mode;
		} mirror_mode_get;
		struct {
			int mode;
		} mirror_mode_set;
		struct {
			bcmx_lport_t port;
			uint32 flags;
			bcm_gport_t mirror_dest_id;
		} mirror_port_dest_add;
		struct {
			bcmx_lport_t port;
			uint32 flags;
			bcm_gport_t mirror_dest_id;
		} mirror_port_dest_delete;
		struct {
			bcmx_lport_t port;
			uint32 flags;
		} mirror_port_dest_delete_all;
		struct {
			bcmx_lport_t port;
			uint32 flags;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest;
			int * mirror_dest_count;
		} mirror_port_dest_get;
		struct {
			bcmx_lport_t port;
			bcmx_lport_t * dest_port;
			uint32 * flags;
		} mirror_port_get;
		struct {
			bcmx_lport_t port;
			bcmx_lport_t dest_port;
			uint32 flags;
		} mirror_port_set;
		struct {
			bcmx_lport_t * port;
		} mirror_to_get;
		struct {
			bcmx_lport_t port;
		} mirror_to_set;
		struct {
			bcmx_lport_t port;
			uint16 * tpid;
			uint16 * vlan;
		} mirror_vlan_get;
		struct {
			bcmx_lport_t port;
			uint16 tpid;
			uint16 vlan;
		} mirror_vlan_set;
#ifdef	INCLUDE_L3
		struct {
			uint32 flags;
			int * exp_map_id;
		} mpls_exp_map_create;
		struct {
			int exp_map_id;
		} mpls_exp_map_destroy;
		struct {
			int exp_map_id;
			bcm_mpls_exp_map_t * exp_map;
		} mpls_exp_map_get;
		struct {
			int exp_map_id;
			bcm_mpls_exp_map_t * exp_map;
		} mpls_exp_map_set;
		struct {
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
		} mpls_label_stat_clear;
		struct {
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint64 * val;
		} mpls_label_stat_get;
		struct {
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 * val;
		} mpls_label_stat_get32;
		struct {
			bcm_vpn_t vpn;
			bcmx_mpls_port_t * mpls_port;
		} mpls_port_add;
		struct {
			bcm_vpn_t vpn;
			bcm_gport_t mpls_port_id;
		} mpls_port_delete;
		struct {
			bcm_vpn_t vpn;
		} mpls_port_delete_all;
		struct {
			bcm_vpn_t vpn;
			bcmx_mpls_port_t * mpls_port;
		} mpls_port_get;
		struct {
			bcm_vpn_t vpn;
			int port_max;
			bcmx_mpls_port_t * port_array;
			int * port_count;
		} mpls_port_get_all;
		struct {
			bcm_if_t intf;
		} mpls_tunnel_initiator_clear;
		struct {
			bcm_if_t intf;
			int label_max;
			bcmx_mpls_egress_label_t * label_array;
			int * label_count;
		} mpls_tunnel_initiator_get;
		struct {
			bcm_if_t intf;
			int num_labels;
			bcmx_mpls_egress_label_t * label_array;
		} mpls_tunnel_initiator_set;
		struct {
			bcmx_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_add;
		struct {
			bcmx_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_delete;
		struct {
			bcmx_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_get;
		struct {
			bcmx_mpls_vpn_config_t * info;
		} mpls_vpn_id_create;
		struct {
			bcm_vpn_t vpn;
		} mpls_vpn_id_destroy;
		struct {
			bcm_vpn_t vpn;
			bcmx_mpls_vpn_config_t * info;
		} mpls_vpn_id_get;
#endif	/* INCLUDE_L3 */
		struct {
			bcm_multicast_t group;
			bcm_multicast_control_t type;
			int * arg;
		} multicast_control_get;
		struct {
			bcm_multicast_t group;
			bcm_multicast_control_t type;
			int arg;
		} multicast_control_set;
		struct {
			uint32 flags;
			bcm_multicast_t * group;
		} multicast_create;
		struct {
			bcm_multicast_t group;
		} multicast_destroy;
		struct {
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_egress_add;
		struct {
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_egress_delete;
		struct {
			bcm_multicast_t group;
		} multicast_egress_delete_all;
		struct {
			bcm_multicast_t group;
			int port_max;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
			int * port_count;
		} multicast_egress_get;
		struct {
			bcm_multicast_t group;
			int port_count;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
		} multicast_egress_set;
		struct {
			bcm_multicast_t group;
			uint32 * flags;
		} multicast_group_get;
		struct {
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_vlan_t vlan;
			bcm_if_t * encap_id;
		} multicast_l2_encap_get;
		struct {
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t intf;
			bcm_if_t * encap_id;
		} multicast_l3_encap_get;
		struct {
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t mim_port_id;
			bcm_if_t * encap_id;
		} multicast_mim_encap_get;
		struct {
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t niv_port_id;
			bcm_if_t * encap_id;
		} multicast_niv_encap_get;
		struct {
			int index;
			bcmx_lport_t port;
			uint32 * vlan_vec;
		} multicast_repl_get;
		struct {
			int index;
			bcmx_lport_t port;
			uint32 * vlan_vec;
		} multicast_repl_set;
		struct {
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t subport;
			bcm_if_t * encap_id;
		} multicast_subport_encap_get;
		struct {
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t intf;
			bcm_if_t * encap_id;
		} multicast_trill_encap_get;
		struct {
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t vlan_port_id;
			bcm_if_t * encap_id;
		} multicast_vlan_encap_get;
		struct {
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t mpls_port_id;
			bcm_if_t * encap_id;
		} multicast_vpls_encap_get;
		struct {
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t wlan_port_id;
			bcm_if_t * encap_id;
		} multicast_wlan_encap_get;
#ifdef	INCLUDE_L3
		struct {
			bcmx_niv_forward_t * iv_fwd_entry;
		} niv_forward_add;
		struct {
			bcmx_niv_forward_t * iv_fwd_entry;
		} niv_forward_delete;
		struct {
			bcmx_niv_forward_t * iv_fwd_entry;
		} niv_forward_get;
		struct {
			bcmx_niv_port_t * niv_port;
		} niv_port_add;
		struct {
			bcm_gport_t niv_port_id;
		} niv_port_delete;
		struct {
			bcmx_niv_port_t * niv_port;
		} niv_port_get;
#endif	/* INCLUDE_L3 */
		struct {
			bcmx_oam_endpoint_info_t * endpoint_info;
		} oam_endpoint_create;
		struct {
			bcm_oam_endpoint_t endpoint;
		} oam_endpoint_destroy;
		struct {
			bcm_oam_group_t group;
		} oam_endpoint_destroy_all;
		struct {
			bcm_oam_endpoint_t endpoint;
			bcmx_oam_endpoint_info_t * endpoint_info;
		} oam_endpoint_get;
		struct {
			bcmx_oam_group_info_t * group_info;
		} oam_group_create;
		struct {
			bcm_oam_group_t group;
		} oam_group_destroy;
		struct {
			bcm_oam_group_t group;
			bcmx_oam_group_info_t * group_info;
		} oam_group_get;
		struct {
			bcmx_policer_config_t * pol_cfg;
			bcm_policer_t * policer_id;
		} policer_create;
		struct {
			bcm_policer_t policer_id;
		} policer_destroy;
		struct {
			bcm_policer_t policer_id;
			bcmx_policer_config_t * pol_cfg;
		} policer_get;
		struct {
			bcm_policer_t policer_id;
			bcmx_policer_config_t * pol_cfg;
		} policer_set;
		struct {
			bcmx_lport_t port;
			bcmx_port_ability_t * ability_mask;
		} port_ability_advert_get;
		struct {
			bcmx_lport_t port;
			bcmx_port_ability_t * ability_mask;
		} port_ability_advert_set;
		struct {
			bcmx_lport_t port;
			bcm_port_abil_t * local_ability_mask;
		} port_ability_get;
		struct {
			bcmx_lport_t port;
			bcmx_port_ability_t * local_ability_mask;
		} port_ability_local_get;
		struct {
			bcmx_lport_t port;
			bcmx_port_ability_t * ability_mask;
		} port_ability_remote_get;
		struct {
			bcmx_lport_t port;
			bcm_port_abil_t * ability_mask;
		} port_advert_get;
		struct {
			bcmx_lport_t port;
			bcm_port_abil_t * ability_mask;
		} port_advert_remote_get;
		struct {
			bcmx_lport_t port;
			bcm_port_abil_t ability_mask;
		} port_advert_set;
		struct {
			bcmx_lport_t port;
			int * autoneg;
		} port_autoneg_get;
		struct {
			bcmx_lport_t port;
			int autoneg;
		} port_autoneg_set;
		struct {
			bcmx_lport_t port;
			int * enable;
		} port_bpdu_enable_get;
		struct {
			bcmx_lport_t port;
			int enable;
		} port_bpdu_enable_set;
		struct {
			bcmx_lport_t port;
			bcm_port_cable_diag_t * status;
		} port_cable_diag;
		struct {
			bcmx_lport_t port;
			int cfi;
			bcm_color_t * color;
		} port_cfi_color_get;
		struct {
			bcmx_lport_t port;
			int cfi;
			bcm_color_t color;
		} port_cfi_color_set;
		struct {
			bcmx_lport_t port;
			bcm_port_class_t pclass;
			uint32 * class_id;
		} port_class_get;
		struct {
			bcmx_lport_t port;
			bcm_port_class_t pclass;
			uint32 class_id;
		} port_class_set;
		struct {
			bcmx_port_config_t * config;
		} port_config_get;
		struct {
			bcm_gport_t port;
			bcmx_port_congestion_config_t * config;
		} port_congestion_config_get;
		struct {
			bcm_gport_t port;
			bcmx_port_congestion_config_t * config;
		} port_congestion_config_set;
		struct {
			bcmx_lport_t port;
			bcm_port_control_t type;
			int * value;
		} port_control_get;
		struct {
			bcm_gport_t port;
			bcm_port_control_phy_timesync_t type;
			uint64 * value;
		} port_control_phy_timesync_get;
		struct {
			bcm_gport_t port;
			bcm_port_control_phy_timesync_t type;
			uint64 value;
		} port_control_phy_timesync_set;
		struct {
			bcmx_lport_t port;
			bcm_port_control_t type;
			int value;
		} port_control_set;
		struct {
			bcmx_lport_t port;
			int * mode;
		} port_discard_get;
		struct {
			bcmx_lport_t port;
			int mode;
		} port_discard_set;
		struct {
			bcmx_lport_t port;
			int srccp;
			int * mapcp;
			int * prio;
		} port_dscp_map_get;
		struct {
			bcmx_lport_t port;
			int * mode;
		} port_dscp_map_mode_get;
		struct {
			bcmx_lport_t port;
			int mode;
		} port_dscp_map_mode_set;
		struct {
			bcmx_lport_t port;
			int srccp;
			int mapcp;
			int prio;
		} port_dscp_map_set;
		struct {
			bcmx_lport_t port;
			int * mode;
		} port_dtag_mode_get;
		struct {
			bcmx_lport_t port;
			int mode;
		} port_dtag_mode_set;
		struct {
			bcmx_lport_t port;
			int * duplex;
		} port_duplex_get;
		struct {
			bcmx_lport_t port;
			int duplex;
		} port_duplex_set;
		struct {
			bcmx_lport_t port;
			int modid;
			bcmx_lplist_t * lplist;
		} port_egress_get;
		struct {
			bcmx_lport_t port;
			int modid;
			bcmx_lplist_t lplist;
		} port_egress_set;
		struct {
			bcmx_lport_t port;
			int * enable;
		} port_enable_get;
		struct {
			bcmx_lport_t port;
			int enable;
		} port_enable_set;
		struct {
			bcm_gport_t gport;
			bcmx_port_encap_config_t * encap_config;
		} port_encap_config_get;
		struct {
			bcm_gport_t gport;
			bcmx_port_encap_config_t * encap_config;
		} port_encap_config_set;
		struct {
			bcmx_lport_t port;
			int * mode;
		} port_encap_get;
		struct {
			bcmx_lport_t port;
			int mode;
		} port_encap_set;
		struct {
			bcmx_lport_t port;
			uint32 * flags;
		} port_fault_get;
		struct {
			bcmx_lport_t ingress_port;
			bcmx_lport_t egress_port;
			uint32 * flags;
		} port_flood_block_get;
		struct {
			bcmx_lport_t ingress_port;
			bcmx_lport_t egress_port;
			uint32 flags;
		} port_flood_block_set;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t * vlan;
			int * pkt_prio;
			uint32 * flags;
		} port_force_vlan_get;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t vlan;
			int pkt_prio;
			uint32 flags;
		} port_force_vlan_set;
		struct {
			bcmx_lport_t port;
			int * size;
		} port_frame_max_get;
		struct {
			bcmx_lport_t port;
			int size;
		} port_frame_max_set;
		struct {
			bcmx_lport_t port;
			bcm_gport_t * gport;
		} port_gport_get;
		struct {
			bcmx_lport_t port;
			int speed;
			bcm_port_duplex_t duplex;
			int * bit_times;
		} port_ifg_get;
		struct {
			bcmx_lport_t port;
			int speed;
			bcm_port_duplex_t duplex;
			int bit_times;
		} port_ifg_set;
		struct {
			bcmx_lport_t port;
			int * mode;
		} port_ifilter_get;
		struct {
			bcmx_lport_t port;
			int mode;
		} port_ifilter_set;
		struct {
			bcmx_lport_t port;
			bcm_port_info_t * info;
		} port_info_get;
		struct {
			bcmx_lport_t port;
			bcm_port_info_t * info;
		} port_info_restore;
		struct {
			bcmx_lport_t port;
			bcm_port_info_t * info;
		} port_info_save;
		struct {
			bcmx_lport_t port;
			bcm_port_info_t * info;
		} port_info_set;
		struct {
			bcmx_lport_t port;
			uint16 * tpid;
		} port_inner_tpid_get;
		struct {
			bcmx_lport_t port;
			uint16 tpid;
		} port_inner_tpid_set;
		struct {
			bcmx_lport_t port;
			bcm_port_if_t * intf;
		} port_interface_get;
		struct {
			bcmx_lport_t port;
			bcm_port_if_t intf;
		} port_interface_set;
		struct {
			bcmx_lport_t port;
			uint32 * flags;
		} port_ipmc_modify_get;
		struct {
			bcmx_lport_t port;
			uint32 flags;
		} port_ipmc_modify_set;
		struct {
			bcmx_lport_t port;
			int * enable;
		} port_jam_get;
		struct {
			bcmx_lport_t port;
			int enable;
		} port_jam_set;
		struct {
			bcmx_lport_t port;
			int * enable;
		} port_l3_enable_get;
		struct {
			bcmx_lport_t port;
			int enable;
		} port_l3_enable_set;
		struct {
			bcmx_lport_t port;
			uint32 * flags;
		} port_l3_modify_get;
		struct {
			bcmx_lport_t port;
			uint32 flags;
		} port_l3_modify_set;
		struct {
			bcmx_lport_t port;
			int * size;
		} port_l3_mtu_get;
		struct {
			bcmx_lport_t port;
			int size;
		} port_l3_mtu_set;
		struct {
			bcmx_lport_t port;
			uint32 * flags;
		} port_learn_get;
		struct {
			bcmx_lport_t port;
			uint32 add;
			uint32 remove;
		} port_learn_modify;
		struct {
			bcmx_lport_t port;
			uint32 flags;
		} port_learn_set;
		struct {
			bcm_gport_t port;
		} port_link_failed_clear;
		struct {
			bcmx_lport_t port;
			int * status;
		} port_link_status_get;
		struct {
			bcmx_lport_t port;
			int * linkscan;
		} port_linkscan_get;
		struct {
			bcmx_lport_t port;
			int linkscan;
		} port_linkscan_set;
		struct {
			bcmx_lport_t port;
			int * loopback;
		} port_loopback_get;
		struct {
			bcmx_lport_t port;
			int loopback;
		} port_loopback_set;
		struct {
			bcmx_lplist_t * list;
			uint32 flags;
		} port_lplist_populate;
		struct {
			bcmx_lport_t port;
			int * ms;
		} port_master_get;
		struct {
			bcmx_lport_t port;
			int ms;
		} port_master_set;
		struct {
			bcm_gport_t port;
			bcmx_port_match_info_t * match;
		} port_match_add;
		struct {
			bcm_gport_t port;
			bcmx_port_match_info_t * match;
		} port_match_delete;
		struct {
			bcm_gport_t port;
		} port_match_delete_all;
		struct {
			bcm_gport_t port;
			int size;
			bcmx_port_match_info_t * match_array;
			int * count;
		} port_match_multi_get;
		struct {
			bcm_gport_t port;
			bcmx_port_match_info_t * old_match;
			bcmx_port_match_info_t * new_match;
		} port_match_replace;
		struct {
			bcm_gport_t port;
			int size;
			bcmx_port_match_info_t * match_array;
		} port_match_set;
		struct {
			bcmx_lport_t port;
			bcm_port_mdix_t * mode;
		} port_mdix_get;
		struct {
			bcmx_lport_t port;
			bcm_port_mdix_t mode;
		} port_mdix_set;
		struct {
			bcmx_lport_t port;
			bcm_port_mdix_status_t * status;
		} port_mdix_status_get;
		struct {
			bcmx_lport_t port;
			bcm_port_medium_t medium;
			bcm_phy_config_t * config;
		} port_medium_config_get;
		struct {
			bcmx_lport_t port;
			bcm_port_medium_t medium;
			bcm_phy_config_t * config;
		} port_medium_config_set;
		struct {
			bcmx_lport_t port;
			bcm_port_medium_t * medium;
		} port_medium_get;
		struct {
			bcmx_lport_t port;
			int modid;
			int * enable;
		} port_modid_enable_get;
		struct {
			bcmx_lport_t port;
			int modid;
			int enable;
		} port_modid_enable_set;
		struct {
			bcmx_lport_t port;
			uint8 * mac;
		} port_pause_addr_get;
		struct {
			bcmx_lport_t port;
			uint8 * mac;
		} port_pause_addr_set;
		struct {
			bcmx_lport_t port;
			int * pause_tx;
			int * pause_rx;
		} port_pause_get;
		struct {
			bcmx_lport_t port;
			int pause_tx;
			int pause_rx;
		} port_pause_set;
		struct {
			bcmx_lport_t port;
			int * pause;
		} port_pause_sym_get;
		struct {
			bcmx_lport_t port;
			int pause;
		} port_pause_sym_set;
		struct {
			bcmx_lport_t port;
			int * mode;
		} port_pfm_get;
		struct {
			bcmx_lport_t port;
			int mode;
		} port_pfm_set;
		struct {
			bcmx_lport_t port;
			bcm_port_phy_control_t type;
			uint32 * value;
		} port_phy_control_get;
		struct {
			bcmx_lport_t port;
			bcm_port_phy_control_t type;
			uint32 value;
		} port_phy_control_set;
		struct {
			bcmx_lport_t port;
			uint32 flags;
			uint32 phy_reg_addr;
			uint32 * phy_data;
		} port_phy_get;
		struct {
			bcmx_lport_t port;
			uint32 flags;
			uint32 phy_reg_addr;
			uint32 phy_data;
			uint32 phy_mask;
		} port_phy_modify;
		struct {
			bcmx_lport_t port;
			uint32 flags;
			uint32 phy_reg_addr;
			uint32 phy_data;
		} port_phy_set;
		struct {
			bcm_gport_t port;
			bcmx_port_phy_timesync_config_t * conf;
		} port_phy_timesync_config_get;
		struct {
			bcm_gport_t port;
			bcmx_port_phy_timesync_config_t * conf;
		} port_phy_timesync_config_set;
		struct {
			bcm_gport_t port;
			bcmx_port_phy_timesync_enhanced_capture_t * conf;
		} port_phy_timesync_enhanced_capture_get;
		struct {
			bcmx_lport_t port;
			int prio;
			bcm_color_t * color;
		} port_priority_color_get;
		struct {
			bcmx_lport_t port;
			int prio;
			bcm_color_t color;
		} port_priority_color_set;
		struct {
			bcmx_lport_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
			bcm_vlan_t vid;
		} port_protocol_vlan_add;
		struct {
			bcmx_lport_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
		} port_protocol_vlan_delete;
		struct {
			bcmx_lport_t port;
		} port_protocol_vlan_delete_all;
		struct {
			bcmx_lport_t port;
			uint32 * count;
		} port_queued_count_get;
		struct {
			bcmx_lport_t port;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} port_rate_egress_get;
		struct {
			bcmx_lport_t port;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} port_rate_egress_set;
		struct {
			bcmx_lport_t port;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} port_rate_ingress_get;
		struct {
			bcmx_lport_t port;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} port_rate_ingress_set;
		struct {
			bcmx_lport_t port;
			uint32 * kbits_pause;
			uint32 * kbits_resume;
		} port_rate_pause_get;
		struct {
			bcmx_lport_t port;
			uint32 kbits_pause;
			uint32 kbits_resume;
		} port_rate_pause_set;
		struct {
			bcm_port_t port;
			int * ingress_rate;
			int * egress_rate;
		} port_sample_rate_get;
		struct {
			bcm_port_t port;
			int ingress_rate;
			int egress_rate;
		} port_sample_rate_set;
		struct {
			bcmx_lport_t port;
			bcm_port_info_t * info;
		} port_selective_get;
		struct {
			bcmx_lport_t port;
			bcm_port_info_t * info;
		} port_selective_set;
		struct {
			bcmx_lport_t port;
			int * speed;
		} port_speed_get;
		struct {
			bcmx_lport_t port;
			int * speed;
		} port_speed_max;
		struct {
			bcmx_lport_t port;
			int speed;
		} port_speed_set;
		struct {
			bcm_gport_t port;
			int enable;
		} port_stat_enable_set;
		struct {
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint64 * val;
		} port_stat_get;
		struct {
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 * val;
		} port_stat_get32;
		struct {
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint64 * value_arr;
		} port_stat_multi_get;
		struct {
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint32 * value_arr;
		} port_stat_multi_get32;
		struct {
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint64 * value_arr;
		} port_stat_multi_set;
		struct {
			bcm_gport_t port;
			int nstat;
			bcm_port_stat_t * stat_arr;
			uint32 * value_arr;
		} port_stat_multi_set32;
		struct {
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint64 val;
		} port_stat_set;
		struct {
			bcm_gport_t port;
			bcm_port_stat_t stat;
			uint32 val;
		} port_stat_set32;
		struct {
			bcmx_lport_t port;
			int * state;
		} port_stp_get;
		struct {
			bcmx_lport_t port;
			int state;
		} port_stp_set;
		struct {
			bcm_gport_t port;
			bcmx_lplist_t * lplist;
		} port_subsidiary_ports_get;
		struct {
			bcmx_lport_t port;
			int * tgid;
			int * psc;
		} port_tgid_get;
		struct {
			bcmx_lport_t port;
			int tgid;
			int psc;
		} port_tgid_set;
		struct {
			bcmx_lport_t port;
			uint16 tpid;
			int color_select;
		} port_tpid_add;
		struct {
			bcmx_lport_t port;
			uint16 tpid;
		} port_tpid_delete;
		struct {
			bcmx_lport_t port;
		} port_tpid_delete_all;
		struct {
			bcmx_lport_t port;
			uint16 * tpid;
		} port_tpid_get;
		struct {
			bcmx_lport_t port;
			uint16 tpid;
		} port_tpid_set;
		struct {
			bcmx_lport_t port;
			int * priority;
		} port_untagged_priority_get;
		struct {
			bcmx_lport_t port;
			int priority;
		} port_untagged_priority_set;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t * vid_ptr;
		} port_untagged_vlan_get;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t vid;
		} port_untagged_vlan_set;
		struct {
			bcmx_lport_t port;
			int link;
		} port_update;
		struct {
			bcmx_lport_t port;
			uint16 * inner_tag;
		} port_vlan_inner_tag_get;
		struct {
			bcmx_lport_t port;
			uint16 inner_tag;
		} port_vlan_inner_tag_set;
		struct {
			bcmx_lport_t port;
			uint32 * flags;
		} port_vlan_member_get;
		struct {
			bcmx_lport_t port;
			uint32 flags;
		} port_vlan_member_set;
		struct {
			bcmx_lport_t port;
			int pkt_pri;
			int cfi;
			int * internal_pri;
			bcm_color_t * color;
		} port_vlan_priority_map_get;
		struct {
			bcmx_lport_t port;
			int pkt_pri;
			int cfi;
			int internal_pri;
			bcm_color_t color;
		} port_vlan_priority_map_set;
		struct {
			bcmx_lport_t port;
			int internal_pri;
			bcm_color_t color;
			int * pkt_pri;
			int * cfi;
		} port_vlan_priority_unmap_get;
		struct {
			bcmx_lport_t port;
			int internal_pri;
			bcm_color_t color;
			int pkt_pri;
			int cfi;
		} port_vlan_priority_unmap_set;
#ifdef	INCLUDE_L3
		struct {
			bcmx_lport_t client_port;
			bcm_proxy_proto_type_t proto_type;
			bcmx_lport_t server_lport;
			int enable;
		} proxy_client_set;
		struct {
			bcmx_lport_t server_lport;
			bcm_proxy_mode_t mode;
			int * enable;
		} proxy_server_get;
		struct {
			bcmx_lport_t server_lport;
			bcm_proxy_mode_t mode;
			int enable;
		} proxy_server_set;
#endif	/* INCLUDE_L3 */
		struct {
			uint32 flags;
			bcmx_qos_map_t * map;
			int map_id;
		} qos_map_add;
		struct {
			uint32 flags;
			int * map_id;
		} qos_map_create;
		struct {
			uint32 flags;
			bcmx_qos_map_t * map;
			int map_id;
		} qos_map_delete;
		struct {
			int map_id;
		} qos_map_destroy;
		struct {
			uint32 flags;
			int map_id;
			int array_size;
			bcmx_qos_map_t * array;
			int * array_count;
		} qos_map_multi_get;
		struct {
			int array_size;
			int * map_ids_array;
			int * flags_array;
			int * array_count;
		} qos_multi_get;
		struct {
			bcm_gport_t port;
			int * ing_map;
			int * egr_map;
		} qos_port_map_get;
		struct {
			bcm_gport_t port;
			int ing_map;
			int egr_map;
		} qos_port_map_set;
		struct {
			bcm_gport_t port;
			bcm_vlan_t vid;
			int * ing_map;
			int * egr_map;
		} qos_port_vlan_map_get;
		struct {
			bcm_gport_t port;
			bcm_vlan_t vid;
			int ing_map;
			int egr_map;
		} qos_port_vlan_map_set;
		struct {
			bcmx_lport_t port;
			int flags;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} rate_bandwidth_get;
		struct {
			bcmx_lport_t port;
			int flags;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} rate_bandwidth_set;
		struct {
			int * limit;
			int * flags;
			bcmx_lport_t port;
		} rate_bcast_get;
		struct {
			int limit;
			int flags;
			bcmx_lport_t port;
		} rate_bcast_set;
		struct {
			int * limit;
			int * flags;
			bcmx_lport_t port;
		} rate_dlfbc_get;
		struct {
			int limit;
			int flags;
			bcmx_lport_t port;
		} rate_dlfbc_set;
		struct {
			int * val;
			int * flags;
		} rate_get;
		struct {
			int * limit;
			int * flags;
			bcmx_lport_t port;
		} rate_mcast_get;
		struct {
			int limit;
			int flags;
			bcmx_lport_t port;
		} rate_mcast_set;
		struct {
			int val;
			int flags;
		} rate_set;
		struct {
			bcm_rate_limit_t * rl;
		} rate_type_get;
		struct {
			bcm_rate_limit_t * rl;
		} rate_type_set;
		struct {
			bcm_rx_control_t type;
			int * arg;
		} rx_control_get;
		struct {
			bcm_rx_control_t type;
			int arg;
		} rx_control_set;
		struct {
			int unit;
		} rx_device_add;
		struct {
			int unit;
		} rx_device_remove;
		struct {
			char * name;
			bcm_rx_cb_f fn;
			int priority;
			void * cookie;
			uint32 flags;
		} rx_register;
		struct {
			bcm_rx_cb_f fn;
			int pri;
		} rx_unregister;
		struct {
			bcmx_lport_t port;
		} stat_clear;
		struct {
			bcmx_lport_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
		} stat_custom_add;
		struct {
			bcmx_lport_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
			int * result;
		} stat_custom_check;
		struct {
			bcmx_lport_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
		} stat_custom_delete;
		struct {
			bcmx_lport_t port;
			bcm_stat_val_t type;
		} stat_custom_delete_all;
		struct {
			bcmx_lport_t port;
			bcm_stat_val_t type;
			uint32 * flags;
		} stat_custom_get;
		struct {
			bcmx_lport_t port;
			bcm_stat_val_t type;
			uint32 flags;
		} stat_custom_set;
		struct {
			bcmx_lport_t port;
			bcm_stat_val_t type;
			uint64 * value;
		} stat_get;
		struct {
			bcmx_lport_t port;
			bcm_stat_val_t type;
			uint32 * value;
		} stat_get32;
		struct {
			bcm_gport_t port;
			int nstat;
			bcm_stat_val_t * stat_arr;
			uint64 * value_arr;
		} stat_multi_get;
		struct {
			bcm_gport_t port;
			int nstat;
			bcm_stat_val_t * stat_arr;
			uint32 * value_arr;
		} stat_multi_get32;
		struct {
			int * max_stg;
		} stg_count_get;
		struct {
			bcm_stg_t * stg_ptr;
		} stg_create;
		struct {
			bcm_stg_t stg;
		} stg_create_id;
		struct {
			bcm_stg_t * stg_ptr;
		} stg_default_get;
		struct {
			bcm_stg_t stg;
		} stg_default_set;
		struct {
			bcm_stg_t stg;
		} stg_destroy;
		struct {
			bcm_stg_t ** list;
			int * count;
		} stg_list;
		struct {
			bcm_stg_t * list;
			int count;
		} stg_list_destroy;
		struct {
			bcm_stg_t stg;
			bcmx_lport_t port;
			int * stp_state;
		} stg_stp_get;
		struct {
			bcm_stg_t stg;
			bcmx_lport_t port;
			int stp_state;
		} stg_stp_set;
		struct {
			bcm_stg_t stg;
			bcm_vlan_t vid;
		} stg_vlan_add;
		struct {
			bcm_stg_t stg;
			bcm_vlan_t ** list;
			int * count;
		} stg_vlan_list;
		struct {
			bcm_vlan_t * list;
			int count;
		} stg_vlan_list_destroy;
		struct {
			bcm_stg_t stg;
			bcm_vlan_t vid;
		} stg_vlan_remove;
		struct {
			bcm_stg_t stg;
		} stg_vlan_remove_all;
		struct {
			bcmx_subport_group_config_t * config;
			bcm_gport_t * group;
		} subport_group_create;
		struct {
			bcm_gport_t group;
		} subport_group_destroy;
		struct {
			bcm_gport_t group;
			bcmx_subport_group_config_t * config;
		} subport_group_get;
		struct {
			bcmx_subport_config_t * config;
			bcm_gport_t * port;
		} subport_port_add;
		struct {
			bcm_gport_t port;
		} subport_port_delete;
		struct {
			bcm_gport_t port;
			bcmx_subport_config_t * config;
		} subport_port_get;
		struct {
			bcm_switch_control_t type;
			int * arg;
		} switch_control_get;
		struct {
			bcmx_lport_t port;
			bcm_switch_control_t type;
			int * arg;
		} switch_control_port_get;
		struct {
			bcmx_lport_t port;
			bcm_switch_control_t type;
			int arg;
		} switch_control_port_set;
		struct {
			bcm_switch_control_t type;
			int arg;
		} switch_control_set;
		struct {
			uint32 flags;
			int internal_cpu_pri;
			int * encap_pri;
		} switch_rcpu_encap_priority_map_get;
		struct {
			uint32 flags;
			int internal_cpu_pri;
			int encap_pri;
		} switch_rcpu_encap_priority_map_set;
#ifdef	INCLUDE_L3
		struct {
			bcm_trill_name_t root_name;
		} trill_multicast_delete_all;
		struct {
			bcm_trill_multicast_entry_t * trill_mc_entry;
		} trill_multicast_entry_add;
		struct {
			bcm_trill_multicast_entry_t * trill_mc_entry;
		} trill_multicast_entry_delete;
		struct {
			bcm_trill_multicast_entry_t * trill_mc_entry;
		} trill_multicast_entry_get;
		struct {
			bcm_trill_name_t root_name;
			bcm_trill_name_t source_rbridge_name;
			bcm_gport_t port;
			bcm_if_t encap_intf;
		} trill_multicast_source_add;
		struct {
			bcm_trill_name_t root_name;
			bcm_trill_name_t source_rbridge_name;
			bcm_gport_t port;
			bcm_if_t encap_intf;
		} trill_multicast_source_delete;
		struct {
			bcm_trill_name_t root_name;
			bcm_trill_name_t source_rbridge_name;
			bcm_gport_t * port;
		} trill_multicast_source_get;
		struct {
			bcmx_trill_port_t * trill_port;
		} trill_port_add;
		struct {
			bcm_gport_t trill_port_id;
		} trill_port_delete;
		struct {
			bcmx_trill_port_t * trill_port;
		} trill_port_get;
		struct {
			int port_max;
			bcmx_trill_port_t * port_array;
			int * port_count;
		} trill_port_get_all;
		struct {
			bcm_gport_t port;
			bcm_trill_stat_t stat;
		} trill_stat_clear;
		struct {
			bcm_gport_t port;
			bcm_trill_stat_t stat;
			uint64 * val;
		} trill_stat_get;
		struct {
			bcm_gport_t port;
			bcm_trill_stat_t stat;
			uint32 * val;
		} trill_stat_get32;
#endif	/* INCLUDE_L3 */
		struct {
			bcm_trunk_chip_info_t * ta_info;
		} trunk_chip_info_get;
		struct {
			bcm_trunk_t * tid;
		} trunk_create;
		struct {
			bcm_trunk_t tid;
		} trunk_create_id;
		struct {
			bcm_trunk_t tid;
		} trunk_destroy;
		struct {
			bcm_trunk_t tid;
			bcmx_lplist_t * lplist;
		} trunk_egress_get;
		struct {
			bcm_trunk_t tid;
			bcmx_lplist_t lplist;
		} trunk_egress_set;
		struct {
			bcm_trunk_t tid;
			bcm_gport_t failport;
			int * psc;
			uint32 * flags;
			int array_size;
			bcm_gport_t * fail_to_array;
			int * array_count;
		} trunk_failover_get;
		struct {
			bcm_trunk_t tid;
			bcm_gport_t failport;
			int psc;
			uint32 flags;
			int count;
			bcm_gport_t * fail_to_array;
		} trunk_failover_set;
		struct {
			bcmx_lport_t port;
			bcm_trunk_t * tid;
		} trunk_find;
		struct {
			bcm_trunk_t tid;
			bcmx_trunk_add_info_t * t_data;
		} trunk_get;
		struct {
			bcm_trunk_t tid;
			bcm_vlan_t vid;
			uint8 * mac;
		} trunk_mcast_join;
		struct {
			bcm_trunk_t tid;
			bcmx_trunk_member_t * member;
		} trunk_member_add;
		struct {
			bcm_trunk_t tid;
			bcmx_trunk_member_t * member;
		} trunk_member_delete;
		struct {
			bcm_trunk_t tid;
		} trunk_member_delete_all;
		struct {
			bcm_trunk_t tid;
			int member_max;
			bcmx_trunk_member_t * member_array;
			int * member_count;
		} trunk_member_get;
		struct {
			bcm_trunk_t tid;
			int member_count;
			bcmx_trunk_member_t * member_array;
		} trunk_member_set;
		struct {
			bcm_trunk_t tid;
			int * psc;
		} trunk_psc_get;
		struct {
			bcm_trunk_t tid;
			int psc;
		} trunk_psc_set;
		struct {
			bcm_trunk_t tid;
			bcmx_trunk_add_info_t * add_info;
		} trunk_set;
#ifdef	INCLUDE_L3
		struct {
			bcmx_tunnel_config_t * tconfig;
		} tunnel_config_get;
		struct {
			bcmx_tunnel_config_t * tconfig;
		} tunnel_config_set;
		struct {
			uint32 flags;
			int * dscp_map_id;
		} tunnel_dscp_map_create;
		struct {
			int dscp_map_id;
		} tunnel_dscp_map_destroy;
		struct {
			int dscp_map_id;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_get;
		struct {
			bcmx_lport_t port;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_port_get;
		struct {
			bcmx_lport_t port;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_port_set;
		struct {
			int dscp_map_id;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_set;
		struct {
			bcmx_l3_intf_t * intf;
		} tunnel_initiator_clear;
		struct {
			bcmx_l3_intf_t * intf;
			bcmx_tunnel_initiator_t * tunnel;
		} tunnel_initiator_get;
		struct {
			bcmx_l3_intf_t * intf;
			bcmx_tunnel_initiator_t * tunnel;
		} tunnel_initiator_set;
		struct {
			bcmx_tunnel_terminator_t * info;
		} tunnel_terminator_add;
		struct {
			bcmx_tunnel_terminator_t * info;
		} tunnel_terminator_delete;
		struct {
			bcmx_tunnel_terminator_t * info;
		} tunnel_terminator_get;
		struct {
			bcmx_tunnel_terminator_t * info;
		} tunnel_terminator_update;
		struct {
			bcm_gport_t tunnel;
			bcm_vlan_vector_t * vlan_vec;
		} tunnel_terminator_vlan_get;
		struct {
			bcm_gport_t tunnel;
			uint32 * vlan_vec;
		} tunnel_terminator_vlan_set;
#endif	/* INCLUDE_L3 */
		struct {
			bcm_pkt_t * pkt;
			uint32 flags;
		} tx;
		struct {
			bcm_pkt_t * pkt;
			uint32 flags;
		} tx_flood;
		struct {
			bcm_pkt_t * pkt;
			bcmx_lplist_t * tx_ports;
			bcmx_lplist_t * untagged_ports;
			uint32 flags;
		} tx_lplist;
		struct {
			bcm_pkt_t * pkt;
			int l3;
		} tx_pkt_l3_set;
		struct {
			bcm_pkt_t * pkt;
			int untagged;
		} tx_pkt_untagged_set;
		struct {
			bcmx_lplist_t * lplist;
			bcm_pkt_t * pkt;
		} tx_port_list;
		struct {
			bcm_pkt_t * pkt;
			bcmx_lport_t d_port;
			uint32 flags;
		} tx_uc;
		struct {
			bcmx_uport_create_f create_callback;
		} uport_create_callback_set;
		struct {
			bcm_vlan_t vlan;
			bcmx_vlan_block_t * vlan_block;
		} vlan_block_get;
		struct {
			bcm_vlan_t vlan;
			bcmx_vlan_block_t * vlan_block;
		} vlan_block_set;
		struct {
			bcm_vlan_control_t type;
			int * arg;
		} vlan_control_get;
		struct {
			bcmx_lport_t port;
			bcm_vlan_control_port_t type;
			int * arg;
		} vlan_control_port_get;
		struct {
			bcmx_lport_t port;
			bcm_vlan_control_port_t type;
			int arg;
		} vlan_control_port_set;
		struct {
			bcm_vlan_control_t type;
			int arg;
		} vlan_control_set;
		struct {
			bcm_vlan_t vlan;
			bcm_vlan_control_vlan_t * control;
		} vlan_control_vlan_get;
		struct {
			bcm_vlan_t vlan;
			bcm_vlan_control_vlan_t control;
		} vlan_control_vlan_set;
		struct {
			bcm_vlan_t vid;
		} vlan_create;
		struct {
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_gport_t port_1;
			bcm_gport_t port_2;
		} vlan_cross_connect_add;
		struct {
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_cross_connect_delete;
		struct {
			bcm_vlan_t * vid_ptr;
		} vlan_default_get;
		struct {
			bcm_vlan_t vid;
		} vlan_default_set;
		struct {
			bcm_vlan_t vid;
		} vlan_destroy;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_dtag_add;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid;
		} vlan_dtag_delete;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_dtag_get;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t new_vid;
			int int_prio;
		} vlan_dtag_range_add;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
		} vlan_dtag_range_delete;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_dtag_range_get;
		struct {
			bcm_vlan_t vlan;
			bcm_gport_t port;
			int flags;
		} vlan_gport_add;
		struct {
			bcm_vlan_t vlan;
			bcm_gport_t port;
		} vlan_gport_delete;
		struct {
			bcm_vlan_t vlan;
		} vlan_gport_delete_all;
		struct {
			bcm_vlan_t vlan;
			bcm_gport_t port;
			int * flags;
		} vlan_gport_get;
		struct {
			bcm_vlan_t vlan;
			int array_max;
			bcm_gport_t * gport_array;
			int * flags_array;
			int * array_size;
		} vlan_gport_get_all;
		struct {
			bcm_vlan_ip_t * vlan_ip;
			bcm_vlan_action_set_t * action;
		} vlan_ip_action_add;
		struct {
			bcm_vlan_ip_t * vlan_ip;
		} vlan_ip_action_delete;
		struct {
			bcm_vlan_ip_t * vlan_ip;
			bcm_vlan_action_set_t * action;
		} vlan_ip_action_get;
		struct {
			bcm_vlan_ip_t * vlan_ip;
		} vlan_ip_add;
		struct {
			bcm_vlan_ip_t * vlan_ip;
		} vlan_ip_delete;
		struct {
			uint8 * mac;
			bcm_vlan_action_set_t * action;
		} vlan_mac_action_add;
		struct {
			uint8 * mac;
		} vlan_mac_action_delete;
		struct {
			uint8 * mac;
			bcm_vlan_action_set_t * action;
		} vlan_mac_action_get;
		struct {
			uint8 * mac;
			bcm_vlan_t vid;
			int prio;
		} vlan_mac_add;
		struct {
			uint8 * mac;
		} vlan_mac_delete;
		struct {
			bcm_vlan_t vlan;
			bcm_vlan_mcast_flood_t * mode;
		} vlan_mcast_flood_get;
		struct {
			bcm_vlan_t vlan;
			bcm_vlan_mcast_flood_t mode;
		} vlan_mcast_flood_set;
		struct {
			bcm_vlan_t vid;
			bcmx_lplist_t lplist;
			bcmx_lplist_t ubmp;
		} vlan_port_add;
		struct {
			bcmx_vlan_port_t * vlan_port;
		} vlan_port_create;
		struct {
			bcmx_lport_t port;
		} vlan_port_default_action_delete;
		struct {
			bcmx_lport_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_default_action_get;
		struct {
			bcmx_lport_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_default_action_set;
		struct {
			bcm_gport_t gport;
		} vlan_port_destroy;
		struct {
			bcmx_lport_t port;
		} vlan_port_egress_default_action_delete;
		struct {
			bcmx_lport_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_egress_default_action_get;
		struct {
			bcmx_lport_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_egress_default_action_set;
		struct {
			bcmx_vlan_port_t * vlan_port;
		} vlan_port_find;
		struct {
			bcm_vlan_t vid;
			bcmx_lplist_t * lplist;
			bcmx_lplist_t * ubmp;
		} vlan_port_get;
		struct {
			bcmx_lport_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
			bcm_vlan_action_set_t * action;
		} vlan_port_protocol_action_add;
		struct {
			bcmx_lport_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
		} vlan_port_protocol_action_delete;
		struct {
			bcmx_lport_t port;
		} vlan_port_protocol_action_delete_all;
		struct {
			bcmx_lport_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
			bcm_vlan_action_set_t * action;
		} vlan_port_protocol_action_get;
		struct {
			bcm_vlan_t vid;
			bcmx_lplist_t lplist;
		} vlan_port_remove;
		struct {
			bcm_vlan_t vlan;
			int qmid;
		} vlan_queue_map_attach;
		struct {
			bcm_vlan_t vlan;
			int * qmid;
		} vlan_queue_map_attach_get;
		struct {
			uint32 flags;
			int * qmid;
		} vlan_queue_map_create;
		struct {
			int qmid;
		} vlan_queue_map_destroy;
		struct {
			bcm_vlan_t vlan;
		} vlan_queue_map_detach;
		struct {
			int qmid;
			int pkt_pri;
			int cfi;
			int * queue;
			int * color;
		} vlan_queue_map_get;
		struct {
			int qmid;
			int pkt_pri;
			int cfi;
			int queue;
			int color;
		} vlan_queue_map_set;
		struct {
			bcm_vlan_t vlan;
			int enable;
		} vlan_stat_enable_set;
		struct {
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_stat_get;
		struct {
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_stat_get32;
		struct {
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_stat_multi_get;
		struct {
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_stat_multi_get32;
		struct {
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_stat_multi_set;
		struct {
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_stat_multi_set32;
		struct {
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 val;
		} vlan_stat_set;
		struct {
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 val;
		} vlan_stat_set32;
		struct {
			bcm_vlan_t vid;
			bcm_stg_t * stg_ptr;
		} vlan_stg_get;
		struct {
			bcm_vlan_t vid;
			bcm_stg_t stg;
		} vlan_stg_set;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_add;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_action_delete;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_get;
		struct {
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_range_add;
		struct {
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
		} vlan_translate_action_range_delete;
		struct {
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_range_get;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_translate_add;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid;
		} vlan_translate_delete;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_egress_action_add;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_egress_action_delete;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_egress_action_get;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_translate_egress_add;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid;
		} vlan_translate_egress_delete;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_translate_egress_get;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int enable;
		} vlan_translate_egress_stat_enable_set;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_translate_egress_stat_get;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_translate_egress_stat_get32;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_egress_stat_multi_get;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_egress_stat_multi_get32;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_egress_stat_multi_set;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_egress_stat_multi_set32;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 val;
		} vlan_translate_egress_stat_set;
		struct {
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 val;
		} vlan_translate_egress_stat_set32;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_translate_get;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t new_vid;
			int int_prio;
		} vlan_translate_range_add;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
		} vlan_translate_range_delete;
		struct {
			bcmx_lport_t port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t * new_vid;
			int * int_prio;
		} vlan_translate_range_get;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int enable;
		} vlan_translate_stat_enable_set;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_translate_stat_get;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_translate_stat_get32;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_stat_multi_get;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_stat_multi_get32;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint64 * value_arr;
		} vlan_translate_stat_multi_set;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			int nstat;
			bcm_vlan_stat_t * stat_arr;
			uint32 * value_arr;
		} vlan_translate_stat_multi_set32;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint64 val;
		} vlan_translate_stat_set;
		struct {
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_stat_t stat;
			uint32 val;
		} vlan_translate_stat_set32;
		struct {
			uint32 * vlan_vector;
			uint32 flags_mask;
			uint32 flags_value;
		} vlan_vector_flags_set;
#ifdef	INCLUDE_L3
		struct {
			bcmx_wlan_client_t * info;
		} wlan_client_add;
		struct {
			uint8 * mac;
		} wlan_client_delete;
		struct {
			uint8 * mac;
			bcmx_wlan_client_t * info;
		} wlan_client_get;
		struct {
			bcmx_wlan_port_t * info;
		} wlan_port_add;
		struct {
			bcm_gport_t wlan_port_id;
		} wlan_port_delete;
		struct {
			bcm_gport_t wlan_port_id;
			bcmx_wlan_port_t * info;
		} wlan_port_get;
		struct {
			bcmx_tunnel_initiator_t * info;
		} wlan_tunnel_initiator_create;
		struct {
			bcm_gport_t wlan_tunnel_id;
		} wlan_tunnel_initiator_destroy;
		struct {
			bcmx_tunnel_initiator_t * info;
		} wlan_tunnel_initiator_get;
#endif	/* INCLUDE_L3 */
	} args;
} bcmx_async_req_t;

typedef enum {
	BCMX_ASYNC_ENTRY_NONE = 0,
	BCMX_ASYNC_ENTRY_AUTH_EGRESS_GET,
	BCMX_ASYNC_ENTRY_AUTH_EGRESS_SET,
	BCMX_ASYNC_ENTRY_AUTH_MAC_ADD,
	BCMX_ASYNC_ENTRY_AUTH_MAC_DELETE,
	BCMX_ASYNC_ENTRY_AUTH_MAC_DELETE_ALL,
	BCMX_ASYNC_ENTRY_AUTH_MODE_GET,
	BCMX_ASYNC_ENTRY_AUTH_MODE_SET,
	BCMX_ASYNC_ENTRY_AUTH_UNAUTH_CALLBACK,
	BCMX_ASYNC_ENTRY_COSQ_CONFIG_GET,
	BCMX_ASYNC_ENTRY_COSQ_CONFIG_SET,
	BCMX_ASYNC_ENTRY_COSQ_CONTROL_GET,
	BCMX_ASYNC_ENTRY_COSQ_CONTROL_SET,
	BCMX_ASYNC_ENTRY_COSQ_DETACH,
	BCMX_ASYNC_ENTRY_COSQ_DISCARD_GET,
	BCMX_ASYNC_ENTRY_COSQ_DISCARD_PORT_GET,
	BCMX_ASYNC_ENTRY_COSQ_DISCARD_PORT_SET,
	BCMX_ASYNC_ENTRY_COSQ_DISCARD_SET,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_ADD,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_ATTACH,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_ATTACH_GET,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_BANDWIDTH_GET,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_BANDWIDTH_SET,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_DELETE,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_DESTMOD_ATTACH,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_DESTMOD_DETACH,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_DETACH,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_DISCARD_GET,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_DISCARD_SET,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_SCHED_GET,
	BCMX_ASYNC_ENTRY_COSQ_GPORT_SCHED_SET,
	BCMX_ASYNC_ENTRY_COSQ_INIT,
	BCMX_ASYNC_ENTRY_COSQ_MAPPING_GET,
	BCMX_ASYNC_ENTRY_COSQ_MAPPING_SET,
	BCMX_ASYNC_ENTRY_COSQ_PORT_BANDWIDTH_GET,
	BCMX_ASYNC_ENTRY_COSQ_PORT_BANDWIDTH_SET,
	BCMX_ASYNC_ENTRY_COSQ_PORT_MAPPING_GET,
	BCMX_ASYNC_ENTRY_COSQ_PORT_MAPPING_SET,
	BCMX_ASYNC_ENTRY_COSQ_PORT_SCHED_GET,
	BCMX_ASYNC_ENTRY_COSQ_PORT_SCHED_SET,
	BCMX_ASYNC_ENTRY_COSQ_SCHED_GET,
	BCMX_ASYNC_ENTRY_COSQ_SCHED_SET,
	BCMX_ASYNC_ENTRY_COSQ_SCHED_WEIGHT_MAX_GET,
	BCMX_ASYNC_ENTRY_COSQ_STAT_GET,
	BCMX_ASYNC_ENTRY_COSQ_STAT_GET32,
	BCMX_ASYNC_ENTRY_COSQ_STAT_SET,
	BCMX_ASYNC_ENTRY_COSQ_STAT_SET32,
	BCMX_ASYNC_ENTRY_CUSTOM_PORT_GET,
	BCMX_ASYNC_ENTRY_CUSTOM_PORT_SET,
	BCMX_ASYNC_ENTRY_CUSTOM_UNIT_GET,
	BCMX_ASYNC_ENTRY_CUSTOM_UNIT_SET,
	BCMX_ASYNC_ENTRY_DEVICE_ATTACH,
	BCMX_ASYNC_ENTRY_DEVICE_DETACH,
	BCMX_ASYNC_ENTRY_FAILOVER_CLEANUP,
	BCMX_ASYNC_ENTRY_FAILOVER_CREATE,
	BCMX_ASYNC_ENTRY_FAILOVER_DESTROY,
	BCMX_ASYNC_ENTRY_FAILOVER_GET,
	BCMX_ASYNC_ENTRY_FAILOVER_INIT,
	BCMX_ASYNC_ENTRY_FAILOVER_SET,
	BCMX_ASYNC_ENTRY_FIELD_ACTION_ADD,
	BCMX_ASYNC_ENTRY_FIELD_ACTION_DELETE,
	BCMX_ASYNC_ENTRY_FIELD_ACTION_GET,
	BCMX_ASYNC_ENTRY_FIELD_ACTION_MAC_ADD,
	BCMX_ASYNC_ENTRY_FIELD_ACTION_MAC_GET,
	BCMX_ASYNC_ENTRY_FIELD_ACTION_PORTS_ADD,
	BCMX_ASYNC_ENTRY_FIELD_ACTION_PORTS_GET,
	BCMX_ASYNC_ENTRY_FIELD_ACTION_REMOVE,
	BCMX_ASYNC_ENTRY_FIELD_ACTION_REMOVE_ALL,
	BCMX_ASYNC_ENTRY_FIELD_CONTROL_GET,
	BCMX_ASYNC_ENTRY_FIELD_CONTROL_SET,
	BCMX_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_CREATE,
	BCMX_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_DESTROY,
	BCMX_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_DESTROY_ALL,
	BCMX_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_ETHERTYPE_ADD,
	BCMX_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_ETHERTYPE_DELETE,
	BCMX_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_GET,
	BCMX_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_IP_PROTOCOL_ADD,
	BCMX_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_IP_PROTOCOL_DELETE,
	BCMX_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_MULTI_GET,
	BCMX_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_PACKET_FORMAT_ADD,
	BCMX_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_PACKET_FORMAT_DELETE,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_COPY,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_CREATE,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_CREATE_ID,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_DESTROY,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_DESTROY_ALL,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_INSTALL,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_MULTI_GET,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_POLICER_ATTACH,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_POLICER_DETACH,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_POLICER_DETACH_ALL,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_POLICER_GET,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_PRIO_GET,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_PRIO_SET,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_REINSTALL,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_REMOVE,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_STAT_ATTACH,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_STAT_DETACH,
	BCMX_ASYNC_ENTRY_FIELD_ENTRY_STAT_GET,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_COMPRESS,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_CREATE,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_CREATE_ID,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_CREATE_MODE,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_CREATE_MODE_ID,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_DESTROY,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_ENABLE_GET,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_ENABLE_SET,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_GET,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_INSTALL,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_MODE_GET,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_PORT_CREATE_MODE,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_PORT_CREATE_MODE_ID,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_PORTS_CREATE_MODE,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_PORTS_CREATE_MODE_ID,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_PRIORITY_GET,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_PRIORITY_SET,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_REMOVE,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_SET,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_TRAVERSE,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_WLAN_CREATE_MODE,
	BCMX_ASYNC_ENTRY_FIELD_GROUP_WLAN_CREATE_MODE_ID,
	BCMX_ASYNC_ENTRY_FIELD_INIT,
	BCMX_ASYNC_ENTRY_FIELD_QSET_DATA_QUALIFIER_ADD,
	BCMX_ASYNC_ENTRY_FIELD_QSET_DATA_QUALIFIER_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFIER_DELETE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_BIGICMPCHECK_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_CNTAG,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_CNTAG_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_COLOR,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_COLOR_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSCP,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSCP_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DECAP,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DOSATTACK,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DOSATTACK_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DROP,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DROP_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSFIELD,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSFIELD_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL2,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL2_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL3,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL3_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTHIGIG,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTHIGIG_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6HIGH,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6HIGH_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6LOW,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6LOW_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESS,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTL3EGRESS_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTMAC,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTMAC_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTMIMGPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTMIMGPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTMPLSGPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTMPLSGPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTICASTGROUP,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTICASTGROUP_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATH,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTMULTIPATH_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTTRUNK,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTTRUNK_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTWLANGPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DSTWLANGPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_EQUALL4PORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_EQUALL4PORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_ETHERTYPE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_ETHERTYPE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADER2TYPE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADER2TYPE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERSUBCODE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERSUBCODE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERTYPE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERTYPE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FABRICQUEUETAG,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FABRICQUEUETAG_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANINNER,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANINNER_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANOUTER,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FIBRECHANOUTER_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGTYPE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGTYPE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANID,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANID_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANVALID,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANVALID_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_ICMPTYPECODE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IGMPTYPEMAXRESPTIME_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INPORTS,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INPORTS_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSSTPSTATE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSSTPSTATE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSCP,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSCP_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6HIGH,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6HIGH_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6FLOWLABEL,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERIP6FLOWLABEL_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPFRAG,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPFRAG_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOL,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOLCOMMON,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOLCOMMON_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOL_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPTYPE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPTYPE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4DSTPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4DSTPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4SRCPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERL4SRCPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6HIGH,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6HIGH_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERTOS,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERTOS_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERTPID,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERTPID_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERTTL,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERTTL_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLAN,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANCFI,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANCFI_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANID,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANID_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANPRI,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLANPRI_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLAN_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INTPRIORITY,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INTPRIORITY_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL2,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL2_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL3,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL3_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IP6FLOWLABEL,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IP6FLOWLABEL_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IP6HOPLIMIT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IP6HOPLIMIT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IP6NEXTHEADER,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IP6NEXTHEADER_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IP6TRAFFICCLASS,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IP6TRAFFICCLASS_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPAUTH_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPFLAGS,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPFLAGS_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAG,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAG_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPINFO,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPINFO_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOL,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOLCOMMON,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOLCOMMON_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOL_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPTYPE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPTYPE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPMCSTARGROUPHIT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_IPMCSTARGROUPHIT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2CACHEHIT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2CACHEHIT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTHIT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTHIT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2FORMAT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2FORMAT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2PAYLOADFIRSTEIGHTBYTES,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2PAYLOADFIRSTEIGHTBYTES_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCHIT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCHIT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCSTATIC,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCSTATIC_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2STATIONMOVE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L2STATIONMOVE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTHOSTHIT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTHOSTHIT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTROUTEHIT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTROUTEHIT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L3INGRESS,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L3INGRESS_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L3ROUTABLE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L3ROUTABLE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCHOSTHIT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCHOSTHIT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L4DSTPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L4DSTPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L4PORTS,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L4PORTS_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L4SRCPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_L4SRCPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_LLC,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_LLC_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACK,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKTYPE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACKTYPE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_LOOPBACK_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_MHOPCODE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_MHOPCODE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORCOPY,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORCOPY_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATED,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATED_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_MYSTATIONHIT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_MYSTATIONHIT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORTS,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORTS_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTERTPID,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTERTPID_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLAN,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANCFI,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANCFI_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANID,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANID_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANPRI,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLANPRI_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLAN_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_PACKETRES,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_PACKETRES_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_RANGECHECK,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_RANGECHECK_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SNAP,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SNAP_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSFIELD,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSFIELD_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL2,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL2_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL3,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL3_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6HIGH,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6HIGH_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6LOW,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6LOW_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPEQUALDSTIP,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPEQUALDSTIP_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCMAC,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCMAC_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCMIMGPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCMIMGPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODPORTGPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODPORTGPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODULEGPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODULEGPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCMPLSGPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCMPLSGPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCTRUNK,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCTRUNK_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCVIRTUALPORTVALID,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCVIRTUALPORTVALID_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCWLANGPORT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_SRCWLANGPORT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TCPCONTROL,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TCPCONTROL_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TCPHEADERSIZE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TCPHEADERSIZE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TCPSEQUENCEZERO,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TCPSEQUENCEZERO_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TOS,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TOS_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDVLANFORMAT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TRANSLATEDVLANFORMAT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TTL,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TTL_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATED,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATED_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTYPE,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTYPE_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_VLANFORMAT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_VLANFORMAT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATIONHIT,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATIONHIT_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_VNTAG,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_VNTAG_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_VPN,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_VPN_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_VRF,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_VRF_GET,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_CLEAR,
	BCMX_ASYNC_ENTRY_FIELD_QUALIFY_DATA,
	BCMX_ASYNC_ENTRY_FIELD_RANGE_CREATE,
	BCMX_ASYNC_ENTRY_FIELD_RANGE_CREATE_ID,
	BCMX_ASYNC_ENTRY_FIELD_RANGE_DESTROY,
	BCMX_ASYNC_ENTRY_FIELD_RANGE_GET,
	BCMX_ASYNC_ENTRY_FIELD_RANGE_GROUP_CREATE,
	BCMX_ASYNC_ENTRY_FIELD_RANGE_GROUP_CREATE_ID,
	BCMX_ASYNC_ENTRY_FIELD_RESYNC,
	BCMX_ASYNC_ENTRY_FIELD_STAT_ALL_SET,
	BCMX_ASYNC_ENTRY_FIELD_STAT_ALL_SET32,
	BCMX_ASYNC_ENTRY_FIELD_STAT_CONFIG_GET,
	BCMX_ASYNC_ENTRY_FIELD_STAT_CREATE,
	BCMX_ASYNC_ENTRY_FIELD_STAT_CREATE_ID,
	BCMX_ASYNC_ENTRY_FIELD_STAT_DESTROY,
	BCMX_ASYNC_ENTRY_FIELD_STAT_GET,
	BCMX_ASYNC_ENTRY_FIELD_STAT_GET32,
	BCMX_ASYNC_ENTRY_FIELD_STAT_MULTI_GET,
	BCMX_ASYNC_ENTRY_FIELD_STAT_MULTI_GET32,
	BCMX_ASYNC_ENTRY_FIELD_STAT_SET,
	BCMX_ASYNC_ENTRY_FIELD_STAT_SET32,
	BCMX_ASYNC_ENTRY_FIELD_STAT_SIZE,
	BCMX_ASYNC_ENTRY_INIT,
	BCMX_ASYNC_ENTRY_IPFIX_CONFIG_GET,
	BCMX_ASYNC_ENTRY_IPFIX_CONFIG_SET,
	BCMX_ASYNC_ENTRY_IPFIX_MIRROR_CONFIG_GET,
	BCMX_ASYNC_ENTRY_IPFIX_MIRROR_CONFIG_SET,
	BCMX_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_ADD,
	BCMX_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_DELETE,
	BCMX_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_DELETE_ALL,
	BCMX_ASYNC_ENTRY_IPFIX_MIRROR_PORT_DEST_GET,
	BCMX_ASYNC_ENTRY_IPFIX_RATE_CREATE,
	BCMX_ASYNC_ENTRY_IPFIX_RATE_DESTROY,
	BCMX_ASYNC_ENTRY_IPFIX_RATE_DESTROY_ALL,
	BCMX_ASYNC_ENTRY_IPFIX_RATE_GET,
	BCMX_ASYNC_ENTRY_IPFIX_RATE_MIRROR_ADD,
	BCMX_ASYNC_ENTRY_IPFIX_RATE_MIRROR_DELETE,
	BCMX_ASYNC_ENTRY_IPFIX_RATE_MIRROR_DELETE_ALL,
	BCMX_ASYNC_ENTRY_IPFIX_RATE_MIRROR_GET,
	BCMX_ASYNC_ENTRY_IPMC_ADD,
	BCMX_ASYNC_ENTRY_IPMC_AGE,
	BCMX_ASYNC_ENTRY_IPMC_COUNTERS_GET,
	BCMX_ASYNC_ENTRY_IPMC_DETACH,
	BCMX_ASYNC_ENTRY_IPMC_EGRESS_PORT_GET,
	BCMX_ASYNC_ENTRY_IPMC_EGRESS_PORT_INIT,
	BCMX_ASYNC_ENTRY_IPMC_EGRESS_PORT_SET,
	BCMX_ASYNC_ENTRY_IPMC_ENABLE,
	BCMX_ASYNC_ENTRY_IPMC_FIND,
	BCMX_ASYNC_ENTRY_IPMC_INIT,
	BCMX_ASYNC_ENTRY_IPMC_REMOVE,
	BCMX_ASYNC_ENTRY_IPMC_REMOVE_ALL,
	BCMX_ASYNC_ENTRY_IPMC_TRAVERSE,
	BCMX_ASYNC_ENTRY_L2_ADDR_ADD,
	BCMX_ASYNC_ENTRY_L2_ADDR_DELETE,
	BCMX_ASYNC_ENTRY_L2_ADDR_DELETE_BY_MAC,
	BCMX_ASYNC_ENTRY_L2_ADDR_DELETE_BY_MAC_PORT,
	BCMX_ASYNC_ENTRY_L2_ADDR_DELETE_BY_PORT,
	BCMX_ASYNC_ENTRY_L2_ADDR_DELETE_BY_TRUNK,
	BCMX_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN,
	BCMX_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN_PORT,
	BCMX_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN_TRUNK,
	BCMX_ASYNC_ENTRY_L2_ADDR_FREEZE,
	BCMX_ASYNC_ENTRY_L2_ADDR_FROM_BCM,
	BCMX_ASYNC_ENTRY_L2_ADDR_GET,
	BCMX_ASYNC_ENTRY_L2_ADDR_NATIVE_GET,
	BCMX_ASYNC_ENTRY_L2_ADDR_PORT_GET,
	BCMX_ASYNC_ENTRY_L2_ADDR_REFRESH,
	BCMX_ASYNC_ENTRY_L2_ADDR_THAW,
	BCMX_ASYNC_ENTRY_L2_ADDR_TO_BCM,
	BCMX_ASYNC_ENTRY_L2_AGE_TIMER_GET,
	BCMX_ASYNC_ENTRY_L2_AGE_TIMER_SET,
	BCMX_ASYNC_ENTRY_L2_CACHE_DELETE,
	BCMX_ASYNC_ENTRY_L2_CACHE_DELETE_ALL,
	BCMX_ASYNC_ENTRY_L2_CACHE_GET,
	BCMX_ASYNC_ENTRY_L2_CACHE_INIT,
	BCMX_ASYNC_ENTRY_L2_CACHE_SET,
	BCMX_ASYNC_ENTRY_L2_CACHE_SIZE_GET,
	BCMX_ASYNC_ENTRY_L2_CONFLICT_GET,
	BCMX_ASYNC_ENTRY_L2_DEVICE_ADD,
	BCMX_ASYNC_ENTRY_L2_DEVICE_REMOVE,
	BCMX_ASYNC_ENTRY_L2_LEARN_CLASS_GET,
	BCMX_ASYNC_ENTRY_L2_LEARN_CLASS_SET,
	BCMX_ASYNC_ENTRY_L2_LEARN_LIMIT_GET,
	BCMX_ASYNC_ENTRY_L2_LEARN_LIMIT_SET,
	BCMX_ASYNC_ENTRY_L2_LEARN_PORT_CLASS_GET,
	BCMX_ASYNC_ENTRY_L2_LEARN_PORT_CLASS_SET,
	BCMX_ASYNC_ENTRY_L2_NOTIFY_REGISTER,
	BCMX_ASYNC_ENTRY_L2_NOTIFY_START,
	BCMX_ASYNC_ENTRY_L2_NOTIFY_STOP,
	BCMX_ASYNC_ENTRY_L2_NOTIFY_UNREGISTER,
	BCMX_ASYNC_ENTRY_L2_REPLACE,
	BCMX_ASYNC_ENTRY_L2_TUNNEL_ADD,
	BCMX_ASYNC_ENTRY_L2_TUNNEL_DELETE,
	BCMX_ASYNC_ENTRY_L2_TUNNEL_DELETE_ALL,
	BCMX_ASYNC_ENTRY_L3_CLEANUP,
	BCMX_ASYNC_ENTRY_L3_EGRESS_CREATE,
	BCMX_ASYNC_ENTRY_L3_EGRESS_DESTROY,
	BCMX_ASYNC_ENTRY_L3_EGRESS_FIND,
	BCMX_ASYNC_ENTRY_L3_EGRESS_GET,
	BCMX_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_ADD,
	BCMX_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_CREATE,
	BCMX_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_DELETE,
	BCMX_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_DESTROY,
	BCMX_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_FIND,
	BCMX_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_GET,
	BCMX_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_MAX_CREATE,
	BCMX_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_TRAVERSE,
	BCMX_ASYNC_ENTRY_L3_EGRESS_TRAVERSE,
	BCMX_ASYNC_ENTRY_L3_ENABLE_SET,
	BCMX_ASYNC_ENTRY_L3_HOST_ADD,
	BCMX_ASYNC_ENTRY_L3_HOST_AGE,
	BCMX_ASYNC_ENTRY_L3_HOST_CONFLICT_GET,
	BCMX_ASYNC_ENTRY_L3_HOST_DELETE,
	BCMX_ASYNC_ENTRY_L3_HOST_DELETE_ALL,
	BCMX_ASYNC_ENTRY_L3_HOST_DELETE_BY_INTERFACE,
	BCMX_ASYNC_ENTRY_L3_HOST_DELETE_BY_NETWORK,
	BCMX_ASYNC_ENTRY_L3_HOST_FIND,
	BCMX_ASYNC_ENTRY_L3_HOST_INVALIDATE_ENTRY,
	BCMX_ASYNC_ENTRY_L3_HOST_TRAVERSE,
	BCMX_ASYNC_ENTRY_L3_HOST_VALIDATE_ENTRY,
	BCMX_ASYNC_ENTRY_L3_INFO,
	BCMX_ASYNC_ENTRY_L3_INGRESS_CREATE,
	BCMX_ASYNC_ENTRY_L3_INGRESS_DESTROY,
	BCMX_ASYNC_ENTRY_L3_INGRESS_FIND,
	BCMX_ASYNC_ENTRY_L3_INGRESS_GET,
	BCMX_ASYNC_ENTRY_L3_INIT,
	BCMX_ASYNC_ENTRY_L3_INTF_CREATE,
	BCMX_ASYNC_ENTRY_L3_INTF_DELETE,
	BCMX_ASYNC_ENTRY_L3_INTF_DELETE_ALL,
	BCMX_ASYNC_ENTRY_L3_INTF_FIND,
	BCMX_ASYNC_ENTRY_L3_INTF_FIND_VLAN,
	BCMX_ASYNC_ENTRY_L3_INTF_GET,
	BCMX_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_ADD,
	BCMX_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_DELETE,
	BCMX_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_DELETE_ALL,
	BCMX_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_GET,
	BCMX_ASYNC_ENTRY_L3_ROUTE_ADD,
	BCMX_ASYNC_ENTRY_L3_ROUTE_AGE,
	BCMX_ASYNC_ENTRY_L3_ROUTE_DELETE,
	BCMX_ASYNC_ENTRY_L3_ROUTE_DELETE_ALL,
	BCMX_ASYNC_ENTRY_L3_ROUTE_DELETE_BY_INTERFACE,
	BCMX_ASYNC_ENTRY_L3_ROUTE_GET,
	BCMX_ASYNC_ENTRY_L3_ROUTE_MAX_ECMP_GET,
	BCMX_ASYNC_ENTRY_L3_ROUTE_MAX_ECMP_SET,
	BCMX_ASYNC_ENTRY_L3_ROUTE_MULTIPATH_GET,
	BCMX_ASYNC_ENTRY_L3_ROUTE_TRAVERSE,
	BCMX_ASYNC_ENTRY_L3_SOURCE_BIND_ADD,
	BCMX_ASYNC_ENTRY_L3_SOURCE_BIND_DELETE,
	BCMX_ASYNC_ENTRY_L3_SOURCE_BIND_DELETE_ALL,
	BCMX_ASYNC_ENTRY_L3_SOURCE_BIND_ENABLE_GET,
	BCMX_ASYNC_ENTRY_L3_SOURCE_BIND_ENABLE_SET,
	BCMX_ASYNC_ENTRY_L3_SOURCE_BIND_GET,
	BCMX_ASYNC_ENTRY_L3_VRF_STAT_ENABLE_SET,
	BCMX_ASYNC_ENTRY_L3_VRF_STAT_GET,
	BCMX_ASYNC_ENTRY_L3_VRF_STAT_GET32,
	BCMX_ASYNC_ENTRY_L3_VRF_STAT_MULTI_GET,
	BCMX_ASYNC_ENTRY_L3_VRF_STAT_MULTI_GET32,
	BCMX_ASYNC_ENTRY_L3_VRF_STAT_MULTI_SET,
	BCMX_ASYNC_ENTRY_L3_VRF_STAT_MULTI_SET32,
	BCMX_ASYNC_ENTRY_L3_VRF_STAT_SET,
	BCMX_ASYNC_ENTRY_L3_VRF_STAT_SET32,
	BCMX_ASYNC_ENTRY_L3_VRRP_ADD,
	BCMX_ASYNC_ENTRY_L3_VRRP_DELETE,
	BCMX_ASYNC_ENTRY_L3_VRRP_DELETE_ALL,
	BCMX_ASYNC_ENTRY_L3_VRRP_GET,
	BCMX_ASYNC_ENTRY_LINKSCAN_DEVICE_ADD,
	BCMX_ASYNC_ENTRY_LINKSCAN_DEVICE_REMOVE,
	BCMX_ASYNC_ENTRY_LINKSCAN_ENABLE_GET,
	BCMX_ASYNC_ENTRY_LINKSCAN_ENABLE_PORT_GET,
	BCMX_ASYNC_ENTRY_LINKSCAN_ENABLE_SET,
	BCMX_ASYNC_ENTRY_LINKSCAN_REGISTER,
	BCMX_ASYNC_ENTRY_LINKSCAN_UNREGISTER,
	BCMX_ASYNC_ENTRY_MCAST_ADDR_ADD,
	BCMX_ASYNC_ENTRY_MCAST_ADDR_REMOVE,
	BCMX_ASYNC_ENTRY_MCAST_INIT,
	BCMX_ASYNC_ENTRY_MCAST_JOIN,
	BCMX_ASYNC_ENTRY_MCAST_LEAVE,
	BCMX_ASYNC_ENTRY_MCAST_PORT_ADD,
	BCMX_ASYNC_ENTRY_MCAST_PORT_GET,
	BCMX_ASYNC_ENTRY_MCAST_PORT_REMOVE,
	BCMX_ASYNC_ENTRY_MIM_DETACH,
	BCMX_ASYNC_ENTRY_MIM_INIT,
	BCMX_ASYNC_ENTRY_MIM_PORT_ADD,
	BCMX_ASYNC_ENTRY_MIM_PORT_DELETE,
	BCMX_ASYNC_ENTRY_MIM_PORT_DELETE_ALL,
	BCMX_ASYNC_ENTRY_MIM_PORT_GET,
	BCMX_ASYNC_ENTRY_MIM_PORT_GET_ALL,
	BCMX_ASYNC_ENTRY_MIM_VPN_CREATE,
	BCMX_ASYNC_ENTRY_MIM_VPN_DESTROY,
	BCMX_ASYNC_ENTRY_MIM_VPN_DESTROY_ALL,
	BCMX_ASYNC_ENTRY_MIM_VPN_GET,
	BCMX_ASYNC_ENTRY_MIRROR_DESTINATION_CREATE,
	BCMX_ASYNC_ENTRY_MIRROR_DESTINATION_DESTROY,
	BCMX_ASYNC_ENTRY_MIRROR_DESTINATION_GET,
	BCMX_ASYNC_ENTRY_MIRROR_EGRESS_GET,
	BCMX_ASYNC_ENTRY_MIRROR_EGRESS_SET,
	BCMX_ASYNC_ENTRY_MIRROR_FABRIC_LIST_GET,
	BCMX_ASYNC_ENTRY_MIRROR_FABRIC_LIST_SET,
	BCMX_ASYNC_ENTRY_MIRROR_INGRESS_GET,
	BCMX_ASYNC_ENTRY_MIRROR_INGRESS_SET,
	BCMX_ASYNC_ENTRY_MIRROR_INIT,
	BCMX_ASYNC_ENTRY_MIRROR_MODE_GET,
	BCMX_ASYNC_ENTRY_MIRROR_MODE_SET,
	BCMX_ASYNC_ENTRY_MIRROR_PORT_DEST_ADD,
	BCMX_ASYNC_ENTRY_MIRROR_PORT_DEST_DELETE,
	BCMX_ASYNC_ENTRY_MIRROR_PORT_DEST_DELETE_ALL,
	BCMX_ASYNC_ENTRY_MIRROR_PORT_DEST_GET,
	BCMX_ASYNC_ENTRY_MIRROR_PORT_GET,
	BCMX_ASYNC_ENTRY_MIRROR_PORT_SET,
	BCMX_ASYNC_ENTRY_MIRROR_TO_GET,
	BCMX_ASYNC_ENTRY_MIRROR_TO_SET,
	BCMX_ASYNC_ENTRY_MIRROR_VLAN_GET,
	BCMX_ASYNC_ENTRY_MIRROR_VLAN_SET,
	BCMX_ASYNC_ENTRY_MPLS_CLEANUP,
	BCMX_ASYNC_ENTRY_MPLS_EXP_MAP_CREATE,
	BCMX_ASYNC_ENTRY_MPLS_EXP_MAP_DESTROY,
	BCMX_ASYNC_ENTRY_MPLS_EXP_MAP_GET,
	BCMX_ASYNC_ENTRY_MPLS_EXP_MAP_SET,
	BCMX_ASYNC_ENTRY_MPLS_INIT,
	BCMX_ASYNC_ENTRY_MPLS_LABEL_STAT_CLEAR,
	BCMX_ASYNC_ENTRY_MPLS_LABEL_STAT_GET,
	BCMX_ASYNC_ENTRY_MPLS_LABEL_STAT_GET32,
	BCMX_ASYNC_ENTRY_MPLS_PORT_ADD,
	BCMX_ASYNC_ENTRY_MPLS_PORT_DELETE,
	BCMX_ASYNC_ENTRY_MPLS_PORT_DELETE_ALL,
	BCMX_ASYNC_ENTRY_MPLS_PORT_GET,
	BCMX_ASYNC_ENTRY_MPLS_PORT_GET_ALL,
	BCMX_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_CLEAR,
	BCMX_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_CLEAR_ALL,
	BCMX_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_GET,
	BCMX_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_SET,
	BCMX_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_ADD,
	BCMX_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_DELETE,
	BCMX_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_DELETE_ALL,
	BCMX_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_GET,
	BCMX_ASYNC_ENTRY_MPLS_VPN_ID_CREATE,
	BCMX_ASYNC_ENTRY_MPLS_VPN_ID_DESTROY,
	BCMX_ASYNC_ENTRY_MPLS_VPN_ID_DESTROY_ALL,
	BCMX_ASYNC_ENTRY_MPLS_VPN_ID_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_CONTROL_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_CONTROL_SET,
	BCMX_ASYNC_ENTRY_MULTICAST_CREATE,
	BCMX_ASYNC_ENTRY_MULTICAST_DESTROY,
	BCMX_ASYNC_ENTRY_MULTICAST_DETACH,
	BCMX_ASYNC_ENTRY_MULTICAST_EGRESS_ADD,
	BCMX_ASYNC_ENTRY_MULTICAST_EGRESS_DELETE,
	BCMX_ASYNC_ENTRY_MULTICAST_EGRESS_DELETE_ALL,
	BCMX_ASYNC_ENTRY_MULTICAST_EGRESS_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_EGRESS_SET,
	BCMX_ASYNC_ENTRY_MULTICAST_GROUP_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_INIT,
	BCMX_ASYNC_ENTRY_MULTICAST_L2_ENCAP_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_L3_ENCAP_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_MIM_ENCAP_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_NIV_ENCAP_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_REPL_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_REPL_SET,
	BCMX_ASYNC_ENTRY_MULTICAST_SUBPORT_ENCAP_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_TRILL_ENCAP_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_VLAN_ENCAP_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_VPLS_ENCAP_GET,
	BCMX_ASYNC_ENTRY_MULTICAST_WLAN_ENCAP_GET,
	BCMX_ASYNC_ENTRY_NIV_CLEANUP,
	BCMX_ASYNC_ENTRY_NIV_FORWARD_ADD,
	BCMX_ASYNC_ENTRY_NIV_FORWARD_DELETE,
	BCMX_ASYNC_ENTRY_NIV_FORWARD_DELETE_ALL,
	BCMX_ASYNC_ENTRY_NIV_FORWARD_GET,
	BCMX_ASYNC_ENTRY_NIV_INIT,
	BCMX_ASYNC_ENTRY_NIV_PORT_ADD,
	BCMX_ASYNC_ENTRY_NIV_PORT_DELETE,
	BCMX_ASYNC_ENTRY_NIV_PORT_DELETE_ALL,
	BCMX_ASYNC_ENTRY_NIV_PORT_GET,
	BCMX_ASYNC_ENTRY_OAM_DETACH,
	BCMX_ASYNC_ENTRY_OAM_ENDPOINT_CREATE,
	BCMX_ASYNC_ENTRY_OAM_ENDPOINT_DESTROY,
	BCMX_ASYNC_ENTRY_OAM_ENDPOINT_DESTROY_ALL,
	BCMX_ASYNC_ENTRY_OAM_ENDPOINT_GET,
	BCMX_ASYNC_ENTRY_OAM_GROUP_CREATE,
	BCMX_ASYNC_ENTRY_OAM_GROUP_DESTROY,
	BCMX_ASYNC_ENTRY_OAM_GROUP_DESTROY_ALL,
	BCMX_ASYNC_ENTRY_OAM_GROUP_GET,
	BCMX_ASYNC_ENTRY_OAM_INIT,
	BCMX_ASYNC_ENTRY_POLICER_CREATE,
	BCMX_ASYNC_ENTRY_POLICER_DESTROY,
	BCMX_ASYNC_ENTRY_POLICER_DESTROY_ALL,
	BCMX_ASYNC_ENTRY_POLICER_GET,
	BCMX_ASYNC_ENTRY_POLICER_INIT,
	BCMX_ASYNC_ENTRY_POLICER_SET,
	BCMX_ASYNC_ENTRY_PORT_ABILITY_ADVERT_GET,
	BCMX_ASYNC_ENTRY_PORT_ABILITY_ADVERT_SET,
	BCMX_ASYNC_ENTRY_PORT_ABILITY_GET,
	BCMX_ASYNC_ENTRY_PORT_ABILITY_LOCAL_GET,
	BCMX_ASYNC_ENTRY_PORT_ABILITY_REMOTE_GET,
	BCMX_ASYNC_ENTRY_PORT_ADVERT_GET,
	BCMX_ASYNC_ENTRY_PORT_ADVERT_REMOTE_GET,
	BCMX_ASYNC_ENTRY_PORT_ADVERT_SET,
	BCMX_ASYNC_ENTRY_PORT_AUTONEG_GET,
	BCMX_ASYNC_ENTRY_PORT_AUTONEG_SET,
	BCMX_ASYNC_ENTRY_PORT_BPDU_ENABLE_GET,
	BCMX_ASYNC_ENTRY_PORT_BPDU_ENABLE_SET,
	BCMX_ASYNC_ENTRY_PORT_CABLE_DIAG,
	BCMX_ASYNC_ENTRY_PORT_CFI_COLOR_GET,
	BCMX_ASYNC_ENTRY_PORT_CFI_COLOR_SET,
	BCMX_ASYNC_ENTRY_PORT_CLASS_GET,
	BCMX_ASYNC_ENTRY_PORT_CLASS_SET,
	BCMX_ASYNC_ENTRY_PORT_CONFIG_GET,
	BCMX_ASYNC_ENTRY_PORT_CONGESTION_CONFIG_GET,
	BCMX_ASYNC_ENTRY_PORT_CONGESTION_CONFIG_SET,
	BCMX_ASYNC_ENTRY_PORT_CONTROL_GET,
	BCMX_ASYNC_ENTRY_PORT_CONTROL_PHY_TIMESYNC_GET,
	BCMX_ASYNC_ENTRY_PORT_CONTROL_PHY_TIMESYNC_SET,
	BCMX_ASYNC_ENTRY_PORT_CONTROL_SET,
	BCMX_ASYNC_ENTRY_PORT_DISCARD_GET,
	BCMX_ASYNC_ENTRY_PORT_DISCARD_SET,
	BCMX_ASYNC_ENTRY_PORT_DSCP_MAP_GET,
	BCMX_ASYNC_ENTRY_PORT_DSCP_MAP_MODE_GET,
	BCMX_ASYNC_ENTRY_PORT_DSCP_MAP_MODE_SET,
	BCMX_ASYNC_ENTRY_PORT_DSCP_MAP_SET,
	BCMX_ASYNC_ENTRY_PORT_DTAG_MODE_GET,
	BCMX_ASYNC_ENTRY_PORT_DTAG_MODE_SET,
	BCMX_ASYNC_ENTRY_PORT_DUPLEX_GET,
	BCMX_ASYNC_ENTRY_PORT_DUPLEX_SET,
	BCMX_ASYNC_ENTRY_PORT_EGRESS_GET,
	BCMX_ASYNC_ENTRY_PORT_EGRESS_SET,
	BCMX_ASYNC_ENTRY_PORT_ENABLE_GET,
	BCMX_ASYNC_ENTRY_PORT_ENABLE_SET,
	BCMX_ASYNC_ENTRY_PORT_ENCAP_CONFIG_GET,
	BCMX_ASYNC_ENTRY_PORT_ENCAP_CONFIG_SET,
	BCMX_ASYNC_ENTRY_PORT_ENCAP_GET,
	BCMX_ASYNC_ENTRY_PORT_ENCAP_SET,
	BCMX_ASYNC_ENTRY_PORT_FAULT_GET,
	BCMX_ASYNC_ENTRY_PORT_FLOOD_BLOCK_GET,
	BCMX_ASYNC_ENTRY_PORT_FLOOD_BLOCK_SET,
	BCMX_ASYNC_ENTRY_PORT_FORCE_VLAN_GET,
	BCMX_ASYNC_ENTRY_PORT_FORCE_VLAN_SET,
	BCMX_ASYNC_ENTRY_PORT_FRAME_MAX_GET,
	BCMX_ASYNC_ENTRY_PORT_FRAME_MAX_SET,
	BCMX_ASYNC_ENTRY_PORT_GPORT_GET,
	BCMX_ASYNC_ENTRY_PORT_IFG_GET,
	BCMX_ASYNC_ENTRY_PORT_IFG_SET,
	BCMX_ASYNC_ENTRY_PORT_IFILTER_GET,
	BCMX_ASYNC_ENTRY_PORT_IFILTER_SET,
	BCMX_ASYNC_ENTRY_PORT_INFO_GET,
	BCMX_ASYNC_ENTRY_PORT_INFO_RESTORE,
	BCMX_ASYNC_ENTRY_PORT_INFO_SAVE,
	BCMX_ASYNC_ENTRY_PORT_INFO_SET,
	BCMX_ASYNC_ENTRY_PORT_INNER_TPID_GET,
	BCMX_ASYNC_ENTRY_PORT_INNER_TPID_SET,
	BCMX_ASYNC_ENTRY_PORT_INTERFACE_GET,
	BCMX_ASYNC_ENTRY_PORT_INTERFACE_SET,
	BCMX_ASYNC_ENTRY_PORT_IPMC_MODIFY_GET,
	BCMX_ASYNC_ENTRY_PORT_IPMC_MODIFY_SET,
	BCMX_ASYNC_ENTRY_PORT_JAM_GET,
	BCMX_ASYNC_ENTRY_PORT_JAM_SET,
	BCMX_ASYNC_ENTRY_PORT_L3_ENABLE_GET,
	BCMX_ASYNC_ENTRY_PORT_L3_ENABLE_SET,
	BCMX_ASYNC_ENTRY_PORT_L3_MODIFY_GET,
	BCMX_ASYNC_ENTRY_PORT_L3_MODIFY_SET,
	BCMX_ASYNC_ENTRY_PORT_L3_MTU_GET,
	BCMX_ASYNC_ENTRY_PORT_L3_MTU_SET,
	BCMX_ASYNC_ENTRY_PORT_LEARN_GET,
	BCMX_ASYNC_ENTRY_PORT_LEARN_MODIFY,
	BCMX_ASYNC_ENTRY_PORT_LEARN_SET,
	BCMX_ASYNC_ENTRY_PORT_LINK_FAILED_CLEAR,
	BCMX_ASYNC_ENTRY_PORT_LINK_STATUS_GET,
	BCMX_ASYNC_ENTRY_PORT_LINKSCAN_GET,
	BCMX_ASYNC_ENTRY_PORT_LINKSCAN_SET,
	BCMX_ASYNC_ENTRY_PORT_LOOPBACK_GET,
	BCMX_ASYNC_ENTRY_PORT_LOOPBACK_SET,
	BCMX_ASYNC_ENTRY_PORT_LPLIST_POPULATE,
	BCMX_ASYNC_ENTRY_PORT_MASTER_GET,
	BCMX_ASYNC_ENTRY_PORT_MASTER_SET,
	BCMX_ASYNC_ENTRY_PORT_MATCH_ADD,
	BCMX_ASYNC_ENTRY_PORT_MATCH_DELETE,
	BCMX_ASYNC_ENTRY_PORT_MATCH_DELETE_ALL,
	BCMX_ASYNC_ENTRY_PORT_MATCH_MULTI_GET,
	BCMX_ASYNC_ENTRY_PORT_MATCH_REPLACE,
	BCMX_ASYNC_ENTRY_PORT_MATCH_SET,
	BCMX_ASYNC_ENTRY_PORT_MDIX_GET,
	BCMX_ASYNC_ENTRY_PORT_MDIX_SET,
	BCMX_ASYNC_ENTRY_PORT_MDIX_STATUS_GET,
	BCMX_ASYNC_ENTRY_PORT_MEDIUM_CONFIG_GET,
	BCMX_ASYNC_ENTRY_PORT_MEDIUM_CONFIG_SET,
	BCMX_ASYNC_ENTRY_PORT_MEDIUM_GET,
	BCMX_ASYNC_ENTRY_PORT_MODID_ENABLE_GET,
	BCMX_ASYNC_ENTRY_PORT_MODID_ENABLE_SET,
	BCMX_ASYNC_ENTRY_PORT_PAUSE_ADDR_GET,
	BCMX_ASYNC_ENTRY_PORT_PAUSE_ADDR_SET,
	BCMX_ASYNC_ENTRY_PORT_PAUSE_GET,
	BCMX_ASYNC_ENTRY_PORT_PAUSE_SET,
	BCMX_ASYNC_ENTRY_PORT_PAUSE_SYM_GET,
	BCMX_ASYNC_ENTRY_PORT_PAUSE_SYM_SET,
	BCMX_ASYNC_ENTRY_PORT_PFM_GET,
	BCMX_ASYNC_ENTRY_PORT_PFM_SET,
	BCMX_ASYNC_ENTRY_PORT_PHY_CONTROL_GET,
	BCMX_ASYNC_ENTRY_PORT_PHY_CONTROL_SET,
	BCMX_ASYNC_ENTRY_PORT_PHY_GET,
	BCMX_ASYNC_ENTRY_PORT_PHY_MODIFY,
	BCMX_ASYNC_ENTRY_PORT_PHY_SET,
	BCMX_ASYNC_ENTRY_PORT_PHY_TIMESYNC_CONFIG_GET,
	BCMX_ASYNC_ENTRY_PORT_PHY_TIMESYNC_CONFIG_SET,
	BCMX_ASYNC_ENTRY_PORT_PHY_TIMESYNC_ENHANCED_CAPTURE_GET,
	BCMX_ASYNC_ENTRY_PORT_PRIORITY_COLOR_GET,
	BCMX_ASYNC_ENTRY_PORT_PRIORITY_COLOR_SET,
	BCMX_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_ADD,
	BCMX_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_DELETE,
	BCMX_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_DELETE_ALL,
	BCMX_ASYNC_ENTRY_PORT_QUEUED_COUNT_GET,
	BCMX_ASYNC_ENTRY_PORT_RATE_EGRESS_GET,
	BCMX_ASYNC_ENTRY_PORT_RATE_EGRESS_SET,
	BCMX_ASYNC_ENTRY_PORT_RATE_INGRESS_GET,
	BCMX_ASYNC_ENTRY_PORT_RATE_INGRESS_SET,
	BCMX_ASYNC_ENTRY_PORT_RATE_PAUSE_GET,
	BCMX_ASYNC_ENTRY_PORT_RATE_PAUSE_SET,
	BCMX_ASYNC_ENTRY_PORT_SAMPLE_RATE_GET,
	BCMX_ASYNC_ENTRY_PORT_SAMPLE_RATE_SET,
	BCMX_ASYNC_ENTRY_PORT_SELECTIVE_GET,
	BCMX_ASYNC_ENTRY_PORT_SELECTIVE_SET,
	BCMX_ASYNC_ENTRY_PORT_SPEED_GET,
	BCMX_ASYNC_ENTRY_PORT_SPEED_MAX,
	BCMX_ASYNC_ENTRY_PORT_SPEED_SET,
	BCMX_ASYNC_ENTRY_PORT_STAT_ENABLE_SET,
	BCMX_ASYNC_ENTRY_PORT_STAT_GET,
	BCMX_ASYNC_ENTRY_PORT_STAT_GET32,
	BCMX_ASYNC_ENTRY_PORT_STAT_MULTI_GET,
	BCMX_ASYNC_ENTRY_PORT_STAT_MULTI_GET32,
	BCMX_ASYNC_ENTRY_PORT_STAT_MULTI_SET,
	BCMX_ASYNC_ENTRY_PORT_STAT_MULTI_SET32,
	BCMX_ASYNC_ENTRY_PORT_STAT_SET,
	BCMX_ASYNC_ENTRY_PORT_STAT_SET32,
	BCMX_ASYNC_ENTRY_PORT_STP_GET,
	BCMX_ASYNC_ENTRY_PORT_STP_SET,
	BCMX_ASYNC_ENTRY_PORT_SUBSIDIARY_PORTS_GET,
	BCMX_ASYNC_ENTRY_PORT_TGID_GET,
	BCMX_ASYNC_ENTRY_PORT_TGID_SET,
	BCMX_ASYNC_ENTRY_PORT_TPID_ADD,
	BCMX_ASYNC_ENTRY_PORT_TPID_DELETE,
	BCMX_ASYNC_ENTRY_PORT_TPID_DELETE_ALL,
	BCMX_ASYNC_ENTRY_PORT_TPID_GET,
	BCMX_ASYNC_ENTRY_PORT_TPID_SET,
	BCMX_ASYNC_ENTRY_PORT_UNTAGGED_PRIORITY_GET,
	BCMX_ASYNC_ENTRY_PORT_UNTAGGED_PRIORITY_SET,
	BCMX_ASYNC_ENTRY_PORT_UNTAGGED_VLAN_GET,
	BCMX_ASYNC_ENTRY_PORT_UNTAGGED_VLAN_SET,
	BCMX_ASYNC_ENTRY_PORT_UPDATE,
	BCMX_ASYNC_ENTRY_PORT_VLAN_INNER_TAG_GET,
	BCMX_ASYNC_ENTRY_PORT_VLAN_INNER_TAG_SET,
	BCMX_ASYNC_ENTRY_PORT_VLAN_MEMBER_GET,
	BCMX_ASYNC_ENTRY_PORT_VLAN_MEMBER_SET,
	BCMX_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAP_GET,
	BCMX_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAP_SET,
	BCMX_ASYNC_ENTRY_PORT_VLAN_PRIORITY_UNMAP_GET,
	BCMX_ASYNC_ENTRY_PORT_VLAN_PRIORITY_UNMAP_SET,
	BCMX_ASYNC_ENTRY_PROXY_CLEANUP,
	BCMX_ASYNC_ENTRY_PROXY_CLIENT_SET,
	BCMX_ASYNC_ENTRY_PROXY_INIT,
	BCMX_ASYNC_ENTRY_PROXY_SERVER_GET,
	BCMX_ASYNC_ENTRY_PROXY_SERVER_SET,
	BCMX_ASYNC_ENTRY_QOS_DETACH,
	BCMX_ASYNC_ENTRY_QOS_INIT,
	BCMX_ASYNC_ENTRY_QOS_MAP_ADD,
	BCMX_ASYNC_ENTRY_QOS_MAP_CREATE,
	BCMX_ASYNC_ENTRY_QOS_MAP_DELETE,
	BCMX_ASYNC_ENTRY_QOS_MAP_DESTROY,
	BCMX_ASYNC_ENTRY_QOS_MAP_MULTI_GET,
	BCMX_ASYNC_ENTRY_QOS_MULTI_GET,
	BCMX_ASYNC_ENTRY_QOS_PORT_MAP_GET,
	BCMX_ASYNC_ENTRY_QOS_PORT_MAP_SET,
	BCMX_ASYNC_ENTRY_QOS_PORT_VLAN_MAP_GET,
	BCMX_ASYNC_ENTRY_QOS_PORT_VLAN_MAP_SET,
	BCMX_ASYNC_ENTRY_RATE_BANDWIDTH_GET,
	BCMX_ASYNC_ENTRY_RATE_BANDWIDTH_SET,
	BCMX_ASYNC_ENTRY_RATE_BCAST_GET,
	BCMX_ASYNC_ENTRY_RATE_BCAST_SET,
	BCMX_ASYNC_ENTRY_RATE_DLFBC_GET,
	BCMX_ASYNC_ENTRY_RATE_DLFBC_SET,
	BCMX_ASYNC_ENTRY_RATE_GET,
	BCMX_ASYNC_ENTRY_RATE_MCAST_GET,
	BCMX_ASYNC_ENTRY_RATE_MCAST_SET,
	BCMX_ASYNC_ENTRY_RATE_SET,
	BCMX_ASYNC_ENTRY_RATE_TYPE_GET,
	BCMX_ASYNC_ENTRY_RATE_TYPE_SET,
	BCMX_ASYNC_ENTRY_RX_CONTROL_GET,
	BCMX_ASYNC_ENTRY_RX_CONTROL_SET,
	BCMX_ASYNC_ENTRY_RX_DEVICE_ADD,
	BCMX_ASYNC_ENTRY_RX_DEVICE_REMOVE,
	BCMX_ASYNC_ENTRY_RX_REGISTER,
	BCMX_ASYNC_ENTRY_RX_RUNNING,
	BCMX_ASYNC_ENTRY_RX_START,
	BCMX_ASYNC_ENTRY_RX_STOP,
	BCMX_ASYNC_ENTRY_RX_UNREGISTER,
	BCMX_ASYNC_ENTRY_STAT_CLEAR,
	BCMX_ASYNC_ENTRY_STAT_CUSTOM_ADD,
	BCMX_ASYNC_ENTRY_STAT_CUSTOM_CHECK,
	BCMX_ASYNC_ENTRY_STAT_CUSTOM_DELETE,
	BCMX_ASYNC_ENTRY_STAT_CUSTOM_DELETE_ALL,
	BCMX_ASYNC_ENTRY_STAT_CUSTOM_GET,
	BCMX_ASYNC_ENTRY_STAT_CUSTOM_SET,
	BCMX_ASYNC_ENTRY_STAT_GET,
	BCMX_ASYNC_ENTRY_STAT_GET32,
	BCMX_ASYNC_ENTRY_STAT_INIT,
	BCMX_ASYNC_ENTRY_STAT_MULTI_GET,
	BCMX_ASYNC_ENTRY_STAT_MULTI_GET32,
	BCMX_ASYNC_ENTRY_STAT_SYNC,
	BCMX_ASYNC_ENTRY_STG_COUNT_GET,
	BCMX_ASYNC_ENTRY_STG_CREATE,
	BCMX_ASYNC_ENTRY_STG_CREATE_ID,
	BCMX_ASYNC_ENTRY_STG_DEFAULT_GET,
	BCMX_ASYNC_ENTRY_STG_DEFAULT_SET,
	BCMX_ASYNC_ENTRY_STG_DESTROY,
	BCMX_ASYNC_ENTRY_STG_INIT,
	BCMX_ASYNC_ENTRY_STG_LIST,
	BCMX_ASYNC_ENTRY_STG_LIST_DESTROY,
	BCMX_ASYNC_ENTRY_STG_STP_GET,
	BCMX_ASYNC_ENTRY_STG_STP_SET,
	BCMX_ASYNC_ENTRY_STG_VLAN_ADD,
	BCMX_ASYNC_ENTRY_STG_VLAN_LIST,
	BCMX_ASYNC_ENTRY_STG_VLAN_LIST_DESTROY,
	BCMX_ASYNC_ENTRY_STG_VLAN_REMOVE,
	BCMX_ASYNC_ENTRY_STG_VLAN_REMOVE_ALL,
	BCMX_ASYNC_ENTRY_SUBPORT_CLEANUP,
	BCMX_ASYNC_ENTRY_SUBPORT_GROUP_CREATE,
	BCMX_ASYNC_ENTRY_SUBPORT_GROUP_DESTROY,
	BCMX_ASYNC_ENTRY_SUBPORT_GROUP_GET,
	BCMX_ASYNC_ENTRY_SUBPORT_INIT,
	BCMX_ASYNC_ENTRY_SUBPORT_PORT_ADD,
	BCMX_ASYNC_ENTRY_SUBPORT_PORT_DELETE,
	BCMX_ASYNC_ENTRY_SUBPORT_PORT_GET,
	BCMX_ASYNC_ENTRY_SWITCH_CONTROL_GET,
	BCMX_ASYNC_ENTRY_SWITCH_CONTROL_PORT_GET,
	BCMX_ASYNC_ENTRY_SWITCH_CONTROL_PORT_SET,
	BCMX_ASYNC_ENTRY_SWITCH_CONTROL_SET,
	BCMX_ASYNC_ENTRY_SWITCH_RCPU_ENCAP_PRIORITY_MAP_GET,
	BCMX_ASYNC_ENTRY_SWITCH_RCPU_ENCAP_PRIORITY_MAP_SET,
	BCMX_ASYNC_ENTRY_TRILL_CLEANUP,
	BCMX_ASYNC_ENTRY_TRILL_INIT,
	BCMX_ASYNC_ENTRY_TRILL_MULTICAST_DELETE_ALL,
	BCMX_ASYNC_ENTRY_TRILL_MULTICAST_ENTRY_ADD,
	BCMX_ASYNC_ENTRY_TRILL_MULTICAST_ENTRY_DELETE,
	BCMX_ASYNC_ENTRY_TRILL_MULTICAST_ENTRY_GET,
	BCMX_ASYNC_ENTRY_TRILL_MULTICAST_SOURCE_ADD,
	BCMX_ASYNC_ENTRY_TRILL_MULTICAST_SOURCE_DELETE,
	BCMX_ASYNC_ENTRY_TRILL_MULTICAST_SOURCE_GET,
	BCMX_ASYNC_ENTRY_TRILL_PORT_ADD,
	BCMX_ASYNC_ENTRY_TRILL_PORT_DELETE,
	BCMX_ASYNC_ENTRY_TRILL_PORT_DELETE_ALL,
	BCMX_ASYNC_ENTRY_TRILL_PORT_GET,
	BCMX_ASYNC_ENTRY_TRILL_PORT_GET_ALL,
	BCMX_ASYNC_ENTRY_TRILL_STAT_CLEAR,
	BCMX_ASYNC_ENTRY_TRILL_STAT_GET,
	BCMX_ASYNC_ENTRY_TRILL_STAT_GET32,
	BCMX_ASYNC_ENTRY_TRUNK_CHIP_INFO_GET,
	BCMX_ASYNC_ENTRY_TRUNK_CREATE,
	BCMX_ASYNC_ENTRY_TRUNK_CREATE_ID,
	BCMX_ASYNC_ENTRY_TRUNK_DESTROY,
	BCMX_ASYNC_ENTRY_TRUNK_DETACH,
	BCMX_ASYNC_ENTRY_TRUNK_EGRESS_GET,
	BCMX_ASYNC_ENTRY_TRUNK_EGRESS_SET,
	BCMX_ASYNC_ENTRY_TRUNK_FAILOVER_GET,
	BCMX_ASYNC_ENTRY_TRUNK_FAILOVER_SET,
	BCMX_ASYNC_ENTRY_TRUNK_FIND,
	BCMX_ASYNC_ENTRY_TRUNK_GET,
	BCMX_ASYNC_ENTRY_TRUNK_INIT,
	BCMX_ASYNC_ENTRY_TRUNK_MCAST_JOIN,
	BCMX_ASYNC_ENTRY_TRUNK_MEMBER_ADD,
	BCMX_ASYNC_ENTRY_TRUNK_MEMBER_DELETE,
	BCMX_ASYNC_ENTRY_TRUNK_MEMBER_DELETE_ALL,
	BCMX_ASYNC_ENTRY_TRUNK_MEMBER_GET,
	BCMX_ASYNC_ENTRY_TRUNK_MEMBER_SET,
	BCMX_ASYNC_ENTRY_TRUNK_PSC_GET,
	BCMX_ASYNC_ENTRY_TRUNK_PSC_SET,
	BCMX_ASYNC_ENTRY_TRUNK_SET,
	BCMX_ASYNC_ENTRY_TUNNEL_CONFIG_GET,
	BCMX_ASYNC_ENTRY_TUNNEL_CONFIG_SET,
	BCMX_ASYNC_ENTRY_TUNNEL_DSCP_MAP_CREATE,
	BCMX_ASYNC_ENTRY_TUNNEL_DSCP_MAP_DESTROY,
	BCMX_ASYNC_ENTRY_TUNNEL_DSCP_MAP_GET,
	BCMX_ASYNC_ENTRY_TUNNEL_DSCP_MAP_PORT_GET,
	BCMX_ASYNC_ENTRY_TUNNEL_DSCP_MAP_PORT_SET,
	BCMX_ASYNC_ENTRY_TUNNEL_DSCP_MAP_SET,
	BCMX_ASYNC_ENTRY_TUNNEL_INITIATOR_CLEAR,
	BCMX_ASYNC_ENTRY_TUNNEL_INITIATOR_GET,
	BCMX_ASYNC_ENTRY_TUNNEL_INITIATOR_SET,
	BCMX_ASYNC_ENTRY_TUNNEL_TERMINATOR_ADD,
	BCMX_ASYNC_ENTRY_TUNNEL_TERMINATOR_DELETE,
	BCMX_ASYNC_ENTRY_TUNNEL_TERMINATOR_GET,
	BCMX_ASYNC_ENTRY_TUNNEL_TERMINATOR_UPDATE,
	BCMX_ASYNC_ENTRY_TUNNEL_TERMINATOR_VLAN_GET,
	BCMX_ASYNC_ENTRY_TUNNEL_TERMINATOR_VLAN_SET,
	BCMX_ASYNC_ENTRY_TX,
	BCMX_ASYNC_ENTRY_TX_FLOOD,
	BCMX_ASYNC_ENTRY_TX_LPLIST,
	BCMX_ASYNC_ENTRY_TX_PKT_L3_SET,
	BCMX_ASYNC_ENTRY_TX_PKT_UNTAGGED_SET,
	BCMX_ASYNC_ENTRY_TX_PORT_LIST,
	BCMX_ASYNC_ENTRY_TX_UC,
	BCMX_ASYNC_ENTRY_UPORT_CREATE_CALLBACK_SET,
	BCMX_ASYNC_ENTRY_VLAN_BLOCK_GET,
	BCMX_ASYNC_ENTRY_VLAN_BLOCK_SET,
	BCMX_ASYNC_ENTRY_VLAN_CONTROL_GET,
	BCMX_ASYNC_ENTRY_VLAN_CONTROL_PORT_GET,
	BCMX_ASYNC_ENTRY_VLAN_CONTROL_PORT_SET,
	BCMX_ASYNC_ENTRY_VLAN_CONTROL_SET,
	BCMX_ASYNC_ENTRY_VLAN_CONTROL_VLAN_GET,
	BCMX_ASYNC_ENTRY_VLAN_CONTROL_VLAN_SET,
	BCMX_ASYNC_ENTRY_VLAN_CREATE,
	BCMX_ASYNC_ENTRY_VLAN_CROSS_CONNECT_ADD,
	BCMX_ASYNC_ENTRY_VLAN_CROSS_CONNECT_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_CROSS_CONNECT_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_DEFAULT_GET,
	BCMX_ASYNC_ENTRY_VLAN_DEFAULT_SET,
	BCMX_ASYNC_ENTRY_VLAN_DESTROY,
	BCMX_ASYNC_ENTRY_VLAN_DESTROY_ALL,
	BCMX_ASYNC_ENTRY_VLAN_DTAG_ADD,
	BCMX_ASYNC_ENTRY_VLAN_DTAG_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_DTAG_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_DTAG_GET,
	BCMX_ASYNC_ENTRY_VLAN_DTAG_RANGE_ADD,
	BCMX_ASYNC_ENTRY_VLAN_DTAG_RANGE_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_DTAG_RANGE_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_DTAG_RANGE_GET,
	BCMX_ASYNC_ENTRY_VLAN_GPORT_ADD,
	BCMX_ASYNC_ENTRY_VLAN_GPORT_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_GPORT_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_GPORT_GET,
	BCMX_ASYNC_ENTRY_VLAN_GPORT_GET_ALL,
	BCMX_ASYNC_ENTRY_VLAN_IP_ACTION_ADD,
	BCMX_ASYNC_ENTRY_VLAN_IP_ACTION_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_IP_ACTION_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_IP_ACTION_GET,
	BCMX_ASYNC_ENTRY_VLAN_IP_ADD,
	BCMX_ASYNC_ENTRY_VLAN_IP_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_IP_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_MAC_ACTION_ADD,
	BCMX_ASYNC_ENTRY_VLAN_MAC_ACTION_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_MAC_ACTION_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_MAC_ACTION_GET,
	BCMX_ASYNC_ENTRY_VLAN_MAC_ADD,
	BCMX_ASYNC_ENTRY_VLAN_MAC_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_MAC_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_MCAST_FLOOD_GET,
	BCMX_ASYNC_ENTRY_VLAN_MCAST_FLOOD_SET,
	BCMX_ASYNC_ENTRY_VLAN_PORT_ADD,
	BCMX_ASYNC_ENTRY_VLAN_PORT_CREATE,
	BCMX_ASYNC_ENTRY_VLAN_PORT_DEFAULT_ACTION_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_PORT_DEFAULT_ACTION_GET,
	BCMX_ASYNC_ENTRY_VLAN_PORT_DEFAULT_ACTION_SET,
	BCMX_ASYNC_ENTRY_VLAN_PORT_DESTROY,
	BCMX_ASYNC_ENTRY_VLAN_PORT_EGRESS_DEFAULT_ACTION_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_PORT_EGRESS_DEFAULT_ACTION_GET,
	BCMX_ASYNC_ENTRY_VLAN_PORT_EGRESS_DEFAULT_ACTION_SET,
	BCMX_ASYNC_ENTRY_VLAN_PORT_FIND,
	BCMX_ASYNC_ENTRY_VLAN_PORT_GET,
	BCMX_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_ADD,
	BCMX_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_GET,
	BCMX_ASYNC_ENTRY_VLAN_PORT_REMOVE,
	BCMX_ASYNC_ENTRY_VLAN_QUEUE_MAP_ATTACH,
	BCMX_ASYNC_ENTRY_VLAN_QUEUE_MAP_ATTACH_GET,
	BCMX_ASYNC_ENTRY_VLAN_QUEUE_MAP_CREATE,
	BCMX_ASYNC_ENTRY_VLAN_QUEUE_MAP_DESTROY,
	BCMX_ASYNC_ENTRY_VLAN_QUEUE_MAP_DESTROY_ALL,
	BCMX_ASYNC_ENTRY_VLAN_QUEUE_MAP_DETACH,
	BCMX_ASYNC_ENTRY_VLAN_QUEUE_MAP_DETACH_ALL,
	BCMX_ASYNC_ENTRY_VLAN_QUEUE_MAP_GET,
	BCMX_ASYNC_ENTRY_VLAN_QUEUE_MAP_SET,
	BCMX_ASYNC_ENTRY_VLAN_STAT_ENABLE_SET,
	BCMX_ASYNC_ENTRY_VLAN_STAT_GET,
	BCMX_ASYNC_ENTRY_VLAN_STAT_GET32,
	BCMX_ASYNC_ENTRY_VLAN_STAT_MULTI_GET,
	BCMX_ASYNC_ENTRY_VLAN_STAT_MULTI_GET32,
	BCMX_ASYNC_ENTRY_VLAN_STAT_MULTI_SET,
	BCMX_ASYNC_ENTRY_VLAN_STAT_MULTI_SET32,
	BCMX_ASYNC_ENTRY_VLAN_STAT_SET,
	BCMX_ASYNC_ENTRY_VLAN_STAT_SET32,
	BCMX_ASYNC_ENTRY_VLAN_STG_GET,
	BCMX_ASYNC_ENTRY_VLAN_STG_SET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ADD,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_GET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_ADD,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_GET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_ADD,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_ADD,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_GET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ADD,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_GET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_ENABLE_SET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_GET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_GET32,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_GET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_GET32,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_SET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_MULTI_SET32,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_SET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_STAT_SET32,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_GET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_ADD,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_DELETE,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_DELETE_ALL,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_GET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_ENABLE_SET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_GET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_GET32,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_GET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_GET32,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_SET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_MULTI_SET32,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_SET,
	BCMX_ASYNC_ENTRY_VLAN_TRANSLATE_STAT_SET32,
	BCMX_ASYNC_ENTRY_VLAN_VECTOR_FLAGS_SET,
	BCMX_ASYNC_ENTRY_WLAN_CLIENT_ADD,
	BCMX_ASYNC_ENTRY_WLAN_CLIENT_DELETE,
	BCMX_ASYNC_ENTRY_WLAN_CLIENT_DELETE_ALL,
	BCMX_ASYNC_ENTRY_WLAN_CLIENT_GET,
	BCMX_ASYNC_ENTRY_WLAN_DETACH,
	BCMX_ASYNC_ENTRY_WLAN_INIT,
	BCMX_ASYNC_ENTRY_WLAN_PORT_ADD,
	BCMX_ASYNC_ENTRY_WLAN_PORT_DELETE,
	BCMX_ASYNC_ENTRY_WLAN_PORT_DELETE_ALL,
	BCMX_ASYNC_ENTRY_WLAN_PORT_GET,
	BCMX_ASYNC_ENTRY_WLAN_TUNNEL_INITIATOR_CREATE,
	BCMX_ASYNC_ENTRY_WLAN_TUNNEL_INITIATOR_DESTROY,
	BCMX_ASYNC_ENTRY_WLAN_TUNNEL_INITIATOR_GET,
	BCMX_ASYNC_ENTRY_COUNT
} bcmx_async_entry_t;

#endif	/* BCM_ASYNC_SUPPORT */
#endif	/* !_BCM_INT_XASYNC_REQ_H */
