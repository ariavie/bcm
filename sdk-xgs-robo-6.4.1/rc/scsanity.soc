# $Id: scsanity.soc,v 1.18 Broadcom SDK $
# $Copyright: Copyright 2012 Broadcom Corporation.
# This program is the proprietary software of Broadcom Corporation
# and/or its licensors, and may only be used, duplicated, modified
# or distributed pursuant to the terms and conditions of a separate,
# written license agreement executed between you and Broadcom
# (an "Authorized License").  Except as set forth in an Authorized
# License, Broadcom grants no license (express or implied), right
# to use, or waiver of any kind with respect to the Software, and
# Broadcom expressly reserves all rights in and to the Software
# and all intellectual property rights therein.  IF YOU HAVE
# NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
# IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
# ALL USE OF THE SOFTWARE.  
#  
# Except as expressly set forth in the Authorized License,
#  
# 1.     This program, including its structure, sequence and organization,
# constitutes the valuable trade secrets of Broadcom, and you shall use
# all reasonable efforts to protect the confidentiality thereof,
# and to use this information only in connection with your use of
# Broadcom integrated circuit products.
#  
# 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
# PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
# REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
# OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
# DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
# NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
# ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
# CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
# OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
# 
# 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
# BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
# INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
# ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
# TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
# THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
# WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
# ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
#
# Scorpion/Conqueror Sanity
#
# Script to run all available tests as quickly as possible.
# For testing basic sanity of new drivers, simulators, chips, etc.
#

echo "testsuite: started: sanity"
rcload rc.soc

# We need to print out port status since any cabling effects results.
*:ps

# Avoid link messages while testing
linkscan off

init
init misc
init mmu

local done 'echo "   Done"'

# Set run command script not to fail on errors reported by commands
# this allows the script to continue if a test fails
set rcerror=false

# Set up test mode: don't stop on errors, show progress on each test
tm -stoponerror +progress
# Unselect all
ts -*

#Display some useful information
date
ver
soc

#Start Test
echo "Running PCI Compliance ..."
tr 2
$done

echo "Running PCI S-Channel Buf ..."
tr 4
$done

echo "Running Register reset defaults ..."
tr 1
$done

echo "Running Register read/write ..."
tr 3 mask64
$done

init soc; init misc; init mmu;
#Clean up after register read/write test.

echo "Running CPU Benchmarks ..."
tr 21
$done

init soc; init misc; init mmu;

if $?BCM56720_A0 || $?BCM56721_A0 || $?BCM56725_A0 || \
   $?BCM56720_B0 || $?BCM56721_B0 || $?BCM56725_B0 \
        'local fabric 1'

echo "Running Switching Memory Tests ..."
set rct=false
echo " ALTERNATE_EMIRROR_BITMAP";
tr 50 M=ALTERNATE_EMIRROR_BITMAP;
tr 51 M=ALTERNATE_EMIRROR_BITMAP;
tr 52 M=ALTERNATE_EMIRROR_BITMAP;
echo " CPU_COS_MAP";
tr 50 M=CPU_COS_MAP;
tr 51 M=CPU_COS_MAP;
tr 52 M=CPU_COS_MAP;
echo " CPU_COS_MAP_DATA_ONLY";
tr 50 M=CPU_COS_MAP_DATA_ONLY;
tr 51 M=CPU_COS_MAP_DATA_ONLY;
tr 52 M=CPU_COS_MAP_DATA_ONLY;
echo " CPU_COS_MAP_ONLY";
tr 50 M=CPU_COS_MAP_ONLY;
tr 51 M=CPU_COS_MAP_ONLY;
tr 52 M=CPU_COS_MAP_ONLY;
echo " CPU_TS_MAP";
tr 50 M=CPU_TS_MAP;
tr 51 M=CPU_TS_MAP;
tr 52 M=CPU_TS_MAP;
echo " E2E_HOL_STATUS";
tr 50 M=E2E_HOL_STATUS;
tr 51 M=E2E_HOL_STATUS;
tr 52 M=E2E_HOL_STATUS;
echo " EM_MTP_INDEX";
tr 50 M=EM_MTP_INDEX;
tr 51 M=EM_MTP_INDEX;
tr 52 M=EM_MTP_INDEX;
echo " EGR_IPMC";
tr 50 M=EGR_IPMC;
tr 51 M=EGR_IPMC;
tr 52 M=EGR_IPMC;
echo " EGRESS_MASK";
tr 50 M=EGRESS_MASK;
tr 51 M=EGRESS_MASK;
tr 52 M=EGRESS_MASK;
echo " EGR_MOD_MAP";
tr 50 M=EGR_MOD_MAP;
tr 51 M=EGR_MOD_MAP;
tr 52 M=EGR_MOD_MAP;
echo " EGR_VLAN";
tr 50 M=EGR_VLAN;
tr 51 M=EGR_VLAN;
tr 52 M=EGR_VLAN;
echo " EGR_VLAN_STG";
tr 50 M=EGR_VLAN_STG;
tr 51 M=EGR_VLAN_STG;
tr 52 M=EGR_VLAN_STG;
echo " UDF_OFFSET";
tr 50 M=UDF_OFFSET;
tr 51 M=UDF_OFFSET;
tr 52 M=UDF_OFFSET;
echo " HG_TRUNK_FAILOVER_SET";
tr 50 M=HG_TRUNK_FAILOVER_SET;
tr 51 M=HG_TRUNK_FAILOVER_SET;
tr 52 M=HG_TRUNK_FAILOVER_SET;
echo " IM_MTP_INDEX";
tr 50 M=IM_MTP_INDEX;
tr 51 M=IM_MTP_INDEX;
tr 52 M=IM_MTP_INDEX;
echo " ING_MOD_MAP";
tr 50 M=ING_MOD_MAP;
tr 51 M=ING_MOD_MAP;
tr 52 M=ING_MOD_MAP;
echo " IPORT_TABLE";
tr 50 M=IPORT_TABLE;
tr 51 M=IPORT_TABLE;
tr 52 M=IPORT_TABLE;
echo " L2MC";
tr 50 M=L2MC;
tr 51 M=L2MC;
tr 52 M=L2MC;
echo " L2_ENTRY";
tr 50 M=L2_ENTRY;
tr 51 M=L2_ENTRY;
tr 52 M=L2_ENTRY;
echo " L2_ENTRY_ONLY";
tr 50 M=L2_ENTRY_ONLY;
tr 51 M=L2_ENTRY_ONLY;
tr 52 M=L2_ENTRY_ONLY;
echo " L2_ENTRY_OVERFLOW";
tr 50 M=L2_ENTRY_OVERFLOW;
echo " L2_ENTRY_SCRATCH";
tr 50 M=L2_ENTRY_SCRATCH;
echo " L2_HITDA_ONLY";
tr 50 M=L2_HITDA_ONLY;
tr 51 M=L2_HITDA_ONLY;
tr 52 M=L2_HITDA_ONLY;
echo " L2_HITSA_ONLY";
tr 50 M=L2_HITSA_ONLY;
tr 51 M=L2_HITSA_ONLY;
tr 52 M=L2_HITSA_ONLY;
echo " L2_MOD_FIFO";
tr 50 M=L2_MOD_FIFO;
tr 51 M=L2_MOD_FIFO;
tr 52 M=L2_MOD_FIFO;
echo " L2_USER_ENTRY";
tr 50 M=L2_USER_ENTRY;
tr 51 M=L2_USER_ENTRY;
tr 52 M=L2_USER_ENTRY;
echo " L2_USER_ENTRY_DATA_ONLY";
tr 50 M=L2_USER_ENTRY_DATA_ONLY;
tr 51 M=L2_USER_ENTRY_DATA_ONLY;
tr 52 M=L2_USER_ENTRY_DATA_ONLY;
echo " L2_USER_ENTRY_ONLY";
tr 50 M=L2_USER_ENTRY_ONLY;
tr 51 M=L2_USER_ENTRY_ONLY;
tr 52 M=L2_USER_ENTRY_ONLY;
echo " LPORT";
tr 50 M=LPORT;
tr 51 M=LPORT;
tr 52 M=LPORT;
echo " PORT_MAC_BLOCK";
tr 50 M=PORT_MAC_BLOCK;
tr 51 M=PORT_MAC_BLOCK;
tr 52 M=PORT_MAC_BLOCK;
echo " AGING_CTR";
tr 50 M=AGING_CTR;
tr 51 M=AGING_CTR;
tr 52 M=AGING_CTR;
echo " AGING_EXP";
tr 50 M=AGING_EXP;
tr 51 M=AGING_EXP;
tr 52 M=AGING_EXP;
echo " CBPCELLHEADER";
tr 50 M=CBPCELLHEADER;
tr 51 M=CBPCELLHEADER;
tr 52 M=CBPCELLHEADER;
echo " CBPDATA0";
tr 50 M=CBPDATA0;
tr 51 M=CBPDATA0;
tr 52 M=CBPDATA0;
echo " CBPDATA1";
tr 50 M=CBPDATA1;
tr 51 M=CBPDATA1;
tr 52 M=CBPDATA1;
echo " CBPDATA2";
tr 50 M=CBPDATA2;
tr 51 M=CBPDATA2;
tr 52 M=CBPDATA2;
echo " CBPDATA3";
tr 50 M=CBPDATA3;
tr 51 M=CBPDATA3;
tr 52 M=CBPDATA3;
echo " CBPDATA4";
tr 50 M=CBPDATA4;
tr 51 M=CBPDATA4;
tr 52 M=CBPDATA4;
echo " CBPDATA5";
tr 50 M=CBPDATA5;
tr 51 M=CBPDATA5;
tr 52 M=CBPDATA5;
echo " CBPDATA6";
tr 50 M=CBPDATA6;
tr 51 M=CBPDATA6;
tr 52 M=CBPDATA6;
echo " CBPDATA7";
tr 50 M=CBPDATA7;
tr 51 M=CBPDATA7;
tr 52 M=CBPDATA7;
echo " CBPDATA8";
tr 50 M=CBPDATA8;
tr 51 M=CBPDATA8;
tr 52 M=CBPDATA8;
echo " CBPDATA9";
tr 50 M=CBPDATA9;
tr 51 M=CBPDATA9;
tr 52 M=CBPDATA9;
echo " CBPDATA10";
tr 50 M=CBPDATA10;
tr 51 M=CBPDATA10;
tr 52 M=CBPDATA10;
echo " CBPDATA11";
tr 50 M=CBPDATA11;
tr 51 M=CBPDATA11;
tr 52 M=CBPDATA11;
echo " CBPDATA12";
tr 50 M=CBPDATA12;
tr 51 M=CBPDATA12;
tr 52 M=CBPDATA12;
echo " CBPDATA13";
tr 50 M=CBPDATA13;
tr 51 M=CBPDATA13;
tr 52 M=CBPDATA13;
echo " CBPDATA14";
tr 50 M=CBPDATA14;
tr 51 M=CBPDATA14;
tr 52 M=CBPDATA14;
echo " CBPDATA15";
tr 50 M=CBPDATA15;
tr 51 M=CBPDATA15;
tr 52 M=CBPDATA15;
echo " CBPPKTHEADER0_MEM0";
tr 50 M=CBPPKTHEADER0_MEM0;
tr 51 M=CBPPKTHEADER0_MEM0;
tr 52 M=CBPPKTHEADER0_MEM0;
echo " CBPPKTHEADER0_MEM1";
tr 50 M=CBPPKTHEADER0_MEM1;
tr 51 M=CBPPKTHEADER0_MEM1;
tr 52 M=CBPPKTHEADER0_MEM1;
echo " CBPPKTHEADER0_MEM2";
tr 50 M=CBPPKTHEADER0_MEM2;
tr 51 M=CBPPKTHEADER0_MEM2;
tr 52 M=CBPPKTHEADER0_MEM2;
echo " CBPPKTHEADER0_MEM3";
tr 50 M=CBPPKTHEADER0_MEM3;
tr 51 M=CBPPKTHEADER0_MEM3;
tr 52 M=CBPPKTHEADER0_MEM3;
echo " CBPPKTHEADER1_MEM0";
tr 50 M=CBPPKTHEADER1_MEM0;
tr 51 M=CBPPKTHEADER1_MEM0;
tr 52 M=CBPPKTHEADER1_MEM0;
echo " CBPPKTHEADER1_MEM1";
tr 50 M=CBPPKTHEADER1_MEM1;
tr 51 M=CBPPKTHEADER1_MEM1;
tr 52 M=CBPPKTHEADER1_MEM1;
echo " CBPPKTHEADERCPU";
tr 50 M=CBPPKTHEADERCPU;
tr 51 M=CBPPKTHEADERCPU;
tr 52 M=CBPPKTHEADERCPU;
echo " CBPPKTLENGTH";
tr 50 M=CBPPKTLENGTH;
tr 51 M=CBPPKTLENGTH;
tr 52 M=CBPPKTLENGTH;
echo " CCP";
tr 50 M=CCP;
tr 51 M=CCP;
tr 52 M=CCP;
echo " CELLCHK";
tr 50 M=CELLCHK;
tr 51 M=CELLCHK;
tr 52 M=CELLCHK;
echo " CELLLINK";
tr 50 M=CELLLINK;
tr 51 M=CELLLINK;
tr 52 M=CELLLINK;
echo " CFAP";
tr 50 M=CFAP;
tr 51 M=CFAP;
tr 52 M=CFAP;
echo " IPMC_GROUP0";
tr 50 M=IPMC_GROUP0;
tr 51 M=IPMC_GROUP0;
tr 52 M=IPMC_GROUP0;
echo " IPMC_GROUP1";
tr 50 M=IPMC_GROUP1;
tr 51 M=IPMC_GROUP1;
tr 52 M=IPMC_GROUP1;
echo " IPMC_GROUP2";
tr 50 M=IPMC_GROUP2;
tr 51 M=IPMC_GROUP2;
tr 52 M=IPMC_GROUP2;
echo " IPMC_GROUP3";
tr 50 M=IPMC_GROUP3;
tr 51 M=IPMC_GROUP3;
tr 52 M=IPMC_GROUP3;
echo " IPMC_GROUP4";
tr 50 M=IPMC_GROUP4;
tr 51 M=IPMC_GROUP4;
tr 52 M=IPMC_GROUP4;
echo " IPMC_GROUP5";
tr 50 M=IPMC_GROUP5;
tr 51 M=IPMC_GROUP5;
tr 52 M=IPMC_GROUP5;
echo " IPMC_GROUP6";
tr 50 M=IPMC_GROUP6;
tr 51 M=IPMC_GROUP6;
tr 52 M=IPMC_GROUP6;
echo " IPMC_VLAN";
tr 50 M=IPMC_VLAN;
tr 51 M=IPMC_VLAN;
tr 52 M=IPMC_VLAN;
echo " IPMC_VLAN_MEM0";
tr 50 M=IPMC_VLAN_MEM0;
tr 51 M=IPMC_VLAN_MEM0;
tr 52 M=IPMC_VLAN_MEM0;
echo " IPMC_VLAN_MEM1";
tr 50 M=IPMC_VLAN_MEM1;
tr 51 M=IPMC_VLAN_MEM1;
tr 52 M=IPMC_VLAN_MEM1;
echo " PKTLINK0";
tr 50 M=PKTLINK0;
tr 51 M=PKTLINK0;
tr 52 M=PKTLINK0;
echo " PKTLINK1";
tr 50 M=PKTLINK1;
tr 51 M=PKTLINK1;
tr 52 M=PKTLINK1;
echo " PKTLINK2";
tr 50 M=PKTLINK2;
tr 51 M=PKTLINK2;
tr 52 M=PKTLINK2;
echo " PKTLINK3";
tr 50 M=PKTLINK3;
tr 51 M=PKTLINK3;
tr 52 M=PKTLINK3;
echo " PKTLINK4";
tr 50 M=PKTLINK4;
tr 51 M=PKTLINK4;
tr 52 M=PKTLINK4;
echo " PKTLINK5";
tr 50 M=PKTLINK5;
tr 51 M=PKTLINK5;
tr 52 M=PKTLINK5;
echo " PKTLINK6";
tr 50 M=PKTLINK6;
tr 51 M=PKTLINK6;
tr 52 M=PKTLINK6;
echo " PKTLINK7";
tr 50 M=PKTLINK7;
tr 51 M=PKTLINK7;
tr 52 M=PKTLINK7;
echo " PKTLINK8";
tr 50 M=PKTLINK8;
tr 51 M=PKTLINK8;
tr 52 M=PKTLINK8;
echo " PKTLINK9";
tr 50 M=PKTLINK9;
tr 51 M=PKTLINK9;
tr 52 M=PKTLINK9;
echo " PKTLINK10";
tr 50 M=PKTLINK10;
tr 51 M=PKTLINK10;
tr 52 M=PKTLINK10;
echo " PKTLINK11";
tr 50 M=PKTLINK11;
tr 51 M=PKTLINK11;
tr 52 M=PKTLINK11;
echo " PKTLINK12";
tr 50 M=PKTLINK12;
tr 51 M=PKTLINK12;
tr 52 M=PKTLINK12;
echo " PKTLINK13";
tr 50 M=PKTLINK13;
tr 51 M=PKTLINK13;
tr 52 M=PKTLINK13;
echo " PKTLINK14";
tr 50 M=PKTLINK14;
tr 51 M=PKTLINK14;
tr 52 M=PKTLINK14;
echo " PKTLINK15";
tr 50 M=PKTLINK15;
tr 51 M=PKTLINK15;
tr 52 M=PKTLINK15;
echo " PKTLINK16";
tr 50 M=PKTLINK16;
tr 51 M=PKTLINK16;
tr 52 M=PKTLINK16;
echo " PKTLINK17";
tr 50 M=PKTLINK17;
tr 51 M=PKTLINK17;
tr 52 M=PKTLINK17;
echo " PKTLINK18";
tr 50 M=PKTLINK18;
tr 51 M=PKTLINK18;
tr 52 M=PKTLINK18;
echo " PKTLINK19";
tr 50 M=PKTLINK19;
tr 51 M=PKTLINK19;
tr 52 M=PKTLINK19;
echo " PKTLINK20";
tr 50 M=PKTLINK20;
tr 51 M=PKTLINK20;
tr 52 M=PKTLINK20;
echo " PKTLINK21";
tr 50 M=PKTLINK21;
tr 51 M=PKTLINK21;
tr 52 M=PKTLINK21;
echo " PKTLINK22";
tr 50 M=PKTLINK22;
tr 51 M=PKTLINK22;
tr 52 M=PKTLINK22;
echo " PKTLINK23";
tr 50 M=PKTLINK23;
tr 51 M=PKTLINK23;
tr 52 M=PKTLINK23;
echo " PKTLINK24";
tr 50 M=PKTLINK24;
tr 51 M=PKTLINK24;
tr 52 M=PKTLINK24;
echo " PKTLINK25";
tr 50 M=PKTLINK25;
tr 51 M=PKTLINK25;
tr 52 M=PKTLINK25;
echo " PKTLINK26";
tr 50 M=PKTLINK26;
tr 51 M=PKTLINK26;
tr 52 M=PKTLINK26;
echo " PKTLINK27";
tr 50 M=PKTLINK27;
tr 51 M=PKTLINK27;
tr 52 M=PKTLINK27;
echo " PKTLINK28";
tr 50 M=PKTLINK28;
tr 51 M=PKTLINK28;
tr 52 M=PKTLINK28;
echo " WRED_CFG_CELL";
tr 50 M=WRED_CFG_CELL;
tr 51 M=WRED_CFG_CELL;
tr 52 M=WRED_CFG_CELL;
echo " WRED_PORT_CFG_CELL";
tr 50 M=WRED_PORT_CFG_CELL;
tr 51 M=WRED_PORT_CFG_CELL;
tr 52 M=WRED_PORT_CFG_CELL;
echo " WRED_PORT_THD_0_CELL";
tr 50 M=WRED_PORT_THD_0_CELL;
tr 51 M=WRED_PORT_THD_0_CELL;
tr 52 M=WRED_PORT_THD_0_CELL;
echo " WRED_PORT_THD_1_CELL";
tr 50 M=WRED_PORT_THD_1_CELL;
tr 51 M=WRED_PORT_THD_1_CELL;
tr 52 M=WRED_PORT_THD_1_CELL;
echo " WRED_THD_0_CELL";
tr 50 M=WRED_THD_0_CELL;
tr 51 M=WRED_THD_0_CELL;
tr 52 M=WRED_THD_0_CELL;
echo " WRED_THD_1_CELL";
tr 50 M=WRED_THD_1_CELL;
tr 51 M=WRED_THD_1_CELL;
tr 52 M=WRED_THD_1_CELL;
echo " MODPORT_MAP";
tr 50 M=MODPORT_MAP;
tr 51 M=MODPORT_MAP;
tr 52 M=MODPORT_MAP;
echo " MODPORT_MAP_EM";
tr 50 M=MODPORT_MAP_EM;
tr 51 M=MODPORT_MAP_EM;
tr 52 M=MODPORT_MAP_EM;
echo " MODPORT_MAP_IM";
tr 50 M=MODPORT_MAP_IM;
tr 51 M=MODPORT_MAP_IM;
tr 52 M=MODPORT_MAP_IM;
echo " MODPORT_MAP_SW";
tr 50 M=MODPORT_MAP_SW;
tr 51 M=MODPORT_MAP_SW;
tr 52 M=MODPORT_MAP_SW;
echo " NONUCAST_TRUNK_BLOCK_MASK";
tr 50 M=NONUCAST_TRUNK_BLOCK_MASK;
tr 51 M=NONUCAST_TRUNK_BLOCK_MASK;
tr 52 M=NONUCAST_TRUNK_BLOCK_MASK;
echo " COS_MAP";
tr 50 M=COS_MAP;
tr 51 M=COS_MAP;
tr 52 M=COS_MAP;
echo " PORT_LAG_FAILOVER_SET";
tr 50 M=PORT_LAG_FAILOVER_SET;
tr 51 M=PORT_LAG_FAILOVER_SET;
tr 52 M=PORT_LAG_FAILOVER_SET;
echo " PORT";
tr 50 M=PORT;
tr 51 M=PORT;
tr 52 M=PORT;
echo " SOURCE_TRUNK_MAP";
tr 50 M=SOURCE_TRUNK_MAP;
tr 51 M=SOURCE_TRUNK_MAP;
tr 52 M=SOURCE_TRUNK_MAP;
echo " SRC_MODID_BLOCK";
tr 50 M=SRC_MODID_BLOCK;
tr 51 M=SRC_MODID_BLOCK;
tr 52 M=SRC_MODID_BLOCK;
echo " VLAN_STG";
tr 50 M=VLAN_STG;
tr 51 M=VLAN_STG;
tr 52 M=VLAN_STG;
echo " TCP_FN";
tr 50 M=TCP_FN;
tr 51 M=TCP_FN;
tr 52 M=TCP_FN;
echo " TOS_FN";
tr 50 M=TOS_FN;
tr 51 M=TOS_FN;
tr 52 M=TOS_FN;
echo " TRUNK32_PORT_TABLE";
tr 50 M=TRUNK32_PORT_TABLE;
tr 51 M=TRUNK32_PORT_TABLE;
tr 52 M=TRUNK32_PORT_TABLE;
echo " TRUNK_BITMAP";
tr 50 M=TRUNK_BITMAP;
tr 51 M=TRUNK_BITMAP;
tr 52 M=TRUNK_BITMAP;
echo " PORT_TRUNK_EGRESS";
tr 50 M=PORT_TRUNK_EGRESS;
tr 51 M=PORT_TRUNK_EGRESS;
tr 52 M=PORT_TRUNK_EGRESS;
echo " TRUNK_GROUP";
tr 50 M=TRUNK_GROUP;
tr 51 M=TRUNK_GROUP;
tr 52 M=TRUNK_GROUP;
echo " TTL_FN";
tr 50 M=TTL_FN;
tr 51 M=TTL_FN;
tr 52 M=TTL_FN;
echo " VLAN_PROFILE_2";
tr 50 M=VLAN_PROFILE_2;
tr 51 M=VLAN_PROFILE_2;
tr 52 M=VLAN_PROFILE_2;
echo " VLAN_PROFILE";
tr 50 M=VLAN_PROFILE;
tr 51 M=VLAN_PROFILE;
tr 52 M=VLAN_PROFILE;
echo " VLAN";
tr 50 M=VLAN;
tr 51 M=VLAN;
tr 52 M=VLAN;
if !$?bypass \
        'echo " DSCP_TABLE"; \
        tr 50 M=DSCP_TABLE; \
        tr 51 M=DSCP_TABLE; \
        tr 52 M=DSCP_TABLE; \
        echo " EFP_COUNTER_TABLE"; \
        tr 50 M=EFP_COUNTER_TABLE; \
        tr 51 M=EFP_COUNTER_TABLE; \
        tr 52 M=EFP_COUNTER_TABLE; \
        echo " EFP_COUNTER_TABLE_X"; \
        tr 50 M=EFP_COUNTER_TABLE_X; \
        tr 51 M=EFP_COUNTER_TABLE_X; \
        tr 52 M=EFP_COUNTER_TABLE_X; \
        echo " EFP_COUNTER_TABLE_Y"; \
        tr 50 M=EFP_COUNTER_TABLE_Y; \
        tr 51 M=EFP_COUNTER_TABLE_Y; \
        tr 52 M=EFP_COUNTER_TABLE_Y; \
        echo " EFP_METER_TABLE"; \
        tr 50 M=EFP_METER_TABLE; \
        tr 51 M=EFP_METER_TABLE; \
        tr 52 M=EFP_METER_TABLE; \
        echo " EFP_METER_TABLE_X"; \
        tr 50 M=EFP_METER_TABLE_X; \
        tr 51 M=EFP_METER_TABLE_X; \
        tr 52 M=EFP_METER_TABLE_X; \
        echo " EFP_METER_TABLE_Y"; \
        tr 50 M=EFP_METER_TABLE_Y; \
        tr 51 M=EFP_METER_TABLE_Y; \
        tr 52 M=EFP_METER_TABLE_Y; \
        echo " EFP_POLICY_TABLE"; \
        tr 50 M=EFP_POLICY_TABLE; \
        tr 51 M=EFP_POLICY_TABLE; \
        tr 52 M=EFP_POLICY_TABLE; \
        echo " EFP_TCAM"; \
        tr 50 M=EFP_TCAM; \
        tr 51 M=EFP_TCAM; \
        tr 52 M=EFP_TCAM;'
if !$?bypass \
        'echo " EGR_DSCP_ECN_MAP"; \
        tr 50 M=EGR_DSCP_ECN_MAP; \
        tr 51 M=EGR_DSCP_ECN_MAP; \
        tr 52 M=EGR_DSCP_ECN_MAP; \
        echo " EGR_DSCP_TABLE"; \
        tr 50 M=EGR_DSCP_TABLE; \
        tr 51 M=EGR_DSCP_TABLE; \
        tr 52 M=EGR_DSCP_TABLE; \
        echo " EGR_EM_MTP_INDEX"; \
        tr 50 M=EGR_EM_MTP_INDEX; \
        tr 51 M=EGR_EM_MTP_INDEX; \
        tr 52 M=EGR_EM_MTP_INDEX; \
        echo " EGR_ERSPAN"; \
        tr 50 M=EGR_ERSPAN; \
        tr 51 M=EGR_ERSPAN; \
        tr 52 M=EGR_ERSPAN; \
        echo " EGR_IP_TUNNEL"; \
        tr 50 M=EGR_IP_TUNNEL; \
        tr 51 M=EGR_IP_TUNNEL; \
        tr 52 M=EGR_IP_TUNNEL; \
        echo " EGR_IP_TUNNEL_IPV6"; \
        tr 50 M=EGR_IP_TUNNEL_IPV6; \
        tr 51 M=EGR_IP_TUNNEL_IPV6; \
        tr 52 M=EGR_IP_TUNNEL_IPV6; \
        echo " EGR_L3_INTF"; \
        tr 50 M=EGR_L3_INTF; \
        tr 51 M=EGR_L3_INTF; \
        tr 52 M=EGR_L3_INTF; \
        echo " EGR_L3_NEXT_HOP"; \
        tr 50 M=EGR_L3_NEXT_HOP; \
        tr 51 M=EGR_L3_NEXT_HOP; \
        tr 52 M=EGR_L3_NEXT_HOP; \
        echo " EGR_PRI_CNG_MAP"; \
        tr 50 M=EGR_PRI_CNG_MAP; \
        tr 51 M=EGR_PRI_CNG_MAP; \
        tr 52 M=EGR_PRI_CNG_MAP; \
        echo " EGR_VLAN_XLATE"; \
        tr 50 M=EGR_VLAN_XLATE; \
        tr 51 M=EGR_VLAN_XLATE; \
        tr 52 M=EGR_VLAN_XLATE; \
        echo " EGR_VLAN_XLATE_SCRATCH"; \
        tr 50 M=EGR_VLAN_XLATE_SCRATCH;'
if !$?bypass \
        'echo " FP_COUNTER_TABLE_X"; \
        tr 50 M=FP_COUNTER_TABLE_X; \
        tr 51 M=FP_COUNTER_TABLE_X; \
        tr 52 M=FP_COUNTER_TABLE_X; \
        echo " FP_COUNTER_TABLE_Y"; \
        tr 50 M=FP_COUNTER_TABLE_Y; \
        tr 51 M=FP_COUNTER_TABLE_Y; \
        tr 52 M=FP_COUNTER_TABLE_Y; \
        echo " FP_METER_TABLE"; \
        tr 50 M=FP_METER_TABLE; \
        tr 51 M=FP_METER_TABLE; \
        tr 52 M=FP_METER_TABLE; \
        echo " FP_POLICY_TABLE"; \
        tr 50 M=FP_POLICY_TABLE; \
        tr 51 M=FP_POLICY_TABLE; \
        tr 52 M=FP_POLICY_TABLE; \
        echo " FP_PORT_FIELD_SEL"; \
        tr 50 M=FP_PORT_FIELD_SEL; \
        tr 51 M=FP_PORT_FIELD_SEL; \
        tr 52 M=FP_PORT_FIELD_SEL; \
        echo " FP_RANGE_CHECK"; \
        tr 50 M=FP_RANGE_CHECK; \
        tr 51 M=FP_RANGE_CHECK; \
        tr 52 M=FP_RANGE_CHECK; \
        echo " FP_SLICE_KEY_CONTROL"; \
        tr 50 M=FP_SLICE_KEY_CONTROL; \
        echo " FP_SLICE_MAP"; \
        tr 50 M=FP_SLICE_MAP; \
        echo " FP_STORM_CONTROL_METERS"; \
        tr 50 M=FP_STORM_CONTROL_METERS; \
        tr 51 M=FP_STORM_CONTROL_METERS; \
        tr 52 M=FP_STORM_CONTROL_METERS; \
        echo " FP_TCAM_X"; \
        tr 50 M=FP_TCAM_X; \
        tr 51 M=FP_TCAM_X; \
        tr 52 M=FP_TCAM_X; \
        echo " FP_TCAM_Y"; \
        tr 50 M=FP_TCAM_Y; \
        tr 51 M=FP_TCAM_Y; \
        tr 52 M=FP_TCAM_Y; \
        echo " IFP_REDIRECTION_PROFILE"; \
        tr 50 M=IFP_REDIRECTION_PROFILE; \
        tr 51 M=IFP_REDIRECTION_PROFILE; \
        tr 52 M=IFP_REDIRECTION_PROFILE;'
if !$?bypass \
        'echo " ING_L3_NEXT_HOP"; \
        tr 50 M=ING_L3_NEXT_HOP; \
        tr 51 M=ING_L3_NEXT_HOP; \
        tr 52 M=ING_L3_NEXT_HOP; \
        echo " ING_PRI_CNG_MAP"; \
        tr 50 M=ING_PRI_CNG_MAP; \
        tr 51 M=ING_PRI_CNG_MAP; \
        tr 52 M=ING_PRI_CNG_MAP; \
        echo " ING_VLAN_RANGE"; \
        tr 50 M=ING_VLAN_RANGE; \
        tr 51 M=ING_VLAN_RANGE; \
        tr 52 M=ING_VLAN_RANGE; \
        echo " ING_VLAN_TAG_ACTION_PROFILE"; \
        tr 50 M=ING_VLAN_TAG_ACTION_PROFILE; \
        tr 51 M=ING_VLAN_TAG_ACTION_PROFILE; \
        tr 52 M=ING_VLAN_TAG_ACTION_PROFILE; \
        echo " INITIAL_ING_L3_NEXT_HOP"; \
        tr 50 M=INITIAL_ING_L3_NEXT_HOP; \
        tr 51 M=INITIAL_ING_L3_NEXT_HOP; \
        tr 52 M=INITIAL_ING_L3_NEXT_HOP; \
        echo " INITIAL_L3_ECMP"; \
        tr 50 M=INITIAL_L3_ECMP; \
        tr 51 M=INITIAL_L3_ECMP; \
        tr 52 M=INITIAL_L3_ECMP; \
        echo " INITIAL_L3_ECMP_COUNT"; \
        tr 50 M=INITIAL_L3_ECMP_COUNT; \
        tr 51 M=INITIAL_L3_ECMP_COUNT; \
        tr 52 M=INITIAL_L3_ECMP_COUNT;'
if !$?bypass \
        'echo " IPV4_IN_IPV6_PREFIX_MATCH"; \
        tr 50 M=IPV4_IN_IPV6_PREFIX_MATCH; \
        tr 51 M=IPV4_IN_IPV6_PREFIX_MATCH; \
        tr 52 M=IPV4_IN_IPV6_PREFIX_MATCH; \
        echo " IPV6_PROXY_ENABLE"; \
        tr 50 M=IPV6_PROXY_ENABLE; \
        tr 51 M=IPV6_PROXY_ENABLE; \
        tr 52 M=IPV6_PROXY_ENABLE;'
if !$?bypass \
        'echo " L3_DEFIP"; \
        tr 50 M=L3_DEFIP; \
        tr 51 M=L3_DEFIP; \
        tr 52 M=L3_DEFIP; \
        echo " L3_DEFIP_128"; \
        tr 50 M=L3_DEFIP_128; \
        tr 51 M=L3_DEFIP_128; \
        tr 52 M=L3_DEFIP_128; \
        echo " L3_DEFIP_128_DATA_ONLY"; \
        tr 50 M=L3_DEFIP_128_DATA_ONLY; \
        tr 51 M=L3_DEFIP_128_DATA_ONLY; \
        tr 52 M=L3_DEFIP_128_DATA_ONLY; \
        echo " L3_DEFIP_128_HIT_ONLY"; \
        tr 50 M=L3_DEFIP_128_HIT_ONLY; \
        tr 51 M=L3_DEFIP_128_HIT_ONLY; \
        tr 52 M=L3_DEFIP_128_HIT_ONLY; \
        echo " L3_DEFIP_128_ONLY"; \
        tr 50 M=L3_DEFIP_128_ONLY; \
        tr 51 M=L3_DEFIP_128_ONLY; \
        tr 52 M=L3_DEFIP_128_ONLY; \
        echo " L3_DEFIP_DATA_ONLY"; \
        tr 50 M=L3_DEFIP_DATA_ONLY; \
        tr 51 M=L3_DEFIP_DATA_ONLY; \
        tr 52 M=L3_DEFIP_DATA_ONLY; \
        echo " L3_DEFIP_HIT_ONLY"; \
        tr 50 M=L3_DEFIP_HIT_ONLY; \
        tr 51 M=L3_DEFIP_HIT_ONLY; \
        tr 52 M=L3_DEFIP_HIT_ONLY; \
        echo " L3_DEFIP_ONLY"; \
        tr 50 M=L3_DEFIP_ONLY; \
        tr 51 M=L3_DEFIP_ONLY; \
        tr 52 M=L3_DEFIP_ONLY;'
if !$?bypass \
        'echo " L3_ECMP"; \
        tr 50 M=L3_ECMP; \
        tr 51 M=L3_ECMP; \
        tr 52 M=L3_ECMP; \
        echo " L3_ECMP_COUNT"; \
        tr 50 M=L3_ECMP_COUNT; \
        tr 51 M=L3_ECMP_COUNT; \
        tr 52 M=L3_ECMP_COUNT; \
        echo " L3_ENTRY_HIT_ONLY"; \
        tr 50 M=L3_ENTRY_HIT_ONLY; \
        tr 51 M=L3_ENTRY_HIT_ONLY; \
        tr 52 M=L3_ENTRY_HIT_ONLY; \
        echo " L3_ENTRY_IPV4_MULTICAST"; \
        tr 50 M=L3_ENTRY_IPV4_MULTICAST; \
        tr 51 M=L3_ENTRY_IPV4_MULTICAST; \
        tr 52 M=L3_ENTRY_IPV4_MULTICAST; \
        echo " L3_ENTRY_IPV4_MULTICAST_SCRATCH"; \
        tr 50 M=L3_ENTRY_IPV4_MULTICAST_SCRATCH; \
        echo " L3_ENTRY_IPV4_UNICAST"; \
        tr 50 M=L3_ENTRY_IPV4_UNICAST; \
        tr 51 M=L3_ENTRY_IPV4_UNICAST; \
        tr 52 M=L3_ENTRY_IPV4_UNICAST; \
        echo " L3_ENTRY_IPV4_UNICAST_SCRATCH"; \
        tr 50 M=L3_ENTRY_IPV4_UNICAST_SCRATCH; \
        echo " L3_ENTRY_IPV6_MULTICAST"; \
        tr 50 M=L3_ENTRY_IPV6_MULTICAST; \
        tr 51 M=L3_ENTRY_IPV6_MULTICAST; \
        tr 52 M=L3_ENTRY_IPV6_MULTICAST; \
        echo " L3_ENTRY_IPV6_MULTICAST_SCRATCH"; \
        tr 50 M=L3_ENTRY_IPV6_MULTICAST_SCRATCH; \
        echo " L3_ENTRY_IPV6_UNICAST"; \
        tr 50 M=L3_ENTRY_IPV6_UNICAST; \
        tr 51 M=L3_ENTRY_IPV6_UNICAST; \
        tr 52 M=L3_ENTRY_IPV6_UNICAST; \
        echo " L3_ENTRY_IPV6_UNICAST_SCRATCH"; \
        tr 50 M=L3_ENTRY_IPV6_UNICAST_SCRATCH; \
        echo " L3_ENTRY_ONLY"; \
        tr 50 M=L3_ENTRY_ONLY; \
        tr 51 M=L3_ENTRY_ONLY; \
        tr 52 M=L3_ENTRY_ONLY; \
        echo " L3_ENTRY_VALID_ONLY"; \
        tr 50 M=L3_ENTRY_VALID_ONLY; \
        tr 51 M=L3_ENTRY_VALID_ONLY; \
        tr 52 M=L3_ENTRY_VALID_ONLY;'
if !$?bypass \
        'echo " L3_IPMC"; \
        tr 50 M=L3_IPMC; \
        tr 51 M=L3_IPMC; \
        tr 52 M=L3_IPMC; \
        echo " L3_TUNNEL"; \
        tr 50 M=L3_TUNNEL; \
        tr 51 M=L3_TUNNEL; \
        tr 52 M=L3_TUNNEL;'
if !$?bypass \
        'echo " PORT_CBL_TABLE"; \
        tr 50 M=PORT_CBL_TABLE; \
        tr 51 M=PORT_CBL_TABLE; \
        tr 52 M=PORT_CBL_TABLE; \
        echo " TRUNK_CBL_TABLE"; \
        tr 50 M=TRUNK_CBL_TABLE; \
        tr 51 M=TRUNK_CBL_TABLE; \
        tr 52 M=TRUNK_CBL_TABLE;'
if !$?bypass \
        'echo " VFP_POLICY_TABLE"; \
        tr 50 M=VFP_POLICY_TABLE; \
        tr 51 M=VFP_POLICY_TABLE; \
        tr 52 M=VFP_POLICY_TABLE; \
        echo " VFP_TCAM"; \
        tr 50 M=VFP_TCAM; \
        tr 51 M=VFP_TCAM; \
        tr 52 M=VFP_TCAM; \
        echo " VLAN_MAC"; \
        tr 50 M=VLAN_MAC; \
        tr 51 M=VLAN_MAC; \
        tr 52 M=VLAN_MAC; \
        echo " VLAN_MAC_SCRATCH"; \
        tr 50 M=VLAN_MAC_SCRATCH; \
        echo " VLAN_PROTOCOL"; \
        tr 50 M=VLAN_PROTOCOL; \
        tr 51 M=VLAN_PROTOCOL; \
        tr 52 M=VLAN_PROTOCOL; \
        echo " VLAN_PROTOCOL_DATA"; \
        tr 50 M=VLAN_PROTOCOL_DATA; \
        tr 51 M=VLAN_PROTOCOL_DATA; \
        tr 52 M=VLAN_PROTOCOL_DATA; \
        echo " VLAN_SUBNET"; \
        tr 50 M=VLAN_SUBNET; \
        tr 51 M=VLAN_SUBNET; \
        tr 52 M=VLAN_SUBNET; \
        echo " VLAN_SUBNET_DATA_ONLY"; \
        tr 50 M=VLAN_SUBNET_DATA_ONLY; \
        tr 51 M=VLAN_SUBNET_DATA_ONLY; \
        tr 52 M=VLAN_SUBNET_DATA_ONLY; \
        echo " VLAN_XLATE_SCRATCH"; \
        tr 50 M=VLAN_XLATE_SCRATCH;'
if !$?bypass \
        'echo " EGR_IM_MTP_INDEX"; \
        tr 50 M=EGR_IM_MTP_INDEX; \
        tr 51 M=EGR_IM_MTP_INDEX; \
        tr 52 M=EGR_IM_MTP_INDEX; \
        echo " EGR_VLAN_TAG_ACTION_PROFILE"; \
        tr 50 M=EGR_VLAN_TAG_ACTION_PROFILE; \
        tr 51 M=EGR_VLAN_TAG_ACTION_PROFILE; \
        tr 52 M=EGR_VLAN_TAG_ACTION_PROFILE;'
# These memories must be last
echo " ARB_TDM_TABLE";
tr 50 M=ARB_TDM_TABLE;
tr 51 M=ARB_TDM_TABLE;
tr 52 M=ARB_TDM_TABLE;
echo " X_ARB_TDM_TABLE";
tr 50 M=X_ARB_TDM_TABLE;
tr 51 M=X_ARB_TDM_TABLE;
tr 52 M=X_ARB_TDM_TABLE;
echo " Y_ARB_TDM_TABLE";
tr 50 M=Y_ARB_TDM_TABLE;
tr 51 M=Y_ARB_TDM_TABLE;
tr 52 M=Y_ARB_TDM_TABLE;
set rct=true

init soc; init misc; init mmu;

#Table DMA/Table SLAM
echo "Running Table DMA Tests ..."
set rct=false

echo " ALTERNATE_EMIRROR_BITMAP";
tr 71 M=ALTERNATE_EMIRROR_BITMAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=ALTERNATE_EMIRROR_BITMAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=ALTERNATE_EMIRROR_BITMAP S=0 C=0 TSE=T SLTH=F;
echo " CPU_COS_MAP";
tr 71 M=CPU_COS_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=CPU_COS_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=CPU_COS_MAP S=0 C=0 TSE=T SLTH=F;
echo " CPU_COS_MAP_DATA_ONLY";
tr 71 M=CPU_COS_MAP_DATA_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=CPU_COS_MAP_DATA_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=CPU_COS_MAP_DATA_ONLY S=0 C=0 TSE=T SLTH=F;
echo " CPU_COS_MAP_ONLY";
tr 71 M=CPU_COS_MAP_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=CPU_COS_MAP_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=CPU_COS_MAP_ONLY S=0 C=0 TSE=T SLTH=F;
echo " CPU_TS_MAP";
tr 71 M=CPU_TS_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=CPU_TS_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=CPU_TS_MAP S=0 C=0 TSE=T SLTH=F;
echo " E2E_HOL_STATUS";
tr 71 M=E2E_HOL_STATUS S=0 C=0 TSE=F SLTH=T;
tr 71 M=E2E_HOL_STATUS S=0 C=0 TSE=T SLTH=T;
tr 71 M=E2E_HOL_STATUS S=0 C=0 TSE=T SLTH=F;
echo " EGR_IPMC";
tr 71 M=EGR_IPMC S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_IPMC S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_IPMC S=0 C=0 TSE=T SLTH=F;
echo " EGRESS_MASK";
tr 71 M=EGRESS_MASK S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGRESS_MASK S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGRESS_MASK S=0 C=0 TSE=T SLTH=F;
echo " EGR_MOD_MAP";
tr 71 M=EGR_MOD_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_MOD_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_MOD_MAP S=0 C=0 TSE=T SLTH=F;
echo " EGR_VLAN";
tr 71 M=EGR_VLAN S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_VLAN S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_VLAN S=0 C=0 TSE=T SLTH=F;
echo " EGR_VLAN_STG";
tr 71 M=EGR_VLAN_STG S=0 C=0 TSE=F SLTH=T;
tr 71 M=EGR_VLAN_STG S=0 C=0 TSE=T SLTH=T;
tr 71 M=EGR_VLAN_STG S=0 C=0 TSE=T SLTH=F;
echo " EM_MTP_INDEX";
tr 71 M=EM_MTP_INDEX S=0 C=0 TSE=F SLTH=T;
tr 71 M=EM_MTP_INDEX S=0 C=0 TSE=T SLTH=T;
tr 71 M=EM_MTP_INDEX S=0 C=0 TSE=T SLTH=F;
echo " UDF_OFFSET";
tr 71 M=UDF_OFFSET S=0 C=0 TSE=F SLTH=T;
tr 71 M=UDF_OFFSET S=0 C=0 TSE=T SLTH=T;
tr 71 M=UDF_OFFSET S=0 C=0 TSE=T SLTH=F;
echo " HG_TRUNK_FAILOVER_SET";
tr 71 M=HG_TRUNK_FAILOVER_SET S=0 C=0 TSE=F SLTH=T;
tr 71 M=HG_TRUNK_FAILOVER_SET S=0 C=0 TSE=T SLTH=T;
tr 71 M=HG_TRUNK_FAILOVER_SET S=0 C=0 TSE=T SLTH=F;
echo " IM_MTP_INDEX";
tr 71 M=IM_MTP_INDEX S=0 C=0 TSE=F SLTH=T;
tr 71 M=IM_MTP_INDEX S=0 C=0 TSE=T SLTH=T;
tr 71 M=IM_MTP_INDEX S=0 C=0 TSE=T SLTH=F;
echo " ING_MOD_MAP";
tr 71 M=ING_MOD_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=ING_MOD_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=ING_MOD_MAP S=0 C=0 TSE=T SLTH=F;
echo " IPORT_TABLE";
tr 71 M=IPORT_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=IPORT_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=IPORT_TABLE S=0 C=0 TSE=T SLTH=F;
echo " L2MC";
tr 71 M=L2MC S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2MC S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2MC S=0 C=0 TSE=T SLTH=F;
echo " L2_ENTRY";
tr 71 M=L2_ENTRY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_ENTRY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_ENTRY S=0 C=0 TSE=T SLTH=F;
echo " L2_ENTRY_ONLY";
tr 71 M=L2_ENTRY_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_ENTRY_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_ENTRY_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L2_ENTRY_OVERFLOW";
tr 71 M=L2_ENTRY_OVERFLOW S=0 C=0 TSE=F SLTH=T;
echo " L2_ENTRY_SCRATCH";
tr 71 M=L2_ENTRY_SCRATCH S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_ENTRY_SCRATCH S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_ENTRY_SCRATCH S=0 C=0 TSE=T SLTH=F;
echo " L2_HITDA_ONLY";
tr 71 M=L2_HITDA_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_HITDA_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_HITDA_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L2_HITSA_ONLY";
tr 71 M=L2_HITSA_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_HITSA_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_HITSA_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L2_MOD_FIFO";
tr 71 M=L2_MOD_FIFO S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_MOD_FIFO S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_MOD_FIFO S=0 C=0 TSE=T SLTH=F;
echo " L2_USER_ENTRY";
tr 71 M=L2_USER_ENTRY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_USER_ENTRY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_USER_ENTRY S=0 C=0 TSE=T SLTH=F;
echo " L2_USER_ENTRY_DATA_ONLY";
tr 71 M=L2_USER_ENTRY_DATA_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_USER_ENTRY_DATA_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_USER_ENTRY_DATA_ONLY S=0 C=0 TSE=T SLTH=F;
echo " L2_USER_ENTRY_ONLY";
tr 71 M=L2_USER_ENTRY_ONLY S=0 C=0 TSE=F SLTH=T;
tr 71 M=L2_USER_ENTRY_ONLY S=0 C=0 TSE=T SLTH=T;
tr 71 M=L2_USER_ENTRY_ONLY S=0 C=0 TSE=T SLTH=F;
echo " LPORT";
tr 71 M=LPORT S=0 C=0 TSE=F SLTH=T;
tr 71 M=LPORT S=0 C=0 TSE=T SLTH=T;
tr 71 M=LPORT S=0 C=0 TSE=T SLTH=F;
echo " PORT_MAC_BLOCK";
tr 71 M=PORT_MAC_BLOCK S=0 C=0 TSE=F SLTH=T;
tr 71 M=PORT_MAC_BLOCK S=0 C=0 TSE=T SLTH=T;
tr 71 M=PORT_MAC_BLOCK S=0 C=0 TSE=T SLTH=F;
echo " MODPORT_MAP";
tr 71 M=MODPORT_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=MODPORT_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=MODPORT_MAP S=0 C=0 TSE=T SLTH=F;
echo " MODPORT_MAP_EM";
tr 71 M=MODPORT_MAP_EM S=0 C=0 TSE=F SLTH=T;
tr 71 M=MODPORT_MAP_EM S=0 C=0 TSE=T SLTH=T;
tr 71 M=MODPORT_MAP_EM S=0 C=0 TSE=T SLTH=F;
echo " MODPORT_MAP_IM";
tr 71 M=MODPORT_MAP_IM S=0 C=0 TSE=F SLTH=T;
tr 71 M=MODPORT_MAP_IM S=0 C=0 TSE=T SLTH=T;
tr 71 M=MODPORT_MAP_IM S=0 C=0 TSE=T SLTH=F;
echo " MODPORT_MAP_SW";
tr 71 M=MODPORT_MAP_SW S=0 C=0 TSE=F SLTH=T;
tr 71 M=MODPORT_MAP_SW S=0 C=0 TSE=T SLTH=T;
tr 71 M=MODPORT_MAP_SW S=0 C=0 TSE=T SLTH=F;
echo " NONUCAST_TRUNK_BLOCK_MASK";
tr 71 M=NONUCAST_TRUNK_BLOCK_MASK S=0 C=0 TSE=F SLTH=T;
tr 71 M=NONUCAST_TRUNK_BLOCK_MASK S=0 C=0 TSE=T SLTH=T;
tr 71 M=NONUCAST_TRUNK_BLOCK_MASK S=0 C=0 TSE=T SLTH=F;
echo " COS_MAP";
tr 71 M=COS_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=COS_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=COS_MAP S=0 C=0 TSE=T SLTH=F;
echo " PORT_LAG_FAILOVER_SET";
tr 71 M=PORT_LAG_FAILOVER_SET S=0 C=0 TSE=F SLTH=T;
tr 71 M=PORT_LAG_FAILOVER_SET S=0 C=0 TSE=T SLTH=T;
tr 71 M=PORT_LAG_FAILOVER_SET S=0 C=0 TSE=T SLTH=F;
echo " PORT";
tr 71 M=PORT S=0 C=0 TSE=F SLTH=T;
tr 71 M=PORT S=0 C=0 TSE=T SLTH=T;
tr 71 M=PORT S=0 C=0 TSE=T SLTH=F;
echo " SOURCE_TRUNK_MAP";
tr 71 M=SOURCE_TRUNK_MAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=SOURCE_TRUNK_MAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=SOURCE_TRUNK_MAP S=0 C=0 TSE=T SLTH=F;
echo " SRC_MODID_BLOCK";
tr 71 M=SRC_MODID_BLOCK S=0 C=0 TSE=F SLTH=T;
tr 71 M=SRC_MODID_BLOCK S=0 C=0 TSE=T SLTH=T;
tr 71 M=SRC_MODID_BLOCK S=0 C=0 TSE=T SLTH=F;
echo " VLAN_STG";
tr 71 M=VLAN_STG S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_STG S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_STG S=0 C=0 TSE=T SLTH=F;
echo " TCP_FN";
tr 71 M=TCP_FN S=0 C=0 TSE=F SLTH=T;
tr 71 M=TCP_FN S=0 C=0 TSE=T SLTH=T;
tr 71 M=TCP_FN S=0 C=0 TSE=T SLTH=F;
echo " TOS_FN";
tr 71 M=TOS_FN S=0 C=0 TSE=F SLTH=T;
tr 71 M=TOS_FN S=0 C=0 TSE=T SLTH=T;
tr 71 M=TOS_FN S=0 C=0 TSE=T SLTH=F;
echo " TRUNK32_PORT_TABLE";
tr 71 M=TRUNK32_PORT_TABLE S=0 C=0 TSE=F SLTH=T;
tr 71 M=TRUNK32_PORT_TABLE S=0 C=0 TSE=T SLTH=T;
tr 71 M=TRUNK32_PORT_TABLE S=0 C=0 TSE=T SLTH=F;
echo " TRUNK_BITMAP";
tr 71 M=TRUNK_BITMAP S=0 C=0 TSE=F SLTH=T;
tr 71 M=TRUNK_BITMAP S=0 C=0 TSE=T SLTH=T;
tr 71 M=TRUNK_BITMAP S=0 C=0 TSE=T SLTH=F;
echo " PORT_TRUNK_EGRESS";
tr 71 M=PORT_TRUNK_EGRESS S=0 C=0 TSE=F SLTH=T;
tr 71 M=PORT_TRUNK_EGRESS S=0 C=0 TSE=T SLTH=T;
tr 71 M=PORT_TRUNK_EGRESS S=0 C=0 TSE=T SLTH=F;
echo " TRUNK_GROUP";
tr 71 M=TRUNK_GROUP S=0 C=0 TSE=F SLTH=T;
tr 71 M=TRUNK_GROUP S=0 C=0 TSE=T SLTH=T;
tr 71 M=TRUNK_GROUP S=0 C=0 TSE=T SLTH=F;
echo " TTL_FN";
tr 71 M=TTL_FN S=0 C=0 TSE=F SLTH=T;
tr 71 M=TTL_FN S=0 C=0 TSE=T SLTH=T;
tr 71 M=TTL_FN S=0 C=0 TSE=T SLTH=F;
echo " VLAN_PROFILE_2";
tr 71 M=VLAN_PROFILE_2 S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_PROFILE_2 S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_PROFILE_2 S=0 C=0 TSE=T SLTH=F;
echo " VLAN_PROFILE";
tr 71 M=VLAN_PROFILE S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN_PROFILE S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN_PROFILE S=0 C=0 TSE=T SLTH=F;
echo " VLAN";
tr 71 M=VLAN S=0 C=0 TSE=F SLTH=T;
tr 71 M=VLAN S=0 C=0 TSE=T SLTH=T;
tr 71 M=VLAN S=0 C=0 TSE=T SLTH=F;
if !$?bypass \
        'echo " DSCP_TABLE"; \
        tr 71 M=DSCP_TABLE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=DSCP_TABLE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=DSCP_TABLE S=0 C=0 TSE=T SLTH=F; \
        echo " EFP_COUNTER_TABLE"; \
        tr 71 M=EFP_COUNTER_TABLE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EFP_COUNTER_TABLE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EFP_COUNTER_TABLE S=0 C=0 TSE=T SLTH=F; \
        echo " EFP_COUNTER_TABLE_X"; \
        tr 71 M=EFP_COUNTER_TABLE_X S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EFP_COUNTER_TABLE_X S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EFP_COUNTER_TABLE_X S=0 C=0 TSE=T SLTH=F; \
        echo " EFP_COUNTER_TABLE_Y"; \
        tr 71 M=EFP_COUNTER_TABLE_Y S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EFP_COUNTER_TABLE_Y S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EFP_COUNTER_TABLE_Y S=0 C=0 TSE=T SLTH=F; \
        echo " EFP_METER_TABLE"; \
        tr 71 M=EFP_METER_TABLE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EFP_METER_TABLE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EFP_METER_TABLE S=0 C=0 TSE=T SLTH=F; \
        echo " EFP_METER_TABLE_X"; \
        tr 71 M=EFP_METER_TABLE_X S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EFP_METER_TABLE_X S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EFP_METER_TABLE_X S=0 C=0 TSE=T SLTH=F; \
        echo " EFP_METER_TABLE_Y"; \
        tr 71 M=EFP_METER_TABLE_Y S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EFP_METER_TABLE_Y S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EFP_METER_TABLE_Y S=0 C=0 TSE=T SLTH=F; \
        echo " EFP_POLICY_TABLE"; \
        tr 71 M=EFP_POLICY_TABLE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=F; \
        echo " EFP_TCAM"; \
        tr 71 M=EFP_TCAM S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EFP_TCAM S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EFP_TCAM S=0 C=0 TSE=T SLTH=F;'
if !$?bypass \
        'echo " EGR_DSCP_ECN_MAP"; \
        tr 71 M=EGR_DSCP_ECN_MAP S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_DSCP_ECN_MAP S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_DSCP_ECN_MAP S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_DSCP_TABLE"; \
        tr 71 M=EGR_DSCP_TABLE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_DSCP_TABLE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_DSCP_TABLE S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_EM_MTP_INDEX"; \
        tr 71 M=EGR_EM_MTP_INDEX S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_EM_MTP_INDEX S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_EM_MTP_INDEX S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_ERSPAN"; \
        tr 71 M=EGR_ERSPAN S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_ERSPAN S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_ERSPAN S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_IM_MTP_INDEX"; \
        tr 71 M=EGR_IM_MTP_INDEX S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_IM_MTP_INDEX S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_IM_MTP_INDEX S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_IP_TUNNEL"; \
        tr 71 M=EGR_IP_TUNNEL S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_IP_TUNNEL S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_IP_TUNNEL S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_IP_TUNNEL_IPV6"; \
        tr 71 M=EGR_IP_TUNNEL_IPV6 S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_IP_TUNNEL_IPV6 S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_IP_TUNNEL_IPV6 S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_L3_INTF"; \
        tr 71 M=EGR_L3_INTF S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_L3_INTF S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_L3_INTF S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_L3_NEXT_HOP"; \
        tr 71 M=EGR_L3_NEXT_HOP S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_PRI_CNG_MAP"; \
        tr 71 M=EGR_PRI_CNG_MAP S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_VLAN_XLATE"; \
        tr 71 M=EGR_VLAN_XLATE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_VLAN_XLATE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_VLAN_XLATE S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_VLAN_XLATE_SCRATCH"; \
        tr 71 M=EGR_VLAN_XLATE_SCRATCH S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_VLAN_XLATE_SCRATCH S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_VLAN_XLATE_SCRATCH S=0 C=0 TSE=T SLTH=F; \
        echo " EGR_VLAN_TAG_ACTION_PROFILE"; \
        tr 71 M=EGR_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=EGR_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=EGR_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=T SLTH=F;'
if !$?bypass \
        'echo " FP_COUNTER_TABLE_X"; \
        tr 71 M=FP_COUNTER_TABLE_X S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=FP_COUNTER_TABLE_X S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=FP_COUNTER_TABLE_X S=0 C=0 TSE=T SLTH=F; \
        echo " FP_COUNTER_TABLE_Y"; \
        tr 71 M=FP_COUNTER_TABLE_Y S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=FP_COUNTER_TABLE_Y S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=FP_COUNTER_TABLE_Y S=0 C=0 TSE=T SLTH=F; \
        echo " FP_METER_TABLE"; \
        tr 71 M=FP_METER_TABLE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=FP_METER_TABLE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=FP_METER_TABLE S=0 C=0 TSE=T SLTH=F; \
        echo " FP_POLICY_TABLE"; \
        tr 71 M=FP_POLICY_TABLE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=FP_POLICY_TABLE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=FP_POLICY_TABLE S=0 C=0 TSE=T SLTH=F; \
        echo " FP_PORT_FIELD_SEL"; \
        tr 71 M=FP_PORT_FIELD_SEL S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=FP_PORT_FIELD_SEL S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=FP_PORT_FIELD_SEL S=0 C=0 TSE=T SLTH=F; \
        echo " FP_RANGE_CHECK"; \
        tr 71 M=FP_RANGE_CHECK S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=FP_RANGE_CHECK S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=FP_RANGE_CHECK S=0 C=0 TSE=T SLTH=F; \
        echo " FP_SLICE_KEY_CONTROL"; \
        tr 71 M=FP_SLICE_KEY_CONTROL S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=FP_SLICE_KEY_CONTROL S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=FP_SLICE_KEY_CONTROL S=0 C=0 TSE=T SLTH=F; \
        echo " FP_SLICE_MAP"; \
        tr 71 M=FP_SLICE_MAP S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=FP_SLICE_MAP S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=FP_SLICE_MAP S=0 C=0 TSE=T SLTH=F; \
        echo " FP_STORM_CONTROL_METERS"; \
        tr 71 M=FP_STORM_CONTROL_METERS S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=FP_STORM_CONTROL_METERS S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=FP_STORM_CONTROL_METERS S=0 C=0 TSE=T SLTH=F; \
        echo " FP_TCAM_X"; \
        tr 71 M=FP_TCAM_X S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=FP_TCAM_X S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=FP_TCAM_X S=0 C=0 TSE=T SLTH=F; \
        echo " FP_TCAM_Y"; \
        tr 71 M=FP_TCAM_Y S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=FP_TCAM_Y S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=FP_TCAM_Y S=0 C=0 TSE=T SLTH=F; \
        echo " IFP_REDIRECTION_PROFILE"; \
        tr 71 M=IFP_REDIRECTION_PROFILE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=IFP_REDIRECTION_PROFILE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=IFP_REDIRECTION_PROFILE S=0 C=0 TSE=T SLTH=F;'
if !$?bypass \
        'echo " ING_L3_NEXT_HOP"; \
        tr 71 M=ING_L3_NEXT_HOP S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=F; \
        echo " ING_PRI_CNG_MAP"; \
        tr 71 M=ING_PRI_CNG_MAP S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=ING_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=ING_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=F; \
        echo " ING_VLAN_RANGE"; \
        tr 71 M=ING_VLAN_RANGE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=ING_VLAN_RANGE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=ING_VLAN_RANGE S=0 C=0 TSE=T SLTH=F; \
        echo " ING_VLAN_TAG_ACTION_PROFILE"; \
        tr 71 M=ING_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=ING_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=ING_VLAN_TAG_ACTION_PROFILE S=0 C=0 TSE=T SLTH=F; \
        echo " INITIAL_ING_L3_NEXT_HOP"; \
        tr 71 M=INITIAL_ING_L3_NEXT_HOP S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=INITIAL_ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=INITIAL_ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=F; \
        echo " INITIAL_L3_ECMP"; \
        tr 71 M=INITIAL_L3_ECMP S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=INITIAL_L3_ECMP S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=INITIAL_L3_ECMP S=0 C=0 TSE=T SLTH=F; \
        echo " INITIAL_L3_ECMP_COUNT"; \
        tr 71 M=INITIAL_L3_ECMP_COUNT S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=INITIAL_L3_ECMP_COUNT S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=INITIAL_L3_ECMP_COUNT S=0 C=0 TSE=T SLTH=F;'
if !$?bypass \
        'echo " IPV4_IN_IPV6_PREFIX_MATCH"; \
        tr 71 M=IPV4_IN_IPV6_PREFIX_MATCH S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=IPV4_IN_IPV6_PREFIX_MATCH S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=IPV4_IN_IPV6_PREFIX_MATCH S=0 C=0 TSE=T SLTH=F; \
        echo " IPV6_PROXY_ENABLE"; \
        tr 71 M=IPV6_PROXY_ENABLE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=IPV6_PROXY_ENABLE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=IPV6_PROXY_ENABLE S=0 C=0 TSE=T SLTH=F;'
if !$?bypass \
        'echo " L3_DEFIP"; \
        tr 71 M=L3_DEFIP S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_DEFIP S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_DEFIP S=0 C=0 TSE=T SLTH=F; \
        echo " L3_DEFIP_128"; \
        tr 71 M=L3_DEFIP_128 S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_DEFIP_128 S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_DEFIP_128 S=0 C=0 TSE=T SLTH=F; \
        echo " L3_DEFIP_128_DATA_ONLY"; \
        tr 71 M=L3_DEFIP_128_DATA_ONLY S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_DEFIP_128_DATA_ONLY S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_DEFIP_128_DATA_ONLY S=0 C=0 TSE=T SLTH=F; \
        echo " L3_DEFIP_128_HIT_ONLY"; \
        tr 71 M=L3_DEFIP_128_HIT_ONLY S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_DEFIP_128_HIT_ONLY S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_DEFIP_128_HIT_ONLY S=0 C=0 TSE=T SLTH=F; \
        echo " L3_DEFIP_128_ONLY"; \
        tr 71 M=L3_DEFIP_128_ONLY S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_DEFIP_128_ONLY S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_DEFIP_128_ONLY S=0 C=0 TSE=T SLTH=F; \
        echo " L3_DEFIP_DATA_ONLY"; \
        tr 71 M=L3_DEFIP_DATA_ONLY S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_DEFIP_DATA_ONLY S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_DEFIP_DATA_ONLY S=0 C=0 TSE=T SLTH=F; \
        echo " L3_DEFIP_HIT_ONLY"; \
        tr 71 M=L3_DEFIP_HIT_ONLY S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_DEFIP_HIT_ONLY S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_DEFIP_HIT_ONLY S=0 C=0 TSE=T SLTH=F; \
        echo " L3_DEFIP_ONLY"; \
        tr 71 M=L3_DEFIP_ONLY S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_DEFIP_ONLY S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_DEFIP_ONLY S=0 C=0 TSE=T SLTH=F;'
if !$?bypass \
        'echo " L3_ECMP"; \
        tr 71 M=L3_ECMP S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ECMP S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ECMP S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ECMP_COUNT"; \
        tr 71 M=L3_ECMP_COUNT S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ECMP_COUNT S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ECMP_COUNT S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ENTRY_HIT_ONLY"; \
        tr 71 M=L3_ENTRY_HIT_ONLY S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ENTRY_HIT_ONLY S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ENTRY_HIT_ONLY S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ENTRY_IPV4_MULTICAST"; \
        tr 71 M=L3_ENTRY_IPV4_MULTICAST S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ENTRY_IPV4_MULTICAST S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ENTRY_IPV4_MULTICAST S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ENTRY_IPV4_MULTICAST_SCRATCH"; \
        tr 71 M=L3_ENTRY_IPV4_MULTICAST_SCRATCH S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ENTRY_IPV4_MULTICAST_SCRATCH S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ENTRY_IPV4_MULTICAST_SCRATCH S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ENTRY_IPV4_UNICAST"; \
        tr 71 M=L3_ENTRY_IPV4_UNICAST S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ENTRY_IPV4_UNICAST S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ENTRY_IPV4_UNICAST S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ENTRY_IPV4_UNICAST_SCRATCH"; \
        tr 71 M=L3_ENTRY_IPV4_UNICAST_SCRATCH S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ENTRY_IPV4_UNICAST_SCRATCH S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ENTRY_IPV4_UNICAST_SCRATCH S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ENTRY_IPV6_MULTICAST"; \
        tr 71 M=L3_ENTRY_IPV6_MULTICAST S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ENTRY_IPV6_MULTICAST S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ENTRY_IPV6_MULTICAST S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ENTRY_IPV6_MULTICAST_SCRATCH"; \
        tr 71 M=L3_ENTRY_IPV6_MULTICAST_SCRATCH S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ENTRY_IPV6_MULTICAST_SCRATCH S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ENTRY_IPV6_MULTICAST_SCRATCH S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ENTRY_IPV6_UNICAST"; \
        tr 71 M=L3_ENTRY_IPV6_UNICAST S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ENTRY_IPV6_UNICAST S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ENTRY_IPV6_UNICAST S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ENTRY_IPV6_UNICAST_SCRATCH"; \
        tr 71 M=L3_ENTRY_IPV6_UNICAST_SCRATCH S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ENTRY_IPV6_UNICAST_SCRATCH S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ENTRY_IPV6_UNICAST_SCRATCH S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ENTRY_ONLY"; \
        tr 71 M=L3_ENTRY_ONLY S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ENTRY_ONLY S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ENTRY_ONLY S=0 C=0 TSE=T SLTH=F; \
        echo " L3_ENTRY_VALID_ONLY"; \
        tr 71 M=L3_ENTRY_VALID_ONLY S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_ENTRY_VALID_ONLY S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_ENTRY_VALID_ONLY S=0 C=0 TSE=T SLTH=F;'
if !$?bypass \
        'echo " L3_IPMC"; \
        tr 71 M=L3_IPMC S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_IPMC S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_IPMC S=0 C=0 TSE=T SLTH=F; \
        echo " L3_TUNNEL"; \
        tr 71 M=L3_TUNNEL S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=L3_TUNNEL S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=L3_TUNNEL S=0 C=0 TSE=T SLTH=F;'
if !$?bypass \
        'echo " PORT_CBL_TABLE"; \
        tr 71 M=PORT_CBL_TABLE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=PORT_CBL_TABLE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=PORT_CBL_TABLE S=0 C=0 TSE=T SLTH=F; \
        echo " TRUNK_CBL_TABLE"; \
        tr 71 M=TRUNK_CBL_TABLE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=TRUNK_CBL_TABLE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=TRUNK_CBL_TABLE S=0 C=0 TSE=T SLTH=F;'
if !$?bypass \
        'echo " VFP_POLICY_TABLE"; \
        tr 71 M=VFP_POLICY_TABLE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=VFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=VFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=F; \
        echo " VFP_TCAM"; \
        tr 71 M=VFP_TCAM S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=VFP_TCAM S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=VFP_TCAM S=0 C=0 TSE=T SLTH=F; \
        echo " VLAN_MAC"; \
        tr 71 M=VLAN_MAC S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=VLAN_MAC S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=VLAN_MAC S=0 C=0 TSE=T SLTH=F; \
        echo " VLAN_MAC_SCRATCH"; \
        tr 71 M=VLAN_MAC_SCRATCH S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=VLAN_MAC_SCRATCH S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=VLAN_MAC_SCRATCH S=0 C=0 TSE=T SLTH=F; \
        echo " VLAN_PROTOCOL"; \
        tr 71 M=VLAN_PROTOCOL S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=VLAN_PROTOCOL S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=VLAN_PROTOCOL S=0 C=0 TSE=T SLTH=F; \
        echo " VLAN_PROTOCOL_DATA"; \
        tr 71 M=VLAN_PROTOCOL_DATA S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=VLAN_PROTOCOL_DATA S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=VLAN_PROTOCOL_DATA S=0 C=0 TSE=T SLTH=F; \
        echo " VLAN_SUBNET"; \
        tr 71 M=VLAN_SUBNET S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=VLAN_SUBNET S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=VLAN_SUBNET S=0 C=0 TSE=T SLTH=F; \
        echo " VLAN_SUBNET_DATA_ONLY"; \
        tr 71 M=VLAN_SUBNET_DATA_ONLY S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=VLAN_SUBNET_DATA_ONLY S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=VLAN_SUBNET_DATA_ONLY S=0 C=0 TSE=T SLTH=F; \
        echo " VLAN_SUBNET_ONLY"; \
        tr 71 M=VLAN_SUBNET_ONLY S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=VLAN_SUBNET_ONLY S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=VLAN_SUBNET_ONLY S=0 C=0 TSE=T SLTH=F; \
        echo " VLAN_XLATE"; \
        tr 71 M=VLAN_XLATE S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=VLAN_XLATE S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=VLAN_XLATE S=0 C=0 TSE=T SLTH=F; \
        echo " VLAN_XLATE_SCRATCH"; \
        tr 71 M=VLAN_XLATE_SCRATCH S=0 C=0 TSE=F SLTH=T; \
        tr 71 M=VLAN_XLATE_SCRATCH S=0 C=0 TSE=T SLTH=T; \
        tr 71 M=VLAN_XLATE_SCRATCH S=0 C=0 TSE=T SLTH=F;'

set rct=true

# Re-initialize to clean up of various read/wrires to MMU memories
rcload rc.soc
linkscan off

echo "Running counter width verification test ..."
tr 30
$done

echo "Running counter read/write test ..."
tr 31
$done

#L2/L3 hashing tests
if !$?fabric '\
echo "Running L2 insert/delete/lookup test ..."; \
tr 32; \
$done; \
\
echo "Running L2 overflow insert test ..."; \
tr 33; \
$done; \
\
echo "Running L2 hash test ..."; \
tr 34; \
$done; \
\
echo "Running L2 delete by port test ..."; \
tr 35; \
$done; \
\
echo "Running L2 delete by vlan test ..."; \
tr 36; \
$done; \
'

if !$?bypass && !$?fabric \
        'echo "Running IPV4 overflow insert test ..."; \
        tr 87 IPMCEnable=False; \
        tr 87 IPMCEnable=True; \
        $done'

if !$?bypass && !$?fabric \
        'echo "Running IPV6 hash test ..."; \
        tr 88 IPMCEnable=False; \
        tr 88 IPMCEnable=True; \
        $done'

if !$?bypass && !$?fabric \
        'echo "Running IPV6 overflow insert test ..."; \
        tr 85 IPMCEnable=False; \
        tr 85 IPMCEnable=True; \
        $done'

if !$?bypass && !$?fabric \
        'echo "Running IPV6 hash test ..."; \
        tr 86 IPMCEnable=False; \
        tr 86 IPMCEnable=True; \
        $done'

if !$?bypass && !$?fabric \
        'echo "Running VLAN translate overflow insert test ..."; \
        tr 100'

if !$?bypass && !$?fabric \
        'echo "Running VLAN translate hash tests ..."; \
        tr 101 hash=0; \
        tr 101 hash=1; \
        tr 101 hash=2; \
        tr 101 hash=3; \
        tr 101 hash=4; \
        tr 101 hash=5'

if !$?bypass && !$?fabric \
        'echo "Running Egress VLAN translate overflow insert test ..."; \
        tr 102'

if !$?bypass && !$?fabric \
        'echo "Running Egress VLAN translate hash tests ..."; \
        tr 103 hash=0; \
        tr 103 hash=1; \
        tr 103 hash=2; \
        tr 103 hash=3; \
        tr 103 hash=4; \
        tr 103 hash=5'

#Temporary, until HL ports resolved in MDIO test
if !$?fabric \
        'echo "Running MDIO Linkscan test"; \
        tr 60 readcount=10000; \
        $done'

if !$?fabric \
        'echo "Testing CPU DMA loopback ..."; \
        tr 17 c=5; \
        $done'

echo "Testing CPU DMA, Scatter/Gather Reload ..."
tr 22
$done

echo "Testing CPU DMA, Scatter/Gather Simple ..."
tr 23
$done

echo "Testing CPU DMA, Scatter/Gather Random ..."
tr 24
$done

# Bitmap support switches

if $?BCM56820_A0 && "expr $BCM956820K24C + 0" \
     "local pbm10g 0x1ffffe;"
if $?BCM56820_A0 && !"expr $BCM956820K24C + 0" \
     "local pbm10g 0x1e00000;"
if $?BCM56820_B0 && "expr $BCM956820K24C + 0" \
     "local pbm10g 0x1ffffe;"
if $?BCM56820_B0 && !"expr $BCM956820K24C + 0" \
     "local pbm10g 0x1e00000;"

if $?BCM56821_A0 && "expr $bcm56821_20x12 + 0" \
     "local pbm10g 0x1f87fe; local pbm16g 0x01e0001e;"
if $?BCM56821_A0 && !"expr $bcm56821_20x12 + 0" \
     "local pbm10g 0x1f87fe; local pbm12g 0x1f87fe;"
if $?BCM56821_B0 && "expr $bcm56821_20x12 + 0" \
     "local pbm10g 0x1f87fe; local pbm16g 0x01e0001e;"
if $?BCM56821_B0 && !"expr $bcm56821_20x12 + 0" \
     "local pbm10g 0x1f87fe; local pbm12g 0x1f87fe;"

if $?BCM56822_A0 && "expr $bcm56822_8x16 + 0" \
     "local pbm10g 0x1ffe00; local pbm16g 0x00001f10; local pbm21g 0x00001e00"
if $?BCM56822_B0 && "expr $bcm56822_8x16 + 0" \
     "local pbm10g 0x1ffe00; local pbm16g 0x00001f10; local pbm21g 0x00001e00"
if $?BCM56822_A0 && !"expr $bcm56822_8x16 + 0" \
     "local pbm10g 0x1ffe00; local pbm16g 0x00001fe0;"
if $?BCM56822_B0 && !"expr $bcm56822_8x16 + 0" \
     "local pbm10g 0x1ffe00; local pbm16g 0x00001fe0;"

if $?BCM56823_A0 || $?BCM56823_B0 \
     "local pbm10g 0x1ffffe; local pbm16g 0x0007ff80; local pbm21g 0x0001fe00"

if $?BCM56825_A0 || $?BCM56825_B0 \
     "local pbm10g 0x1fffffe; local pbm16g 0x0001fe00; local pbm21g 0x0001fe00"

if $?BCM56720_A0 || $?BCM56720_B0 \
     "local pbm10g 0x1fffe0; local pbm16g 0x1fffe0;"

if $?BCM56721_A0 || $?BCM56721_B0 \
     "local pbm10g 0x7ff80; local pbm16g 07ff80;"

if $?BCM56725_A0 && "expr $bcm56725_16x16 + 0" \
     "local pbm10g 0x7ff80; local pbm16g 0x7ff80; local pbm21g 0x1fe00"
if $?BCM56725_A0 && !"expr $bcm56725_16x16 + 0" \
     "local pbm10g 0x1fffe0; local pbm16g 0x1fffe0;"
if $?BCM56725_B0 && "expr $bcm56725_16x16 + 0" \
     "local pbm10g 0x7ff80; local pbm16g 0x7ff80; local pbm21g 0x1fe00"
if $?BCM56725_B0 && !"expr $bcm56725_16x16 + 0" \
     "local pbm10g 0x1fffe0; local pbm16g 0x1fffe0;"

#MAC Loopback
if $?BCM56820_A0 || $?BCM56821_A0 || $?BCM56822_A0 || \
        $?BCM56823_A0 || $?BCM56825_A0 || \
   $?BCM56820_B0 || $?BCM56821_B0 || $?BCM56822_B0 || \
        $?BCM56823_B0  || $?BCM56825_B0 \
        'echo "Testing MAC Loopback - 1000 Mb/s all GE ports"; \
         tr 18 pbm=ge speed=1000'

if !"expr $pbm10g + 0" \
        'echo "Testing MAC Loopback - 10000 Mb/s all XE/HG ports"; \
        tr 18 pbm=$pbm10g speed=10G'

if !"expr $pbm12g + 0" \
        'echo "Testing MAC Loopback - 12000 Mb/s all HG ports"; \
        tr 18 pbm=$pbm12g speed=12G'

if !"expr $pbm16g + 0" \
        'echo "Testing MAC Loopback - 12000 Mb/s all HG ports"; \
        tr 18 pbm=$pbm16g speed=12G; \
        echo "Testing MAC Loopback - 16000 Mb/s all HG ports"; \
        tr 18 pbm=$pbm16g speed=16G'

if !"expr $pbm21g + 0" \
        'echo "Testing MAC Loopback - 21000 Mb/s HG ports"; \
        tr 18 pbm=$pbm21g speed=21G'

$done

#PHY Loopback
if $?BCM56820_A0 || $?BCM56821_A0 || $?BCM56822_A0 || \
        $?BCM56823_A0 || $?BCM56825_A0 || \
   $?BCM56820_B0 || $?BCM56821_B0 || $?BCM56822_B0 || \
        $?BCM56823_B0  || $?BCM56825_B0 \
        'echo "Testing PHY Loopback - 1000 Mb/s all GE ports"; \
         tr 19 pbm=ge speed=1000'

if !"expr $pbm10g + 0" \
        'echo "Testing PHY Loopback - 10000 Mb/s all XE/HG ports"; \
        tr 19 pbm=$pbm10g speed=10G'

if !"expr $pbm12g + 0" \
        'echo "Testing PHY Loopback - 12000 Mb/s all HG ports"; \
        tr 19 pbm=$pbm12g speed=12G'

if !"expr $pbm16g + 0" \
        'echo "Testing PHY Loopback - 12000 Mb/s all HG ports"; \
        tr 19 pbm=$pbm16g speed=12G; \
        echo "Testing PHY Loopback - 16000 Mb/s all HG ports"; \
        tr 19 pbm=$pbm16g speed=16G'

if !"expr $pbm21g + 0" \
        'echo "Testing PHY Loopback - 21000 Mb/s HG ports"; \
        tr 19 pbm=$pbm21g speed=21G'

echo "Running MAC loopback V2 on all ports ..."
tr 48 smi=103 dmi=42 vlan=5 pi=0x11335577 sendm=single
$done

echo "Running PHY loopback V2 on all ports ..."
tr 49 smi=52 dmi=83 vlan=23 pi=0x01204007
$done

#Internal snake Loopback 
echo "Running internal snake on all ports, MAC loopback ..."
if $?BCM56820_A0 || $?BCM56820_B0 \
    'tr 39 loopbackmode=mac snakepath=two PBM=xe; \
     tr 39 loopbackmode=mac snakepath=two PBM=ge'
if $?BCM56821_A0 && "expr $bcm56821_20x12 + 0" \
    'tr 39 loopbackmode=mac snakepath=two PBM=xe0-xe11' \
if $?BCM56821_B0 && "expr $bcm56821_20x12 + 0" \
    'tr 39 loopbackmode=mac snakepath=two PBM=xe0-xe11' \
if $?BCM56821_A0 || $?BCM56821_B0 \
    'tr 39 loopbackmode=mac snakepath=two PBM=ge0-ge3'
if $?BCM56822_A0 || $?BCM56822_B0 \
    'tr 39 loopbackmode=mac snakepath=two PBM=ge0-ge3'
if $?BCM56823_A0 || $?BCM56823_B0 \
    'tr 39 loopbackmode=mac snakepath=two PBM=ge0-ge3'
if $?BCM56825_A0 || $?BCM56825_B0 \
    'tr 39 loopbackmode=mac snakepath=two PBM=xe0-xe15'
if $?BCM56720_A0 || $?BCM56721_A0 || $?BCM56725_A0 || \
   $?BCM56720_B0 || $?BCM56721_B0 || $?BCM56725_B0 \
    'tr 39 loopbackmode=mac snakepath=two PBM=hg'
$done

echo "Running internal snake on all ports, PHY loopback ..."
if $?BCM56820_A0 || $?BCM56820_B0 \
    'tr 39 loopbackmode=phy snakepath=two PBM=xe; \
     tr 39 loopbackmode=phy snakepath=two PBM=ge'
if $?BCM56821_A0 && "expr $bcm56821_20x12 + 0" \
    'tr 39 loopbackmode=phy snakepath=two PBM=xe0-xe11' \
if $?BCM56821_B0 && "expr $bcm56821_20x12 + 0" \
    'tr 39 loopbackmode=phy snakepath=two PBM=xe0-xe11' \
if $?BCM56821_A0 || $?BCM56821_B0 \
    'tr 39 loopbackmode=phy snakepath=two PBM=ge0-ge3'
if $?BCM56822_A0 || $?BCM56822_B0 \
    'tr 39 loopbackmode=phy snakepath=two PBM=ge0-ge3'
if $?BCM56823_A0 || $?BCM56823_B0 \
    'tr 39 loopbackmode=phy snakepath=two PBM=ge0-ge3'
if $?BCM56825_A0 || $?BCM56825_B0 \
    'tr 39 loopbackmode=phy snakepath=two PBM=xe0-xe15'
if $?BCM56720_A0 || $?BCM56721_A0 || $?BCM56725_A0 || \
   $?BCM56720_B0 || $?BCM56721_B0 || $?BCM56725_B0 \
    'tr 39 loopbackmode=phy snakepath=two PBM=hg'
$done

#Traffic Test
echo "Running Traffic Test in MAC mode ..."
tr 72 RM=MAC PBM=e,hg c=5
$done

echo "Running Traffic Test in PHY mode ..."
tr 72 RM=PHY PBM=e,hg c=5
$done


#External Loopback
# If you have external loopback cables connected as follows
#       1-2,   3-4,   5-6,   7-8,   9-10,  11-12
#       13-14, 15-16, 17-18, 19-20, 21-22, 23-24
#       25-26, 27-28
# then you can enable this script to perform external loopback at
# different speeds.  Before running this script, use:
#       setenv ext1000 1
#       setenv ext10G  1
#       setenv ext12G  1
#       setenv ext16G  1
#       setenv ext21G  1
# or
#       setenv extall  1

#External Loopback on GE ports
if $?BCM56821_A0 || $?BCM56822_A0 || $?BCM56823_A0 || \
   $?BCM56821_B0 || $?BCM56822_B0 || $?BCM56823_B0 \
    'local ge_fwd 0xa000000; \
     local ge_bwd 0x14000000'
if $?BCM56820_A0 && "expr $BCM956820K24C + 0" \
    'local ge_fwd 0xa000000; \
     local ge_bwd 0x14000000'
if $?BCM56820_A0 && !"expr $BCM956820K24C + 0" \
    'local ge_fwd 0xaaaaaa; \
     local ge_bwd 0x14155554'
if $?BCM56820_B0 && "expr $BCM956820K24C + 0" \
    'local ge_fwd 0xa000000; \
     local ge_bwd 0x14000000'
if $?BCM56820_B0 && !"expr $BCM956820K24C + 0" \
    'local ge_fwd 0xaaaaaa; \
     local ge_bwd 0x14155554'

#External Loopback on XE/HG ports
if $?BCM56820_A0 && "expr $BCM956820K24C + 0" \
    'local xe_fwd 0xaaaaaa; \
     local xe_bwd 0x1555554'
if $?BCM56820_A0 && !"expr $BCM956820K24C + 0" \
    'local xe_fwd 0x0a00000; \
     local xe_bwd 0x1400000'
if $?BCM56820_B0 && "expr $BCM956820K24C + 0" \
    'local xe_fwd 0xaaaaaa; \
     local xe_bwd 0x1555554'
if $?BCM56820_B0 && !"expr $BCM956820K24C + 0" \
    'local xe_fwd 0x0a00000; \
     local xe_bwd 0x1400000'
if $?BCM56821_A0 && "expr $bcm56821_20x12 + 0" \
    'local xe_fwd 0xaa82aa; \
     local xe_bwd 0x1550554; \
     local hg_fwd 0xa0000a; \
     local hg_bwd 0x1400014'
if $?BCM56821_A0 && !"expr $bcm56821_20x12 + 0" \
    'local hg12_fwd 0xaa82aa; \
     local hg12_bwd 0x1550554'
if $?BCM56821_B0 && "expr $bcm56821_20x12 + 0" \
    'local xe_fwd 0xaa82aa; \
     local xe_bwd 0x1550554; \
     local hg_fwd 0xa0000a; \
     local hg_bwd 0x1400014'
if $?BCM56821_B0 && !"expr $bcm56821_20x12 + 0" \
    'local hg12_fwd 0xaa82aa; \
     local hg12_bwd 0x1550554'
if $?BCM56822_A0 && "expr $bcm56822_8x16 + 0" \
    'local xe_fwd 0xaaa000; \
     local xe_bwd 0x1554000; \
     local hg_fwd 0x0080; \
     local hg_bwd 0x0100; \
     local hg21_fwd 0x0a00; \
     local hg21_bwd 0x1400'
if $?BCM56822_A0 && !"expr $bcm56822_8x16 + 0" \
    'local xe_fwd 0xaaa000; \
     local xe_bwd 0x1554000; \
     local hg_fwd 0x0aa0; \
     local hg_bwd 0x1540'
if $?BCM56822_B0 && "expr $bcm56822_8x16 + 0" \
    'local xe_fwd 0xaaa000; \
     local xe_bwd 0x1554000; \
     local hg_fwd 0x0080; \
     local hg_bwd 0x0100; \
     local hg21_fwd 0x0a00; \
     local hg21_bwd 0x1400'
if $?BCM56822_B0 && !"expr $bcm56822_8x16 + 0" \
    'local xe_fwd 0xaaa000; \
     local xe_bwd 0x1554000; \
     local hg_fwd 0x0aa0; \
     local hg_bwd 0x1540'
if $?BCM56823_A0 || $?BCM56823_B0 \
    'local hg_fwd 0x02aa80; \
     local hg_bwd 0x055500; \
     local hg21_fwd 0x00aa00; \
     local hg21_bwd 0x015400'
if $?BCM56825_A0 || $?BCM56825_B0 \
    'local xe_fwd 0xaa00aa; \
     local xe_bwd 0x1540154; \
     local hg_fwd 0x00aa00; \
     local hg_bwd 0x015400; \
     local hg21_fwd 0x00aa00; \
     local hg21_bwd 0x015400'

if $?BCM56720_A0 || $?BCM56720_B0 \
    'local hg_fwd 0x0aaaa0; \
     local hg_bwd 0x0155540'
if $?BCM56721_A0 || $?BCM56721_B0 \
    'local hg_fwd 0x02aa80; \
     local hg_bwd 0x0055500'
if $?BCM56725_A0 && "expr $bcm56725_16x16 + 0" \
    'local hg_fwd 0x02aa80; \
     local hg_bwd 0x0055500; \
     local hg21_fwd 0x00aa00; \
     local hg21_bwd 0x0015400'
if $?BCM56725_A0 && !"expr $bcm56725_16x16 + 0" \
    'local hg_fwd 0x0aaaa0; \
     local hg_bwd 0x0155540'
if $?BCM56725_B0 && "expr $bcm56725_16x16 + 0" \
    'local hg_fwd 0x02aa80; \
     local hg_bwd 0x0055500; \
     local hg21_fwd 0x00aa00; \
     local hg21_bwd 0x0015400'
if $?BCM56725_B0 && !"expr $bcm56725_16x16 + 0" \
    'local hg_fwd 0x0aaaa0; \
     local hg_bwd 0x0155540'

if $?extall \
        "local ext1000 1; local ext10G 1; local ext12G 1; \
        local ext16G 1; local ext21G 1"

if $?ext1000  && !"expr $ge_fwd + 0" \
        "echo Testing External Loopback - 1000 MB/s forward; \
                tr 20 tpbm=$ge_fwd di=1 speed=1000 count=10; \
         echo Testing External Loopback - 1000 MB/s reverse; \
                tr 20 tpbm=$ge_bwd di=-1 speed=1000 count=10"

if $?ext10G && !"expr $xe_fwd + 0" \
        "echo Testing External Loopback - 10 GB/s forward; \
                tr 20 tpbm=$xe_fwd di=1 speed=10G count=10; \
         echo Testing External Loopback - 10 GB/s reverse; \
                tr 20 tpbm=$xe_bwd di=-1 speed=10G count=10"

if $?ext10G && !"expr $hg12_fwd + 0" \
        "echo Testing External Loopback - 10 GB/s forward; \
                tr 20 tpbm=$hg12_fwd di=1 speed=10G count=10; \
         echo Testing External Loopback - 10 GB/s reverse; \
                tr 20 tpbm=$hg12_bwd di=-1 speed=10G count=10"

if $?ext12G && !"expr $hg12_fwd + 0" \
        "echo Testing External Loopback - 12 GB/s forward; \
                tr 20 tpbm=$hg12_fwd di=1 speed=12G count=10; \
         echo Testing External Loopback - 12 GB/s reverse; \
                tr 20 tpbm=$hg12_bwd di=-1 speed=12G count=10"

if $?ext10G && !"expr $hg_fwd + 0" \
        "echo Testing External Loopback - 10 GB/s forward; \
                tr 20 tpbm=$hg_fwd di=1 speed=10G count=10; \
         echo Testing External Loopback - 10 GB/s reverse; \
                tr 20 tpbm=$hg_bwd di=-1 speed=10G count=10"

if $?ext12G && !"expr $hg_fwd + 0" \
        "echo Testing External Loopback - 12 GB/s forward; \
                tr 20 tpbm=$hg_fwd di=1 speed=12G count=10; \
         echo Testing External Loopback - 12 GB/s reverse; \
                tr 20 tpbm=$hg_bwd di=-1 speed=12G count=10"

if $?ext16G && !"expr $hg_fwd + 0" \
        "echo Testing External Loopback - 16 GB/s forward; \
                tr 20 tpbm=$hg_fwd di=1 speed=16G count=10; \
         echo Testing External Loopback - 16 GB/s reverse; \
                tr 20 tpbm=$hg_bwd di=-1 speed=16G count=10"

if $?ext21G && !"expr $hg21_fwd + 0" \
        "echo Testing External Loopback - 21 GB/s forward; \
                tr 20 tpbm=$hg21_fwd di=1 speed=21G count=10 an=f; \
         echo Testing External Loopback - 21 GB/s reverse; \
                tr 20 tpbm=$hg21_bwd di=-1 speed=21G count=10 an=f"

# Show status
date
tl 
local returnCode $?

echo Tests Complete.  Reinitializing ...
config refresh
rcload rc.soc

# We want to show the return code from the tl command which
# lists the results. The automated test infrastructure keys off of this 
# value
echo "testsuite: finished: sanity: $returnCode"
