# $Id: fsanity.soc,v 1.43 Broadcom SDK $
# $Copyright: Copyright 2012 Broadcom Corporation.
# This program is the proprietary software of Broadcom Corporation
# and/or its licensors, and may only be used, duplicated, modified
# or distributed pursuant to the terms and conditions of a separate,
# written license agreement executed between you and Broadcom
# (an "Authorized License").  Except as set forth in an Authorized
# License, Broadcom grants no license (express or implied), right
# to use, or waiver of any kind with respect to the Software, and
# Broadcom expressly reserves all rights in and to the Software
# and all intellectual property rights therein.  IF YOU HAVE
# NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
# IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
# ALL USE OF THE SOFTWARE.  
#  
# Except as expressly set forth in the Authorized License,
#  
# 1.     This program, including its structure, sequence and organization,
# constitutes the valuable trade secrets of Broadcom, and you shall use
# all reasonable efforts to protect the confidentiality thereof,
# and to use this information only in connection with your use of
# Broadcom integrated circuit products.
#  
# 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
# PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
# REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
# OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
# DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
# NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
# ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
# CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
# OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
# 
# 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
# BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
# INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
# ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
# TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
# THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
# WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
# ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
#
# Script to run all available tests as quickly as possible.
# For testing basic sanity of new drivers, simulators, chips, etc.

echo "testsuite: started: sanity"

# We need to print out port status since any cabling effects results.
*:ps

if $?BCM56504_B0 || $?BCM56504_B1 'setenv firebolt15 1'

if $?BCM56514_A0 || $?BCM56324_A0 'setenv firebolt2 1'

# Avoid link messages while testing
linkscan off

# Use expected COS configuration for test
#config add bcm_num_cos=4

init
init misc

local done 'echo "   Done"'

# Set run command script not to fail on errors reported by commands
# this allows the script to continue if a test fails
set rcerror=false

# Set up test mode: don't stop on errors, show progress on each test
tm -stoponerror +progress
# Deselect all
ts -*

#Display some useful information
date
ver
soc

#Start Test
echo "Running PCI Compliance ..."
tr 2
$done

echo "Running PCI S-Channel Buf ..."
tr 4
$done

echo "Running Register reset defaults ..."
tr 1
$done

echo "Running Register read/write ..."
tr 3 mask64
$done

init soc;
#Clean up after register read/write test.

echo "Running CPU Benchmarks ..."
tr 21
$done

echo "Running Switching Memory tests ..."
#Test L2_ENTRY before aging fired off, aging is enabled in_init_ above
echo "  L2_ENTRY";
tr 50 M=L2_ENTRY;
tr 51 M=L2_ENTRY;
tr 52 M=L2_ENTRY;
echo "  L2_ENTRY_ONLY";
tr 50 M=L2_ENTRY_ONLY;
tr 51 M=L2_ENTRY_ONLY;
tr 52 M=L2_ENTRY_ONLY;
echo "  L2_HITDA_ONLY";
tr 50 M=L2_HITDA_ONLY;
tr 51 M=L2_HITDA_ONLY;
tr 52 M=L2_HITDA_ONLY;
echo "  L2_HITSA_ONLY";
tr 50 M=L2_HITSA_ONLY;
tr 51 M=L2_HITSA_ONLY;
tr 52 M=L2_HITSA_ONLY;

if $?firebolt15 || $?helix15 || $?felix15 || $?firebolt2 '\
echo "  EGR_DSCP_ECN_MAP"; \
tr 50 M=EGR_DSCP_ECN_MAP; \
tr 51 M=EGR_DSCP_ECN_MAP; \
tr 52 M=EGR_DSCP_ECN_MAP; \
echo "  IPV6_PROXY_ENABLE"; \
tr 50 M=IPV6_PROXY_ENABLE; \
tr 51 M=IPV6_PROXY_ENABLE; \
tr 52 M=IPV6_PROXY_ENABLE; \
echo "  LPORT"; \
tr 50 M=LPORT; \
tr 51 M=LPORT; \
tr 52 M=LPORT; \
echo "  IFP_PORT_FIELD_SEL"; \
tr 50 M=IFP_PORT_FIELD_SEL; \
tr 51 M=IFP_PORT_FIELD_SEL; \
tr 52 M=IFP_PORT_FIELD_SEL; \
'
if $?helix || $?felix || $?firebolt15 || $?helix15 \
        || $?felix15 || $?firebolt2  '\
echo "  ALTERNATE_EMIRROR_BITMAP"; \
tr 50 M=ALTERNATE_EMIRROR_BITMAP; \
tr 51 M=ALTERNATE_EMIRROR_BITMAP; \
tr 52 M=ALTERNATE_EMIRROR_BITMAP; \
echo "  SRC_MODID_BLOCK"; \
tr 50 M=SRC_MODID_BLOCK; \
tr 51 M=SRC_MODID_BLOCK; \
tr 52 M=SRC_MODID_BLOCK; \
'
if !$?firebolt2 '\
echo "  FP_TCAM_PLUS_POLICY"; \
tr 50 M=FP_TCAM_PLUS_POLICY; \
tr 51 M=FP_TCAM_PLUS_POLICY; \
tr 52 M=FP_TCAM_PLUS_POLICY; \
'
if $?firebolt2 '\
echo "  EFP_COUNTER_TABLE"; \
tr 50 M=EFP_COUNTER_TABLE; \
tr 51 M=EFP_COUNTER_TABLE; \
tr 52 M=EFP_COUNTER_TABLE; \
echo "  EFP_METER_TABLE"; \
tr 50 M=EFP_METER_TABLE; \
tr 51 M=EFP_METER_TABLE; \
tr 52 M=EFP_METER_TABLE; \
echo "  EFP_POLICY_TABLE"; \
tr 50 M=EFP_POLICY_TABLE; \
tr 51 M=EFP_POLICY_TABLE; \
tr 52 M=EFP_POLICY_TABLE; \
echo "  EFP_TCAM"; \
tr 50 M=EFP_TCAM; \
tr 51 M=EFP_TCAM; \
tr 52 M=EFP_TCAM; \
echo "  EGR_PRI_CNG_MAP"; \
tr 50 M=EGR_PRI_CNG_MAP; \
tr 51 M=EGR_PRI_CNG_MAP; \
tr 52 M=EGR_PRI_CNG_MAP; \
echo "  FP_SLICE_MAP"; \
tr 50 M=FP_SLICE_MAP; \
echo "  ING_PRI_CNG_MAP"; \
tr 50 M=ING_PRI_CNG_MAP; \
tr 51 M=ING_PRI_CNG_MAP; \
tr 52 M=ING_PRI_CNG_MAP; \
echo "  INITIAL_ING_L3_NEXT_HOP"; \
tr 50 M=INITIAL_ING_L3_NEXT_HOP; \
tr 51 M=INITIAL_ING_L3_NEXT_HOP; \
tr 52 M=INITIAL_ING_L3_NEXT_HOP; \
echo "  INITIAL_L3_ECMP"; \
tr 50 M=INITIAL_L3_ECMP; \
tr 51 M=INITIAL_L3_ECMP; \
tr 52 M=INITIAL_L3_ECMP; \
echo "  IPV4_IN_IPV6_PREFIX_MATCH"; \
tr 50 M=IPV4_IN_IPV6_PREFIX_MATCH; \
tr 51 M=IPV4_IN_IPV6_PREFIX_MATCH; \
tr 52 M=IPV4_IN_IPV6_PREFIX_MATCH; \
echo "  MMU_MAX_BUCKET_GPORT"; \
tr 50 M=MMU_MAX_BUCKET_GPORT; \
tr 51 M=MMU_MAX_BUCKET_GPORT; \
tr 52 M=MMU_MAX_BUCKET_GPORT; \
echo "  MMU_MIN_BUCKET_GPORT"; \
tr 50 M=MMU_MIN_BUCKET_GPORT; \
tr 51 M=MMU_MIN_BUCKET_GPORT; \
tr 52 M=MMU_MIN_BUCKET_GPORT; \
echo "  MODPORT_MAP_EM"; \
tr 50 M=MODPORT_MAP_EM; \
tr 51 M=MODPORT_MAP_EM; \
tr 52 M=MODPORT_MAP_EM; \
echo "  MODPORT_MAP_IM"; \
tr 50 M=MODPORT_MAP_IM; \
tr 51 M=MODPORT_MAP_IM; \
tr 52 M=MODPORT_MAP_IM; \
echo "  MODPORT_MAP_SW"; \
tr 50 M=MODPORT_MAP_SW; \
tr 51 M=MODPORT_MAP_SW; \
tr 52 M=MODPORT_MAP_SW; \
echo "  VFP_POLICY_TABLE"; \
tr 50 M=VFP_POLICY_TABLE; \
tr 51 M=VFP_POLICY_TABLE; \
tr 52 M=VFP_POLICY_TABLE; \
echo "  VFP_TCAM"; \
tr 50 M=VFP_TCAM; \
tr 51 M=VFP_TCAM; \
tr 52 M=VFP_TCAM; \
echo "  VLAN_PROFILE"; \
tr 50 M=VLAN_PROFILE; \
tr 51 M=VLAN_PROFILE; \
tr 52 M=VLAN_PROFILE; \
'


echo "  DSCP_TABLE";
tr 50 M=DSCP_TABLE;
tr 51 M=DSCP_TABLE;
tr 52 M=DSCP_TABLE;
echo "  E2E_HOL_STATUS";
tr 50 M=E2E_HOL_STATUS;
tr 51 M=E2E_HOL_STATUS;
tr 52 M=E2E_HOL_STATUS;
echo "  EGR_DSCP_TABLE";
tr 50 M=EGR_DSCP_TABLE;
tr 51 M=EGR_DSCP_TABLE;
tr 52 M=EGR_DSCP_TABLE;
echo "  EGR_EM_MTP_INDEX";
tr 50 M=EGR_EM_MTP_INDEX;
tr 51 M=EGR_EM_MTP_INDEX;
tr 52 M=EGR_EM_MTP_INDEX;
echo "  EGR_IM_MTP_INDEX";
tr 50 M=EGR_IM_MTP_INDEX;
tr 51 M=EGR_IM_MTP_INDEX;
tr 52 M=EGR_IM_MTP_INDEX;
echo "  EGR_IP_TUNNEL";
tr 50 M=EGR_IP_TUNNEL;
tr 51 M=EGR_IP_TUNNEL;
tr 52 M=EGR_IP_TUNNEL;
echo "  EGR_L3_INTF";
tr 50 M=EGR_L3_INTF;
tr 51 M=EGR_L3_INTF;
tr 52 M=EGR_L3_INTF;
echo "  EGR_L3_NEXT_HOP";
tr 50 M=EGR_L3_NEXT_HOP;
tr 51 M=EGR_L3_NEXT_HOP;
tr 52 M=EGR_L3_NEXT_HOP;
echo "  EGRESS_MASK";
tr 50 M=EGRESS_MASK;
tr 51 M=EGRESS_MASK;
tr 52 M=EGRESS_MASK;
echo "  EGR_VLAN";
tr 50 M=EGR_VLAN;
tr 51 M=EGR_VLAN;
tr 52 M=EGR_VLAN;
echo "  EGR_VLAN_STG";
tr 50 M=EGR_VLAN_STG;
tr 51 M=EGR_VLAN_STG;
tr 52 M=EGR_VLAN_STG;
echo "  EGR_VLAN_XLATE";
tr 50 M=EGR_VLAN_XLATE;
tr 51 M=EGR_VLAN_XLATE;
tr 52 M=EGR_VLAN_XLATE;
echo "  EGR_VLAN_XLATE_DATA_ONLY";
tr 50 M=EGR_VLAN_XLATE_DATA_ONLY;
tr 51 M=EGR_VLAN_XLATE_DATA_ONLY;
tr 52 M=EGR_VLAN_XLATE_DATA_ONLY;
echo "  EGR_VLAN_XLATE_ONLY";
tr 50 M=EGR_VLAN_XLATE_ONLY;
tr 51 M=EGR_VLAN_XLATE_ONLY;
tr 52 M=EGR_VLAN_XLATE_ONLY;
echo "  EM_MTP_INDEX";
tr 50 M=EM_MTP_INDEX;
tr 51 M=EM_MTP_INDEX;
tr 52 M=EM_MTP_INDEX;
echo "  FP_COUNTER_TABLE";
tr 50 M=FP_COUNTER_TABLE;
tr 51 M=FP_COUNTER_TABLE;
tr 52 M=FP_COUNTER_TABLE;
echo "  FP_METER_TABLE";
tr 50 M=FP_METER_TABLE;
tr 51 M=FP_METER_TABLE;
tr 52 M=FP_METER_TABLE;
echo "  FP_POLICY_TABLE";
tr 50 M=FP_POLICY_TABLE;
tr 51 M=FP_POLICY_TABLE;
tr 52 M=FP_POLICY_TABLE;
echo "  FP_PORT_FIELD_SEL";
tr 50 M=FP_PORT_FIELD_SEL;
tr 51 M=FP_PORT_FIELD_SEL;
tr 52 M=FP_PORT_FIELD_SEL;
echo "  FP_RANGE_CHECK";
tr 50 M=FP_RANGE_CHECK;
tr 51 M=FP_RANGE_CHECK;
tr 52 M=FP_RANGE_CHECK;
echo "  FP_TCAM";
tr 50 M=FP_TCAM;
tr 51 M=FP_TCAM;
tr 52 M=FP_TCAM;
echo "  IM_MTP_INDEX";
tr 50 M=IM_MTP_INDEX;
tr 51 M=IM_MTP_INDEX;
tr 52 M=IM_MTP_INDEX;
echo "  ING_L3_NEXT_HOP";
tr 50 M=ING_L3_NEXT_HOP;
tr 51 M=ING_L3_NEXT_HOP;
tr 52 M=ING_L3_NEXT_HOP;
echo "  IPORT_TABLE";
tr 50 M=IPORT_TABLE;
tr 51 M=IPORT_TABLE;
tr 52 M=IPORT_TABLE;
echo "  L2MC";
tr 50 M=L2MC;
tr 51 M=L2MC;
tr 52 M=L2MC;
echo "  L2_MOD_FIFO";
tr 50 M=L2_MOD_FIFO;
tr 51 M=L2_MOD_FIFO;
tr 52 M=L2_MOD_FIFO;
echo "  L2_USER_ENTRY";
tr 50 M=L2_USER_ENTRY;
tr 51 M=L2_USER_ENTRY;
tr 52 M=L2_USER_ENTRY;
echo "  L2_USER_ENTRY_DATA_ONLY";
tr 50 M=L2_USER_ENTRY_DATA_ONLY;
tr 51 M=L2_USER_ENTRY_DATA_ONLY;
tr 52 M=L2_USER_ENTRY_DATA_ONLY;
echo "  L2_USER_ENTRY_ONLY";
tr 50 M=L2_USER_ENTRY_ONLY;
tr 51 M=L2_USER_ENTRY_ONLY;
tr 52 M=L2_USER_ENTRY_ONLY;
echo "  L3_DEFIP";
tr 50 M=L3_DEFIP;
tr 51 M=L3_DEFIP;
tr 52 M=L3_DEFIP;
echo "  L3_DEFIP_DATA_ONLY";
tr 50 M=L3_DEFIP_DATA_ONLY;
tr 51 M=L3_DEFIP_DATA_ONLY;
tr 52 M=L3_DEFIP_DATA_ONLY;
echo "  L3_DEFIP_HIT_ONLY";
tr 50 M=L3_DEFIP_HIT_ONLY;
tr 51 M=L3_DEFIP_HIT_ONLY;
tr 52 M=L3_DEFIP_HIT_ONLY;
echo "  L3_DEFIP_ONLY";
tr 50 M=L3_DEFIP_ONLY;
tr 51 M=L3_DEFIP_ONLY;
tr 52 M=L3_DEFIP_ONLY;
echo "  L3_ECMP";
tr 50 M=L3_ECMP;
tr 51 M=L3_ECMP;
tr 52 M=L3_ECMP;
echo "  L3_ENTRY_HIT_ONLY";
tr 50 M=L3_ENTRY_HIT_ONLY;
tr 51 M=L3_ENTRY_HIT_ONLY;
tr 52 M=L3_ENTRY_HIT_ONLY;
echo "  L3_ENTRY_IPV4_MULTICAST";
tr 50 M=L3_ENTRY_IPV4_MULTICAST;
tr 51 M=L3_ENTRY_IPV4_MULTICAST;
tr 52 M=L3_ENTRY_IPV4_MULTICAST;
echo "  L3_ENTRY_IPV4_UNICAST";
tr 50 M=L3_ENTRY_IPV4_UNICAST;
tr 51 M=L3_ENTRY_IPV4_UNICAST;
tr 52 M=L3_ENTRY_IPV4_UNICAST;
echo "  L3_ENTRY_IPV6_MULTICAST";
tr 50 M=L3_ENTRY_IPV6_MULTICAST;
tr 51 M=L3_ENTRY_IPV6_MULTICAST;
tr 52 M=L3_ENTRY_IPV6_MULTICAST;
echo "  L3_ENTRY_IPV6_UNICAST";
tr 50 M=L3_ENTRY_IPV6_UNICAST;
tr 51 M=L3_ENTRY_IPV6_UNICAST;
tr 52 M=L3_ENTRY_IPV6_UNICAST;
echo "  L3_ENTRY_ONLY";
tr 50 M=L3_ENTRY_ONLY;
tr 51 M=L3_ENTRY_ONLY;
tr 52 M=L3_ENTRY_ONLY;
echo "  L3_ENTRY_VALID_ONLY";
tr 50 M=L3_ENTRY_VALID_ONLY;
tr 51 M=L3_ENTRY_VALID_ONLY;
tr 52 M=L3_ENTRY_VALID_ONLY;
echo "  L3_IPMC";
tr 50 M=L3_IPMC;
tr 51 M=L3_IPMC;
tr 52 M=L3_IPMC;
echo "  L3_TUNNEL";
tr 50 M=L3_TUNNEL;
tr 51 M=L3_TUNNEL;
tr 52 M=L3_TUNNEL;
echo "  PORT_MAC_BLOCK";
tr 50 M=PORT_MAC_BLOCK;
tr 51 M=PORT_MAC_BLOCK;
tr 52 M=PORT_MAC_BLOCK;
echo "  AGING_CTR";
tr 50 M=AGING_CTR;
tr 51 M=AGING_CTR;
tr 52 M=AGING_CTR;
echo "  AGING_EXP";
tr 50 M=AGING_EXP;
tr 51 M=AGING_EXP;
tr 52 M=AGING_EXP;
echo "  CBPCELLHEADER";
tr 50 M=CBPCELLHEADER;
tr 51 M=CBPCELLHEADER;
tr 52 M=CBPCELLHEADER;
echo "  CBPDATA0";
tr 50 M=CBPDATA0;
tr 51 M=CBPDATA0;
tr 52 M=CBPDATA0;
echo "  CBPDATA1";
tr 50 M=CBPDATA1;
tr 51 M=CBPDATA1;
tr 52 M=CBPDATA1;
echo "  CBPDATA2";
tr 50 M=CBPDATA2;
tr 51 M=CBPDATA2;
tr 52 M=CBPDATA2;
echo "  CBPDATA3";
tr 50 M=CBPDATA3;
tr 51 M=CBPDATA3;
tr 52 M=CBPDATA3;
echo "  CBPDATA4";
tr 50 M=CBPDATA4;
tr 51 M=CBPDATA4;
tr 52 M=CBPDATA4;
echo "  CBPDATA5";
tr 50 M=CBPDATA5;
tr 51 M=CBPDATA5;
tr 52 M=CBPDATA5;
echo "  CBPDATA6";
tr 50 M=CBPDATA6;
tr 51 M=CBPDATA6;
tr 52 M=CBPDATA6;
echo "  CBPDATA7";
tr 50 M=CBPDATA7;
tr 51 M=CBPDATA7;
tr 52 M=CBPDATA7;
echo "  CBPDATA8";
tr 50 M=CBPDATA8;
tr 51 M=CBPDATA8;
tr 52 M=CBPDATA8;
echo "  CBPDATA9";
tr 50 M=CBPDATA9;
tr 51 M=CBPDATA9;
tr 52 M=CBPDATA9;
echo "  CBPDATA10";
tr 50 M=CBPDATA10;
tr 51 M=CBPDATA10;
tr 52 M=CBPDATA10;
echo "  CBPDATA11";
tr 50 M=CBPDATA11;
tr 51 M=CBPDATA11;
tr 52 M=CBPDATA11;
echo "  CBPDATA12";
tr 50 M=CBPDATA12;
tr 51 M=CBPDATA12;
tr 52 M=CBPDATA12;
echo "  CBPDATA13";
tr 50 M=CBPDATA13;
tr 51 M=CBPDATA13;
tr 52 M=CBPDATA13;
echo "  CBPDATA14";
tr 50 M=CBPDATA14;
tr 51 M=CBPDATA14;
tr 52 M=CBPDATA14;
echo "  CBPDATA15";
tr 50 M=CBPDATA15;
tr 51 M=CBPDATA15;
tr 52 M=CBPDATA15;
echo "  CBPPKTHEADER0";
tr 50 M=CBPPKTHEADER0;
tr 51 M=CBPPKTHEADER0;
tr 52 M=CBPPKTHEADER0;
echo "  CBPPKTHEADER1";
tr 50 M=CBPPKTHEADER1;
tr 51 M=CBPPKTHEADER1;
tr 52 M=CBPPKTHEADER1;
echo "  CCP";
tr 50 M=CCP;
tr 51 M=CCP;
tr 52 M=CCP;
echo "  CFAP";
tr 50 M=CFAP;
tr 51 M=CFAP;
tr 52 M=CFAP;
echo "  IPMC_GROUP0";
tr 50 M=IPMC_GROUP0;
tr 51 M=IPMC_GROUP0;
tr 52 M=IPMC_GROUP0;
echo "  IPMC_GROUP1";
tr 50 M=IPMC_GROUP1;
tr 51 M=IPMC_GROUP1;
tr 52 M=IPMC_GROUP1;
echo "  IPMC_GROUP2";
tr 50 M=IPMC_GROUP2;
tr 51 M=IPMC_GROUP2;
tr 52 M=IPMC_GROUP2;
echo "  IPMC_GROUP3";
tr 50 M=IPMC_GROUP3;
tr 51 M=IPMC_GROUP3;
tr 52 M=IPMC_GROUP3;
echo "  IPMC_GROUP4";
tr 50 M=IPMC_GROUP4;
tr 51 M=IPMC_GROUP4;
tr 52 M=IPMC_GROUP4;
echo "  IPMC_GROUP5";
tr 50 M=IPMC_GROUP5;
tr 51 M=IPMC_GROUP5;
tr 52 M=IPMC_GROUP5;
echo "  IPMC_GROUP6";
tr 50 M=IPMC_GROUP6;
tr 51 M=IPMC_GROUP6;
tr 52 M=IPMC_GROUP6;
echo "  IPMC_GROUP7";
tr 50 M=IPMC_GROUP7;
tr 51 M=IPMC_GROUP7;
tr 52 M=IPMC_GROUP7;
echo "  IPMC_VLAN";
tr 50 M=IPMC_VLAN;
tr 51 M=IPMC_VLAN;
tr 52 M=IPMC_VLAN;
echo "  XQ0";
tr 50 M=XQ0;
tr 51 M=XQ0;
tr 52 M=XQ0;
echo "  XQ1";
tr 50 M=XQ1;
tr 51 M=XQ1;
tr 52 M=XQ1;
echo "  XQ2";
tr 50 M=XQ2;
tr 51 M=XQ2;
tr 52 M=XQ2;
echo "  XQ3";
tr 50 M=XQ3;
tr 51 M=XQ3;
tr 52 M=XQ3;
echo "  XQ4";
tr 50 M=XQ4;
tr 51 M=XQ4;
tr 52 M=XQ4;
echo "  XQ5";
tr 50 M=XQ5;
tr 51 M=XQ5;
tr 52 M=XQ5;
echo "  XQ6";
tr 50 M=XQ6;
tr 51 M=XQ6;
tr 52 M=XQ6;
echo "  XQ7";
tr 50 M=XQ7;
tr 51 M=XQ7;
tr 52 M=XQ7;
echo "  XQ8";
tr 50 M=XQ8;
tr 51 M=XQ8;
tr 52 M=XQ8;
echo "  XQ9";
tr 50 M=XQ9;
tr 51 M=XQ9;
tr 52 M=XQ9;
echo "  XQ10";
tr 50 M=XQ10;
tr 51 M=XQ10;
tr 52 M=XQ10;
echo "  XQ11";
tr 50 M=XQ11;
tr 51 M=XQ11;
tr 52 M=XQ11;
echo "  XQ12";
tr 50 M=XQ12;
tr 51 M=XQ12;
tr 52 M=XQ12;
echo "  XQ13";
tr 50 M=XQ13;
tr 51 M=XQ13;
tr 52 M=XQ13;
echo "  XQ14";
tr 50 M=XQ14;
tr 51 M=XQ14;
tr 52 M=XQ14;
echo "  XQ15";
tr 50 M=XQ15;
tr 51 M=XQ15;
tr 52 M=XQ15;
echo "  XQ16";
tr 50 M=XQ16;
tr 51 M=XQ16;
tr 52 M=XQ16;
echo "  XQ17";
tr 50 M=XQ17;
tr 51 M=XQ17;
tr 52 M=XQ17;
echo "  XQ18";
tr 50 M=XQ18;
tr 51 M=XQ18;
tr 52 M=XQ18;
echo "  XQ19";
tr 50 M=XQ19;
tr 51 M=XQ19;
tr 52 M=XQ19;
echo "  XQ20";
tr 50 M=XQ20;
tr 51 M=XQ20;
tr 52 M=XQ20;
echo "  XQ21";
tr 50 M=XQ21;
tr 51 M=XQ21;
tr 52 M=XQ21;
echo "  XQ22";
tr 50 M=XQ22;
tr 51 M=XQ22;
tr 52 M=XQ22;
echo "  XQ23";
tr 50 M=XQ23;
tr 51 M=XQ23;
tr 52 M=XQ23;
echo "  XQ24";
tr 50 M=XQ24;
tr 51 M=XQ24;
tr 52 M=XQ24;
echo "  XQ25";
tr 50 M=XQ25;
tr 51 M=XQ25;
tr 52 M=XQ25;
echo "  XQ26";
tr 50 M=XQ26;
tr 51 M=XQ26;
tr 52 M=XQ26;
echo "  XQ27";
tr 50 M=XQ27;
tr 51 M=XQ27;
tr 52 M=XQ27;
echo "  XQ28";
tr 50 M=XQ28;
tr 51 M=XQ28;
tr 52 M=XQ28;
echo "  MODPORT_MAP";
tr 50 M=MODPORT_MAP;
tr 51 M=MODPORT_MAP;
tr 52 M=MODPORT_MAP;
echo "  NONUCAST_TRUNK_BLOCK_MASK";
tr 50 M=NONUCAST_TRUNK_BLOCK_MASK;
tr 51 M=NONUCAST_TRUNK_BLOCK_MASK;
tr 52 M=NONUCAST_TRUNK_BLOCK_MASK;
echo "  PORT";
tr 50 M=PORT;
tr 51 M=PORT;
tr 52 M=PORT;
echo "  SOURCE_TRUNK_MAP";
tr 50 M=SOURCE_TRUNK_MAP;
tr 51 M=SOURCE_TRUNK_MAP;
tr 52 M=SOURCE_TRUNK_MAP;
echo "  VLAN_STG";
tr 50 M=VLAN_STG;
tr 51 M=VLAN_STG;
tr 52 M=VLAN_STG;
echo "  TRUNK_BITMAP";
tr 50 M=TRUNK_BITMAP;
tr 51 M=TRUNK_BITMAP;
tr 52 M=TRUNK_BITMAP;
echo "  PORT_TRUNK_EGRESS";
tr 50 M=PORT_TRUNK_EGRESS;
tr 51 M=PORT_TRUNK_EGRESS;
tr 52 M=PORT_TRUNK_EGRESS;
echo "  TRUNK_GROUP";
tr 50 M=TRUNK_GROUP;
tr 51 M=TRUNK_GROUP;
tr 52 M=TRUNK_GROUP;
echo "  UDF_OFFSET";
tr 50 M=UDF_OFFSET;
tr 51 M=UDF_OFFSET;
tr 52 M=UDF_OFFSET;
echo "  VLAN";
tr 50 M=VLAN;
tr 51 M=VLAN;
tr 52 M=VLAN;
echo "  VLAN_MAC";
tr 50 M=VLAN_MAC;
tr 51 M=VLAN_MAC;
tr 52 M=VLAN_MAC;
echo "  VLAN_PROTOCOL";
tr 50 M=VLAN_PROTOCOL;
tr 51 M=VLAN_PROTOCOL;
tr 52 M=VLAN_PROTOCOL;
echo "  VLAN_PROTOCOL_DATA";
tr 50 M=VLAN_PROTOCOL_DATA;
tr 51 M=VLAN_PROTOCOL_DATA;
tr 52 M=VLAN_PROTOCOL_DATA;
echo "  VLAN_SUBNET";
tr 50 M=VLAN_SUBNET;
tr 51 M=VLAN_SUBNET;
tr 52 M=VLAN_SUBNET;
echo "  VLAN_SUBNET_DATA_ONLY";
tr 50 M=VLAN_SUBNET_DATA_ONLY;
tr 51 M=VLAN_SUBNET_DATA_ONLY;
tr 52 M=VLAN_SUBNET_DATA_ONLY;
echo "  VLAN_SUBNET_ONLY";
tr 50 M=VLAN_SUBNET_ONLY;
tr 51 M=VLAN_SUBNET_ONLY;
tr 52 M=VLAN_SUBNET_ONLY;
echo "  VLAN_XLATE";
tr 50 M=VLAN_XLATE;
tr 51 M=VLAN_XLATE;
tr 52 M=VLAN_XLATE;
echo "  VLAN_XLATE_DATA_ONLY";
tr 50 M=VLAN_XLATE_DATA_ONLY;
tr 51 M=VLAN_XLATE_DATA_ONLY;
tr 52 M=VLAN_XLATE_DATA_ONLY;
echo "  VLAN_XLATE_ONLY";
tr 50 M=VLAN_XLATE_ONLY;
tr 51 M=VLAN_XLATE_ONLY;
tr 52 M=VLAN_XLATE_ONLY;
$done

#Table DMA/Table SLAM
echo "Running Table DMA Tests ..."
if $?firebolt15 || $?helix15 || $?felix15 || $?firebolt2 '\
echo "  EGR_DSCP_ECN_MAP" ; \
tr 71 M=EGR_DSCP_ECN_MAP S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=EGR_DSCP_ECN_MAP S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=EGR_DSCP_ECN_MAP S=0 C=0 TSE=T SLTH=F ;  \
echo "  IPV6_PROXY_ENABLE" ; \
tr 71 M=IPV6_PROXY_ENABLE S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=IPV6_PROXY_ENABLE S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=IPV6_PROXY_ENABLE S=0 C=0 TSE=T SLTH=F ;  \
echo "  LPORT" ; \
tr 71 M=LPORT S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=LPORT S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=LPORT S=0 C=0 TSE=T SLTH=F ;  \
echo "  IFP_PORT_FIELD_SEL" ; \
tr 71 M=IFP_PORT_FIELD_SEL S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=IFP_PORT_FIELD_SEL S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=IFP_PORT_FIELD_SEL S=0 C=0 TSE=T SLTH=F ;  \
'
if $?helix || $?felix || $?firebolt15 || $?helix15 \
        || $?felix15 || $?firebolt2 '\
echo "  ALTERNATE_EMIRROR_BITMAP"; \
tr 71 M=ALTERNATE_EMIRROR_BITMAP S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=ALTERNATE_EMIRROR_BITMAP S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=ALTERNATE_EMIRROR_BITMAP S=0 C=0 TSE=T SLTH=F ;  \
echo "  SRC_MODID_BLOCK"; \
tr 71 M=SRC_MODID_BLOCK S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=SRC_MODID_BLOCK S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=SRC_MODID_BLOCK S=0 C=0 TSE=T SLTH=F ;  \
'
if !$?firebolt2 '\
echo "  FP_TCAM_PLUS_POLICY";  \
tr 71 M=FP_TCAM_PLUS_POLICY S=0 C=0 TSE=F SLTH=T;  \
tr 71 M=FP_TCAM_PLUS_POLICY S=0 C=0 TSE=T SLTH=T;  \
tr 71 M=FP_TCAM_PLUS_POLICY S=0 C=0 TSE=T SLTH=F;  \
'
if $?firebolt2 '\
echo "  EFP_COUNTER_TABLE" ;  \
tr 71 M=EFP_COUNTER_TABLE S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=EFP_COUNTER_TABLE S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=EFP_COUNTER_TABLE S=0 C=0 TSE=T SLTH=F ;  \
echo "  EFP_METER_TABLE" ;  \
tr 71 M=EFP_METER_TABLE S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=EFP_METER_TABLE S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=EFP_METER_TABLE S=0 C=0 TSE=T SLTH=F ;  \
echo "  EFP_POLICY_TABLE" ;  \
tr 71 M=EFP_POLICY_TABLE S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=EFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=EFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=F ;  \
echo "  EFP_TCAM" ;  \
tr 71 M=EFP_TCAM S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=EFP_TCAM S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=EFP_TCAM S=0 C=0 TSE=T SLTH=F ;  \
echo "  EGR_PRI_CNG_MAP" ;  \
tr 71 M=EGR_PRI_CNG_MAP S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=EGR_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=EGR_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=F ;  \
echo "  ING_PRI_CNG_MAP" ;  \
tr 71 M=ING_PRI_CNG_MAP S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=ING_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=ING_PRI_CNG_MAP S=0 C=0 TSE=T SLTH=F ;  \
echo "  INITIAL_ING_L3_NEXT_HOP" ;  \
tr 71 M=INITIAL_ING_L3_NEXT_HOP S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=INITIAL_ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=INITIAL_ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=F ;  \
echo "  INITIAL_L3_ECMP" ;  \
tr 71 M=INITIAL_L3_ECMP S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=INITIAL_L3_ECMP S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=INITIAL_L3_ECMP S=0 C=0 TSE=T SLTH=F ;  \
echo "  IPV4_IN_IPV6_PREFIX_MATCH" ;  \
tr 71 M=IPV4_IN_IPV6_PREFIX_MATCH S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=IPV4_IN_IPV6_PREFIX_MATCH S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=IPV4_IN_IPV6_PREFIX_MATCH S=0 C=0 TSE=T SLTH=F ;  \
echo "  MMU_MAX_BUCKET_GPORT" ;  \
tr 71 M=MMU_MAX_BUCKET_GPORT S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=MMU_MAX_BUCKET_GPORT S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=MMU_MAX_BUCKET_GPORT S=0 C=0 TSE=T SLTH=F ;  \
echo "  MMU_MIN_BUCKET_GPORT" ;  \
tr 71 M=MMU_MIN_BUCKET_GPORT S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=MMU_MIN_BUCKET_GPORT S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=MMU_MIN_BUCKET_GPORT S=0 C=0 TSE=T SLTH=F ;  \
echo "  MODPORT_MAP_EM" ;  \
tr 71 M=MODPORT_MAP_EM S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=MODPORT_MAP_EM S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=MODPORT_MAP_EM S=0 C=0 TSE=T SLTH=F ;  \
echo "  MODPORT_MAP_IM" ;  \
tr 71 M=MODPORT_MAP_IM S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=MODPORT_MAP_IM S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=MODPORT_MAP_IM S=0 C=0 TSE=T SLTH=F ;  \
echo "  MODPORT_MAP_SW" ;  \
tr 71 M=MODPORT_MAP_SW S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=MODPORT_MAP_SW S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=MODPORT_MAP_SW S=0 C=0 TSE=T SLTH=F ;  \
echo "  VFP_POLICY_TABLE" ;  \
tr 71 M=VFP_POLICY_TABLE S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=VFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=VFP_POLICY_TABLE S=0 C=0 TSE=T SLTH=F ;  \
echo "  VFP_TCAM" ;  \
tr 71 M=VFP_TCAM S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=VFP_TCAM S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=VFP_TCAM S=0 C=0 TSE=T SLTH=F ;  \
echo "  VLAN_PROFILE" ;  \
tr 71 M=VLAN_PROFILE S=0 C=0 TSE=F SLTH=T ;  \
tr 71 M=VLAN_PROFILE S=0 C=0 TSE=T SLTH=T ;  \
tr 71 M=VLAN_PROFILE S=0 C=0 TSE=T SLTH=F ;  \
'
echo "  DSCP_TABLE"
tr 71 M=DSCP_TABLE S=0 C=0 TSE=F SLTH=T
tr 71 M=DSCP_TABLE S=0 C=0 TSE=T SLTH=T
tr 71 M=DSCP_TABLE S=0 C=0 TSE=T SLTH=F

echo "  E2E_HOL_STATUS"
tr 71 M=E2E_HOL_STATUS S=0 C=0 TSE=F SLTH=T
tr 71 M=E2E_HOL_STATUS S=0 C=0 TSE=T SLTH=T
tr 71 M=E2E_HOL_STATUS S=0 C=0 TSE=T SLTH=F

echo "  EGR_DSCP_TABLE"
tr 71 M=EGR_DSCP_TABLE S=0 C=0 TSE=F SLTH=T
tr 71 M=EGR_DSCP_TABLE S=0 C=0 TSE=T SLTH=T
tr 71 M=EGR_DSCP_TABLE S=0 C=0 TSE=T SLTH=F

echo "  EGR_EM_MTP_INDEX"
tr 71 M=EGR_EM_MTP_INDEX S=0 C=0 TSE=F SLTH=T
tr 71 M=EGR_EM_MTP_INDEX S=0 C=0 TSE=T SLTH=T
tr 71 M=EGR_EM_MTP_INDEX S=0 C=0 TSE=T SLTH=F

echo "  EGR_IM_MTP_INDEX"
tr 71 M=EGR_IM_MTP_INDEX S=0 C=0 TSE=F SLTH=T
tr 71 M=EGR_IM_MTP_INDEX S=0 C=0 TSE=T SLTH=T
tr 71 M=EGR_IM_MTP_INDEX S=0 C=0 TSE=T SLTH=F

echo "  EGR_IP_TUNNEL"
tr 71 M=EGR_IP_TUNNEL S=0 C=0 TSE=F SLTH=T
tr 71 M=EGR_IP_TUNNEL S=0 C=0 TSE=T SLTH=T
tr 71 M=EGR_IP_TUNNEL S=0 C=0 TSE=T SLTH=F

echo "  EGR_L3_INTF"
tr 71 M=EGR_L3_INTF S=0 C=0 TSE=F SLTH=T
tr 71 M=EGR_L3_INTF S=0 C=0 TSE=T SLTH=T
tr 71 M=EGR_L3_INTF S=0 C=0 TSE=T SLTH=F

echo "  EGR_L3_NEXT_HOP"
tr 71 M=EGR_L3_NEXT_HOP S=0 C=0 TSE=F SLTH=T
tr 71 M=EGR_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=T
tr 71 M=EGR_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=F

echo "  EGRESS_MASK"
tr 71 M=EGRESS_MASK S=0 C=0 TSE=F SLTH=T
tr 71 M=EGRESS_MASK S=0 C=0 TSE=T SLTH=T
tr 71 M=EGRESS_MASK S=0 C=0 TSE=T SLTH=F

echo "  EGR_VLAN"
tr 71 M=EGR_VLAN S=0 C=0 TSE=F SLTH=T
tr 71 M=EGR_VLAN S=0 C=0 TSE=T SLTH=T
tr 71 M=EGR_VLAN S=0 C=0 TSE=T SLTH=F

echo "  EGR_VLAN_STG"
tr 71 M=EGR_VLAN_STG S=0 C=0 TSE=F SLTH=T
tr 71 M=EGR_VLAN_STG S=0 C=0 TSE=T SLTH=T
tr 71 M=EGR_VLAN_STG S=0 C=0 TSE=T SLTH=F

echo "  EGR_VLAN_XLATE"
tr 71 M=EGR_VLAN_XLATE S=0 C=0 TSE=F SLTH=T
tr 71 M=EGR_VLAN_XLATE S=0 C=0 TSE=T SLTH=T
tr 71 M=EGR_VLAN_XLATE S=0 C=0 TSE=T SLTH=F

echo "  EGR_VLAN_XLATE_DATA_ONLY"
tr 71 M=EGR_VLAN_XLATE_DATA_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=EGR_VLAN_XLATE_DATA_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=EGR_VLAN_XLATE_DATA_ONLY S=0 C=0 TSE=T SLTH=F

echo "  EGR_VLAN_XLATE_ONLY"
tr 71 M=EGR_VLAN_XLATE_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=EGR_VLAN_XLATE_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=EGR_VLAN_XLATE_ONLY S=0 C=0 TSE=T SLTH=F

echo "  EM_MTP_INDEX"
tr 71 M=EM_MTP_INDEX S=0 C=0 TSE=F SLTH=T
tr 71 M=EM_MTP_INDEX S=0 C=0 TSE=T SLTH=T
tr 71 M=EM_MTP_INDEX S=0 C=0 TSE=T SLTH=F

echo "  FP_COUNTER_TABLE"
tr 71 M=FP_COUNTER_TABLE S=0 C=0 TSE=F SLTH=T
tr 71 M=FP_COUNTER_TABLE S=0 C=0 TSE=T SLTH=T
tr 71 M=FP_COUNTER_TABLE S=0 C=0 TSE=T SLTH=F

echo "  FP_METER_TABLE"
tr 71 M=FP_METER_TABLE S=0 C=0 TSE=F SLTH=T
tr 71 M=FP_METER_TABLE S=0 C=0 TSE=T SLTH=T
tr 71 M=FP_METER_TABLE S=0 C=0 TSE=T SLTH=F

echo "  FP_POLICY_TABLE"
tr 71 M=FP_POLICY_TABLE S=0 C=0 TSE=F SLTH=T
tr 71 M=FP_POLICY_TABLE S=0 C=0 TSE=T SLTH=T
tr 71 M=FP_POLICY_TABLE S=0 C=0 TSE=T SLTH=F

echo "  FP_PORT_FIELD_SEL"
tr 71 M=FP_PORT_FIELD_SEL S=0 C=0 TSE=F SLTH=T
tr 71 M=FP_PORT_FIELD_SEL S=0 C=0 TSE=T SLTH=T
tr 71 M=FP_PORT_FIELD_SEL S=0 C=0 TSE=T SLTH=F

echo "  FP_RANGE_CHECK"
tr 71 M=FP_RANGE_CHECK S=0 C=0 TSE=F SLTH=T
tr 71 M=FP_RANGE_CHECK S=0 C=0 TSE=T SLTH=T
tr 71 M=FP_RANGE_CHECK S=0 C=0 TSE=T SLTH=F

echo "  FP_TCAM"
tr 71 M=FP_TCAM S=0 C=0 TSE=F SLTH=T
tr 71 M=FP_TCAM S=0 C=0 TSE=T SLTH=T
tr 71 M=FP_TCAM S=0 C=0 TSE=T SLTH=F

echo "  IM_MTP_INDEX"
tr 71 M=IM_MTP_INDEX S=0 C=0 TSE=F SLTH=T
tr 71 M=IM_MTP_INDEX S=0 C=0 TSE=T SLTH=T
tr 71 M=IM_MTP_INDEX S=0 C=0 TSE=T SLTH=F

echo "  ING_L3_NEXT_HOP"
tr 71 M=ING_L3_NEXT_HOP S=0 C=0 TSE=F SLTH=T
tr 71 M=ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=T
tr 71 M=ING_L3_NEXT_HOP S=0 C=0 TSE=T SLTH=F

echo "  IPORT_TABLE"
tr 71 M=IPORT_TABLE S=0 C=0 TSE=F SLTH=T
tr 71 M=IPORT_TABLE S=0 C=0 TSE=T SLTH=T
tr 71 M=IPORT_TABLE S=0 C=0 TSE=T SLTH=F

echo "  L2MC"
tr 71 M=L2MC S=0 C=0 TSE=F SLTH=T
tr 71 M=L2MC S=0 C=0 TSE=T SLTH=T
tr 71 M=L2MC S=0 C=0 TSE=T SLTH=F

echo "  L2_ENTRY"
tr 71 M=L2_ENTRY S=0 C=0 TSE=F SLTH=T
tr 71 M=L2_ENTRY S=0 C=0 TSE=T SLTH=T
tr 71 M=L2_ENTRY S=0 C=0 TSE=T SLTH=F

echo "  L2_ENTRY_ONLY"
tr 71 M=L2_ENTRY_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=L2_ENTRY_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=L2_ENTRY_ONLY S=0 C=0 TSE=T SLTH=F

echo "  L2_HITDA_ONLY"
tr 71 M=L2_HITDA_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=L2_HITDA_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=L2_HITDA_ONLY S=0 C=0 TSE=T SLTH=F

echo "  L2_HITSA_ONLY"
tr 71 M=L2_HITSA_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=L2_HITSA_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=L2_HITSA_ONLY S=0 C=0 TSE=T SLTH=F

echo "  L2_MOD_FIFO"
tr 71 M=L2_MOD_FIFO S=0 C=0 TSE=F SLTH=T
tr 71 M=L2_MOD_FIFO S=0 C=0 TSE=T SLTH=T
tr 71 M=L2_MOD_FIFO S=0 C=0 TSE=T SLTH=F

echo "  L2_USER_ENTRY"
tr 71 M=L2_USER_ENTRY S=0 C=0 TSE=F SLTH=T
tr 71 M=L2_USER_ENTRY S=0 C=0 TSE=T SLTH=T
tr 71 M=L2_USER_ENTRY S=0 C=0 TSE=T SLTH=F

echo "  L2_USER_ENTRY_DATA_ONLY"
tr 71 M=L2_USER_ENTRY_DATA_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=L2_USER_ENTRY_DATA_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=L2_USER_ENTRY_DATA_ONLY S=0 C=0 TSE=T SLTH=F

echo "  L2_USER_ENTRY_ONLY"
tr 71 M=L2_USER_ENTRY_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=L2_USER_ENTRY_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=L2_USER_ENTRY_ONLY S=0 C=0 TSE=T SLTH=F

echo "  L3_DEFIP"
tr 71 M=L3_DEFIP S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_DEFIP S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_DEFIP S=0 C=0 TSE=T SLTH=F

echo "  L3_DEFIP_DATA_ONLY"
tr 71 M=L3_DEFIP_DATA_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_DEFIP_DATA_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_DEFIP_DATA_ONLY S=0 C=0 TSE=T SLTH=F

echo "  L3_DEFIP_HIT_ONLY"
tr 71 M=L3_DEFIP_HIT_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_DEFIP_HIT_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_DEFIP_HIT_ONLY S=0 C=0 TSE=T SLTH=F

echo "  L3_DEFIP_ONLY"
tr 71 M=L3_DEFIP_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_DEFIP_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_DEFIP_ONLY S=0 C=0 TSE=T SLTH=F

echo "  L3_ECMP"
tr 71 M=L3_ECMP S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_ECMP S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_ECMP S=0 C=0 TSE=T SLTH=F

echo "  L3_ENTRY_HIT_ONLY"
tr 71 M=L3_ENTRY_HIT_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_ENTRY_HIT_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_ENTRY_HIT_ONLY S=0 C=0 TSE=T SLTH=F

echo "  L3_ENTRY_IPV4_MULTICAST"
tr 71 M=L3_ENTRY_IPV4_MULTICAST S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_ENTRY_IPV4_MULTICAST S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_ENTRY_IPV4_MULTICAST S=0 C=0 TSE=T SLTH=F

echo "  L3_ENTRY_IPV4_UNICAST"
tr 71 M=L3_ENTRY_IPV4_UNICAST S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_ENTRY_IPV4_UNICAST S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_ENTRY_IPV4_UNICAST S=0 C=0 TSE=T SLTH=F

echo "  L3_ENTRY_IPV6_MULTICAST"
tr 71 M=L3_ENTRY_IPV6_MULTICAST S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_ENTRY_IPV6_MULTICAST S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_ENTRY_IPV6_MULTICAST S=0 C=0 TSE=T SLTH=F

echo "  L3_ENTRY_IPV6_UNICAST"
tr 71 M=L3_ENTRY_IPV6_UNICAST S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_ENTRY_IPV6_UNICAST S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_ENTRY_IPV6_UNICAST S=0 C=0 TSE=T SLTH=F

echo "  L3_ENTRY_ONLY"
tr 71 M=L3_ENTRY_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_ENTRY_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_ENTRY_ONLY S=0 C=0 TSE=T SLTH=F

echo "  L3_ENTRY_VALID_ONLY"
tr 71 M=L3_ENTRY_VALID_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_ENTRY_VALID_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_ENTRY_VALID_ONLY S=0 C=0 TSE=T SLTH=F

echo "  L3_IPMC"
tr 71 M=L3_IPMC S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_IPMC S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_IPMC S=0 C=0 TSE=T SLTH=F

echo "  L3_TUNNEL"
tr 71 M=L3_TUNNEL S=0 C=0 TSE=F SLTH=T
tr 71 M=L3_TUNNEL S=0 C=0 TSE=T SLTH=T
tr 71 M=L3_TUNNEL S=0 C=0 TSE=T SLTH=F

echo "  PORT_MAC_BLOCK"
tr 71 M=PORT_MAC_BLOCK S=0 C=0 TSE=F SLTH=T
tr 71 M=PORT_MAC_BLOCK S=0 C=0 TSE=T SLTH=T
tr 71 M=PORT_MAC_BLOCK S=0 C=0 TSE=T SLTH=F

echo "  AGING_CTR"
tr 71 M=AGING_CTR S=0 C=0 TSE=F SLTH=T
tr 71 M=AGING_CTR S=0 C=0 TSE=T SLTH=T
tr 71 M=AGING_CTR S=0 C=0 TSE=T SLTH=F

echo "  AGING_EXP"
tr 71 M=AGING_EXP S=0 C=0 TSE=F SLTH=T
tr 71 M=AGING_EXP S=0 C=0 TSE=T SLTH=T
tr 71 M=AGING_EXP S=0 C=0 TSE=T SLTH=F

echo "  CBPCELLHEADER"
tr 71 M=CBPCELLHEADER S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPCELLHEADER S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPCELLHEADER S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA0"
tr 71 M=CBPDATA0 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA0 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA0 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA1"
tr 71 M=CBPDATA1 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA1 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA1 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA2"
tr 71 M=CBPDATA2 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA2 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA2 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA3"
tr 71 M=CBPDATA3 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA3 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA3 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA4"
tr 71 M=CBPDATA4 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA4 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA4 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA5"
tr 71 M=CBPDATA5 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA5 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA5 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA6"
tr 71 M=CBPDATA6 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA6 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA6 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA7"
tr 71 M=CBPDATA7 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA7 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA7 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA8"
tr 71 M=CBPDATA8 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA8 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA8 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA9"
tr 71 M=CBPDATA9 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA9 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA9 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA10"
tr 71 M=CBPDATA10 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA10 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA10 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA11"
tr 71 M=CBPDATA11 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA11 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA11 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA12"
tr 71 M=CBPDATA12 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA12 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA12 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA13"
tr 71 M=CBPDATA13 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA13 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA13 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA14"
tr 71 M=CBPDATA14 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA14 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA14 S=0 C=0 TSE=T SLTH=F

echo "  CBPDATA15"
tr 71 M=CBPDATA15 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPDATA15 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPDATA15 S=0 C=0 TSE=T SLTH=F

echo "  CBPPKTHEADER0"
tr 71 M=CBPPKTHEADER0 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPPKTHEADER0 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPPKTHEADER0 S=0 C=0 TSE=T SLTH=F

echo "  CBPPKTHEADER1"
tr 71 M=CBPPKTHEADER1 S=0 C=0 TSE=F SLTH=T
tr 71 M=CBPPKTHEADER1 S=0 C=0 TSE=T SLTH=T
tr 71 M=CBPPKTHEADER1 S=0 C=0 TSE=T SLTH=F

echo "  CCP"
tr 71 M=CCP S=0 C=0 TSE=F SLTH=T
tr 71 M=CCP S=0 C=0 TSE=T SLTH=T
tr 71 M=CCP S=0 C=0 TSE=T SLTH=F

echo "  CFAP"
tr 71 M=CFAP S=0 C=0 TSE=F SLTH=T
tr 71 M=CFAP S=0 C=0 TSE=T SLTH=T
tr 71 M=CFAP S=0 C=0 TSE=T SLTH=F

echo "  IPMC_GROUP0"
tr 71 M=IPMC_GROUP0 S=0 C=0 TSE=F SLTH=T
tr 71 M=IPMC_GROUP0 S=0 C=0 TSE=T SLTH=T
tr 71 M=IPMC_GROUP0 S=0 C=0 TSE=T SLTH=F

echo "  IPMC_GROUP1"
tr 71 M=IPMC_GROUP1 S=0 C=0 TSE=F SLTH=T
tr 71 M=IPMC_GROUP1 S=0 C=0 TSE=T SLTH=T
tr 71 M=IPMC_GROUP1 S=0 C=0 TSE=T SLTH=F

echo "  IPMC_GROUP2"
tr 71 M=IPMC_GROUP2 S=0 C=0 TSE=F SLTH=T
tr 71 M=IPMC_GROUP2 S=0 C=0 TSE=T SLTH=T
tr 71 M=IPMC_GROUP2 S=0 C=0 TSE=T SLTH=F

echo "  IPMC_GROUP3"
tr 71 M=IPMC_GROUP3 S=0 C=0 TSE=F SLTH=T
tr 71 M=IPMC_GROUP3 S=0 C=0 TSE=T SLTH=T
tr 71 M=IPMC_GROUP3 S=0 C=0 TSE=T SLTH=F

echo "  IPMC_GROUP4"
tr 71 M=IPMC_GROUP4 S=0 C=0 TSE=F SLTH=T
tr 71 M=IPMC_GROUP4 S=0 C=0 TSE=T SLTH=T
tr 71 M=IPMC_GROUP4 S=0 C=0 TSE=T SLTH=F

echo "  IPMC_GROUP5"
tr 71 M=IPMC_GROUP5 S=0 C=0 TSE=F SLTH=T
tr 71 M=IPMC_GROUP5 S=0 C=0 TSE=T SLTH=T
tr 71 M=IPMC_GROUP5 S=0 C=0 TSE=T SLTH=F

echo "  IPMC_GROUP6"
tr 71 M=IPMC_GROUP6 S=0 C=0 TSE=F SLTH=T
tr 71 M=IPMC_GROUP6 S=0 C=0 TSE=T SLTH=T
tr 71 M=IPMC_GROUP6 S=0 C=0 TSE=T SLTH=F

echo "  IPMC_GROUP7"
tr 71 M=IPMC_GROUP7 S=0 C=0 TSE=F SLTH=T
tr 71 M=IPMC_GROUP7 S=0 C=0 TSE=T SLTH=T
tr 71 M=IPMC_GROUP7 S=0 C=0 TSE=T SLTH=F

echo "  IPMC_VLAN"
tr 71 M=IPMC_VLAN S=0 C=0 TSE=F SLTH=T
tr 71 M=IPMC_VLAN S=0 C=0 TSE=T SLTH=T
tr 71 M=IPMC_VLAN S=0 C=0 TSE=T SLTH=F

echo "  XQ0"
tr 71 M=XQ0 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ0 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ0 S=0 C=0 TSE=T SLTH=F

echo "  XQ1"
tr 71 M=XQ1 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ1 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ1 S=0 C=0 TSE=T SLTH=F

echo "  XQ2"
tr 71 M=XQ2 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ2 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ2 S=0 C=0 TSE=T SLTH=F

echo "  XQ3"
tr 71 M=XQ3 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ3 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ3 S=0 C=0 TSE=T SLTH=F

echo "  XQ4"
tr 71 M=XQ4 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ4 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ4 S=0 C=0 TSE=T SLTH=F

echo "  XQ5"
tr 71 M=XQ5 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ5 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ5 S=0 C=0 TSE=T SLTH=F

echo "  XQ6"
tr 71 M=XQ6 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ6 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ6 S=0 C=0 TSE=T SLTH=F

echo "  XQ7"
tr 71 M=XQ7 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ7 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ7 S=0 C=0 TSE=T SLTH=F
 
echo "  XQ8"
tr 71 M=XQ8 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ8 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ8 S=0 C=0 TSE=T SLTH=F
 
echo "  XQ9"
tr 71 M=XQ9 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ9 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ9 S=0 C=0 TSE=T SLTH=F

echo "  XQ10"
tr 71 M=XQ10 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ10 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ10 S=0 C=0 TSE=T SLTH=F
 
echo "  XQ11"
tr 71 M=XQ11 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ11 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ11 S=0 C=0 TSE=T SLTH=F
 
echo "  XQ12"
tr 71 M=XQ12 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ12 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ12 S=0 C=0 TSE=T SLTH=F

echo "  XQ13"
tr 71 M=XQ13 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ13 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ13 S=0 C=0 TSE=T SLTH=F
 
echo "  XQ14"
tr 71 M=XQ14 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ14 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ14 S=0 C=0 TSE=T SLTH=F
 
echo "  XQ15"
tr 71 M=XQ15 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ15 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ15 S=0 C=0 TSE=T SLTH=F

echo "  XQ16"
tr 71 M=XQ16 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ16 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ16 S=0 C=0 TSE=T SLTH=F

echo "  XQ17"
tr 71 M=XQ17 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ17 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ17 S=0 C=0 TSE=T SLTH=F

echo "  XQ18"
tr 71 M=XQ18 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ18 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ18 S=0 C=0 TSE=T SLTH=F

echo "  XQ19"
tr 71 M=XQ19 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ19 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ19 S=0 C=0 TSE=T SLTH=F

echo "  XQ20"
tr 71 M=XQ20 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ20 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ20 S=0 C=0 TSE=T SLTH=F

echo "  XQ21"
tr 71 M=XQ21 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ21 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ21 S=0 C=0 TSE=T SLTH=F

echo "  XQ22"
tr 71 M=XQ22 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ22 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ22 S=0 C=0 TSE=T SLTH=F

echo "  XQ23"
tr 71 M=XQ23 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ23 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ23 S=0 C=0 TSE=T SLTH=F

echo "  XQ24"
tr 71 M=XQ24 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ24 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ24 S=0 C=0 TSE=T SLTH=F

echo "  XQ25"
tr 71 M=XQ25 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ25 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ25 S=0 C=0 TSE=T SLTH=F

echo "  XQ26"
tr 71 M=XQ26 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ26 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ26 S=0 C=0 TSE=T SLTH=F

echo "  XQ27"
tr 71 M=XQ27 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ27 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ27 S=0 C=0 TSE=T SLTH=F

echo "  XQ28"
tr 71 M=XQ28 S=0 C=0 TSE=F SLTH=T
tr 71 M=XQ28 S=0 C=0 TSE=T SLTH=T
tr 71 M=XQ28 S=0 C=0 TSE=T SLTH=F

echo "  MODPORT_MAP"
tr 71 M=MODPORT_MAP S=0 C=0 TSE=F SLTH=T
tr 71 M=MODPORT_MAP S=0 C=0 TSE=T SLTH=T
tr 71 M=MODPORT_MAP S=0 C=0 TSE=T SLTH=F

echo "  NONUCAST_TRUNK_BLOCK_MASK"
tr 71 M=NONUCAST_TRUNK_BLOCK_MASK S=0 C=0 TSE=F SLTH=T
tr 71 M=NONUCAST_TRUNK_BLOCK_MASK S=0 C=0 TSE=T SLTH=T
tr 71 M=NONUCAST_TRUNK_BLOCK_MASK S=0 C=0 TSE=T SLTH=F

echo "  PORT"
tr 71 M=PORT S=0 C=0 TSE=F SLTH=T
tr 71 M=PORT S=0 C=0 TSE=T SLTH=T
tr 71 M=PORT S=0 C=0 TSE=T SLTH=F

echo "  SOURCE_TRUNK_MAP"
tr 71 M=SOURCE_TRUNK_MAP S=0 C=0 TSE=F SLTH=T
tr 71 M=SOURCE_TRUNK_MAP S=0 C=0 TSE=T SLTH=T
tr 71 M=SOURCE_TRUNK_MAP S=0 C=0 TSE=T SLTH=F

echo "  VLAN_STG"
tr 71 M=VLAN_STG S=0 C=0 TSE=F SLTH=T
tr 71 M=VLAN_STG S=0 C=0 TSE=T SLTH=T
tr 71 M=VLAN_STG S=0 C=0 TSE=T SLTH=F

echo "  TRUNK_BITMAP"
tr 71 M=TRUNK_BITMAP S=0 C=0 TSE=F SLTH=T
tr 71 M=TRUNK_BITMAP S=0 C=0 TSE=T SLTH=T
tr 71 M=TRUNK_BITMAP S=0 C=0 TSE=T SLTH=F

echo "  PORT_TRUNK_EGRESS"
tr 71 M=PORT_TRUNK_EGRESS S=0 C=0 TSE=F SLTH=T
tr 71 M=PORT_TRUNK_EGRESS S=0 C=0 TSE=T SLTH=T
tr 71 M=PORT_TRUNK_EGRESS S=0 C=0 TSE=T SLTH=F

echo "  TRUNK_GROUP"
tr 71 M=TRUNK_GROUP S=0 C=0 TSE=F SLTH=T
tr 71 M=TRUNK_GROUP S=0 C=0 TSE=T SLTH=T
tr 71 M=TRUNK_GROUP S=0 C=0 TSE=T SLTH=F

echo "  UDF_OFFSET"
tr 71 M=UDF_OFFSET S=0 C=0 TSE=F SLTH=T
tr 71 M=UDF_OFFSET S=0 C=0 TSE=T SLTH=T
tr 71 M=UDF_OFFSET S=0 C=0 TSE=T SLTH=F

echo "  VLAN"
tr 71 M=VLAN S=0 C=0 TSE=F SLTH=T
tr 71 M=VLAN S=0 C=0 TSE=T SLTH=T
tr 71 M=VLAN S=0 C=0 TSE=T SLTH=F

echo "  VLAN_MAC"
tr 71 M=VLAN_MAC S=0 C=0 TSE=F SLTH=T
tr 71 M=VLAN_MAC S=0 C=0 TSE=T SLTH=T
tr 71 M=VLAN_MAC S=0 C=0 TSE=T SLTH=F

echo "  VLAN_PROTOCOL"
tr 71 M=VLAN_PROTOCOL S=0 C=0 TSE=F SLTH=T
tr 71 M=VLAN_PROTOCOL S=0 C=0 TSE=T SLTH=T
tr 71 M=VLAN_PROTOCOL S=0 C=0 TSE=T SLTH=F

echo "  VLAN_PROTOCOL_DATA"
tr 71 M=VLAN_PROTOCOL_DATA S=0 C=0 TSE=F SLTH=T
tr 71 M=VLAN_PROTOCOL_DATA S=0 C=0 TSE=T SLTH=T
tr 71 M=VLAN_PROTOCOL_DATA S=0 C=0 TSE=T SLTH=F

echo "  VLAN_SUBNET"
tr 71 M=VLAN_SUBNET S=0 C=0 TSE=F SLTH=T
tr 71 M=VLAN_SUBNET S=0 C=0 TSE=T SLTH=T
tr 71 M=VLAN_SUBNET S=0 C=0 TSE=T SLTH=F

echo "  VLAN_SUBNET_DATA_ONLY"
tr 71 M=VLAN_SUBNET_DATA_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=VLAN_SUBNET_DATA_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=VLAN_SUBNET_DATA_ONLY S=0 C=0 TSE=T SLTH=F

echo "  VLAN_SUBNET_ONLY"
tr 71 M=VLAN_SUBNET_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=VLAN_SUBNET_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=VLAN_SUBNET_ONLY S=0 C=0 TSE=T SLTH=F

echo "  VLAN_XLATE"
tr 71 M=VLAN_XLATE S=0 C=0 TSE=F SLTH=T
tr 71 M=VLAN_XLATE S=0 C=0 TSE=T SLTH=T
tr 71 M=VLAN_XLATE S=0 C=0 TSE=T SLTH=F

echo "  VLAN_XLATE_DATA_ONLY"
tr 71 M=VLAN_XLATE_DATA_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=VLAN_XLATE_DATA_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=VLAN_XLATE_DATA_ONLY S=0 C=0 TSE=T SLTH=F

echo "  VLAN_XLATE_ONLY"
tr 71 M=VLAN_XLATE_ONLY S=0 C=0 TSE=F SLTH=T
tr 71 M=VLAN_XLATE_ONLY S=0 C=0 TSE=T SLTH=T
tr 71 M=VLAN_XLATE_ONLY S=0 C=0 TSE=T SLTH=F

#echo "Running BSAFE Self test"
#tr 65
#$done

# Re-initialize to clean up of various read/writes to MMU memories
rcload rc.soc
linkscan off

echo "Running counter width verification test ..."
tr 30
$done

echo "Running counter read/write test ..."
tr 31
$done

#L2/L3 hashing tests
echo "Running L2 insert/delete/lookup test ..."
tr 32
$done

echo "Running L2 overflow insert test ..."
tr 33
$done

echo "Running L2 hash test ..."
tr 34
$done

echo "Running L2 delete by port test ..."
tr 35
$done

echo "Running L2 delete by vlan test ..."
tr 36
$done

echo "Running IPV4 overflow insert test ..."
tr 87 IPMCEnable=False
tr 87 IPMCEnable=True
$done

echo "Running IPV4 hash test ..."
tr 88 IPMCEnable=False
tr 88 IPMCEnable=True
$done

echo "Running IPV6 overflow insert test ..."
tr 85 IPMCEnable=False
tr 85 IPMCEnable=True
$done

echo "Running IPV6 hash test ..."
tr 86 IPMCEnable=False
tr 86 IPMCEnable=True
$done

echo "Running MDIO Linkscan test"
tr 60 readcount=10000
$done

# Loopback Tests
# Each test loads rc.soc in case a previous test failed

echo "Testing CPU DMA loopback ..."
tr 17 c=5
$done

echo "Testing CPU DMA, Scatter/Gather Reload ..."
tr 22
$done

echo "Testing CPU DMA, Scatter/Gather Simple ..."
tr 23
$done

echo "Testing CPU DMA, Scatter/Gather Random ..."
tr 24
$done

local lbpbm "ge"
if $?felix '\
    local lbpbm "fe,ge" ; \
'
#MAC Loopback
echo "Testing MAC Loopback - 10 Mb/s all $lbpbm ports"
tr 18 pbm=$lbpbm speed=10

echo "Testing MAC Loopback - 100 Mb/s all $lbpbm ports"
tr 18 pbm=$lbpbm speed=100

echo "Testing MAC Loopback - 1000 Mb/s all GE ports"
tr 18 pbm=ge speed=1000

echo "Testing MAC Loopback - 2500/10000 Mb/s all XE ports"
tr 18 pbm=xe speed=MAXimum

echo "Testing MAC Loopback - 2500/10000/12000 Mb/s all HG ports"
tr 18 pbm=hg speed=MAXimum
$done

#PHY Loopback
echo "Testing PHY Loopback - 10 Mb/s all $lbpbm ports"
tr 19 pbm=$lbpbm speed=10

echo "Testing PHY Loopback - 100 Mb/s all $lbpbm ports"
tr 19 pbm=$lbpbm speed=100

echo "Testing PHY Loopback - 1000 Mb/s all GE ports"
tr 19 pbm=ge speed=1000

echo "Testing PHY Loopback - 2500/10000 Mb/s all XE ports"
tr 19 pbm=xe speed=MAXimum

echo "Testing PHY Loopback - 2500/10000/12000 Mb/s all HG ports"
tr 19 pbm=hg speed=MAXimum
$done

#Internal snake Loopback 
echo "Running internal snake on all ports, MAC loopback ..."
tr 39 loopbackmode=mac snakepath=two PBM=e
$done

echo "Running internal snake on all ports, PHY loopback ..."
tr 39 loopbackmode=phy snakepath=two PBM=e
$done

echo "Running MAC loopback V2 on all ports ..."
tr 48 smi=103 dmi=42 vlan=5 pi=0x11335577 sendm=single
$done

echo "Running PHY loopback V2 on all ports ..."
tr 49 smi=52 dmi=83 vlan=23 pi=0x01204007 sendm=array

#Traffic Test
echo "Running Traffic Test in MAC mode ..."
tr 72 RM=MAC PBM=e
$done

echo "Running Traffic Test in PHY mode ..."
tr 72 RM=PHY PBM=e
$done

#External Loopback
# If you have external loopback cables connected as follows
#       1-2,   3-4,   5-6,   7-8,   9-10, 11-12
#       13-14, 15-16, 17-18, 19-20, 21-22 23-24
#       25-26, 27-28
# then you can enable this script to perform external loopback at
# different speeds.  Before running this script, use:
#       setenv ext10   1
#       setenv ext100  1
#       setenv ext1000 1
#       setenv ext10G  1
# or
#       setenv extall  1
#External Loopback on GE port
local fwd 0x555555
local bwd 0xaaaaaa
if $?felix '\
    local fwd 0x1555555 ; \
    local bwd 0x2aaaaaa ; \
    '

if $?extall \
        "local ext10 1; local ext100 1; local ext1000 1; local ext10G 1"

if $?ext10 \
        "echo Testing External Loopback - 10 MB/s forward; \
                tr 20 tpbm=$fwd di=1 speed=10 count=10; \
         echo Testing External Loopback - 10 MB/s reverse; \
                tr 20 tpbm=$bwd di=-1 speed=10 count=10"

if $?ext100 \
        "echo Testing External Loopback - 100 MB/s forward; \
                tr 20 tpbm=$fwd di=1 speed=100 count=10; \
         echo Testing External Loopback - 100 MB/s reverse; \
                tr 20 tpbm=$bwd di=-1 speed=100 count=10"

if  $?felix '\
    local fwd 0x4000000 ; \
    local bwd 0x8000000 ; \
    '
if $?ext1000 \
        "echo Testing External Loopback - 1000 MB/s forward; \
                tr 20 tpbm=$fwd di=1 speed=1000 count=10; \
         echo Testing External Loopback - 1000 MB/s reverse; \
                tr 20 tpbm=$bwd di=-1 speed=1000 count=10"

#External Loopback on XE port
config add pbmp_xport_xe=0xf000000
local fwd 0x5000000
local bwd 0xa000000
if $?felix '\
    local fwd 0x4000000 ; \
    local bwd 0x8000000 ; \
    config add pbmp_xport_xe=0xc000000 ; \
    '
rcload rc.soc
if $?ext10G \
        "echo Testing External Loopback - 10 GB/s forward; \
                tr 20 tpbm=$fwd di=1 speed=10G count=10; \
         echo Testing External Loopback - 10 GB/s reverse; \
                tr 20 tpbm=$bwd di=-1 speed=10G count=10"
config delete pbmp_xport_xe
rcload rc.soc

#External Loopback on HG port

# Show status
date
tl 
local returnCode $?

echo Tests Complete.  Reinitializing ...
config refresh
if $?BCM56504_B0 || $?BCM56504_B1 'setenv firebolt15'
rcload rc.soc

# We want to show the return code from the tl command which
# lists the results. The automated test infrastructure keys off of this 
# value
echo "testsuite: finished: sanity: $returnCode"
