/*
 * $Id: lex.patch,v 1.4 Broadcom SDK $
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * File:        lex.patch
 * Purpose:     Add additional error checking to generated flex code
 *              Patch validated with Flex 2.5.31 and 2.5.35
 *              This is expected to apply with offsets from 2.5.31 to 2.5.34
 *              Known not to apply with 2.5.37
 */


--- cint_c.lex.c	2013-03-20 11:06:22.275687000 -0700
+++ cint_c.lex.c.new	2013-03-20 11:10:19.326809000 -0700
@@ -349,7 +349,6 @@ typedef int yy_state_type;
 static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
 static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
 static int yy_get_next_buffer (yyscan_t yyscanner );
-static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );
 
 /* Done after the current pattern has been matched and before the
  * corresponding action - sets up yytext.
@@ -898,11 +897,6 @@ static int input (yyscan_t yyscanner );
 #define YY_START_STACK_INCR 25
 #endif
 
-/* Report a fatal error. */
-#ifndef YY_FATAL_ERROR
-#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
-#endif
-
 /* end tables serialization structures and prototypes */
 
 /* Default declaration of generated scanner - a define so the user can
@@ -931,6 +925,13 @@ extern int cint_c_lex (YYSTYPE * yylval_
 #define YY_RULE_SETUP \
 	YY_USER_ACTION
 
+/*
+ * BRCM: Check buffer stack
+ */
+#ifndef YY_CHECK_BUFFER_STACK
+#define YY_CHECK_BUFFER_STACK if (!yyg->yy_buffer_stack) YY_FATAL_ERROR("buffer error")
+#endif
+
 /** The main scanner function which does all the work.
  */
 YY_DECL
@@ -957,6 +958,7 @@ YY_DECL
 #ifdef YY_USER_INIT
 		YY_USER_INIT;
 #endif
+		YY_CHECK_BUFFER_STACK;
 
 		if ( ! yyg->yy_start )
 			yyg->yy_start = 1;	/* first start state */
@@ -1679,6 +1681,7 @@ ECHO;
 		/* Undo the effects of YY_DO_BEFORE_ACTION. */
 		*yy_cp = yyg->yy_hold_char;
 		YY_RESTORE_YY_MORE_OFFSET
+		YY_CHECK_BUFFER_STACK;
 
 		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
 			{
@@ -2085,6 +2088,7 @@ static int yy_get_next_buffer (yyscan_t 
 
 	if ( ! YY_CURRENT_BUFFER ){
         cint_c_ensure_buffer_stack (yyscanner);
+        YY_CHECK_BUFFER_STACK;
 		YY_CURRENT_BUFFER_LVALUE =
             cint_c__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
 	}
@@ -2118,6 +2122,7 @@ static int yy_get_next_buffer (yyscan_t 
 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
 		}
 
+        YY_CHECK_BUFFER_STACK;
 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
 	cint_c__load_buffer_state(yyscanner );
 
@@ -2271,6 +2276,7 @@ void cint_c_push_buffer_state (YY_BUFFER
 	/* Only push if top exists. Otherwise, replace top. */
 	if (YY_CURRENT_BUFFER)
 		yyg->yy_buffer_stack_top++;
+        YY_CHECK_BUFFER_STACK;
 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
 
 	/* copied from cint_c__switch_to_buffer. */
@@ -2314,11 +2320,11 @@ static void cint_c_ensure_buffer_stack (
 		 * immediate realloc on the next call.
          */
 		num_to_alloc = 1;
-		yyg->yy_buffer_stack = (struct yy_buffer_state**)cint_c_alloc
-								(num_to_alloc * sizeof(struct yy_buffer_state*)
+		yyg->yy_buffer_stack = (struct yy_buffer_state**)cint_c_realloc
+                    (NULL, num_to_alloc * sizeof(struct yy_buffer_state*)
 								, yyscanner);
 		
-		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
+		cint_cparser_memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
 				
 		yyg->yy_buffer_stack_max = num_to_alloc;
 		yyg->yy_buffer_stack_top = 0;
@@ -2337,7 +2343,7 @@ static void cint_c_ensure_buffer_stack (
 								, yyscanner);
 
 		/* zero only the new slots.*/
-		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
+		cint_cparser_memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
 		yyg->yy_buffer_stack_max = num_to_alloc;
 	}
 }
@@ -2414,16 +2420,6 @@ YY_BUFFER_STATE cint_c__scan_bytes  (yyc
 	return b;
 }
 
-#ifndef YY_EXIT_FAILURE
-#define YY_EXIT_FAILURE 2
-#endif
-
-static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
-{
-    	(void) fprintf( stderr, "%s\n", msg );
-	exit( YY_EXIT_FAILURE );
-}
-
 /* Redefine yyless() so it works in section 3 code. */
 
 #undef yyless
@@ -2535,7 +2531,7 @@ void cint_c_set_lineno (int  line_number
 
         /* lineno is only valid if an input buffer exists. */
         if (! YY_CURRENT_BUFFER )
-           yy_fatal_error( "cint_c_set_lineno called with no buffer" , yyscanner); 
+           YY_FATAL_ERROR( "cint_c_set_lineno called with no buffer" ); 
     
     yylineno = line_number;
 }
@@ -2550,7 +2546,7 @@ void cint_c_set_column (int  column_no ,
 
         /* column is only valid if an input buffer exists. */
         if (! YY_CURRENT_BUFFER )
-           yy_fatal_error( "cint_c_set_column called with no buffer" , yyscanner); 
+           YY_FATAL_ERROR( "cint_c_set_column called with no buffer" ); 
     
     yycolumn = column_no;
 }
@@ -2664,7 +2660,7 @@ int cint_c_lex_init(yyscan_t* ptr_yy_glo
         return 1;
     }
 
-    memset(*ptr_yy_globals,0,sizeof(struct yyguts_t));
+    cint_cparser_memset(*ptr_yy_globals,0,sizeof(struct yyguts_t));
 
     return yy_init_globals ( *ptr_yy_globals );
 }
