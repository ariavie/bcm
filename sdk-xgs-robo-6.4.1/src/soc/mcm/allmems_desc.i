/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: $
 * $Copyright: Copyright 2012 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * File:        allmems_desc.i
 * Purpose:     Memory descriptions.
 */

    /* ACTIONPROFILETABLE        */ "",
    /* AGER_EVENT                */ "Ager event database for queue index 31 to 0",
    /* AGER_FLAGS                */ "Ager flags database for queue index 31 to 0",
    /* AGER_THRESHOLD            */ "Ager threshold database for queue index 31 to 0",
    /* AGER_TS_0_HI              */ "Ager queue empty status and timestamp database for queue index 31 to 16, lower 2K",
    /* AGER_TS_0_LO              */ "Ager queue empty status and timestamp database for queue index 15 to 0, lower 2K",
    /* AGER_TS_1_HI              */ "Ager queue empty status and timestamp database for queue index 31 to 16, upper 2K",
    /* AGER_TS_1_LO              */ "Ager queue empty status and timestamp database for queue index 15 to 0, upper 2K",
    /* AGING_CTR_MEM             */ "Aging Counter RAM",
    /* AGING_EXP_MEM             */ "Aging Expiration Status RAM",
    /* ALLOCBUFFSCNT             */ "This database holds the number of buffers currently allocated to queue",
    /* ALTERNATE_EMIRROR_BITMAP  */ "Source Modid based blocking mask table",
    /* ARB_TDM_TABLE             */ "Arbiter TDM Table",
    /* ARB_TDM_TABLE_0           */ "MMU to EPIPE Arbiter TDM Table, PIPE 0",
    /* ARB_TDM_TABLE_1           */ "MMU to EPIPE Arbiter TDM Table, PIPE 1",
    /* AUXTABLE                  */ "",
    /* AXP_CH_NLF_INPUT_COUNTER_TABLE */ "Byte and Packet counts for data flow into each NLF.  NLF Number is used as index.",
    /* AXP_CH_NLF_OUTPUT_COUNTER_TABLE */ "Byte and Packet counts for data flow into each NLF. NLF number used as index.",
    /* AXP_SM_CHAR_REMAP0        */ "Character Remap Table for data to Regex Engine 0.",
    /* AXP_SM_CHAR_REMAP1        */ "Character Remap Table for data to Regex Engine 1.",
    /* AXP_SM_CHAR_REMAP2        */ "Character Remap Table for data to Regex Engine 2.",
    /* AXP_SM_CHAR_REMAP3        */ "Character Remap Table for data to Regex Engine 3.",
    /* AXP_SM_CHAR_REMAP4        */ "Character Remap Table for data to Regex Engine 4.",
    /* AXP_SM_CHAR_REMAP5        */ "Character Remap Table for data to Regex Engine 5.",
    /* AXP_SM_CHAR_REMAP6        */ "Character Remap Table for data to Regex Engine 6.",
    /* AXP_SM_CHAR_REMAP7        */ "Character Remap Table for data to Regex Engine 7.",
    /* AXP_SM_CHAR_REMAP8        */ "Character Remap Table for data to Regex Engine 8.",
    /* AXP_SM_CHAR_REMAP9        */ "Character Remap Table for data to Regex Engine 9.",
    /* AXP_SM_CHAR_REMAP10       */ "Character Remap Table for data to Regex Engine 10.",
    /* AXP_SM_CHAR_REMAP11       */ "Character Remap Table for data to Regex Engine 11.",
    /* AXP_SM_CHAR_REMAP12       */ "Character Remap Table for data to Regex Engine 12.",
    /* AXP_SM_CHAR_REMAP13       */ "Character Remap Table for data to Regex Engine 13.",
    /* AXP_SM_CHAR_REMAP14       */ "Character Remap Table for data to Regex Engine 14.",
    /* AXP_SM_CHAR_REMAP15       */ "Character Remap Table for data to Regex Engine 15.",
    /* AXP_SM_CHAR_REMAP16       */ "Character Remap Table for data to Regex Engine 16.",
    /* AXP_SM_CHAR_REMAP17       */ "Character Remap Table for data to Regex Engine 17.",
    /* AXP_SM_CHAR_REMAP18       */ "Character Remap Table for data to Regex Engine 18.",
    /* AXP_SM_CHAR_REMAP19       */ "Character Remap Table for data to Regex Engine 19.",
    /* AXP_SM_CHAR_REMAP20       */ "Character Remap Table for data to Regex Engine 20.",
    /* AXP_SM_CHAR_REMAP21       */ "Character Remap Table for data to Regex Engine 21.",
    /* AXP_SM_CHAR_REMAP22       */ "Character Remap Table for data to Regex Engine 22.",
    /* AXP_SM_CHAR_REMAP23       */ "Character Remap Table for data to Regex Engine 23.",
    /* AXP_SM_CHAR_REMAP24       */ "Character Remap Table for data to Regex Engine 24.",
    /* AXP_SM_CHAR_REMAP25       */ "Character Remap Table for data to Regex Engine 25.",
    /* AXP_SM_CHAR_REMAP26       */ "Character Remap Table for data to Regex Engine 26.",
    /* AXP_SM_CHAR_REMAP27       */ "Character Remap Table for data to Regex Engine 27.",
    /* AXP_SM_CHAR_REMAP28       */ "Character Remap Table for data to Regex Engine 28.",
    /* AXP_SM_CHAR_REMAP29       */ "Character Remap Table for data to Regex Engine 29.",
    /* AXP_SM_CHAR_REMAP30       */ "Character Remap Table for data to Regex Engine 30.",
    /* AXP_SM_CHAR_REMAP31       */ "Character Remap Table for data to Regex Engine 31.",
    /* AXP_SM_FLOW_TABLE_BULK_MATCH_DATA */ "Flow Table Bulk Clear Data registers.",
    /* AXP_SM_FLOW_TABLE_BULK_MATCH_MASK */ "Flow Table Bulk Clear Mask Control registers.",
    /* AXP_SM_FLOW_TABLE_BULK_REPLACE_DATA */ "Flow Table Bulk Clear Data registers.",
    /* AXP_SM_FLOW_TABLE_BULK_REPLACE_MASK */ "Flow Table Bulk Clear Mask Control registers.",
    /* AXP_SM_FLOW_TABLE_MEM     */ "Signature Match Flow Table Memory (one entry per flow)",
    /* AXP_SM_MATCH_COUNTERS_MEM0 */ "Match Counters 0 (one set of counters per rule)",
    /* AXP_SM_MATCH_COUNTERS_MEM1 */ "Match Counters 1 (one set of counters per rule)",
    /* AXP_SM_MATCH_COUNTERS_MEM2 */ "Match Counters 2 (one set of counters per rule)",
    /* AXP_SM_MATCH_COUNTERS_MEM3 */ "Match Counters 3 (one set of counters per rule)",
    /* AXP_SM_MATCH_TABLE_BULK_MATCH_DATA */ "Match Table Bulk Clear Data registers.",
    /* AXP_SM_MATCH_TABLE_BULK_MATCH_MASK */ "Match Table Bulk Clear Mask Control registers.",
    /* AXP_SM_MATCH_TABLE_BULK_REPLACE_DATA */ "Match Table Bulk Clear Data registers.",
    /* AXP_SM_MATCH_TABLE_BULK_REPLACE_MASK */ "Match Table Bulk Clear Mask Control registers.",
    /* AXP_SM_MATCH_TABLE_MEM0   */ "Match Table Memory 0 (one entry per rule ID)",
    /* AXP_SM_MATCH_TABLE_MEM1   */ "Match Table Memory 1 (one entry per rule ID)",
    /* AXP_SM_MATCH_TABLE_MEM2   */ "Match Table Memory 2 (one entry per rule ID)",
    /* AXP_SM_MATCH_TABLE_MEM3   */ "Match Table Memory 3 (one entry per rule ID)",
    /* AXP_SM_PACKET_BUFFER_MEM  */ "Packet Buffer Memory",
    /* AXP_SM_STATE_TABLE_BULK_MATCH_DATA */ "State Table Bulk Clear Data registers.",
    /* AXP_SM_STATE_TABLE_BULK_MATCH_MASK */ "State Table Bulk Clear Mask Control registers.",
    /* AXP_SM_STATE_TABLE_BULK_REPLACE_DATA */ "State Table Bulk Clear Data registers.",
    /* AXP_SM_STATE_TABLE_BULK_REPLACE_MASK */ "State Table Bulk Clear Mask Control registers.",
    /* AXP_SM_STATE_TABLE_MEM0   */ "State Table Memory 0",
    /* AXP_SM_STATE_TABLE_MEM1   */ "State Table Memory 1",
    /* AXP_SM_STATE_TABLE_MEM2   */ "State Table Memory 2",
    /* AXP_SM_STATE_TABLE_MEM3   */ "State Table Memory 3",
    /* AXP_SM_STATE_TABLE_MEM4   */ "State Table Memory 4",
    /* AXP_SM_STATE_TABLE_MEM5   */ "State Table Memory 5",
    /* AXP_SM_STATE_TABLE_MEM6   */ "State Table Memory 6",
    /* AXP_SM_STATE_TABLE_MEM7   */ "State Table Memory 7",
    /* AXP_WLAN_COS_MAP          */ "Final Output Port[5:0], INT_PRI",
    /* AXP_WRX_SVP_ASSIGNMENT    */ "WLAN SVP Assignment Table",
    /* AXP_WRX_WCD               */ "Wireless Client Database Table",
    /* AXP_WTX_DSCP_MAP          */ "MAP the PRI/CFI bits for tunnel outer vlan",
    /* AXP_WTX_DVP_PROFILE       */ "DVP Based properties for WLAN TX",
    /* AXP_WTX_FRAG_ID           */ "Tunnel ID used for CAPWAP FRAG ID and IPv4 ID",
    /* AXP_WTX_PRI_MAP           */ "MAP the PRI/CFI bits for tunnel outer vlan",
    /* AXP_WTX_TRUNK_BLOCK_MASK  */ "Contains trunk nonunicast blockmask",
    /* AXP_WTX_TRUNK_GROUP_BITMAP */ "Contains trunk group bitmap",
    /* AXP_WTX_TUNNEL            */ "DVP Based properties for WLAN TX",
    /* BAA_BUCKET_0              */ "Database for BAA working credit",
    /* BAA_BUCKET_1              */ "Database for BAA working credit",
    /* BAA_BUCKET_2              */ "Database for BAA working credit",
    /* BAA_BUCKET_3              */ "Database for BAA working credit",
    /* BAA_EVENT                 */ "BAA change soon status",
    /* BAA_LEAK_A0               */ "Bank A Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_A1               */ "Bank A Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_A2               */ "Bank A Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_A3               */ "Bank A Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_B0               */ "Bank B Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_B1               */ "Bank B Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_B2               */ "Bank B Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_B3               */ "Bank B Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_STATE_HUNGRY          */ "BAA hungry flags for 128 queues",
    /* BAA_STATE_STARVING        */ "BAA starving flags for 128 queues",
    /* BCAST_BLOCK_MASK          */ "Broadcast Block Mask, FeatureSpecific-Ethernet.",
    /* BDBLL                     */ "",
    /* BDQ                       */ "",
    /* BRDC_DCL_CPU_H            */ "",
    /* BRDC_FSRD_FSRD_WL_EXT_MEM */ "",
    /* BSAFE_CMD_DATA_IN         */ "Command Data Out Register",
    /* BSAFE_CMD_DATA_OUT        */ "Command Data Out Register",
    /* BUFFER_AGE                */ "This database holds current buffer age fields.",
    /* BUFFER_LIST               */ "This database is the Buffer next memory used to form queue/free pool link lists",
    /* BUFLINK                   */ "",
    /* BURST_SIZE_PER_ESET       */ "Burst Size Per Eset for Multicasts",
    /* BURST_SIZE_PER_NODE       */ "Burst size per node",
    /* BVDDANOTFOUND             */ "",
    /* BVDFIDCLASS               */ "",
    /* BVDTOPOLOGYID             */ "",
    /* CALENDAR                  */ "NOT USED",
    /* CALENDAR0                 */ "Timeslot calendar background engine database : bank 0",
    /* CALENDAR1                 */ "Timeslot calendar background engine database : bank 1",
    /* CALRXA                    */ "",
    /* CALRXB                    */ "",
    /* CALTX                     */ "",
    /* CBLOCK_MOD_LOOKUP         */ "This Lookup contains cblock divide by num CIs results (div and mod).",
    /* CBM                       */ "",
    /* CCM                       */ "",
    /* CCP_MEM                   */ "Copy Count Pool RAM",
    /* CELL_BUFFER0              */ "Isw2 cell buffer0. This is a logical memory 256 bits wide protected by a 10 bit ECC. Physically, the data is actually interleaved across 4 RAM arrays. Functionally, this is a read only memory, it reads out bits [255:0] of the addressed cell data.",
    /* CELL_BUFFER1              */ "Isw2 cell buffer1. This is a logical memory 256 bits wide protected by a 10 bit ECC. Physically, the data is actually interleaved across 4 RAM arrays. Functionally, this is a read only memory, it reads out bits [511:256] of the addressed cell data.",
    /* CELL_BUFFER2              */ "Isw2 cell buffer2. This is a logical memory 256 bits wide protected by a 10 bit ECC. Physically, the data is actually interleaved across 4 RAM arrays. Functionally, this is a read only memory, it reads out bits [767:512] of the addressed cell data.",
    /* CELL_BUFFER3              */ "Isw2 cell buffer3. This is a logical memory 256 bits wide protected by a 10 bit ECC. Physically, the data is actually interleaved across 4 RAM arrays. Functionally, this is a read only memory, it reads out bits [1023:768] of the addressed cell data.",
    /* CELL_CHK_MEM              */ "CELL DATA ECCP RAM",
    /* CELL_DATA0_MEM            */ "CELL DATA 0 RAM",
    /* CELL_DATA10_MEM           */ "CELL DATA 10 RAM",
    /* CELL_DATA11_MEM           */ "CELL DATA 11 RAM",
    /* CELL_DATA12_MEM           */ "CELL DATA 12 RAM",
    /* CELL_DATA13_MEM           */ "CELL DATA 13 RAM",
    /* CELL_DATA14_MEM           */ "CELL DATA 14 RAM",
    /* CELL_DATA15_MEM           */ "CELL DATA 15 RAM",
    /* CELL_DATA1_MEM            */ "CELL DATA 1 RAM",
    /* CELL_DATA2_MEM            */ "CELL DATA 2 RAM",
    /* CELL_DATA3_MEM            */ "CELL DATA 3 RAM",
    /* CELL_DATA4_MEM            */ "CELL DATA 4 RAM",
    /* CELL_DATA5_MEM            */ "CELL DATA 5 RAM",
    /* CELL_DATA6_MEM            */ "CELL DATA 6 RAM",
    /* CELL_DATA7_MEM            */ "CELL DATA 7 RAM",
    /* CELL_DATA8_MEM            */ "CELL DATA 8 RAM",
    /* CELL_DATA9_MEM            */ "CELL DATA 9 RAM",
    /* CELL_HDR_MEM              */ "Cell Header RAM",
    /* CFAP_MEM                  */ "Cell Free Address Pool RAM",
    /* CFC_CAT_2_TC_IQM_0_MAP_HCFC */ "",
    /* CFC_CAT_2_TC_IQM_0_MAP_NIF */ "",
    /* CFC_CAT_2_TC_IQM_1_MAP_HCFC */ "",
    /* CFC_CAT_2_TC_IQM_1_MAP_NIF */ "",
    /* CFC_CAT_2_TC_MAP_HCFC     */ "",
    /* CFC_CAT_2_TC_MAP_NIF      */ "",
    /* CFC_GLB_RSC_IQM_0_MAP     */ "",
    /* CFC_GLB_RSC_IQM_1_MAP     */ "",
    /* CFC_ILKN_INB_RX_0_CAL     */ "",
    /* CFC_ILKN_INB_RX_1_CAL     */ "",
    /* CFC_ILKN_INB_RX_2_CAL     */ "",
    /* CFC_ILKN_INB_RX_3_CAL     */ "",
    /* CFC_ILKN_INB_RX_4_CAL     */ "",
    /* CFC_ILKN_INB_RX_5_CAL     */ "",
    /* CFC_ILKN_INB_TX_0_CAL     */ "",
    /* CFC_ILKN_INB_TX_1_CAL     */ "",
    /* CFC_ILKN_INB_TX_2_CAL     */ "",
    /* CFC_ILKN_INB_TX_3_CAL     */ "",
    /* CFC_ILKN_INB_TX_4_CAL     */ "",
    /* CFC_ILKN_INB_TX_5_CAL     */ "",
    /* CFC_ILKN_RX_0_CAL         */ "",
    /* CFC_ILKN_RX_1_CAL         */ "",
    /* CFC_ILKN_TX_0_CAL         */ "",
    /* CFC_ILKN_TX_1_CAL         */ "",
    /* CFC_NIF_PFC_MAP           */ "",
    /* CFC_NIF_SHR_MAP           */ "",
    /* CFC_OOB_RX_0_CAL          */ "",
    /* CFC_OOB_RX_1_CAL          */ "",
    /* CFC_OOB_TX_0_CAL          */ "",
    /* CFC_OOB_TX_1_CAL          */ "",
    /* CFC_RCL_VSQ_IQM_0_MAP     */ "",
    /* CFC_RCL_VSQ_IQM_1_MAP     */ "",
    /* CFC_RCL_VSQ_MAP           */ "",
    /* CFC_SPI_OOB_RX_0_CAL      */ "",
    /* CFC_SPI_OOB_RX_1_CAL      */ "",
    /* CFC_SPI_OOB_TX_0_CAL      */ "",
    /* CFC_SPI_OOB_TX_1_CAL      */ "",
    /* CFMTRAP                   */ "",
    /* CHANNEL_MAP_TABLE         */ "Configuration Map for all the Channels",
    /* CHANNEL_SHAPER_TABLE      */ "Parameters for the Min and Max Shapers used to shape the channels",
    /* CHANNEL_WERR_TABLE        */ "WERR parameters for for all the Channels",
    /* CLPORT_WC_UCMEM_DATA      */ "",
    /* CL_SCHEDULERS_CONFIGURATION */ "",
    /* CL_SCHEDULERS_TYPE        */ "",
    /* CM_EJECTION_FIFO          */ "Ejection FIFO. Read only. This is a single entry table which holds the head of the ejection FIFO.  Each read to this table will pop an entry off the head of the ejection FIFO and return the results. This table is provided for debug access to the ejection FIFO which, in normal functional mode, is read via the cmic FIFO POP DMA engine.  The control bit INTERRUPT_STATUS.EJECTION_FIFO_READY signals that the ejection FIFO is non-empty and can be read.  If the EJECTION_FIFO is read when empty, zero da ...",
    /* CNTSMEMA                  */ "",
    /* CNTSMEMB                  */ "",
    /* CNTX                      */ "",
    /* COMPLETEPC                */ "",
    /* CONTEXTMRU                */ "",
    /* COPYENGINE0PROGRAM        */ "",
    /* COPYENGINE1PROGRAM        */ "",
    /* COPYENGINE2PROGRAM        */ "",
    /* COS_MAP_SEL               */ "Select one of four sections of COS_MAP table.",
    /* CO_COHERENT_TABLE_CMD     */ "COP coherent table cmd definition, for command injection purpose only",
    /* CO_COHERENT_TABLE_RSP     */ "COP coherent table response definition, for command injection purpose only",
    /* CO_COHERENT_TABLE_STATE   */ "",
    /* CO_METER_CMD              */ "COP meter command definition",
    /* CO_METER_MONITOR_COUNTER  */ "Meter Monitor Counter Memory",
    /* CO_METER_PROFILE          */ "Meter Profile Memory",
    /* CO_METER_RSP              */ "COP meter command response definition",
    /* CO_METER_STATE            */ "COP meter state definition",
    /* CO_SEQUENCE_CHECKER_CMD   */ "COP sequence number cmd definition, for command injection purpose only",
    /* CO_SEQUENCE_CHECKER_RSP   */ "COP sequence number command response definition",
    /* CO_SEQUENCE_CHECKER_STATE */ "",
    /* CO_WATCHDOG_TIMER_CMD     */ "COP watchdog timer cmd definition",
    /* CO_WATCHDOG_TIMER_EXPIRED_FIFO */ "Watchdog Timer Expired FIFO. Read only. This is a single entry table which holds the head of the Watchdogt Timer Expired FIFO.  Each read to this table will pop an entry off the head of the FIFO and return the results. This table is provided for debug access to the FIFO which, in normal functional mode, is read via the cmic FIFO POP DMA engine.  The control bit CO_WATCHDOG_TIMER_EXPIRED_FIFO_STATUS.NONEMPTY. signals that the ejection FIFO is non-empty and can be read.  If the FIFO is read when e ...",
    /* CO_WATCHDOG_TIMER_RSP     */ "COP watchdog timer command response definition",
    /* CO_WATCHDOG_TIMER_STATE   */ "COP watchdog timer state definition",
    /* CPDMD                     */ "",
    /* CPDMS                     */ "",
    /* CPM                       */ "",
    /* CPPRM                     */ "",
    /* CPUSCM                    */ "",
    /* CPU_COS_MAP               */ "index by COPYTO_CPU reasons code and internal priorities",
    /* CPU_COS_MAP_DATA_ONLY     */ "CPU_COS_MAP Data SRAM for CPU_COS_MAP TCAM",
    /* CPU_COS_MAP_ONLY          */ "CPU_COS_MAP TCAM only view",
    /* CPU_PBM                   */ "Specifies the port(s) that is (are) CPU.",
    /* CPU_PBM_2                 */ "Specifies the port(s) that is (are) CPU.",
    /* CPU_TS_MAP                */ "vlan range match table",
    /* CRBALTH                   */ "",
    /* CRDTDIS                   */ "",
    /* CRMA                      */ "",
    /* CRPS_CRPS_0_CNTS_MEM      */ "",
    /* CRPS_CRPS_0_OVTH_MEM      */ "",
    /* CRPS_CRPS_10_CNTS_MEM     */ "",
    /* CRPS_CRPS_10_OVTH_MEM     */ "",
    /* CRPS_CRPS_11_CNTS_MEM     */ "",
    /* CRPS_CRPS_11_OVTH_MEM     */ "",
    /* CRPS_CRPS_12_CNTS_MEM     */ "",
    /* CRPS_CRPS_12_OVTH_MEM     */ "",
    /* CRPS_CRPS_13_CNTS_MEM     */ "",
    /* CRPS_CRPS_13_OVTH_MEM     */ "",
    /* CRPS_CRPS_14_CNTS_MEM     */ "",
    /* CRPS_CRPS_14_OVTH_MEM     */ "",
    /* CRPS_CRPS_15_CNTS_MEM     */ "",
    /* CRPS_CRPS_15_OVTH_MEM     */ "",
    /* CRPS_CRPS_16_CNTS_MEM     */ "",
    /* CRPS_CRPS_16_OVTH_MEM     */ "",
    /* CRPS_CRPS_17_CNTS_MEM     */ "",
    /* CRPS_CRPS_17_OVTH_MEM     */ "",
    /* CRPS_CRPS_1_CNTS_MEM      */ "",
    /* CRPS_CRPS_1_OVTH_MEM      */ "",
    /* CRPS_CRPS_2_CNTS_MEM      */ "",
    /* CRPS_CRPS_2_OVTH_MEM      */ "",
    /* CRPS_CRPS_3_CNTS_MEM      */ "",
    /* CRPS_CRPS_3_OVTH_MEM      */ "",
    /* CRPS_CRPS_4_CNTS_MEM      */ "",
    /* CRPS_CRPS_4_OVTH_MEM      */ "",
    /* CRPS_CRPS_5_CNTS_MEM      */ "",
    /* CRPS_CRPS_5_OVTH_MEM      */ "",
    /* CRPS_CRPS_6_CNTS_MEM      */ "",
    /* CRPS_CRPS_6_OVTH_MEM      */ "",
    /* CRPS_CRPS_7_CNTS_MEM      */ "",
    /* CRPS_CRPS_7_OVTH_MEM      */ "",
    /* CRPS_CRPS_8_CNTS_MEM      */ "",
    /* CRPS_CRPS_8_OVTH_MEM      */ "",
    /* CRPS_CRPS_9_CNTS_MEM      */ "",
    /* CRPS_CRPS_9_OVTH_MEM      */ "",
    /* CRPS_EGQ_0_CNTCMD_HDR_CMP_PROFILE_MAPPING_TABLE */ "",
    /* CRPS_EGQ_1_CNTCMD_HDR_CMP_PROFILE_MAPPING_TABLE */ "",
    /* CRPS_EGQ_OFFSET_BMAP      */ "",
    /* CRPS_EGQ_TM_CNTCMD_HDR_CMP_PROFILE_MAPPING_TABLE */ "",
    /* CRPS_EPNI_0_CNTCMD_HDR_CMP_PROFILE_MAPPING_TABLE */ "",
    /* CRPS_EPNI_1_CNTCMD_HDR_CMP_PROFILE_MAPPING_TABLE */ "",
    /* CRPS_EPNI_OFFSET_BMAP_A   */ "",
    /* CRPS_EPNI_OFFSET_BMAP_B   */ "",
    /* CRPS_HEADER_APPEND_PTR_TO_EGQ_0_CNTCMD_HDR_CMP_MAPPING_TABLE */ "",
    /* CRPS_HEADER_APPEND_PTR_TO_EGQ_1_CNTCMD_HDR_CMP_MAPPING_TABLE */ "",
    /* CRPS_HEADER_APPEND_PTR_TO_EGQ_TM_CNTCMD_HDR_CMP_MAPPING_TABLE */ "",
    /* CRPS_HEADER_APPEND_PTR_TO_EPNI_0_CNTCMD_HDR_CMP_MAPPING_TABLE */ "",
    /* CRPS_HEADER_APPEND_PTR_TO_EPNI_1_CNTCMD_HDR_CMP_MAPPING_TABLE */ "",
    /* CRPS_IN_PP_PORT_TO_EGQ_0_CNTCMD_HDR_CMP_PROFILE_TABLE */ "",
    /* CRPS_IN_PP_PORT_TO_EGQ_1_CNTCMD_HDR_CMP_PROFILE_TABLE */ "",
    /* CRPS_IN_PP_PORT_TO_EGQ_TM_CNTCMD_HDR_CMP_PROFILE_TABLE */ "",
    /* CRPS_IN_PP_PORT_TO_EPNI_0_CNTCMD_HDR_CMP_PROFILE_TABLE */ "",
    /* CRPS_IN_PP_PORT_TO_EPNI_1_CNTCMD_HDR_CMP_PROFILE_TABLE */ "",
    /* CRPS_IQM_OFFSET_BMAP_A    */ "",
    /* CRPS_IQM_OFFSET_BMAP_B    */ "",
    /* CRPS_IQM_OFFSET_BMAP_C    */ "",
    /* CRPS_IQM_OFFSET_BMAP_D    */ "",
    /* CRPS_IRPP_OFFSET_BMAP_A   */ "",
    /* CRPS_IRPP_OFFSET_BMAP_B   */ "",
    /* CRPS_MEM_0080000          */ "",
    /* CRPS_MEM_0090000          */ "",
    /* CRPS_MEM_0100000          */ "",
    /* CRPS_MEM_0110000          */ "",
    /* CRPS_MEM_0120000          */ "",
    /* CRPS_MEM_0130000          */ "",
    /* CRPS_MEM_0140000          */ "",
    /* CRPS_MEM_210000           */ "",
    /* CRPS_MEM_220000           */ "",
    /* CRPS_MEM_230000           */ "",
    /* CRPS_MEM_240000           */ "",
    /* CRPS_MEM_250000           */ "",
    /* CRPS_MEM_260000           */ "",
    /* CRPS_MEM_270000           */ "",
    /* CRPS_MEM_280000           */ "",
    /* CRPS_MEM_290000           */ "",
    /* CRPS_MEM_300000           */ "",
    /* CRPS_MEM_310000           */ "",
    /* CRPS_MEM_320000           */ "",
    /* CRPS_MEM_330000           */ "",
    /* CRPS_MEM_340000           */ "",
    /* CRPS_MEM_390000           */ "",
    /* CRPS_MEM_00A0000          */ "",
    /* CRPS_MEM_00B0000          */ "",
    /* CRPS_MEM_00C0000          */ "",
    /* CRPS_MEM_00D0000          */ "",
    /* CRPS_MEM_00E0000          */ "",
    /* CRPS_MEM_00F0000          */ "",
    /* CRPS_MEM_2A0000           */ "",
    /* CRPS_MEM_2B0000           */ "",
    /* CRPS_MEM_2C0000           */ "",
    /* CRPS_MEM_2D0000           */ "",
    /* CRPS_MEM_2E0000           */ "",
    /* CRPS_MEM_2F0000           */ "",
    /* CRPS_MEM_3A0000           */ "",
    /* CRWDTH                    */ "",
    /* CS_BRICK_CONFIG_TABLE     */ "CS Brick Configuration. Bricks use 4 consecutive entries",
    /* CS_EJECTION_MESSAGE_TABLE */ "CS Ejection Message",
    /* CTFMEM                    */ "",
    /* CTR_DEQ_STATUS_MEM        */ "",
    /* CTR_FLEX_COUNT_0          */ "",
    /* CTR_FLEX_COUNT_1          */ "",
    /* CTR_FLEX_COUNT_2          */ "",
    /* CTR_FLEX_COUNT_3          */ "",
    /* CTR_FLEX_COUNT_4          */ "",
    /* CTR_FLEX_COUNT_5          */ "",
    /* CTR_FLEX_COUNT_6          */ "",
    /* CTR_FLEX_COUNT_7          */ "",
    /* CTR_FLEX_COUNT_8          */ "",
    /* CTR_FLEX_COUNT_9          */ "",
    /* CTR_FLEX_COUNT_10         */ "",
    /* CTR_FLEX_COUNT_11         */ "",
    /* CTR_MEM                   */ "Counter Memory - refer to CTR spec for addresses of different counters",
    /* CTXTMEM                   */ "",
    /* CXX_CXXPORT_WC_UCMEM_DATA_0 */ "",
    /* CXX_CXXPORT_WC_UCMEM_DATA_1 */ "",
    /* CXX_CXXPORT_WC_UCMEM_DATA_2 */ "",
    /* CX_DEBUG_MEM              */ "",
    /* DBF0                      */ "",
    /* DBF1                      */ "",
    /* DCL_CPU_H                 */ "",
    /* DCM                       */ "",
    /* DC_MEM                    */ "Domain Counter Table to hold the 264 unicast domain counters and 2 multicast domain counters. This table is indexed by Domain Number[7:0].",
    /* DDP                       */ "",
    /* DEBUG_CAPTURE             */ "Isw2 debug capture buffer",
    /* DESIGNATEDVLANTABLE       */ "",
    /* DESTINATIONSTATUS         */ "",
    /* DESTINATIONTABLE          */ "",
    /* DEST_MOD_PROXY_TABLE      */ "DEST MODID table for WLAN proxy status .",
    /* DEST_TRUNK_BITMAP         */ "Destination Trunk Bitmap Table.",
    /* DEVICE_RATE_MEMORY        */ "",
    /* DEVICE_STREAM_ID_TO_PP_PORT_MAP */ "Port Table, FeatureSpecific-Ethernet.",
    /* DFM                       */ "",
    /* DIRECTACTIONTABLE         */ "",
    /* DIRECT_1STPASSKEYPROFILERESOLVEDDATA */ "",
    /* DIRECT_2NDPASSKEYPROFILERESOLVEDDATA */ "",
    /* DISCARD_COUNTER_TAB       */ "Domain Discard Counter to keep track of traffic that is discarded in FR as a result of exceeding threshold.",
    /* DLB_ECMP_ETHERTYPE_ELIGIBILITY_MAP */ "Ethernet Type Eligiblity table",
    /* DLB_ECMP_FLOWSET          */ "DLB_ECMP Flow Set Timestamp and Member Information. This table is indexed by a hash of the packet flow. CPU access is for debug purpose only.",
    /* DLB_ECMP_FLOWSET_TIMESTAMP_PAGE */ "DLB_ECMP Flow Set Page. This table is indexed by a hash of the packet flow. CPU access is for debug purpose only.",
    /* DLB_ECMP_GROUP_CONTROL    */ "ECMP DLB Group Control configuration. Indexed by L3_ECMP_GROUP.DLB_ID.",
    /* DLB_ECMP_GROUP_MEMBERSHIP */ "DLB_ECMP Group Membership for each group. Indexed by L3_ECMP_GROUP.DLB_ID.",
    /* DLB_ECMP_GROUP_STATS      */ "DLB_ECMP Statistics for each group.",
    /* DLB_ECMP_HIST_GROUP_LOAD  */ "DLB_ECMP Historical Group loading, CPU access is for debug purpose only.",
    /* DLB_ECMP_HIST_LOAD        */ "DLB_ECMP Historical Loading for each member, CPU access is for debug purpose only. Even read can be a problem, disable DLB_ECMP_QUALITY_CONTROL.ENABLE_AVG_CALC first.",
    /* DLB_ECMP_HIST_QSIZE       */ "DLB_ECMP Historical QSize for each member, CPU access is for debug purpose only.",
    /* DLB_ECMP_INST_GROUP_LOAD  */ "DLB_ECMP Instant Group Loading, CPU access is for debug purpose only.",
    /* DLB_ECMP_INST_LOAD        */ "DLB_ECMP Instant Load for each member, CPU access is for debug purpose only.",
    /* DLB_ECMP_INST_QSIZE       */ "DLB_ECMP Instant Qsize for each member, CPU access is for debug purpose only.",
    /* DLB_ECMP_MEMBERSHIP_REVERSE_MAP */ "DLB_ECMP Member Group Map",
    /* DLB_ECMP_MEMBER_ATTRIBUTE */ "DLB_ECMP Member Attributes table for next hop. Indexed by DLB_ECMP_FLOWSET.MEMBER_ID.",
    /* DLB_ECMP_MEMBER_STATUS    */ "DLB_ECMP Mmeber Status for each member. CPU access is for debug purpose only.",
    /* DLB_ECMP_MEMBER_SW_STATE  */ "DLB_ECMP SW per member up/down configuration.",
    /* DLB_ECMP_OPTIMAL_CANDIDATE */ "DLB_ECMP Optimal Candidate selection result, CPU access is for debug purpose only.",
    /* DLB_ECMP_PLA_QUANTIZE_THRESHOLD */ "DLB_ECMP Physical Link Accounting Quality Threshold",
    /* DLB_ECMP_QUALITY_CONTROL  */ "DLB_ECMP Quality Control Configuration. Indexed by Member_ID.",
    /* DLB_ECMP_QUALITY_MAPPING  */ "DLB_ECMP Quality Mapping table.",
    /* DLB_ECMP_QUALITY_RESULT   */ "DLB_ECMP Quality Result for each member. CPU access is for debug purpose only.",
    /* DLB_ECMP_VLA_EXPECTED_LOADING_THRESHOLD */ "Virtual link accounting expected loading threshold",
    /* DLB_ECMP_VLA_MEMBER_IMBALANCE_THRESHOLD */ "DLB_ECMP Virtual Link Accounting Profile",
    /* DLB_ECMP_VLA_QUALITY_MEASURE_CONTROL */ "Virtual link accounting configuration table",
    /* DLB_HGT_ETHERTYPE_ELIGIBILITY_MAP */ "Ethernet Type Eligiblity table",
    /* DLB_HGT_FLOWSET           */ "DLB_HGT Flow Set Timestamp and Member Information. This table is indexed by a hash of the packet flow. CPU access is for debug purpose only.",
    /* DLB_HGT_FLOWSET_PORT      */ "DLB_HGT Flow Set Assigned Member.",
    /* DLB_HGT_FLOWSET_PORT_X    */ "DLB_HGT Flow Set Assigned Member.",
    /* DLB_HGT_FLOWSET_PORT_Y    */ "DLB_HGT Flow Set Assigned Member.",
    /* DLB_HGT_FLOWSET_TIMESTAMP */ "DLB_HGT Flow Set Observation Timestamp.",
    /* DLB_HGT_FLOWSET_TIMESTAMP_PAGE */ "DLB_HGT Flow Set Page-Number table.",
    /* DLB_HGT_FLOWSET_TIMESTAMP_PAGE_X */ "DLB_HGT Flow Set Page-Number table.",
    /* DLB_HGT_FLOWSET_TIMESTAMP_PAGE_Y */ "DLB_HGT Flow Set Page-Number table.",
    /* DLB_HGT_FLOWSET_TIMESTAMP_X */ "DLB_HGT Flow Set Observation Timestamp.",
    /* DLB_HGT_FLOWSET_TIMESTAMP_Y */ "DLB_HGT Flow Set Observation Timestamp.",
    /* DLB_HGT_FLOWSET_X         */ "DLB_HGT Flow Set Assigned Member.",
    /* DLB_HGT_FLOWSET_Y         */ "DLB_HGT Flow Set Assigned Member.",
    /* DLB_HGT_GLB_QUANTIZE_THRESHOLDS */ "DLB_HGT Quantization Thresholds table.",
    /* DLB_HGT_GROUP_CONTROL     */ "DLB_HGT Group Parameters.",
    /* DLB_HGT_GROUP_CONTROL_X   */ "DLB_HGT Group Parameters.",
    /* DLB_HGT_GROUP_CONTROL_Y   */ "DLB_HGT Group Parameters.",
    /* DLB_HGT_GROUP_MEMBERSHIP  */ "DLB_HGT Group Member Bitmap.",
    /* DLB_HGT_GROUP_STATS       */ "DLB_HGT Group Member Bitmap.",
    /* DLB_HGT_GROUP_STATS_X     */ "DLB_HGT Group Member Bitmap.",
    /* DLB_HGT_GROUP_STATS_Y     */ "DLB_HGT Group Member Bitmap.",
    /* DLB_HGT_HIST_LOAD         */ "DLB_HGT Historical Load for each member, CPU access is for debug purpose only.",
    /* DLB_HGT_INST_LOAD         */ "DLB HGT Instant Load for each member, contains the queue size and byte_count. CPU access is for debug purpose only.",
    /* DLB_HGT_LINK_CONTROL      */ "DLB_HGT Software Link Status Control.",
    /* DLB_HGT_MEMBER_ATTRIBUTE  */ "DLB_HGT Member Attribute table for port number. Indexed by DLB_HGT_FLOWSET.MEMBER_ID.",
    /* DLB_HGT_MEMBER_HW_STATE   */ "Member Hardware Link Status",
    /* DLB_HGT_MEMBER_STATUS     */ "DLB_HGT Member Status for each member. CPU access is for debug purpose only.",
    /* DLB_HGT_MEMBER_SW_STATE   */ "DLB_HGT SW per member up/down configuration.",
    /* DLB_HGT_OPTIMAL_CANDIDATE */ "DLB_HGT Optimal Candidate table.",
    /* DLB_HGT_OPTIMAL_CANDIDATE_X */ "DLB_HGT Optimal Candidate table.",
    /* DLB_HGT_OPTIMAL_CANDIDATE_Y */ "DLB_HGT Optimal Candidate table.",
    /* DLB_HGT_PLA_QUANTIZE_THRESHOLD */ "DLB_HGT Quantization Thresholds table.",
    /* DLB_HGT_PORT_MEMBER_MAP   */ "DLB_HGT Port number to Member ID mapping table.",
    /* DLB_HGT_PORT_QUALITY_MAPPING */ "DLB_HGT Quality Mapping.",
    /* DLB_HGT_PORT_STATE        */ "DLB_HGT Hardware Link State.",
    /* DLB_HGT_QUALITY_CONTROL   */ "DLB_HGT Per member configuration. Indexed by Member_ID.",
    /* DLB_HGT_QUALITY_MAPPING   */ "DLB_HGT Quality Mapping table. Contains member quality for each member profile.",
    /* DLB_HGT_QUALITY_RESULT    */ "DLB_HGT Quality Result for each member. CPU access is for debug purpose only.",
    /* DLB_HGT_QUANTIZE_THRESHOLD */ "DLB_HGT Quantization Thresholds table.",
    /* DLB_HGT_RR_SELECTION_POINTER */ "Indicates the most recent selected member for each DLB group.",
    /* DLB_LAG_ETHERTYPE_ELIGIBILITY_MAP */ "Ethernet Type Eligiblity table",
    /* DLB_LAG_FLOWSET           */ "DLB_LAG Flow Set Timestamp and Member Information. This table is indexed by a hash of the packet flow. CPU access is for debug purpose only.",
    /* DLB_LAG_FLOWSET_TIMESTAMP_PAGE */ "DLB_LAG Flow Set Page. This table is indexed by a hash of the packet flow. CPU access is for debug purpose only.",
    /* DLB_LAG_GROUP_CONTROL     */ "LAG DLB Group Control configuration.",
    /* DLB_LAG_GROUP_MEMBERSHIP  */ "DLB_LAG Group Membership for each group.",
    /* DLB_LAG_GROUP_STATS       */ "DLB_LAG Statistics for each group.",
    /* DLB_LAG_HIST_GROUP_LOAD   */ "DLB_LAG Historical Group Load, CPU access is for debug purpose only.",
    /* DLB_LAG_HIST_LOAD         */ "DLB_LAG Historical Load for each member, CPU access is for debug purpose only. Even read can be a problem, disable DLB_LAG_QUALITY_CONTROL.ENABLE_AVG_CALC first.",
    /* DLB_LAG_HIST_QSIZE        */ "DLB_LAG Historical QSIZE for each member, CPU access is for debug purpose only.",
    /* DLB_LAG_INST_GROUP_LOAD   */ "DLB_LAG Instant Group Load, CPU access is for debug purpose only.",
    /* DLB_LAG_INST_LOAD         */ "DLB_LAG Instant Load for each member, CPU access is for debug purpose only.",
    /* DLB_LAG_INST_QSIZE        */ "DLB_LAG Instant Queue Size for each member, CPU access is for debug purpose only.",
    /* DLB_LAG_MEMBERSHIP_REVERSE_MAP */ "DLB_LAG Member Group Map.",
    /* DLB_LAG_MEMBER_ATTRIBUTE  */ "DLB_LAG Member Attribute table for modid, portid. Indexed by DLB_LAG_FLOWSET.MEMBER_ID.",
    /* DLB_LAG_MEMBER_STATUS     */ "DLB_LAG Member Status for each member. CPU access is for debug purpose only.",
    /* DLB_LAG_MEMBER_SW_STATE   */ "DLB_LAG SW per member up/down configuration.",
    /* DLB_LAG_OPTIMAL_CANDIDATE */ "DLB_LAG Optimal Candidate selection result, CPU access is for debug purpose only.",
    /* DLB_LAG_PLA_QUANTIZE_THRESHOLD */ "DLB_LAG Physical Link Accounting Quality Threshold",
    /* DLB_LAG_QUALITY_CONTROL   */ "DLB_LAG Quality Control. Indexed by Member_ID.",
    /* DLB_LAG_QUALITY_MAPPING   */ "DLB_LAG Quality mapping table.",
    /* DLB_LAG_QUALITY_RESULT    */ "DLB_LAG Quality Result for each member. CPU access is for debug purpose only.",
    /* DLB_LAG_VLA_EXPECTED_LOADING_THRESHOLD */ "Virtual link accounting expected loading threshold",
    /* DLB_LAG_VLA_MEMBER_IMBALANCE_THRESHOLD */ "DLB_LAG Virtual Link Accounting Threshold Profile .",
    /* DLB_LAG_VLA_QUALITY_MEASURE_CONTROL */ "Virtual link accounting configuration table",
    /* DLL_RAM                   */ "",
    /* DMT_MEM                   */ "Domain number lookup for unicast packets used in flow control module. This table is init to all zeros by hw init.",
    /* DPM                       */ "",
    /* DPM2                      */ "",
    /* DRAM_ADDRESS_SPACE        */ "",
    /* DRMA                      */ "",
    /* DSCP_TABLE                */ "Diff Serv Code Point Table",
    /* DSPGF1MEM                 */ "",
    /* DSPGF2MEM                 */ "",
    /* DSPRFMEM                  */ "",
    /* DT_MEM                    */ "Domain Thresholds Table to hold the threshold values associated with the 264 unicast domain counters and 2 multicast domain counters. Every domain number in double mode uses up 2 entries in this table. Only even domain number can be configured to be in double mode. This table is indexed by Domain Number[7:1]. Domain Number[0] and method bit are used to determine which thresholds to apply.",
    /* DUAL_SHAPER_MEMORY        */ "",
    /* DWM                       */ "",
    /* DWM_NEW                   */ "",
    /* E2E_HOL_STATUS            */ "Remote Module End-to-End HOL Status Table",
    /* E2E_HOL_STATUS_1          */ "Remote Module End-to-End HOL Status Table",
    /* ECI_MEM_00010000          */ "",
    /* ECMPGROUPSIZE             */ "",
    /* ECONTEXT_ALLOCBUFFSCNT    */ "This is the Enqueue Context Working ALLOCBUFFSCNT database",
    /* ECONTEXT_INFLIGHTBUFFCNT  */ "This is the Enqueue Context Working INFLIGHTBUFFCNT database",
    /* ECONTEXT_TAIL_LLA         */ "This is the Enqueue Context Working TAIL_LLA database",
    /* EDB_EEDB_BANK             */ "",
    /* EDB_EEDB_MAP_TO_PROTECTION_PTR */ "",
    /* EDB_EEDB_TOP_BANK         */ "",
    /* EDB_ESEM_MANAGEMENT_REQUEST */ "",
    /* EDB_ESEM_STEP_TABLE       */ "",
    /* EDB_GLEM_MANAGEMENT_REQUEST */ "",
    /* EDB_GLEM_STEP_TABLE       */ "",
    /* EDB_MAP_OUTLIF_TO_DSP     */ "",
    /* EDB_MEM_520000            */ "",
    /* EDB_MEM_1720000           */ "",
    /* EDB_MEM_1820000           */ "",
    /* EDB_MEM_2120000           */ "",
    /* EDB_MEM_2220000           */ "",
    /* EDB_MEM_3220000           */ "",
    /* EDB_MEM_3320000           */ "",
    /* EDB_MEM_3420000           */ "",
    /* EDB_MEM_4220000           */ "",
    /* EDB_MEM_4320000           */ "",
    /* EDB_MEM_4420000           */ "",
    /* EDB_MEM_2C20000           */ "",
    /* EDB_MEM_3A20000           */ "",
    /* EDB_MEM_3B20000           */ "",
    /* EDB_MEM_D20000            */ "",
    /* EDB_MEM_E20000            */ "",
    /* EDB_MEM_F20000            */ "",
    /* EDC_LOOKUP                */ "This database contains the EDC Lookup Table.",
    /* EEPORIENTATION            */ "",
    /* EFP_COUNTER_TABLE         */ "COUNTER TABLE FOR THE EFP",
    /* EFP_COUNTER_TABLE_X       */ "COUNTER TABLE FOR THE EFP",
    /* EFP_COUNTER_TABLE_Y       */ "COUNTER TABLE FOR THE EFP",
    /* EFP_METER_TABLE           */ "METER TABLE STRUCTURES FOR THE EFP",
    /* EFP_METER_TABLE_X         */ "METER TABLE STRUCTURES FOR THE EFP",
    /* EFP_METER_TABLE_Y         */ "METER TABLE STRUCTURES FOR THE EFP",
    /* EFP_POLICY_TABLE          */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE EFP",
    /* EFP_TCAM                  */ "TCAM FOR EFP",
    /* EGQCTL                    */ "",
    /* EGQDATA                   */ "",
    /* EGQ_ACTION_PROFILE_TABLE  */ "",
    /* EGQ_AUXILIARY_DATA_MEMORY_AUX_TABLE */ "",
    /* EGQ_AUX_TABLE             */ "",
    /* EGQ_CBM                   */ "",
    /* EGQ_CCM                   */ "",
    /* EGQ_CH_0_SCM              */ "",
    /* EGQ_CH_1_SCM              */ "",
    /* EGQ_CH_2_SCM              */ "",
    /* EGQ_CH_3_SCM              */ "",
    /* EGQ_CH_4_SCM              */ "",
    /* EGQ_CH_5_SCM              */ "",
    /* EGQ_CH_6_SCM              */ "",
    /* EGQ_CH_7_SCM              */ "",
    /* EGQ_CH_8_SCM              */ "",
    /* EGQ_CH_9_SCM              */ "",
    /* EGQ_CH_SCM_0              */ "",
    /* EGQ_CH_SCM_1              */ "",
    /* EGQ_CH_SCM_2              */ "",
    /* EGQ_CH_SCM_3              */ "",
    /* EGQ_CH_SCM_4              */ "",
    /* EGQ_CH_SCM_5              */ "",
    /* EGQ_CH_SCM_6              */ "",
    /* EGQ_CH_SCM_7              */ "",
    /* EGQ_CH_SCM_8              */ "",
    /* EGQ_CH_SCM_9              */ "",
    /* EGQ_CH_SCM_10             */ "",
    /* EGQ_CH_SCM_11             */ "",
    /* EGQ_CH_SCM_12             */ "",
    /* EGQ_CH_SCM_13             */ "",
    /* EGQ_CH_SCM_14             */ "",
    /* EGQ_CH_SCM_15             */ "",
    /* EGQ_CH_SCM_16             */ "",
    /* EGQ_CH_SCM_17             */ "",
    /* EGQ_CH_SCM_18             */ "",
    /* EGQ_CH_SCM_19             */ "",
    /* EGQ_CH_SCM_20             */ "",
    /* EGQ_CH_SCM_21             */ "",
    /* EGQ_CH_SCM_22             */ "",
    /* EGQ_CH_SCM_23             */ "",
    /* EGQ_CH_SCM_24             */ "",
    /* EGQ_CH_SCM_25             */ "",
    /* EGQ_CH_SCM_26             */ "",
    /* EGQ_CH_SCM_27             */ "",
    /* EGQ_CH_SCM_28             */ "",
    /* EGQ_CH_SCM_29             */ "",
    /* EGQ_CH_SCM_30             */ "",
    /* EGQ_CH_SCM_31             */ "",
    /* EGQ_CNM_QUANTA_TO_FC_MAP  */ "",
    /* EGQ_DCM                   */ "",
    /* EGQ_DSP_PTR_MAP           */ "",
    /* EGQ_DWM                   */ "",
    /* EGQ_DWM_8P                */ "",
    /* EGQ_EGRESS_SHAPER_CALENDAR_SELECTOR_CCM */ "",
    /* EGQ_EGRESS_SHAPER_CONFIGURATION */ "",
    /* EGQ_EGRESS_SHAPER_PER_PORT_CREDIT_BALANCE_MEMORY_CBM */ "",
    /* EGQ_EPS_PRIO_MAP          */ "",
    /* EGQ_FBM                   */ "",
    /* EGQ_FDM                   */ "",
    /* EGQ_FQP_NIF_PORT_MUX      */ "",
    /* EGQ_FREE_BUFFERS_ALLOCATION_BITMAP_MEMORY_FBM */ "",
    /* EGQ_FREE_DESCRIPTORS_ALLOCATION_BITMAP_MEMORY_FDM */ "",
    /* EGQ_HEADER_MAP            */ "",
    /* EGQ_INGRESSVLANEDITCOMMANDMAP */ "",
    /* EGQ_INGRESS_VLAN_EDITING_COMMAND_IVEC_TABLE */ "",
    /* EGQ_IVEC_TABLE            */ "",
    /* EGQ_MAP_OUTLIF_TO_DSP     */ "",
    /* EGQ_MAP_PS_TO_IFC         */ "",
    /* EGQ_MC_SP_TC_MAP          */ "",
    /* EGQ_NONCH_SCM             */ "",
    /* EGQ_NON_CHANNELIZED_INTERFACES_SHAPER_CREDIT_MEMORY_NONCH_SCM */ "",
    /* EGQ_OFP_DEQUEUE_WFQ_CONFIGURATION_MEMORY_8P_DWM_8P */ "",
    /* EGQ_OFP_DEQUEUE_WFQ_CONFIGURATION_MEMORY_DWM */ "",
    /* EGQ_PACKET_PROCESSING_PER_PORT_CONFIGURATION_TABLE_PP_PPCT */ "",
    /* EGQ_PCT                   */ "",
    /* EGQ_PDCM                  */ "",
    /* EGQ_PDCMAX                */ "",
    /* EGQ_PDCT_TABLE            */ "",
    /* EGQ_PER_IFC_CFG           */ "",
    /* EGQ_PER_INTERFACE_BUFFERS_COUNTER_MAX_MEMORY */ "",
    /* EGQ_PER_INTERFACE_BUFFERS_COUNTER_MEMORY */ "",
    /* EGQ_PER_INTERFACE_DESCRIPTORS_COUNTER_MAX_MEMORY */ "",
    /* EGQ_PER_INTERFACE_DESCRIPTORS_COUNTER_MEMORY */ "",
    /* EGQ_PER_PORT_BUFFERS_COUNTER_MAX_MEMORY */ "",
    /* EGQ_PER_PORT_BUFFERS_COUNTER_MEMORY */ "",
    /* EGQ_PER_PORT_BUFFERS_THRESHOLDS_MEMORY */ "",
    /* EGQ_PER_PORT_CONFIGURATION_TABLE_PPCT */ "",
    /* EGQ_PER_PORT_DESCRIPTORS_COUNTER_MAX_MEMORY */ "",
    /* EGQ_PER_PORT_DESCRIPTORS_COUNTER_MEMORY */ "",
    /* EGQ_PER_PORT_DESCRIPTORS_THRESHOLDS_MEMORY */ "",
    /* EGQ_PER_PORT_LB_RANGE     */ "",
    /* EGQ_PER_PORT_MAX_CREDIT_MEMORY_PMC */ "",
    /* EGQ_PER_QPAI_MAX_CREDIT_MEMORY_QP_PMC */ "",
    /* EGQ_PER_QUEUE_BUFFERS_COUNTER_MAX_MEMORY */ "",
    /* EGQ_PER_QUEUE_BUFFERS_COUNTER_MEMORY */ "",
    /* EGQ_PER_QUEUE_BUFFERS_THRESHOLDS_MEMORY */ "",
    /* EGQ_PER_QUEUE_DESCRIPTORS_COUNTER_MAX_MEMORY */ "",
    /* EGQ_PER_QUEUE_DESCRIPTORS_COUNTER_MEMORY */ "",
    /* EGQ_PER_QUEUE_DESCRIPTORS_THRESHOLDS_MEMORY */ "",
    /* EGQ_PMC                   */ "",
    /* EGQ_PMF_KEY_GEN_LSB       */ "",
    /* EGQ_PMF_KEY_GEN_MSB       */ "",
    /* EGQ_PMF_PROGRAM_SELECTION_CAM */ "",
    /* EGQ_PORT_CONFIGURATION_TABLE_PCT */ "",
    /* EGQ_PPCT                  */ "",
    /* EGQ_PP_PPCT               */ "",
    /* EGQ_PQP_NIF_PORT_MUX      */ "",
    /* EGQ_PQSM                  */ "",
    /* EGQ_PQSMAX                */ "",
    /* EGQ_PQST_TABLE            */ "",
    /* EGQ_QDCM                  */ "",
    /* EGQ_QDCMAX                */ "",
    /* EGQ_QDCT_TABLE            */ "",
    /* EGQ_QM_0                  */ "",
    /* EGQ_QM_1                  */ "",
    /* EGQ_QM_2                  */ "",
    /* EGQ_QM_3                  */ "",
    /* EGQ_QPAIRS_SHAPER_CREDIT_MEMORY_QP_SCM */ "",
    /* EGQ_QPAIR_SHAPER_CREDIT_BALANCE_MEMORY_QP_CBM */ "",
    /* EGQ_QP_CBM                */ "",
    /* EGQ_QP_PMC                */ "",
    /* EGQ_QP_SCM                */ "",
    /* EGQ_QQSM                  */ "",
    /* EGQ_QQSMAX                */ "",
    /* EGQ_QQST_TABLE            */ "",
    /* EGQ_RCM                   */ "",
    /* EGQ_RCMMC                 */ "",
    /* EGQ_RCMUC                 */ "",
    /* EGQ_RDMMC                 */ "",
    /* EGQ_RDMUC                 */ "",
    /* EGQ_RPDM                  */ "",
    /* EGQ_RRDM                  */ "",
    /* EGQ_RSM                   */ "",
    /* EGQ_TCG_CBM               */ "",
    /* EGQ_TCG_MAX_CREDIT_MEMORY_TCG_PMC */ "",
    /* EGQ_TCG_PMC               */ "",
    /* EGQ_TCG_SCM               */ "",
    /* EGQ_TCG_SHAPER_CREDIT_BALANCE_MEMORY_TCG_CBM */ "",
    /* EGQ_TCG_SHAPER_CREDIT_CONFIGURATION_TCG_SCM */ "",
    /* EGQ_TC_DP_MAP             */ "",
    /* EGQ_TTL_SCOPE             */ "",
    /* EGQ_TTL_SCOPE_MEMORY_TTL_SCOPE */ "",
    /* EGQ_VLAN_TABLE            */ "",
    /* EGQ_VLAN_TABLE_CONFIGURATION_MEMORY_VLAN_TABLE */ "",
    /* EGQ_VSI_MEMBERSHIP        */ "",
    /* EGQ_VSI_MEMBERSHIP_MEMORY_VSI_MEMBERSHIP */ "",
    /* EGQ_VSI_PROFILE           */ "",
    /* EGQ_VSI_PROFILE_MEMORY_VSI_PROFILE */ "",
    /* EGRESSEDITCMD             */ "",
    /* EGR_1588_SA               */ "1588 Protocol Control table",
    /* EGR_AXP_PORT_PROPERTY     */ "Indexed by the Loopback Type",
    /* EGR_COS_MAP               */ "Egress COS MAP Table for the Redirect COS queue",
    /* EGR_CPU_COS_MAP           */ "Egress CPU COS MAP Table for the Redirect COS queue",
    /* EGR_DSCP_ECN_MAP          */ "Egress DSCP Table to select the new dscp for outer tunnel header packets.",
    /* EGR_DSCP_TABLE            */ "Egress DSCP Table to select the new dscp for outer tunnel header packets.",
    /* EGR_DVP_ATTRIBUTE         */ "Egress DVP Attribute Table, FeatureSpecific-Ethernet.",
    /* EGR_DVP_ATTRIBUTE_1       */ "Egress DVP Attribute_1 Table, FeatureSpecific-Ethernet.",
    /* EGR_EDB_XMIT_CTRL         */ "Egress transmission control",
    /* EGR_EHG_QOS_MAPPING_TABLE */ "Maps internal priority / CFI to DSCP and VLAN priority/CFI",
    /* EGR_EINITBUF_DATA_RAM_0   */ "Used only for Debug purposes: INITBUF [255:0].There should not be any packet traffic in EP when CPU is accessing this table.Else data integrity cannot be guaranteed.",
    /* EGR_EINITBUF_DATA_RAM_1   */ "Used only for Debug purposes: INITBUF [511:256] .There should not be any packet traffic in EP when CPU is accessing this table.Else data integrity cannot be guaranteed.",
    /* EGR_EINITBUF_DATA_RAM_2   */ "Used only for Debug purposes: INITBUF [767:512] .There should not be any packet traffic in EP when CPU is accessing this table.Else data integrity cannot be guaranteed.",
    /* EGR_EINITBUF_DATA_RAM_3   */ "Used only for Debug purposes: INITBUF [1023:768] .There should not be any packet traffic in EP when CPU is accessing this table.Else data integrity cannot be guaranteed.",
    /* EGR_EINITBUF_ECC_RAM      */ "Used only for Debug purposes: INITBUF ECC .There should not be any packet traffic in EP when CPU is accessing this table.Else data integrity cannot be guaranteed.",
    /* EGR_EM_MTP_INDEX          */ "Mirror to Port Table.\nIndex is constructed using pbe.mtp_index[6:0] field.\nWe use {pbe.mtp_index[5:4],pbe.mtp_index[2:0]} as index into this table.",
    /* EGR_ENABLE                */ "Egress Enable (per physical port)",
    /* EGR_EP_REDIRECT_EM_MTP_INDEX */ "Mirror to Port Table.\nIndex is constructed using pbe.mtp_index[6:0] field.\nWe use {pbe.mtp_index[5:4],pbe.mtp_index[2:0]} as index into this table.",
    /* EGR_ERSPAN                */ "Contains the ERSPAN header for each MTP (first 4 for IM_MTPs, second 4 entries for EM_MTPs; address::: for IM copy: {0, IM_MTP_INDEX[4:3]} for EM copy: {1, EM_MTP_INDEX[4:3]}. Note: ERSPAN is not supported in Draco Mirror mode.",
    /* EGR_ETAG_PCP_MAPPING      */ "Mapping table for Internal Priority and CNG to ETAG PCP/DE.",
    /* EGR_FCOE_CONTROL_1        */ "Per-chip control.",
    /* EGR_FC_HEADER_TYPE        */ "FCoE Header Type.",
    /* EGR_FLEX_CTR_COUNTER_TABLE_0 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_1 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_2 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_3 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_4 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_5 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_6 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_7 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_0_X */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_0_Y */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_1_X */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_1_Y */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_2_X */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_2_Y */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_3_X */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_3_Y */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_OFFSET_TABLE_0 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_1 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_2 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_3 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_4 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_5 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_6 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_7 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_PKT_PRI_MAP  */ "PKT_PRI_MAP",
    /* EGR_FLEX_CTR_PKT_RES_MAP  */ "PKT_RES_MAP",
    /* EGR_FLEX_CTR_PORT_MAP     */ "PORT_MAP",
    /* EGR_FLEX_CTR_PRI_CNG_MAP  */ "PRI_CNG_MAP",
    /* EGR_FLEX_CTR_TOS_MAP      */ "TOS_MAP",
    /* EGR_FRAGMENT_ID_TABLE     */ "IPv4 / CAPWAP Tunnel Fragment ID Table",
    /* EGR_FRAGMENT_ID_TABLE_X   */ "IPv4 Tunnel Fragment ID Table.",
    /* EGR_FRAGMENT_ID_TABLE_Y   */ "IPv4 Tunnel Fragment ID Table.",
    /* EGR_GPP_ATTRIBUTES        */ "Per-GPP attributes table, PORT view.",
    /* EGR_GPP_ATTRIBUTES_MODBASE */ "Per-GPP attributes MODBASE table.",
    /* EGR_IFP_MOD_FIELDS        */ "L2 Modifications needed due to the IFP",
    /* EGR_IL_CHANNEL_MAP        */ "Maps Port/Cos to Interlaken Channel Number",
    /* EGR_IM_MTP_INDEX          */ "Mirror to Port Table to be used for IM tagged packets.\nIndex is constructed using pbe.mtp_index[6:0] field.\nWe use {pbe.mtp_index[4:3],pbe.mtp_index[2:0]} as index into this table.",
    /* EGR_ING_PORT              */ "Configuration Register for Ingress Port. This is different for each GE, 10GE port. FeatureSpecific-Ethernet.",
    /* EGR_INT_CN_TO_IP_MAPPING  */ "Egress Internal CN update table",
    /* EGR_INT_CN_UPDATE         */ "Egress Internal CN update table",
    /* EGR_IPFIX_DSCP_XLATE_TABLE */ "IPFIX DSCP Translation Table -- Address = {IP_DSCP_PROFILE[1:0], pkt_dscp[5:0]}",
    /* EGR_IPFIX_EOP_BUFFER      */ "IPFIX EOP BUFFER - to save info per-port from SOP cells to EOP cells.",
    /* EGR_IPFIX_EXPORT_FIFO     */ "Egress IPFIX Export FIFO",
    /* EGR_IPFIX_IPV4_MASK_SET_A */ "IPFIX IPv4 Address Masks",
    /* EGR_IPFIX_IPV6_MASK_SET_A */ "IPFIX IPv6 Address Masks",
    /* EGR_IPFIX_PROFILE         */ "Egress IPFIX Per-Port Profile Pointers",
    /* EGR_IPFIX_SESSION_TABLE   */ "Egress IPFIX Session Table",
    /* EGR_IPMC                  */ "Per IPMC group attributes needed in EP, FeatureSpecific-Ethernet",
    /* EGR_IP_TUNNEL             */ "Egress IP Tunnel Table. Used to Make new Tunnel Header.",
    /* EGR_IP_TUNNEL_IPV6        */ "IPV6 view of the Egress IP Tunnel Table. Used to make new IPV6 Tunnel Header. FeatureSpecific-Ethernet",
    /* EGR_IP_TUNNEL_MPLS        */ "MPLS view of the Egress IP Tunnel Table. Used to make new MPLS Tunnel Header. Note there are 4 entries per location. FeatureSpecific-Ethernet",
    /* EGR_L3_INTF               */ "L3 Interface Table",
    /* EGR_L3_NEXT_HOP           */ "Next Hop Table",
    /* EGR_LM_COUNTER_CONTROL    */ "Per opcode OAM LM packets counter control.",
    /* EGR_MAC_DA_PROFILE        */ "MAC-DA values for use when doing MPLS packet mods, FeatureSpecific-Ethernet",
    /* EGR_MAP_MH                */ "Used for mapping incoming PBE MH_PRIORITY into a new MH_PRIORITY/TC For Higig+/Higig2 header, on a per-egress-port basis.",
    /* EGR_MASK                  */ "Egress Mask Table",
    /* EGR_MASK_MODBASE          */ "Specifies the port(s) that is (are) CPU.",
    /* EGR_MAX_USED_ENTRIES      */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MAX_USED_ENTRIES_X    */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MAX_USED_ENTRIES_Y    */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MA_INDEX              */ ".",
    /* EGR_MIRROR_ENCAP_CONTROL  */ "Contains the Mirror Encap controls for each of the 8 Mirror Encap Indices.",
    /* EGR_MIRROR_ENCAP_DATA_1   */ "Contains the Base Header portion of Mirror Encap Data for each of the 8 Mirror Encap Indices.",
    /* EGR_MIRROR_ENCAP_DATA_2   */ "Contains the Optional Header portion of Mirror Encap Data for each of the 8 Mirror Encap Indices.",
    /* EGR_MMU_REQUESTS          */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MMU_REQUESTS_X        */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MMU_REQUESTS_Y        */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MOD_MAP_TABLE         */ "Egress Module Remapping Table",
    /* EGR_MPLS_EXP_MAPPING_1    */ "Mapping table for Internal Priority and CNG to MPLS labels EXP. Address = {VC_AND_SWAP_LABEL.MPLS_EXP_MAPPING_PTR, int_PRI, CNG}. FeatureSpecific-MPLS",
    /* EGR_MPLS_EXP_MAPPING_2    */ "Mapping table for Internal Priority and CNG to MPLS labels EXP. Address = {EGR_IP_TUNNEL_MPLS.MPLS_EXP_MAPPING_PTR, int_PRI, CNG} FeatureSpecific-MPLS",
    /* EGR_MPLS_EXP_PRI_MAPPING  */ "Mapping table for EXP to .1p/cfi. Address = {MPLS_EXP_MAPPING_PTR, new_exp} FeatureSpecific-MPLS",
    /* EGR_MPLS_PRI_MAPPING      */ "Mapping table for Internal Priority and CNG to MPLS labels EXP. Address = {MPLS_EXP_MAPPING_PTR, int_PRI, CNG} FeatureSpecific-MPLS",
    /* EGR_MPLS_VC_AND_SWAP_LABEL_TABLE */ "MPLS VC and SWAP Label Table, FeatureSpecific-MPLS",
    /* EGR_MP_GROUP              */ ".",
    /* EGR_NAT_PACKET_EDIT_INFO  */ "Per-chip control.",
    /* EGR_NETWORK_PRUNE_CONTROL */ "Per DVP_NETWORK_GROUP Prune enable for multipe Split Horizon Groups",
    /* EGR_OAM_DGLP_PROFILE      */ "EGR_OAM_DGLP_PROFILE",
    /* EGR_OAM_FLEXIBLE_DOMAIN_CONTROL */ "index:{PRE VXLT IVID VALID,PRE VXLT OVID VALID,POST VXLT IVID VALID,POST VXLT OVID VALID,DVP VALID}",
    /* EGR_OAM_LM_COUNTERS_0     */ "Packet counter for OAM Loss Measurement pool 0",
    /* EGR_OAM_LM_COUNTERS_1     */ "Packet counter for OAM Loss Measurement pool 1",
    /* EGR_OAM_MAC_ADDRESS       */ "loopback reply message construction requires per port MACDA value",
    /* EGR_OAM_OPCODE_CONTROL_PROFILE */ ".",
    /* EGR_OAM_OPCODE_GROUP      */ ".",
    /* EGR_OLP_CONFIG            */ "Contains OLP-HDR related items",
    /* EGR_OLP_DGPP_CONFIG       */ "Contains OLP-HDR related items",
    /* EGR_OLP_HEADER_TYPE_MAPPING */ "This Table provides a flexible mapping between OLP_HDR_COMPRESSED to the\nactual OLP_HDR_TYPE and OLP_HDR_SUBTYPE.\nINDEX (4bits): {MEP_TYPE(1b), OLP_HDR_TYPE_COMPRESSED(3b)}\nMEP_TYPE: 0 = Down-MEP/IFP, 1= UP-MEP\n#To be Updated later\n#MEP_TYPE      COMPRESSED_HDR_TYPE       HDR_TYPE          HDR_SUBTYPE\n#==========================================================================\n# Downmep/IFP      3'b000                8'd1(L2_HDR)      8'd0(NULL)\n# Downmep/IFP      3'b001                8'd0(OAM_H ...",
    /* EGR_PCP_DE_MAPPING        */ "Mapping table for Internal Priority and CNG to LLTAG/ETAG PCP,DE. Address = {LLTAG/ETAG PCP DE MAPPING PTR[3:0],int_PRI, CNG} FeatureSpecific-PON n/w",
    /* EGR_PERQ_XMT_COUNTERS     */ "Per-port Per-queue transmit counters (48 per port, 54 ports)",
    /* EGR_PERQ_XMT_COUNTERS_BASE_ADDR */ "Per-port Per-queue transmit counters Base Address.",
    /* EGR_PERQ_XMT_COUNTERS_X   */ "Per-port Per-queue transmit counters.",
    /* EGR_PERQ_XMT_COUNTERS_Y   */ "Per-port Per-queue transmit counters.",
    /* EGR_PER_Q_ECN_MARKED      */ "Error counters for ECN enhancement feature",
    /* EGR_PFC_CONTROL           */ "control the PFC (Priority Flow Control) feature of the egress. It should be only used for the XLPORT.",
    /* EGR_PHYSICAL_PORT         */ "Configuration Register for Ingress Port. This is different for each GE, 10GE port. FeatureSpecific-Ethernet.",
    /* EGR_PORT                  */ "Configuration Register for a Port. This is different for each GE, 10GE port. FeatureSpecific-Ethernet.",
    /* EGR_PORT_CREDIT_RESET     */ "To clear the port credit(per physical port",
    /* EGR_PORT_REQUESTS         */ "This table contains the cell requests asserted by individual port blocks (XLPORT's and CMIC).\nMeaning of cell request is different for different ports, but this register has no\nunderstanding of those meanings. All it shows is the number of times cell_request signal\nwas asserted by each port to TP.",
    /* EGR_PORT_REQUESTS_X       */ "This table contains the cell requests asserted by individual port blocks (XLPORT's and CMIC).\nMeaning of cell request is different for different ports, but this register has no\nunderstanding of those meanings. All it shows is the number of times cell_request signal\nwas asserted by each port to TP.",
    /* EGR_PORT_REQUESTS_Y       */ "This table contains the cell requests asserted by individual port blocks (XLPORT's and CMIC).\nMeaning of cell request is different for different ports, but this register has no\nunderstanding of those meanings. All it shows is the number of times cell_request signal\nwas asserted by each port to TP.",
    /* EGR_PP_PORT_GPP_TRANSLATION_1 */ "PP Port to GPP Translation Table",
    /* EGR_PP_PORT_GPP_TRANSLATION_2 */ "PP Port to GPP Translation Table",
    /* EGR_PRI_CNG_MAP           */ "Per port egress priority/CFI mapping table",
    /* EGR_PW_INIT_COUNTERS      */ "L2 MPLS Pseudo-wire Initiation Pkt/byte counters with SEQNUM overlay-- indexed by PW number",
    /* EGR_PW_INIT_COUNTERS_X    */ "L2 MPLS Pseudo-wire Initiation SEQNUM Table -- indexed by PW number.",
    /* EGR_PW_INIT_COUNTERS_Y    */ "L2 MPLS Pseudo-wire Initiation SEQNUM Table -- indexed by PW number.",
    /* EGR_QCN_CNM_CONTROL_TABLE */ "QCN CNM Control table.",
    /* EGR_QUEUE_TO_PP_PORT_MAP  */ "Queue To DGPP Map Table, FeatureSpecific-Ethernet.",
    /* EGR_SCI_TABLE             */ "Egress SCI Table to lookup security attributes for MACSEC SecTag contruction.",
    /* EGR_SERVICE_COUNTER_TABLE */ "Egress Virtual Port / Interface Counters",
    /* EGR_SERVICE_COUNTER_TABLE_X */ "Egress Virtual Port / Interface Counters.",
    /* EGR_SERVICE_COUNTER_TABLE_Y */ "Egress Virtual Port / Interface Counters.",
    /* EGR_SERVICE_PRI_MAP       */ "Egress Class of Service instance priority value to OAM LM counter offset mapping table",
    /* EGR_SER_FIFO              */ "EGR SER FIFO",
    /* EGR_SER_FIFO_X            */ "EGR SER FIFO",
    /* EGR_SER_FIFO_Y            */ "EGR SER FIFO",
    /* EGR_SUBPORT_TAG_DOT1P_MAP */ "PHB to Outgoing SubPort Tag's PCP, DE mapping table",
    /* EGR_TRILL_PARSE_CONTROL   */ "Trill parse control.",
    /* EGR_TRILL_PARSE_CONTROL_2 */ "Trill parse control (second copy).",
    /* EGR_TRILL_RBRIDGE_NICKNAMES */ "Table that defines the TRILL RBridge nickname to use when sending out a packet. The index is derived from the ingress VLAN table.",
    /* EGR_TRILL_TREE_PROFILE    */ "Trill Tree profile table.",
    /* EGR_VFI                   */ "Egress WLAN Destination Virtual Port Table, FeatureSpecific-Wireless",
    /* EGR_VFT_FIELDS_PROFILE    */ "A profile table to generate static fields of the VFT header",
    /* EGR_VFT_PRI_MAP           */ "It contains the VFT pri for FCOE.",
    /* EGR_VINTF_COUNTER_TABLE   */ "Egress Virtual Port / Interface Counters",
    /* EGR_VINTF_COUNTER_TABLE_X */ "Egress Virtual Port / Interface Counters.",
    /* EGR_VINTF_COUNTER_TABLE_Y */ "Egress Virtual Port / Interface Counters.",
    /* EGR_VLAN                  */ "Vlan Membership Table for Egress",
    /* EGR_VLAN_STG              */ "Egress Spanning Tree Stage Table",
    /* EGR_VLAN_TAG_ACTION_PROFILE */ "Egress VLAN Tag Action Profile Table.",
    /* EGR_VLAN_X                */ "Vlan Membership Table for Egress.",
    /* EGR_VLAN_XLATE            */ "Egress Vlan Translate CAM-RAM Combined View.",
    /* EGR_VLAN_XLATE_DATA_ONLY  */ "Egress Vlan Translate Data Table only",
    /* EGR_VLAN_XLATE_LP         */ "EGR_VLAN_XLATE LP Control Table.",
    /* EGR_VLAN_XLATE_MASK       */ "Egress Vlan Translate CAM-RAM Combined View with mask for ports 0-9. FeatureSpecific-Ethernet",
    /* EGR_VLAN_XLATE_ONLY       */ "Egress Vlan Translate CAM only.",
    /* EGR_VLAN_XLATE_OVERFLOW   */ "Overflow for Egress Vlan Translate Lookup Table. FeatureSpecific-Ethernet.",
    /* EGR_VLAN_XLATE_SCRATCH    */ "Egress Vlan Translate Scratch Table. FeatureSpecific-Ethernet - Useful for software to keep temproary entries.",
    /* EGR_VLAN_Y                */ "Vlan Membership Table for Egress.",
    /* EGR_VPLAG_GROUP           */ "Egress VP group table.",
    /* EGR_VPLAG_MEMBER          */ "Egress VP member table.",
    /* EGR_VP_VLAN_MEMBERSHIP    */ "Egress VP VLAN member table.",
    /* EGR_VSAN_INTPRI_MAP       */ "Indexed by 3b IPRI + 2b COLOR + 3b FCOE_VSAN_PRI_MAPPING_PROFILE.",
    /* EGR_WLAN_ATTRIBUTES       */ "Used for mapping incoming PBE MH_PRIORITY into a new MH_PRIORITY/TC For Higig+/Higig2 header, on a per-egress-port basis.",
    /* EGR_WLAN_DVP              */ "Egress WLAN Destination Virtual Port Table, FeatureSpecific-Wireless",
    /* EG_FDM_PORT_REGS          */ "FDM Port Registers for Source Knockout",
    /* EG_FD_FCT                 */ "FD FCT Memory",
    /* EG_FD_FIFO_COUNT          */ "Admission Control FIFO Counter",
    /* EG_FD_FIFO_THRESH         */ "Admission Control FIFO Threshold",
    /* EG_FD_FIFO_THRESH_OFFSET_RED */ "Admission Control FIFO Threshold Color Red Offset",
    /* EG_FD_FIFO_THRESH_OFFSET_YELLOW */ "Admission Control FIFO Threshold Color Red Offset",
    /* EG_FD_FIFO_THRESH_RESET_OFFSET */ "Admission Control FIFO Reset offset value",
    /* EG_FD_GMT                 */ "FD GMT Memory",
    /* EG_FD_MDB                 */ "FD MDB Memory",
    /* EG_FD_PER_PORT_DROP_COUNT1 */ "Per port drop counter set 1 (out of 2)",
    /* EG_FD_PER_PORT_DROP_COUNT2 */ "Per port drop counter set 2 (out of 2)",
    /* EG_FD_SVT                 */ "FD SVT Memory",
    /* EMIRROR_CONTROL           */ "Egress mirror bitmap register, FeatureSpecific-Ethernet.",
    /* EMIRROR_CONTROL1          */ "Egress mirror bitmap register, FeatureSpecific-Ethernet.",
    /* EMIRROR_CONTROL2          */ "Egress mirror bitmap register, FeatureSpecific-Ethernet.",
    /* EMIRROR_CONTROL3          */ "Egress mirror bitmap register, FeatureSpecific-Ethernet.",
    /* EMPTYQCRBAL               */ "",
    /* EM_BRIDGE1Q_VLAN_TRANSLATION */ "",
    /* EM_BRIDGE_LINK_LAYER_SA   */ "",
    /* EM_COMPATIBLE_MC          */ "",
    /* EM_MACT                   */ "",
    /* EM_MTP_INDEX              */ "Egress Mirror to Port Table",
    /* ENCAPSULATIONDB_BANK1     */ "",
    /* ENCAPSULATIONDB_BANK2     */ "",
    /* ENDPOINT_COS_MAP          */ "Provides a mapped cos offset value to be added to the final uc queue value. index by {ENDPOINT_COS_MAP_PROFILE_INDEX, INT_PRI}",
    /* ENDPOINT_QUEUE_MAP        */ "Endpoint Queue Map table.",
    /* EPC_LINK_BMAP             */ "Link status register under software control.",
    /* EPNI_ACE_TABLE            */ "",
    /* EPNI_ACE_TO_FHEI          */ "",
    /* EPNI_ACE_TO_OUT_LIF       */ "",
    /* EPNI_ACE_TO_OUT_PP_PORT   */ "",
    /* EPNI_AC_ENTRY_WITH_DATA_FORMAT */ "",
    /* EPNI_AC_FORMAT            */ "",
    /* EPNI_AC_FORMATWITHDATA_0  */ "",
    /* EPNI_AC_FORMATWITHDATA_1  */ "",
    /* EPNI_AC_FORMATWITHDATA_2  */ "",
    /* EPNI_AC_FORMATWITHDATA_3  */ "",
    /* EPNI_AC_FORMATWITHDATA_4  */ "",
    /* EPNI_AC_FORMATWITHDATA_5  */ "",
    /* EPNI_AC_FORMATWITHDATA_6  */ "",
    /* EPNI_AC_FORMATWITHDATA_7  */ "",
    /* EPNI_AC_FORMATWITHDATA_8  */ "",
    /* EPNI_AC_FORMATWITHDATA_9  */ "",
    /* EPNI_AC_FORMATWITHDATA_10 */ "",
    /* EPNI_AC_FORMATWITHDATA_11 */ "",
    /* EPNI_AC_FORMATWITHDATA_12 */ "",
    /* EPNI_AC_FORMATWITHDATA_13 */ "",
    /* EPNI_AC_FORMATWITHDATA_14 */ "",
    /* EPNI_AC_FORMATWITHDATA_15 */ "",
    /* EPNI_AC_FORMAT_0          */ "",
    /* EPNI_AC_FORMAT_1          */ "",
    /* EPNI_AC_FORMAT_2          */ "",
    /* EPNI_AC_FORMAT_3          */ "",
    /* EPNI_AC_FORMAT_4          */ "",
    /* EPNI_AC_FORMAT_5          */ "",
    /* EPNI_AC_FORMAT_6          */ "",
    /* EPNI_AC_FORMAT_7          */ "",
    /* EPNI_AC_FORMAT_8          */ "",
    /* EPNI_AC_FORMAT_9          */ "",
    /* EPNI_AC_FORMAT_10         */ "",
    /* EPNI_AC_FORMAT_11         */ "",
    /* EPNI_AC_FORMAT_12         */ "",
    /* EPNI_AC_FORMAT_13         */ "",
    /* EPNI_AC_FORMAT_14         */ "",
    /* EPNI_AC_FORMAT_15         */ "",
    /* EPNI_AC_FORMAT_WITH_DATA  */ "",
    /* EPNI_AC_HALF_ENTRY_FORMAT */ "",
    /* EPNI_CFG_ETHER_TYPE_INDEX */ "",
    /* EPNI_CFG_MAPPING_TO_OAM_PCP */ "",
    /* EPNI_COS_PROFILE_TABLE    */ "",
    /* EPNI_COUNTER_SOURCE_MAP   */ "",
    /* EPNI_DATA_FORMAT          */ "",
    /* EPNI_DATA_FORMAT_0        */ "",
    /* EPNI_DATA_FORMAT_1        */ "",
    /* EPNI_DATA_FORMAT_2        */ "",
    /* EPNI_DATA_FORMAT_3        */ "",
    /* EPNI_DATA_FORMAT_4        */ "",
    /* EPNI_DATA_FORMAT_5        */ "",
    /* EPNI_DATA_FORMAT_6        */ "",
    /* EPNI_DATA_FORMAT_7        */ "",
    /* EPNI_DATA_FORMAT_8        */ "",
    /* EPNI_DATA_FORMAT_9        */ "",
    /* EPNI_DATA_FORMAT_10       */ "",
    /* EPNI_DATA_FORMAT_11       */ "",
    /* EPNI_DATA_FORMAT_12       */ "",
    /* EPNI_DATA_FORMAT_13       */ "",
    /* EPNI_DATA_FORMAT_14       */ "",
    /* EPNI_DATA_FORMAT_15       */ "",
    /* EPNI_DSCP_EXP_TO_PCP_DEI  */ "",
    /* EPNI_DSCP_REMARK          */ "",
    /* EPNI_DSP_PTR_MAP          */ "",
    /* EPNI_EEDB_BANK            */ "",
    /* EPNI_EEDB_BANK_0          */ "",
    /* EPNI_EEDB_BANK_1          */ "",
    /* EPNI_EEDB_BANK_2          */ "",
    /* EPNI_EEDB_BANK_3          */ "",
    /* EPNI_EEDB_BANK_4          */ "",
    /* EPNI_EEDB_BANK_5          */ "",
    /* EPNI_EEDB_BANK_6          */ "",
    /* EPNI_EEDB_BANK_7          */ "",
    /* EPNI_EEDB_BANK_8          */ "",
    /* EPNI_EEDB_BANK_9          */ "",
    /* EPNI_EEDB_BANK_10         */ "",
    /* EPNI_EEDB_BANK_11         */ "",
    /* EPNI_EEDB_BANK_12         */ "",
    /* EPNI_EEDB_BANK_13         */ "",
    /* EPNI_EEDB_BANK_14         */ "",
    /* EPNI_EEDB_BANK_15         */ "",
    /* EPNI_ESEM_ACDT_H_0        */ "",
    /* EPNI_ESEM_ACDT_H_1        */ "",
    /* EPNI_ESEM_ACDT_H_2        */ "",
    /* EPNI_ESEM_ACDT_H_3        */ "",
    /* EPNI_ESEM_ACDT_H_4        */ "",
    /* EPNI_ESEM_ACDT_H_5        */ "",
    /* EPNI_ESEM_ACDT_H_6        */ "",
    /* EPNI_ESEM_ACDT_H_7        */ "",
    /* EPNI_ESEM_KEYT_H_0        */ "",
    /* EPNI_ESEM_KEYT_H_1        */ "",
    /* EPNI_ESEM_KEYT_H_2        */ "",
    /* EPNI_ESEM_KEYT_H_3        */ "",
    /* EPNI_ESEM_KEYT_H_4        */ "",
    /* EPNI_ESEM_KEYT_H_5        */ "",
    /* EPNI_ESEM_KEYT_H_6        */ "",
    /* EPNI_ESEM_KEYT_H_7        */ "",
    /* EPNI_ESEM_MANAGEMENT_MEMORY_H_0 */ "",
    /* EPNI_ESEM_MANAGEMENT_MEMORY_H_1 */ "",
    /* EPNI_ESEM_MANAGEMENT_MEMORY_H_2 */ "",
    /* EPNI_ESEM_MANAGEMENT_MEMORY_H_3 */ "",
    /* EPNI_ESEM_MANAGEMENT_MEMORY_H_4 */ "",
    /* EPNI_ESEM_MANAGEMENT_MEMORY_H_5 */ "",
    /* EPNI_ESEM_MANAGEMENT_MEMORY_H_6 */ "",
    /* EPNI_ESEM_MANAGEMENT_MEMORY_H_7 */ "",
    /* EPNI_ESEM_MANAGEMENT_REQUEST */ "",
    /* EPNI_ESEM_PLDT_H_0        */ "",
    /* EPNI_ESEM_PLDT_H_1        */ "",
    /* EPNI_ESEM_PLDT_H_2        */ "",
    /* EPNI_ESEM_PLDT_H_3        */ "",
    /* EPNI_ESEM_PLDT_H_4        */ "",
    /* EPNI_ESEM_PLDT_H_5        */ "",
    /* EPNI_ESEM_PLDT_H_6        */ "",
    /* EPNI_ESEM_PLDT_H_7        */ "",
    /* EPNI_ESEM_STEP_TABLE      */ "",
    /* EPNI_ETH_OAM_OPCODE_MAP   */ "",
    /* EPNI_EVEC_TABLE           */ "",
    /* EPNI_EXP_REMARK           */ "",
    /* EPNI_HEADER_MAP           */ "",
    /* EPNI_INGRESSVLANEDITCOMMANDMAP */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT   */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_0 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_1 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_2 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_3 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_4 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_5 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_6 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_7 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_8 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_9 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_10 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_11 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_12 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_13 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_14 */ "",
    /* EPNI_IPV4_TUNNEL_FORMAT_15 */ "",
    /* EPNI_IP_TOS_MARKING       */ "",
    /* EPNI_ISID_TABLE           */ "",
    /* EPNI_IVEC_TABLE           */ "",
    /* EPNI_LFEM_FIELD_SELECT_MAP */ "",
    /* EPNI_LFEM_FIELD_SELECT_MAP_0 */ "",
    /* EPNI_LFEM_FIELD_SELECT_MAP_1 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_0 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_1 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_2 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_3 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_4 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_5 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_6 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_7 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_8 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_9 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_10 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_11 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_12 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_13 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_14 */ "",
    /* EPNI_LINK_LAYEROR_ARP_FORMAT_15 */ "",
    /* EPNI_LINK_LAYER_OR_ARP_FORMAT */ "",
    /* EPNI_LINK_LAYER_OR_ARP_NEW_FORMAT */ "",
    /* EPNI_LINK_LAYER_VLAN_PROCESSING_LLVP */ "",
    /* EPNI_LLVP_TABLE           */ "",
    /* EPNI_MEM_520000           */ "",
    /* EPNI_MEM_630000           */ "",
    /* EPNI_MEM_640000           */ "",
    /* EPNI_MEM_760000           */ "",
    /* EPNI_MEM_770000           */ "",
    /* EPNI_MEM_5A0000           */ "",
    /* EPNI_MEM_5B0000           */ "",
    /* EPNI_MEM_6C0000           */ "",
    /* EPNI_MEM_6D0000           */ "",
    /* EPNI_MIRROR_PROFILE_MAP   */ "",
    /* EPNI_MIRROR_PROFILE_TABLE */ "",
    /* EPNI_MPLS_CMD_PROFILE     */ "",
    /* EPNI_MPLS_POP_FORMAT      */ "",
    /* EPNI_MPLS_POP_FORMAT_0    */ "",
    /* EPNI_MPLS_POP_FORMAT_1    */ "",
    /* EPNI_MPLS_POP_FORMAT_2    */ "",
    /* EPNI_MPLS_POP_FORMAT_3    */ "",
    /* EPNI_MPLS_POP_FORMAT_4    */ "",
    /* EPNI_MPLS_POP_FORMAT_5    */ "",
    /* EPNI_MPLS_POP_FORMAT_6    */ "",
    /* EPNI_MPLS_POP_FORMAT_7    */ "",
    /* EPNI_MPLS_POP_FORMAT_8    */ "",
    /* EPNI_MPLS_POP_FORMAT_9    */ "",
    /* EPNI_MPLS_POP_FORMAT_10   */ "",
    /* EPNI_MPLS_POP_FORMAT_11   */ "",
    /* EPNI_MPLS_POP_FORMAT_12   */ "",
    /* EPNI_MPLS_POP_FORMAT_13   */ "",
    /* EPNI_MPLS_POP_FORMAT_14   */ "",
    /* EPNI_MPLS_POP_FORMAT_15   */ "",
    /* EPNI_MPLS_PUSH_FORMAT     */ "",
    /* EPNI_MPLS_PUSH_FORMAT_0   */ "",
    /* EPNI_MPLS_PUSH_FORMAT_1   */ "",
    /* EPNI_MPLS_PUSH_FORMAT_2   */ "",
    /* EPNI_MPLS_PUSH_FORMAT_3   */ "",
    /* EPNI_MPLS_PUSH_FORMAT_4   */ "",
    /* EPNI_MPLS_PUSH_FORMAT_5   */ "",
    /* EPNI_MPLS_PUSH_FORMAT_6   */ "",
    /* EPNI_MPLS_PUSH_FORMAT_7   */ "",
    /* EPNI_MPLS_PUSH_FORMAT_8   */ "",
    /* EPNI_MPLS_PUSH_FORMAT_9   */ "",
    /* EPNI_MPLS_PUSH_FORMAT_10  */ "",
    /* EPNI_MPLS_PUSH_FORMAT_11  */ "",
    /* EPNI_MPLS_PUSH_FORMAT_12  */ "",
    /* EPNI_MPLS_PUSH_FORMAT_13  */ "",
    /* EPNI_MPLS_PUSH_FORMAT_14  */ "",
    /* EPNI_MPLS_PUSH_FORMAT_15  */ "",
    /* EPNI_MPLS_SWAP_FORMAT     */ "",
    /* EPNI_MPLS_SWAP_FORMAT_0   */ "",
    /* EPNI_MPLS_SWAP_FORMAT_1   */ "",
    /* EPNI_MPLS_SWAP_FORMAT_2   */ "",
    /* EPNI_MPLS_SWAP_FORMAT_3   */ "",
    /* EPNI_MPLS_SWAP_FORMAT_4   */ "",
    /* EPNI_MPLS_SWAP_FORMAT_5   */ "",
    /* EPNI_MPLS_SWAP_FORMAT_6   */ "",
    /* EPNI_MPLS_SWAP_FORMAT_7   */ "",
    /* EPNI_MPLS_SWAP_FORMAT_8   */ "",
    /* EPNI_MPLS_SWAP_FORMAT_9   */ "",
    /* EPNI_MPLS_SWAP_FORMAT_10  */ "",
    /* EPNI_MPLS_SWAP_FORMAT_11  */ "",
    /* EPNI_MPLS_SWAP_FORMAT_12  */ "",
    /* EPNI_MPLS_SWAP_FORMAT_13  */ "",
    /* EPNI_MPLS_SWAP_FORMAT_14  */ "",
    /* EPNI_MPLS_SWAP_FORMAT_15  */ "",
    /* EPNI_MY_CFM_MAC_TABLE     */ "",
    /* EPNI_OUTLIF_TO_OAM_LIF_PROFILE_MAP */ "",
    /* EPNI_OUT_RIF_FORMAT       */ "",
    /* EPNI_OUT_RIF_FORMAT_0     */ "",
    /* EPNI_OUT_RIF_FORMAT_1     */ "",
    /* EPNI_OUT_RIF_FORMAT_2     */ "",
    /* EPNI_OUT_RIF_FORMAT_3     */ "",
    /* EPNI_OUT_RIF_FORMAT_4     */ "",
    /* EPNI_OUT_RIF_FORMAT_5     */ "",
    /* EPNI_OUT_RIF_FORMAT_6     */ "",
    /* EPNI_OUT_RIF_FORMAT_7     */ "",
    /* EPNI_OUT_RIF_FORMAT_8     */ "",
    /* EPNI_OUT_RIF_FORMAT_9     */ "",
    /* EPNI_OUT_RIF_FORMAT_10    */ "",
    /* EPNI_OUT_RIF_FORMAT_11    */ "",
    /* EPNI_OUT_RIF_FORMAT_12    */ "",
    /* EPNI_OUT_RIF_FORMAT_13    */ "",
    /* EPNI_OUT_RIF_FORMAT_14    */ "",
    /* EPNI_OUT_RIF_FORMAT_15    */ "",
    /* EPNI_PACKET_PROCESSING_PORT_CONFIGURATION_TABLE_PP_PCT */ "",
    /* EPNI_PCP_DEI_MAP          */ "",
    /* EPNI_PCP_DEI_TABLE        */ "",
    /* EPNI_PMF_MIRROR_PROFILE_TABLE */ "",
    /* EPNI_PP_COUNTER_TABLE     */ "",
    /* EPNI_PP_PCT               */ "",
    /* EPNI_PP_REMARK_PROFILE    */ "",
    /* EPNI_PRGE_DATA            */ "",
    /* EPNI_PRGE_INSTRUCTION_0   */ "",
    /* EPNI_PRGE_INSTRUCTION_1   */ "",
    /* EPNI_PRGE_INSTRUCTION_2   */ "",
    /* EPNI_PRGE_INSTRUCTION_3   */ "",
    /* EPNI_PRGE_INSTRUCTION_4   */ "",
    /* EPNI_PRGE_INSTRUCTION_5   */ "",
    /* EPNI_PRGE_INSTRUCTION_6   */ "",
    /* EPNI_PRGE_INSTRUCTION_7   */ "",
    /* EPNI_PRGE_INSTRUCTION_8   */ "",
    /* EPNI_PRGE_INSTRUCTION_9   */ "",
    /* EPNI_PRGE_INSTRUCTION_10  */ "",
    /* EPNI_PRGE_INSTRUCTION_11  */ "",
    /* EPNI_PRGE_INSTRUCTION_12  */ "",
    /* EPNI_PRGE_INSTRUCTION_13  */ "",
    /* EPNI_PRGE_PROGRAM         */ "",
    /* EPNI_PRGE_PROGRAM_SELECTION_CAM */ "",
    /* EPNI_PROTECTION_ENTRY     */ "",
    /* EPNI_PROTECTION_PTR_TABLE */ "",
    /* EPNI_REC_CMD_CONF         */ "",
    /* EPNI_REMARK_IPV4_TO_DSCP  */ "",
    /* EPNI_REMARK_IPV4_TO_EXP   */ "",
    /* EPNI_REMARK_IPV6_TO_DSCP  */ "",
    /* EPNI_REMARK_IPV6_TO_EXP   */ "",
    /* EPNI_REMARK_MPLS_TO_DSCP  */ "",
    /* EPNI_REMARK_MPLS_TO_EXP   */ "",
    /* EPNI_ROO_VSI              */ "",
    /* EPNI_SPANNING_TREE_PROTOCOL_STATE_MEMORY_STP */ "",
    /* EPNI_STP                  */ "",
    /* EPNI_TRILL_FORMAT         */ "",
    /* EPNI_TRILL_FORMAT_0       */ "",
    /* EPNI_TRILL_FORMAT_1       */ "",
    /* EPNI_TRILL_FORMAT_2       */ "",
    /* EPNI_TRILL_FORMAT_3       */ "",
    /* EPNI_TRILL_FORMAT_4       */ "",
    /* EPNI_TRILL_FORMAT_5       */ "",
    /* EPNI_TRILL_FORMAT_6       */ "",
    /* EPNI_TRILL_FORMAT_7       */ "",
    /* EPNI_TRILL_FORMAT_8       */ "",
    /* EPNI_TRILL_FORMAT_9       */ "",
    /* EPNI_TRILL_FORMAT_10      */ "",
    /* EPNI_TRILL_FORMAT_11      */ "",
    /* EPNI_TRILL_FORMAT_12      */ "",
    /* EPNI_TRILL_FORMAT_13      */ "",
    /* EPNI_TRILL_FORMAT_14      */ "",
    /* EPNI_TRILL_FORMAT_15      */ "",
    /* EPNI_TRILL_FORMAT_B_0     */ "",
    /* EPNI_TRILL_FORMAT_B_0_0   */ "",
    /* EPNI_TRILL_FORMAT_B_0_1   */ "",
    /* EPNI_TRILL_FORMAT_B_0_2   */ "",
    /* EPNI_TRILL_FORMAT_B_0_3   */ "",
    /* EPNI_TRILL_FORMAT_B_0_4   */ "",
    /* EPNI_TRILL_FORMAT_B_0_5   */ "",
    /* EPNI_TRILL_FORMAT_B_0_6   */ "",
    /* EPNI_TRILL_FORMAT_B_0_7   */ "",
    /* EPNI_TRILL_FORMAT_B_0_8   */ "",
    /* EPNI_TRILL_FORMAT_B_0_9   */ "",
    /* EPNI_TRILL_FORMAT_B_0_10  */ "",
    /* EPNI_TRILL_FORMAT_B_0_11  */ "",
    /* EPNI_TRILL_FORMAT_B_0_12  */ "",
    /* EPNI_TRILL_FORMAT_B_0_13  */ "",
    /* EPNI_TRILL_FORMAT_B_0_14  */ "",
    /* EPNI_TRILL_FORMAT_B_0_15  */ "",
    /* EPNI_TRILL_FORMAT_FULL_ENTRY */ "",
    /* EPNI_TRILL_FORMAT_HALF_ENTRY */ "",
    /* EPNI_TX_TAG_TABLE         */ "",
    /* EP_CLASS_RESOLUTION       */ "per packet drop counter",
    /* EP_DEST_PORT_MAP          */ "EP_DEST_PORT_MAP",
    /* EP_HDR_PARSING_CTRL       */ "EP_HDR_PARSING_CTRL",
    /* EP_LENGTH_ADJ_MAP         */ "EP_LENGTH_ADJ_MAP",
    /* EP_OI2QB_MAP              */ "EP_OI2QB_MAP",
    /* EP_PREDICTIVE_RANGING     */ "table to predict the frame classification",
    /* EP_REDIRECT_EM_MTP_INDEX  */ "Egress Mirror to Port Table",
    /* EP_STATS_CTRL             */ "ep_stats_ctrl",
    /* EP_VLAN_XLATE_1           */ "",
    /* EP_VLAN_XLATE_1_HIT_ONLY  */ "Egress Vlan Translate Lookup Table. FeatureSpecific-Ethernet.",
    /* ERPPDEBUG                 */ "",
    /* ESBS_PORT_TO_PIPE_MAPPING */ "ESBS Port to Pipe Mapping table.",
    /* ESEC_PKT_HEADER_CAPTURE_BUFFER */ "Store the first 256 bytes of a packet that is captured by the packet header capture logic. Each entry contains 16 bytes of a packet data along with the associated information such as sop, eop. This table is partitioned into four sections, with each section dedicated to one port and capable of holding up to 256-byte of a packet from that port. SOP always starts at the frist entry of each partition ( entry 0, 16, 32, or 48 )",
    /* ESEC_SA_KEY_TABLE         */ "SA Key table",
    /* ESEC_SA_TABLE             */ "SA attribute Table",
    /* ESEC_SC_TABLE             */ "ESEC SC Index (SCI) Table",
    /* ESEMMANAGEMENTREQUEST     */ "",
    /* ESET_TO_NODE_TYPE         */ "Burst Size Per Eset for Multicasts, 2 bits per eset, 32 field per location",
    /* ESET_TYPE_TAB             */ "2 bits eset type lookup by eset[9:0] field (overlayed with dest_sys_port_id[9:0]) in TS header for MC packlets.",
    /* ESM_ACL_ACTION_CONTROL    */ "Table used to control ESM ACL actions.",
    /* ESM_ACL_PROFILE           */ "Table used to profile ESM ACL actions.",
    /* ESM_HWTL_OBSERVED_ET_RSP  */ "Observed ext_tcam_rsp from ETU",
    /* ESM_KEY_ID_TO_FIELD_MAPPER */ "Fields Mapper for ESM Key Generator.",
    /* ESM_L3_PROTOCOL_FN        */ "ESM L3 Protocol Function table. Indexed by l3_protocol field generated in IMPLS/IPARS stage.",
    /* ESM_PKT_TYPE_ID           */ "TCAM for generating Packet Type IDs to be used in ESM Key Generation. It's recommended to have a default entry with all bits masked, say entry 255, which will match in case no other entry matches. This will give a facility of programming the default packet_type value. In case of a miss from the TCAM though, hardware will take packet_type value as zero.",
    /* ESM_PKT_TYPE_ID_DATA_ONLY */ "TCAM for generating Packet Type IDs to be used in ESM Key Generation.",
    /* ESM_PKT_TYPE_ID_ONLY      */ "TCAM for generating Packet Type IDs to be used in ESM Key Generation.",
    /* ESM_RANGE_CHECK           */ "RANGE CHECK VALUES FOR ESM Key Generation logic",
    /* ESM_SEARCH_PROFILE        */ "It is looked up with {PACKET_TYPE_ID(5),ESM_SEARCH_PROFILE_INDEX(6)} and gives out index to ESM_KEY_ID_TO_FIELD_MAPPER TABLE.",
    /* ES_ARB_TDM_TABLE          */ "MMU to EPIPE Arbiter TDM Table",
    /* ES_PIPE0_LLS_L0_CHILD_STATE1 */ "ES PIPE 0 L0 Child Status 1 Database",
    /* ES_PIPE0_LLS_L0_CHILD_WEIGHT_CFG */ "ES PIPE 0 L0 Child Weight Config Database",
    /* ES_PIPE0_LLS_L0_CHILD_WEIGHT_WORKING */ "ES PIPE 0 L0 Child Working Weight and Count Database",
    /* ES_PIPE0_LLS_L0_ERROR     */ "ES PIPE 0 L0 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE0_LLS_L0_HEADS_TAILS */ "ES PIPE 0 L0 Heads and Tails Database",
    /* ES_PIPE0_LLS_L0_MEMA_CONFIG */ "ES PIPE 0 L0 Configuration Database. NOTE : This is a replicated database whose contents must match ES_PIPE0_LLS_L0_MEMB_CONFIG",
    /* ES_PIPE0_LLS_L0_MEMB_CONFIG */ "ES PIPE 0 L0 Configuration Database NOTE : This is a replicated database whose contents must match ES_PIPE0_LLS_L0_MEMA_CONFIG",
    /* ES_PIPE0_LLS_L0_MIN_NEXT  */ "ES PIPE 0 L0 Child Min Linked List Next Database",
    /* ES_PIPE0_LLS_L0_PARENT    */ "ES PIPE 0 L0 Parent Database",
    /* ES_PIPE0_LLS_L0_PARENT_STATE */ "ES PIPE 0 L0 Parent State Database",
    /* ES_PIPE0_LLS_L0_WERR_MAX_SC */ "ES PIPE 0 L0 Max Surplus Count Database",
    /* ES_PIPE0_LLS_L0_WERR_NEXT */ "ES PIPE 0 L0 Child WERR Linked List Next Database",
    /* ES_PIPE0_LLS_L0_XOFF      */ "ES PIPE 0 L0 XOFF Database",
    /* ES_PIPE0_LLS_L1_CHILD_STATE1 */ "ES PIPE 0 L1 Child Status 1 Database",
    /* ES_PIPE0_LLS_L1_CHILD_WEIGHT_CFG */ "ES PIPE 0 L1 Child Weight Config Database",
    /* ES_PIPE0_LLS_L1_CHILD_WEIGHT_WORKING */ "ES PIPE 0 L1 Child Working Weight and Count Database",
    /* ES_PIPE0_LLS_L1_ERROR     */ "ES PIPE 0 L1 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE0_LLS_L1_HEADS_TAILS */ "ES PIPE 0 L1 Heads Tails Database",
    /* ES_PIPE0_LLS_L1_MEMA_CONFIG */ "ES PIPE 0 L1 Configuration Database NOTE : This is a replicated database whose contents must match ES_PIPE0_LLS_L1_MEMB_CONFIG",
    /* ES_PIPE0_LLS_L1_MEMB_CONFIG */ "ES PIPE 0 L1 Configuration Database NOTE : This is a replicated database whose contents must match ES_PIPE0_LLS_L1_MEMA_CONFIG",
    /* ES_PIPE0_LLS_L1_MIN_NEXT  */ "ES PIPE 0 L1 Child Min Linked List Next Database",
    /* ES_PIPE0_LLS_L1_PARENT    */ "ES PIPE 0 L1 Parent Database",
    /* ES_PIPE0_LLS_L1_PARENT_STATE */ "ES PIPE 0 L1 Parent State Database",
    /* ES_PIPE0_LLS_L1_WERR_MAX_SC */ "ES PIPE 0 L1 Max Surplus Count Database",
    /* ES_PIPE0_LLS_L1_WERR_NEXT */ "ES PIPE 0 L1 Child WERR Linked List Next Database",
    /* ES_PIPE0_LLS_L1_XOFF      */ "ES PIPE 0 Port XOFF Database",
    /* ES_PIPE0_LLS_L2_CHILD_STATE1 */ "ES PIPE 0 L2 Child state database",
    /* ES_PIPE0_LLS_L2_CHILD_WEIGHT_CFG */ "ES PIPE 0 L2 Child Weight Config and count Database",
    /* ES_PIPE0_LLS_L2_CHILD_WEIGHT_WORKING */ "ES PIPE 0 L2 Child Working Weight and count Database",
    /* ES_PIPE0_LLS_L2_ERROR     */ "ES PIPE 0 L2 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE0_LLS_L2_MIN_NEXT  */ "ES PIPE 0 L2 Child MIN Linked List Next Database 4 entries per word",
    /* ES_PIPE0_LLS_L2_PARENT    */ "ES PIPE 0 L2 Parent Database",
    /* ES_PIPE0_LLS_L2_WERR_NEXT */ "ES PIPE 0 L2 Child WERR Linked List Next Database 4 entries per word",
    /* ES_PIPE0_LLS_L2_XOFF      */ "ES PIPE 0 L2 XOFF Database",
    /* ES_PIPE0_LLS_PORT_HEADS_TAILS */ "ES PIPE 0 Port Heads Tails Database",
    /* ES_PIPE0_LLS_PORT_MEMA_CONFIG */ "ES PIPE 0 Port Configuration Database. NOTE : This is a replicated database, so contents must match ES_PIPE0_LLS_PORT_MEMB_CONFIG",
    /* ES_PIPE0_LLS_PORT_MEMB_CONFIG */ "ES PIPE 0 Port Configuration Database. NOTE : This is a replicated database, so contents must match ES_PIPE0_LLS_PORT_MEMA_CONFIG",
    /* ES_PIPE0_LLS_PORT_PARENT_STATE */ "ES PIPE 0 Port Parent State Database",
    /* ES_PIPE0_LLS_PORT_WERR_MAX_SC */ "ES PIPE 0 Port Max Surplus Count Database",
    /* ES_PIPE0_TDM_TABLE_0      */ "MMU to EPIPE Arbiter TDM Table 0, PIPE X",
    /* ES_PIPE0_TDM_TABLE_1      */ "MMU to EPIPE Arbiter TDM Table 1 (shadow table), PIPE X",
    /* ES_PIPE1_LLS_L0_CHILD_STATE1 */ "ES PIPE 1 L0 Child Status 1 Database",
    /* ES_PIPE1_LLS_L0_CHILD_WEIGHT_CFG */ "ES PIPE 1 L0 Child Weight Config Database",
    /* ES_PIPE1_LLS_L0_CHILD_WEIGHT_WORKING */ "ES PIPE 1 L0 Child Working Weight and Count Database",
    /* ES_PIPE1_LLS_L0_ERROR     */ "ES PIPE 1 L0 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE1_LLS_L0_HEADS_TAILS */ "ES PIPE 1 L0 Heads and Tails Database",
    /* ES_PIPE1_LLS_L0_MEMA_CONFIG */ "ES PIPE 1 L0 Configuration Database NOTE : This is a replicated database whose contents must match ES_PIPE1_LLS_L0_MEMB_CONFIG",
    /* ES_PIPE1_LLS_L0_MEMB_CONFIG */ "ES PIPE 1 L0 Configuration Database NOTE : This is a replicated database whose contents must match ES_PIPE1_LLS_L0_MEMA_CONFIG",
    /* ES_PIPE1_LLS_L0_MIN_NEXT  */ "ES PIPE 1 L0 Child Min Linked List Next Database",
    /* ES_PIPE1_LLS_L0_PARENT    */ "ES PIPE 1 L0 Parent Database",
    /* ES_PIPE1_LLS_L0_PARENT_STATE */ "ES PIPE 1 L0 Parent State Database",
    /* ES_PIPE1_LLS_L0_WERR_MAX_SC */ "ES PIPE 1 L0 Max Surplus Count Database",
    /* ES_PIPE1_LLS_L0_WERR_NEXT */ "ES PIPE 1 L0 Child WERR Linked List Next Database",
    /* ES_PIPE1_LLS_L0_XOFF      */ "ES PIPE 1 L0 XOFF Database",
    /* ES_PIPE1_LLS_L1_CHILD_STATE1 */ "ES PIPE 1 L1 Child Status 1 Database",
    /* ES_PIPE1_LLS_L1_CHILD_WEIGHT_CFG */ "ES PIPE 1 L1 Child Weight Config Database",
    /* ES_PIPE1_LLS_L1_CHILD_WEIGHT_WORKING */ "ES PIPE 1 L1 Child Working Weight and Count Database",
    /* ES_PIPE1_LLS_L1_ERROR     */ "ES PIPE 1 L1 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE1_LLS_L1_HEADS_TAILS */ "ES PIPE 1 L1 Heads Tails Database",
    /* ES_PIPE1_LLS_L1_MEMA_CONFIG */ "ES PIPE 1 L1 Configuration Database. NOTE : This is a replicated database whose contents must match ES_PIPE1_LLS_L1_MEMB_CONFIG",
    /* ES_PIPE1_LLS_L1_MEMB_CONFIG */ "ES PIPE 1 L1 Configuration Database. NOTE : This is a replicated database whose contents must match ES_PIPE1_LLS_L1_MEMA_CONFIG",
    /* ES_PIPE1_LLS_L1_MIN_NEXT  */ "ES PIPE 1 L1 Child Min Linked List Next Database",
    /* ES_PIPE1_LLS_L1_PARENT    */ "ES PIPE 1 L1 Parent Database",
    /* ES_PIPE1_LLS_L1_PARENT_STATE */ "ES PIPE 1 L1 Parent State Database",
    /* ES_PIPE1_LLS_L1_WERR_MAX_SC */ "ES PIPE 1 L1 Max Surplus Count Database",
    /* ES_PIPE1_LLS_L1_WERR_NEXT */ "ES PIPE 1 L1 Child WERR Linked List Next Database",
    /* ES_PIPE1_LLS_L1_XOFF      */ "ES PIPE 1 Port XOFF Database",
    /* ES_PIPE1_LLS_L2_CHILD_STATE1 */ "ES PIPE 1 L2 Child state database",
    /* ES_PIPE1_LLS_L2_CHILD_WEIGHT_CFG */ "ES PIPE 1 L2 Child Weight Config and count Database",
    /* ES_PIPE1_LLS_L2_CHILD_WEIGHT_WORKING */ "ES PIPE 1 L2 Child Working Weight and count Database",
    /* ES_PIPE1_LLS_L2_ERROR     */ "ES PIPE 1 L2 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE1_LLS_L2_MIN_NEXT  */ "ES PIPE 1 L2 Child MIN Linked List Next Database 4 entries per word",
    /* ES_PIPE1_LLS_L2_PARENT    */ "ES PIPE 1 L2 Parent Database",
    /* ES_PIPE1_LLS_L2_WERR_NEXT */ "ES PIPE 1 L2 Child WERR Linked List Next Database 4 entries per word",
    /* ES_PIPE1_LLS_L2_XOFF      */ "ES PIPE 1 L2 XOFF Database",
    /* ES_PIPE1_LLS_PORT_HEADS_TAILS */ "ES PIPE 1 Port Heads Tails Database",
    /* ES_PIPE1_LLS_PORT_MEMA_CONFIG */ "ES PIPE 1 Port Configuration Database. NOTE : This is a replicated database, so contents must match ES_PIPE1_LLS_PORT_MEMB_CONFIG",
    /* ES_PIPE1_LLS_PORT_MEMB_CONFIG */ "ES PIPE 1 Port Configuration Database. NOTE : This is a replicated database, so contents must match ES_PIPE1_LLS_PORT_MEMA_CONFIG",
    /* ES_PIPE1_LLS_PORT_PARENT_STATE */ "ES PIPE 1 Port Parent State Database",
    /* ES_PIPE1_LLS_PORT_WERR_MAX_SC */ "ES PIPE 1 Port Max Surplus Count Database",
    /* ES_PIPE1_TDM_TABLE_0      */ "MMU to EPIPE Arbiter TDM Table 0, PIPE X",
    /* ES_PIPE1_TDM_TABLE_1      */ "MMU to EPIPE Arbiter TDM Table 1 (shadow table), PIPE X",
    /* ETHERNETMETERCONFIG       */ "",
    /* ETHERNETMETERPROFILES     */ "",
    /* ETPPDEBUG                 */ "",
    /* ETPP_BYPASS               */ "",
    /* ETU_CP_FIFO               */ "tx fifo for queuing sbus db_wr, db_rd",
    /* ETU_DBG_CP_FIFO_RSP       */ "Response for raw request",
    /* ETU_DBG_REQ_REUSE_FREE_ENTRY */ "Request for reuse of free tcam entry",
    /* ETU_DBG_RX_LAST_RSP       */ "The last response send back from TCAM",
    /* ETU_DBG_RX_RAW_RSP        */ "Response for raw request",
    /* ETU_TX_RAW_REQ_DATA_WORD  */ "ETU TX FIFO RAW_REQ access DATA WORD Portion",
    /* ET_INST_OPC_TABLE         */ "Stores opcodes of Instructions used by ESMIF stage for searching databases in ext_tcam",
    /* ET_PA_XLAT                */ "Defines mapping of 20bit ext_tcam_phy_adr to associated data entry adr in ext_sram, and also to on-chip hit bits.\n It is indexed by 6 msbs (bits 19:14) of ext_tcam_phy_adr[19:0]",
    /* ET_PA_XLAT_DEBUG          */ "External tcam physical address translation table. All entries of the identical 256 deep PD memories can be read/write",
    /* ET_UINST_MEM              */ "Each entry specifies a double micro-instruction that can be driven to ext_tcam.\n Mechanism if uinst_mem is intended to be used for INVALIDATing, SEARCHing entries in tables for which these commands are not supported.\n Also note that uinst_mem mechanism affects only the TCAM portion of entry. Associated Data is NOT altered - that must be done separately",
    /* EXP_TABLE                 */ "Exp Table. Indexed by {scr_port[4:0], mpls_exp[2:0]}",
    /* EXT_ACL144_TCAM           */ "This view supports only READ, WRITE operations.",
    /* EXT_ACL144_TCAM_IPV4      */ "ACL144_IPV4 Software overlay of EXT_ACL144_TCAM",
    /* EXT_ACL144_TCAM_IPV6      */ "ACL144_IPV6 Software overlay of EXT_ACL144_TCAM",
    /* EXT_ACL144_TCAM_L2        */ "ACL144_L2 Software overlay of EXT_ACL144_TCAM",
    /* EXT_ACL160_FP_POLICY_1X   */ "ACL160 policy software overlay of EXT_FP_POLICY_1X",
    /* EXT_ACL160_FP_POLICY_2X   */ "ACL160 policy software overlay of EXT_FP_POLICY_2X",
    /* EXT_ACL160_FP_POLICY_3X   */ "ACL160 policy software overlay of EXT_FP_POLICY_3X",
    /* EXT_ACL160_FP_POLICY_4X   */ "ACL160 policy software overlay of EXT_FP_POLICY_4X",
    /* EXT_ACL160_FP_POLICY_6X   */ "ACL160 policy software overlay of EXT_FP_POLICY_6X",
    /* EXT_ACL160_TCAM           */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP, FeatureSpecific-FP.",
    /* EXT_ACL288_TCAM           */ "This view supports only READ, WRITE operations.",
    /* EXT_ACL288_TCAM_IPV4      */ "ACL288_IPV4 Software overlay of EXT_ACL288_TCAM",
    /* EXT_ACL288_TCAM_L2        */ "ACL288_L2 Software overlay of EXT_ACL288_TCAM",
    /* EXT_ACL320_FP_POLICY_1X   */ "ACL320 policy software overlay of EXT_FP_POLICY_1X",
    /* EXT_ACL320_FP_POLICY_2X   */ "ACL320 policy software overlay of EXT_FP_POLICY_2X",
    /* EXT_ACL320_FP_POLICY_3X   */ "ACL320 policy software overlay of EXT_FP_POLICY_3X",
    /* EXT_ACL320_FP_POLICY_4X   */ "ACL320 policy software overlay of EXT_FP_POLICY_4X",
    /* EXT_ACL320_FP_POLICY_6X   */ "ACL320 policy software overlay of EXT_FP_POLICY_6X",
    /* EXT_ACL320_TCAM           */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP, FeatureSpecific-FP.",
    /* EXT_ACL360_TCAM_DATA      */ "This view supports only READ, WRITE operations.\n For READs, this view returns only the data portion of entry, mask portion of entry read from ext_tcam is stored in onchip_mask_mem. For WRITEs, this view ASSUMES that mask partion of the entry was CORRECTLY PRELOADED earlier into onchip_mask_mem",
    /* EXT_ACL360_TCAM_DATA_IPV6_SHORT */ "ACL360_IPV6_SHORT Software overlay of EXT_ACL360_TCAM_DATA",
    /* EXT_ACL360_TCAM_MASK      */ "This view supports only READ, WRITE operations.\n Note: This is an on-chip memory so Response Word will NOT be returned.\n Note: READ, WRITE to this view DOES NOT RESULT in any accesses to ext_tcam.\n WRITE operation allows preloading of mask word into onchip_mask_mem, READ operation causes the contents of onchip_mask_mem to be returned",
    /* EXT_ACL360_TCAM_MASK_IPV6_SHORT */ "ACL360_TCAM_MASK Software overlay of EXT_ACL480_TCAM_MASK",
    /* EXT_ACL432_TCAM_DATA      */ "This view supports only READ, WRITE operations.\n For READs, this view returns only the data portion of entry, mask portion of entry read from ext_tcam is stored in onchip_mask_mem. For WRITEs, this view ASSUMES that mask partion of the entry was CORRECTLY PRELOADED earlier into onchip_mask_mem",
    /* EXT_ACL432_TCAM_DATA_IPV6_LONG */ "ACL432_IPV6_LONG Software overlay of EXT_ACL432_TCAM_DATA",
    /* EXT_ACL432_TCAM_DATA_L2_IPV4 */ "ACL432_L2_IPV4 Software overlay of EXT_ACL432_TCAM_DATA",
    /* EXT_ACL432_TCAM_DATA_L2_IPV6 */ "ACL432_L2_IPV6 Software overlay of EXT_ACL432_TCAM_DATA",
    /* EXT_ACL432_TCAM_MASK      */ "This view supports only READ, WRITE operations.\n Note: This is an on-chip memory so Response Word will NOT be returned.\n Note: READ, WRITE to this view DOES NOT RESULT in any accesses to ext_tcam.\n WRITE operation allows preloading of mask word into onchip_mask_mem, READ operation causes the contents of onchip_mask_mem to be returned",
    /* EXT_ACL432_TCAM_MASK_IPV6_LONG */ "ACL432_TCAM_MASK Software overlay of EXT_ACL480_TCAM_MASK",
    /* EXT_ACL432_TCAM_MASK_L2_IPV6 */ "ACL432_TCAM_MASK Software overlay of EXT_ACL480_TCAM_MASK",
    /* EXT_ACL480_FP_POLICY_1X   */ "ACL480 policy software overlay of EXT_FP_POLICY_1X",
    /* EXT_ACL480_FP_POLICY_2X   */ "ACL480 policy software overlay of EXT_FP_POLICY_2X",
    /* EXT_ACL480_FP_POLICY_3X   */ "ACL480 policy software overlay of EXT_FP_POLICY_3X",
    /* EXT_ACL480_FP_POLICY_4X   */ "ACL480 policy software overlay of EXT_FP_POLICY_4X",
    /* EXT_ACL480_FP_POLICY_6X   */ "ACL480 policy software overlay of EXT_FP_POLICY_6X",
    /* EXT_ACL480_TCAM_DATA      */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP, FeatureSpecific-FP.",
    /* EXT_ACL480_TCAM_MASK      */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP, FeatureSpecific-FP.",
    /* EXT_ACL80_FP_POLICY_1X    */ "ACL80 policy software overlay of EXT_FP_POLICY_1X",
    /* EXT_ACL80_FP_POLICY_2X    */ "ACL80 policy software overlay of EXT_FP_POLICY_2X",
    /* EXT_ACL80_FP_POLICY_3X    */ "ACL80 policy software overlay of EXT_FP_POLICY_3X",
    /* EXT_ACL80_FP_POLICY_4X    */ "ACL80 policy software overlay of EXT_FP_POLICY_4X",
    /* EXT_ACL80_FP_POLICY_6X    */ "ACL80 policy software overlay of EXT_FP_POLICY_6X",
    /* EXT_ACL80_TCAM            */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP, FeatureSpecific-FP.",
    /* EXT_DEFIP_DATA            */ "This view supports only READ, WRITE operations.",
    /* EXT_DEFIP_DATA_IPV4       */ "EXT_DEFIP_DATA_IPV4 Software overlay of EXT_DEFIP_DATA",
    /* EXT_DEFIP_DATA_IPV6_64    */ "EXT_DEFIP_DATA_IPV6_64 Software overlay of EXT_DEFIP_DATA",
    /* EXT_DEFIP_DATA_IPV6_128   */ "EXT_DEFIP_DATA_IPV6_128 Software overlay of EXT_DEFIP_DATA",
    /* EXT_DST_HBITS             */ "HW managed EXT_DST_HBITS table.",
    /* EXT_DST_HIT_BITS          */ "On-chip dst_hit bits for ext tables.\n Note: this view requires ext_tcam_phy_adr\n Note: this view does not take into account HBIT_EN in ET_PA_XLAT table",
    /* EXT_DST_HIT_BITS_IPV4     */ "EXT_DST_HIT_BITS_IPV4 Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV4_UCAST */ "EXT_DST_HIT_BITS_IPV4_UCAST Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV4_UCAST_WIDE */ "EXT_DST_HIT_BITS_IPV4_UCAST_WIDE Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV6_64  */ "EXT_DST_HIT_BITS_IPV6_64 Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV6_128 */ "EXT_DST_HIT_BITS_IPV6_128 Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV6_128_UCAST */ "EXT_DST_HIT_BITS_IPV6_128_UCAST Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV6_128_UCAST_WIDE */ "EXT_DST_HIT_BITS_IPV6_128_UCAST_WIDE Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_L2       */ "EXT_DST_HIT_BITS_L2 Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_L2_WIDE  */ "EXT_DST_HIT_BITS_L2_WIDE Software overlay of EXT_DST_HIT_BITS",
    /* EXT_FP_CNTR               */ "This view supports only READ, WRITE operations.",
    /* EXT_FP_CNTR8              */ "READ, WRITE to this view provides access to 8 consecutive ext_fp_counters\n If resultant counter address in ext_sram does not fall on boundary of 8 x 72bits, the reads will wrap-around in a block of 8 counters",
    /* EXT_FP_CNTR8_ACL144_IPV4  */ "EXT_FP_CNTR8_ACL144_IPV4 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL144_IPV6  */ "EXT_FP_CNTR8_ACL144_IPV6 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL144_L2    */ "EXT_FP_CNTR8_ACL144_L2 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR8_ACL288_IPV4  */ "EXT_FP_CNTR8_ACL288_IPV4 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL288_L2    */ "EXT_FP_CNTR8_ACL288_L2 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL360_IPV6_SHORT */ "EXT_FP_CNTR8_ACL360_IPV6_SHORT Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL432_IPV6_LONG */ "EXT_FP_CNTR8_ACL432_IPV6_LONG Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL432_L2_IPV4 */ "EXT_FP_CNTR8_ACL432_L2_IPV4 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL432_L2_IPV6 */ "EXT_FP_CNTR8_ACL432_L2_IPV6 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR_ACL144_IPV4   */ "EXT_FP_CNTR_ACL144_IPV4 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL144_IPV6   */ "EXT_FP_CNTR_ACL144_IPV6 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL144_L2     */ "EXT_FP_CNTR_ACL144_L2 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL288_IPV4   */ "EXT_FP_CNTR_ACL288_IPV4 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL288_L2     */ "EXT_FP_CNTR_ACL288_L2 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL360_IPV6_SHORT */ "EXT_FP_CNTR_ACL360_IPV6_SHORT Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL432_IPV6_LONG */ "EXT_FP_CNTR_ACL432_IPV6_LONG Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL432_L2_IPV4 */ "EXT_FP_CNTR_ACL432_L2_IPV4 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL432_L2_IPV6 */ "EXT_FP_CNTR_ACL432_L2_IPV6 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_POLICY             */ "This view supports only READ, WRITE operations.",
    /* EXT_FP_POLICY_1X          */ "External FP Policy. 35 bit.",
    /* EXT_FP_POLICY_2X          */ "External FP Policy, 70 bits data",
    /* EXT_FP_POLICY_3X          */ "External FP Policy. 105 bit data",
    /* EXT_FP_POLICY_4X          */ "External FP Policy, 140 bit data",
    /* EXT_FP_POLICY_6X          */ "External FP Policy, 210 bit data",
    /* EXT_FP_POLICY_ACL144_IPV4 */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL144_IPV6 */ "EXT_FP_POLICY_ACL144_IPV6 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL144_IPV4_1X */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL144_IPV4_2X */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL144_IPV4_3X */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL144_IPV4_4X */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL144_IPV4_6X */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL144_IPV6_1X */ "EXT_FP_POLICY_ACL144_IPV6_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL144_IPV6_2X */ "EXT_FP_POLICY_ACL144_IPV6_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL144_IPV6_3X */ "EXT_FP_POLICY_ACL144_IPV6_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL144_IPV6_4X */ "EXT_FP_POLICY_ACL144_IPV6_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL144_IPV6_6X */ "EXT_FP_POLICY_ACL144_IPV6_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL144_L2   */ "EXT_FP_POLICY_ACL144_L2 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL144_L2_1X */ "EXT_FP_POLICY_ACL144_L2_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL144_L2_2X */ "EXT_FP_POLICY_ACL144_L2_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL144_L2_3X */ "EXT_FP_POLICY_ACL144_L2_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL144_L2_4X */ "EXT_FP_POLICY_ACL144_L2_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL144_L2_6X */ "EXT_FP_POLICY_ACL144_L2_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL288_IPV4 */ "EXT_FP_POLICY_ACL288_IPV4 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL288_IPV4_1X */ "EXT_FP_POLICY_ACL288_IPV4_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL288_IPV4_2X */ "EXT_FP_POLICY_ACL288_IPV4_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL288_IPV4_3X */ "EXT_FP_POLICY_ACL288_IPV4_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL288_IPV4_4X */ "EXT_FP_POLICY_ACL288_IPV4_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL288_IPV4_6X */ "EXT_FP_POLICY_ACL288_IPV4_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL288_L2   */ "EXT_FP_POLICY_ACL288_L2 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL288_L2_1X */ "EXT_FP_POLICY_ACL288_L2_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL288_L2_2X */ "EXT_FP_POLICY_ACL288_L2_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL288_L2_3X */ "EXT_FP_POLICY_ACL288_L2_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL288_L2_4X */ "EXT_FP_POLICY_ACL288_L2_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL288_L2_6X */ "EXT_FP_POLICY_ACL288_L2_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT */ "EXT_FP_POLICY_ACL360_IPV6_SHORT Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT_1X */ "EXT_FP_POLICY_ACL360_IPV6_SHORT_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT_2X */ "EXT_FP_POLICY_ACL360_IPV6_SHORT_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT_3X */ "EXT_FP_POLICY_ACL360_IPV6_SHORT_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT_4X */ "EXT_FP_POLICY_ACL360_IPV6_SHORT_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT_6X */ "EXT_FP_POLICY_ACL360_IPV6_SHORT_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG */ "EXT_FP_POLICY_ACL432_IPV6_LONG Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG_1X */ "EXT_FP_POLICY_ACL432_IPV6_LONG_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG_2X */ "EXT_FP_POLICY_ACL432_IPV6_LONG_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG_3X */ "EXT_FP_POLICY_ACL432_IPV6_LONG_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG_4X */ "EXT_FP_POLICY_ACL432_IPV6_LONG_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG_6X */ "EXT_FP_POLICY_ACL432_IPV6_LONG_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL432_L2_IPV4 */ "EXT_FP_POLICY_ACL432_L2_IPV4 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL432_L2_IPV6 */ "EXT_FP_POLICY_ACL432_L2_IPV6 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL432_L2_IPV4_1X */ "EXT_FP_POLICY_ACL432_L2_IPV4_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL432_L2_IPV4_2X */ "EXT_FP_POLICY_ACL432_L2_IPV4_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL432_L2_IPV4_3X */ "EXT_FP_POLICY_ACL432_L2_IPV4_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL432_L2_IPV4_4X */ "EXT_FP_POLICY_ACL432_L2_IPV4_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL432_L2_IPV4_6X */ "EXT_FP_POLICY_ACL432_L2_IPV4_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL432_L2_IPV6_1X */ "EXT_FP_POLICY_ACL432_L2_IPV6_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL432_L2_IPV6_2X */ "EXT_FP_POLICY_ACL432_L2_IPV6_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL432_L2_IPV6_3X */ "EXT_FP_POLICY_ACL432_L2_IPV6_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL432_L2_IPV6_4X */ "EXT_FP_POLICY_ACL432_L2_IPV6_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL432_L2_IPV6_6X */ "EXT_FP_POLICY_ACL432_L2_IPV6_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_IFP_ACTION_PROFILE    */ "This table expands a 7-bit pointer from the external ACL lookup into the profiled actions described in the fields of this table. These actions are then resolved along with the internal IFP actions. FeatureSpecific-Ethernet",
    /* EXT_IPV4_DEFIP            */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV4_DEFIP_TCAM       */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV4_TCAM             */ "TCAM only view for EXT_IPV4_UCAST, EXT_IPV4_UCAST_WIDE, EXT_IPV4_DEFIP",
    /* EXT_IPV4_UCAST            */ "Unified view with EXT_L3_UCAST_DATA and EXT_IPV4_TCAM",
    /* EXT_IPV4_UCAST_TCAM       */ "EXT_IPV4_UCAST_TCAM Software overlay of EXT_IPV4_TCAM",
    /* EXT_IPV4_UCAST_WIDE       */ "Unified view with EXT_L3_UCAST_DATA_WIDE and EXT_IPV4_TCAM",
    /* EXT_IPV4_UCAST_WIDE_TCAM  */ "EXT_IPV4_UCAST_WIDE_TCAM Software overlay of EXT_IPV4_TCAM",
    /* EXT_IPV6_128_DEFIP        */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV6_128_DEFIP_TCAM   */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV6_128_TCAM         */ "TCAM view for EXT_IPV6_128_UCAST, EXT_IPV6_128_UCAST_WIDE and EXT_IPV6_128_DEFIP",
    /* EXT_IPV6_128_UCAST        */ "Unified view with EXT_L3_UCAST_DATA and EXT_IPV6_128_TCAM",
    /* EXT_IPV6_128_UCAST_TCAM   */ "EXT_IPV6_128_UCAST_TCAM Software overlay of EXT_IPV6_128_TCAM",
    /* EXT_IPV6_128_UCAST_WIDE   */ "Unified view with EXT_L3_UCAST_DATA_WIDE and EXT_IPV6_128_TCAM",
    /* EXT_IPV6_128_UCAST_WIDE_TCAM */ "EXT_IPV6_128_UCAST_WIDE_TCAM Software overlay of EXT_IPV6_128_TCAM",
    /* EXT_IPV6_64_DEFIP         */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV6_64_DEFIP_TCAM    */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV6_64_TCAM          */ "TCAM only view for EXT_IPV6_64_DEFIP",
    /* EXT_L2_ENTRY              */ "This view supports only INSERT, DELETE, LOOKUP operations. 72b Local Mask field in TCAM is implicitly {11'h7FF, 61'h0}.\n Note: DELETE operation for this table only results in the entry being marked FREE and not to be INVALIDATED",
    /* EXT_L2_ENTRY_1            */ "EXT_L2_ENTRY_1, Single base entry views. FeatureSpecific-Ethernet.",
    /* EXT_L2_ENTRY_2            */ "EXT_L2_ENTRY_2, Single base entry views. FeatureSpecific-Ethernet.",
    /* EXT_L2_ENTRY_DATA         */ "This view supports only READ, WRITE operations and is intended for debug purposes.",
    /* EXT_L2_ENTRY_DATA_ONLY    */ "EXT_L2_ENTRY_DATA_ONLY.",
    /* EXT_L2_ENTRY_DATA_ONLY_WIDE */ "EXT_L2_ENTRY_DATA_ONLY_WIDE.",
    /* EXT_L2_ENTRY_TCAM         */ "This view supports only READ, WRITE operations and is intended for debug purposes.",
    /* EXT_L2_ENTRY_TCAM_WIDE    */ "EXT_L2_ENTRY_TCAM_WIDE Software overlay of EXT_L2_ENTRY_TCAM",
    /* EXT_L2_MOD_FIFO           */ "Format of entry in ext_L2MODFIFO\n This table supports FIFO_POP command. FIFO_PUSH, MEM_RD, MEM_WR are supported for debug only. The format of entry here is also the format of sbus_rsp for LOOKUP, INSERT, DELETE directed to EXT_L2_ENTRY table",
    /* EXT_L3_UCAST_DATA         */ "Unicast data for IPV4, IPV6",
    /* EXT_L3_UCAST_DATA_IPV4    */ "EXT_L3_UCAST_DATA_IPV4 Software overlay of EXT_L3_UCAST_DATA",
    /* EXT_L3_UCAST_DATA_IPV6_128 */ "EXT_L3_UCAST_DATA_IPV6_128 Software overlay of EXT_L3_UCAST_DATA",
    /* EXT_L3_UCAST_DATA_WIDE    */ "Unicast data for IPV4, IPV6",
    /* EXT_L3_UCAST_DATA_WIDE_IPV4 */ "EXT_L3_UCAST_DATA_WIDE_IPV4 Software overlay of EXT_L3_UCAST_DATA_WIDE",
    /* EXT_L3_UCAST_DATA_WIDE_IPV6_128 */ "EXT_L3_UCAST_DATA_WIDE_IPV6_128 Software overlay of EXT_L3_UCAST_DATA_WIDE",
    /* EXT_LOC_SRC_HBITS         */ "HW managed EXT_LOC_SRC_HBITS table.",
    /* EXT_LOC_SRC_HIT_BITS_L2   */ "EXT_LOC_SRC_HIT_BITS_L2 Software overlay of EXT_LOC_SRC_HBITS",
    /* EXT_LOC_SRC_HIT_BITS_L2_WIDE */ "EXT_LOC_SRC_HIT_BITS_L2_WIDE Software overlay of EXT_LOC_SRC_HBITS",
    /* EXT_SRC_HBITS             */ "HW managed EXT_SRC_HBITS table.",
    /* EXT_SRC_HIT_BITS          */ "On-chip src_hit bits for ext tables.\n Note: this view requires ext_tcam_phy_adr\n Note: this view does not take into account HBIT_EN in ET_PA_XLAT table",
    /* EXT_SRC_HIT_BITS_IPV4     */ "EXT_SRC_HIT_BITS_IPV4 Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV4_UCAST */ "EXT_SRC_HIT_BITS_IPV4_UCAST Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV4_UCAST_WIDE */ "EXT_SRC_HIT_BITS_IPV4_UCAST_WIDE Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV6_64  */ "EXT_SRC_HIT_BITS_IPV6_64 Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV6_128 */ "EXT_SRC_HIT_BITS_IPV6_128 Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV6_128_UCAST */ "EXT_SRC_HIT_BITS_IPV6_128_UCAST Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV6_128_UCAST_WIDE */ "EXT_SRC_HIT_BITS_IPV6_128_UCAST_WIDE Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_L2       */ "EXT_SRC_HIT_BITS_L2 Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_L2_WIDE  */ "EXT_SRC_HIT_BITS_L2_WIDE Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_TCAM_VBIT             */ "ext_tcam Vbit view",
    /* EXT_TCAM_VBIT_ACL80       */ "EXT_TCAM_VBIT_ACL80 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_ACL160      */ "EXT_TCAM_VBIT_ACL160 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_ACL320      */ "EXT_TCAM_VBIT_ACL320 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_ACL480      */ "EXT_TCAM_VBIT_ACL480 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_DEFIP_IPV4  */ "EXT_TCAM_VBIT_DEFIP_IPV4 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_DEFIP_IPV6_64 */ "EXT_TCAM_VBIT_DEFIP_IPV6_64 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_DEFIP_IPV6_128 */ "EXT_TCAM_VBIT_DEFIP_IPV6_128 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_IPV4_UCAST  */ "EXT_TCAM_VBIT_IPV4_UCAST Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_IPV4_UCAST_WIDE */ "EXT_TCAM_VBIT_IPV4_UCAST_WIDE Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_IPV6_128_UCAST */ "EXT_TCAM_VBIT_IPV6_128_UCAST Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_IPV6_128_UCAST_WIDE */ "EXT_TCAM_VBIT_IPV6_128_UCAST_WIDE Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_L2_ENTRY_1  */ "EXT_TCAM_VBIT_L2_ENTRY_1 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_L2_ENTRY_2  */ "EXT_TCAM_VBIT_L2_ENTRY_2 Software overlay of EXT_TCAM_VBIT",
    /* FBM                       */ "",
    /* FCOE_HOP_COUNT_FN         */ "FCOE hop count to FN mapping table",
    /* FCR_EFMSM                 */ "",
    /* FCR_EFMS_SOURCE_PIPE      */ "",
    /* FCR_FCR_CRM_A             */ "",
    /* FCR_FCR_CRM_B             */ "",
    /* FC_CREDITS                */ "This table contains credits for each FIFO in the FC.",
    /* FC_HEADER_TYPE            */ "FCoE Header Type.",
    /* FC_MAP_PROFILE            */ "FC MAP",
    /* FDA_FDA_MC                */ "",
    /* FDF                       */ "",
    /* FDM                       */ "",
    /* FDTCTL                    */ "",
    /* FDTDATA                   */ "",
    /* FDT_IN_BAND_MEM           */ "",
    /* FDT_IPT_CTRL_FIFO         */ "",
    /* FDT_IPT_MESH_MC           */ "",
    /* FDT_IRE_TDM_MASKS         */ "",
    /* FDT_MEM_100000            */ "",
    /* FECENTRY0                 */ "",
    /* FECENTRY1                 */ "",
    /* FECENTRYACCESSED0         */ "",
    /* FECENTRYACCESSED1         */ "",
    /* FECENTRYDEFAULT           */ "",
    /* FECENTRYETHORTRILL        */ "",
    /* FECENTRYGENERAL           */ "",
    /* FECENTRYIP                */ "",
    /* FECSUPERENTRY             */ "",
    /* FEM0_4B_1STPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM0_4B_1STPASSMAPINDEXTABLE */ "",
    /* FEM0_4B_1STPASSMAPTABLE   */ "",
    /* FEM0_4B_1STPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM0_4B_2NDPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM0_4B_2NDPASSMAPINDEXTABLE */ "",
    /* FEM0_4B_2NDPASSMAPTABLE   */ "",
    /* FEM0_4B_2NDPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM1_4B_1STPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM1_4B_1STPASSMAPINDEXTABLE */ "",
    /* FEM1_4B_1STPASSMAPTABLE   */ "",
    /* FEM1_4B_1STPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM1_4B_2NDPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM1_4B_2NDPASSMAPINDEXTABLE */ "",
    /* FEM1_4B_2NDPASSMAPTABLE   */ "",
    /* FEM1_4B_2NDPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM2_14B_1STPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM2_14B_1STPASSMAPINDEXTABLE */ "",
    /* FEM2_14B_1STPASSMAPTABLE  */ "",
    /* FEM2_14B_1STPASSOFFSETTABLE */ "",
    /* FEM2_14B_1STPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM2_14B_2NDPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM2_14B_2NDPASSMAPINDEXTABLE */ "",
    /* FEM2_14B_2NDPASSMAPTABLE  */ "",
    /* FEM2_14B_2NDPASSOFFSETTABLE */ "",
    /* FEM2_14B_2NDPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM3_14B_1STPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM3_14B_1STPASSMAPINDEXTABLE */ "",
    /* FEM3_14B_1STPASSMAPTABLE  */ "",
    /* FEM3_14B_1STPASSOFFSETTABLE */ "",
    /* FEM3_14B_1STPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM3_14B_2NDPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM3_14B_2NDPASSMAPINDEXTABLE */ "",
    /* FEM3_14B_2NDPASSMAPTABLE  */ "",
    /* FEM3_14B_2NDPASSOFFSETTABLE */ "",
    /* FEM3_14B_2NDPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM4_14B_1STPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM4_14B_1STPASSMAPINDEXTABLE */ "",
    /* FEM4_14B_1STPASSMAPTABLE  */ "",
    /* FEM4_14B_1STPASSOFFSETTABLE */ "",
    /* FEM4_14B_1STPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM4_14B_2NDPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM4_14B_2NDPASSMAPINDEXTABLE */ "",
    /* FEM4_14B_2NDPASSMAPTABLE  */ "",
    /* FEM4_14B_2NDPASSOFFSETTABLE */ "",
    /* FEM4_14B_2NDPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM5_17B_1STPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM5_17B_1STPASSMAPINDEXTABLE */ "",
    /* FEM5_17B_1STPASSMAPTABLE  */ "",
    /* FEM5_17B_1STPASSOFFSETTABLE */ "",
    /* FEM5_17B_1STPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM5_17B_2NDPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM5_17B_2NDPASSMAPINDEXTABLE */ "",
    /* FEM5_17B_2NDPASSMAPTABLE  */ "",
    /* FEM5_17B_2NDPASSOFFSETTABLE */ "",
    /* FEM5_17B_2NDPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM6_17B_1STPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM6_17B_1STPASSMAPINDEXTABLE */ "",
    /* FEM6_17B_1STPASSMAPTABLE  */ "",
    /* FEM6_17B_1STPASSOFFSETTABLE */ "",
    /* FEM6_17B_1STPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM6_17B_2NDPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM6_17B_2NDPASSMAPINDEXTABLE */ "",
    /* FEM6_17B_2NDPASSMAPTABLE  */ "",
    /* FEM6_17B_2NDPASSOFFSETTABLE */ "",
    /* FEM6_17B_2NDPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM7_17B_1STPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM7_17B_1STPASSMAPINDEXTABLE */ "",
    /* FEM7_17B_1STPASSMAPTABLE  */ "",
    /* FEM7_17B_1STPASSOFFSETTABLE */ "",
    /* FEM7_17B_1STPASSPROGRAMRESOLVEDDATA */ "",
    /* FEM7_17B_2NDPASSKEYPROFILERESOLVEDDATA */ "",
    /* FEM7_17B_2NDPASSMAPINDEXTABLE */ "",
    /* FEM7_17B_2NDPASSMAPTABLE  */ "",
    /* FEM7_17B_2NDPASSOFFSETTABLE */ "",
    /* FEM7_17B_2NDPASSPROGRAMRESOLVEDDATA */ "",
    /* FF_FC_CONFIG              */ "contains the base and limit and en for each fifo",
    /* FF_FC_MEM_CONFIG          */ "contains per memory info",
    /* FIDCLASS_2FID             */ "",
    /* FIFO_GROUP_MAP_TABLE      */ "Configuration Map for Groups of Four FIFOs",
    /* FIFO_MAP_TABLE            */ "Configuration Map for all the FIFOs",
    /* FIFO_SHAPER_TABLE_0       */ "Parameters for the Min and Max Shapers used to shape the FIFOs 0-131",
    /* FIFO_SHAPER_TABLE_1       */ "Parameters for the Min and Max Shapers used to shape the FIFOs 132-263",
    /* FIFO_SHAPER_TABLE_2       */ "Parameters for the Min and Max Shapers used to shape the FIFOs 264-395",
    /* FIFO_SHAPER_TABLE_3       */ "Parameters for the Min and Max Shapers used to shape the FIFOs 396-527",
    /* FIFO_WERR_TABLE           */ "WERR parameters for for all the FIFOs",
    /* FILTERMATCHCOUNT          */ "Number of Pre-Crypto Filter Match Hits for each Rule",
    /* FLOOD_LEARN_MATCH_VLANS_PORT_A */ "VLAN Membership bitmap for PORT_A for FLOOD_LEARN.",
    /* FLOOD_LEARN_MATCH_VLANS_PORT_B */ "VLAN Membership bitmap for PORT_B for FLOOD_LEARN.",
    /* FLOW_CONTROL_BASE_TABLE   */ "Flow Control Base Table",
    /* FLOW_CONTROL_MAP_TABLE    */ "Flow Control Map Table",
    /* FLOW_CONTROL_STATE_TABLE  */ "Flow Control State Table",
    /* FLOW_CONTROL_TRANSLATE_TABLE */ "Flow Control Translate Table",
    /* FLOW_DESCRIPTOR_MEMORY_STATIC */ "",
    /* FLOW_GROUP_MEMORY         */ "",
    /* FLOW_SUB_FLOW             */ "",
    /* FLOW_TO_FIP_MAPPING       */ "",
    /* FLOW_TO_QUEUE_MAPPING     */ "",
    /* FLPKEYPROGRAMMAP          */ "",
    /* FLUSCNT                   */ "",
    /* FLUSHDB                   */ "",
    /* FLUSH_PENDING             */ "This database contains the flush_pending state bit for each queue. Address = Queue[15:4], Bit = Queue[3:0]",
    /* FLWID                     */ "",
    /* FORCE_STATUS_MESSAGE      */ "",
    /* FP_COUNTER_TABLE          */ "COUNTER TABLE FOR THE FP",
    /* FP_COUNTER_TABLE_X        */ "COUNTER TABLE FOR THE FP in IPX. FeatureSpecific-FP",
    /* FP_COUNTER_TABLE_Y        */ "COUNTER TABLE FOR THE FP in IPY. FeatureSpecific-FP",
    /* FP_FLEX_KEY_SELECTOR      */ "Controls classid selection into HG header.",
    /* FP_GLOBAL_MASK_TCAM       */ "PORT BITMAP TCAM ENTRY FOR EACH IFP_TCAM ENTRY.",
    /* FP_GLOBAL_MASK_TCAM_X     */ "IPB view of the IFP_TCAM.",
    /* FP_GLOBAL_MASK_TCAM_Y     */ "IPB view of the IFP_TCAM.",
    /* FP_GM_FIELDS              */ "Fields view of IFP_GM TCAM.",
    /* FP_GM_FIELDS_X            */ "Fields view of IFP_GM TCAM.",
    /* FP_GM_FIELDS_Y            */ "Fields view of IFP_GM TCAM.",
    /* FP_HG_CLASSID_SELECT      */ "Controls classid selection into HG header.",
    /* FP_I2E_CLASSID_SELECT     */ "Selects one classid from IP tables to be passed to EP.",
    /* FP_METER_TABLE            */ "METER TABLE STRUCTURES FOR THE FP",
    /* FP_METER_TABLE_X          */ "METER TABLE STRUCTURES FOR THE FP in IPX. FeatureSpecific-FP",
    /* FP_METER_TABLE_Y          */ "METER TABLE STRUCTURES FOR THE FP in IPY. FeatureSpecific-FP",
    /* FP_POLICY_TABLE           */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP",
    /* FP_PORT_FIELD_SEL         */ "FIELD SELECT VALUE FOR EACH SLICE IN THE FP",
    /* FP_PORT_METER_MAP         */ "FP_PORT_METER_MAP TABLE STRUCTURES FOR THE FP, FeatureSpecific-FP",
    /* FP_RANGE_CHECK            */ "RANGE CHECK VALUES FOR FP",
    /* FP_SC_BCAST_METER_TABLE   */ "SC METER TABLE STRUCTURES FOR THE FP",
    /* FP_SC_DLF_METER_TABLE     */ "SC METER TABLE STRUCTURES FOR THE FP",
    /* FP_SC_MCAST_METER_TABLE   */ "SC METER TABLE STRUCTURES FOR THE FP",
    /* FP_SC_METER_TABLE         */ "SC METER TABLE STRUCTURES FOR THE FP",
    /* FP_SLICE_ENTRY_PORT_SEL   */ "ENTRIES ENABLED FOR EACH SOURCE PORT FOR EACH SLICE. The index for this table is created by concatenating {Ingress Port(6bits) and Slice Number(3bits)}.",
    /* FP_SLICE_KEY_CONTROL      */ "SLICE KEY GENERATION CONTROLS FOR IFP, FeatureSpecific-FP",
    /* FP_SLICE_MAP              */ "SLICE MAPPING CONTROLS FOR IFP",
    /* FP_STORM_CONTROL_METERS   */ "STORM CONTROL METER TABLE STRUCTURES FOR THE FP, FeatureSpecific-FP",
    /* FP_STORM_CONTROL_METERS_X */ "STORM CONTROL METER TABLE STRUCTURES FOR THE FP, FeatureSpecific-FP.",
    /* FP_STORM_CONTROL_METERS_Y */ "STORM CONTROL METER TABLE STRUCTURES FOR THE FP, FeatureSpecific-FP.",
    /* FP_TCAM                   */ "TCAM FOR FP",
    /* FP_TCAM_PLUS_POLICY       */ "TCAM AND POLICY TABLE VIEW FOR FP",
    /* FP_TCAM_X                 */ "FP TCAM in IPX",
    /* FP_TCAM_Y                 */ "FP TCAM in IPY",
    /* FP_UDF_OFFSET             */ "FP UDF offset table",
    /* FP_UDF_TCAM               */ "FP UDF tcam table, FeatureSpecific-FP",
    /* FQPNIFPORTMUX             */ "",
    /* FRAME_PARSING             */ "This database contains the frame parsing records.",
    /* FREEPCBMEMORY             */ "",
    /* FSM                       */ "",
    /* FSMEXT                    */ "",
    /* FSRD_FSRD_WL_EXT_MEM      */ "",
    /* FT_AGE_PROFILE            */ "DPI Flow Tracker. Age profile for inactivity timeout",
    /* FT_DST_LAG_CONFIG         */ "DPI Flow Tracker L4 destination lag enable",
    /* FT_DST_PORT_CONFIG        */ "DPI Flow Tracker L4 destination port enable",
    /* FT_EOP_TBL                */ "DPI Flow Tracker. stores data between sop/eop cells",
    /* FT_EXPORT_CNTR_ONLY       */ "DPI Flow Tracker Export Fifo counters",
    /* FT_EXPORT_DATA_ONLY       */ "Flow tracker export fifo.",
    /* FT_EXPORT_FIFO            */ "DPI Flow Tracker Export Fifo",
    /* FT_L4PORT                 */ "DPI Flow Tracker L4 Port filtering",
    /* FT_POLICY                 */ "Flow tracker policy table.",
    /* FT_SESSION                */ "DPI Flow Tracker Session Table",
    /* FT_SESSION_IPV6           */ "DPI Flow Tracker Session Table",
    /* FWDACTPROFILE             */ "",
    /* GLOBALMETERPROFILES       */ "",
    /* GLOBALMETERSTATUS         */ "",
    /* GLOBAL_STATS              */ "This database contain the QM global counters. General address format = { DEQ | ENQ,  CNTRID, DP }",
    /* GPORT_EHG_RX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* GPORT_EHG_RX_TUNNEL_MASK  */ "Embedded Higig Rx tunnel data memory",
    /* GPORT_EHG_TX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* GROUP_MAX_SHAPER_TABLE    */ "The entries in this table are the parameters for the Group Max Shaper",
    /* GROUP_MEMBER_TABLE        */ "Group member Information for FIFOs",
    /* GTP_PORT_TABLE            */ "GTP_PORT_TABLE.",
    /* HEADERPROFILE             */ "",
    /* HEAD_LLA                  */ "This database contains the queue head pointers",
    /* HGT_DLB_CONTROL           */ "HG-Trunk DLB Control.",
    /* HG_TRUNK_BITMAP           */ "HiGig Trunk [0-31] Membership Bitmap.",
    /* HG_TRUNK_FAILOVER_ENABLE  */ "HiGig Trunk Failover Enable Register.",
    /* HG_TRUNK_FAILOVER_SET     */ "Higig Trunk Failover Set Table",
    /* HG_TRUNK_GROUP            */ "HG Trunk group table.",
    /* HG_TRUNK_MEMBER           */ "Contains the list of all HG Trunk members.",
    /* HIGHDYNAMICA              */ "",
    /* HIGHDYNAMICB              */ "",
    /* HIGIG_TRUNK_CONTROL       */ "HiGig Trunk Control Register.",
    /* HPFMEM                    */ "",
    /* HPTE_DQUEUE_LOOKUP        */ "This is the HPTE DQUEUE lookup table for Header Record Assembly",
    /* HPTE_EG_DEQ_RESPONSE      */ "This is the HPTE Egress Deq Response FIFO",
    /* HPTE_EG_PREFETCH_FIFO     */ "This is the HPTE Egress Prefetch FIFO",
    /* HPTE_IG_DEQ_RESPONSE      */ "This is the HPTE PB Response FIFO",
    /* HPTE_IG_PREFETCH_FIFO     */ "This is the HPTE Ingress Prefetch FIFO",
    /* HPTE_QUEUE_CONTEXT        */ "This is the HPTE Queue Context Memory to support replication",
    /* HPTE_WDRR_CREDIT_CFG      */ "This is the HPTE WDRR Credit Configuration Database",
    /* HPTE_WDRR_STATE           */ "This is the HPTE WDRR Working Credit State Database",
    /* HR_SCHEDULER_CONFIGURATION */ "",
    /* HSP_SCHED_L0_ACCUM_COMP_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L0_ACCUM_COMP_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_SCHED_L0_CREDIT_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L0_CREDIT_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_SCHED_L1_ACCUM_COMP_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L1_ACCUM_COMP_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_SCHED_L1_CREDIT_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L1_CREDIT_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_SCHED_L2_ACCUM_COMP_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L2_ACCUM_COMP_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_SCHED_L2_CREDIT_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L2_CREDIT_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_UCQ_FREE              */ "HSP UCQ Structure Free List and Next Pointer Memory",
    /* HSP_UCQ_UCQE              */ "HSP Unicast QEntry memory. Contains FIFO block linked lists for each HSP UC queue",
    /* IARB_ING_PHYSICAL_PORT    */ "Per Physical port OLP Enable Control",
    /* IARB_MAIN_TDM             */ "TDM TABLE configuration, Set to 0, select port_group5. Set to 1, select port_group4. Set to 2, select extra slot.",
    /* IARB_MAIN_TDM_X           */ "TDM TABLE configuration, Set to 0, select PGW0. Set to 1, select PGW1. Set to 2, select extra slot.",
    /* IARB_MAIN_TDM_Y           */ "TDM TABLE configuration, Set to 0, select PGW0. Set to 1, select PGW1. Set to 2, select extra slot.",
    /* IARB_TDM_TABLE            */ "Arbiter TDM Table",
    /* IARB_TDM_TABLE_1          */ "Arbiter TDM Table - 1",
    /* IBOD_MOOSE_CLP0_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_CLP0_DATA_MEM_0 */ "moose dmem data",
    /* IBOD_MOOSE_CLP0_DATA_MEM_1 */ "moose dmem data",
    /* IBOD_MOOSE_CLP1_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_CLP1_DATA_MEM_0 */ "moose dmem data",
    /* IBOD_MOOSE_CLP1_DATA_MEM_1 */ "moose dmem data",
    /* IBOD_MOOSE_CLP2_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_CLP2_DATA_MEM_0 */ "moose dmem data",
    /* IBOD_MOOSE_CLP2_DATA_MEM_1 */ "moose dmem data",
    /* IBOD_MOOSE_XLP0_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XLP0_DATA_MEM  */ "moose dmem data",
    /* IBOD_MOOSE_XLP1_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XLP1_DATA_MEM  */ "moose dmem data",
    /* IBOD_MOOSE_XTP0_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XTP0_DATA_MEM  */ "moose dmem data",
    /* IBOD_MOOSE_XTP1_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XTP1_DATA_MEM  */ "moose dmem data",
    /* IBOD_MOOSE_XTP2_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XTP2_DATA_MEM  */ "moose dmem data",
    /* IBOD_MOOSE_XTP3_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XTP3_DATA_MEM  */ "moose dmem data",
    /* ICONTROL_OPCODE_BITMAP    */ "Higig control packet's switching bitmap register.",
    /* IDF                       */ "",
    /* IDP0_DFIFO_0              */ "This database contains the IDP 0 Data FIFO 0.",
    /* IDP0_DFIFO_1              */ "This database contains the IDP 0 Data FIFO 1.",
    /* IDP0_EREQFIFO             */ "This database contains the IDP 0 ENQ REQ FIFO.",
    /* IDP0_ERESPFIFO            */ "This database contains the IDP 0 ENQ RESP FIFO. Please note the fields below are for every 4th word in FIFO - see RB Spec 5.1.4.4",
    /* IDP1_DFIFO_0              */ "This database contains the IDP 0 Data FIFO 0.",
    /* IDP1_DFIFO_1              */ "This database contains the IDP 0 Data FIFO 1.",
    /* IDP1_EREQFIFO             */ "This database contains the IDP 1 ENQ REQ FIFO.",
    /* IDP1_ERESPFIFO            */ "This database contains the IDP 1 ENQ RESP FIFO. Please note the fields below are for every 4th word in FIFO - see RB Spec 5.1.4.4",
    /* IDR_COMPLETE_PC           */ "",
    /* IDR_CONTEXT_COLOR         */ "",
    /* IDR_CONTEXT_MRU           */ "",
    /* IDR_CONTEXT_SIZE          */ "",
    /* IDR_COUNTERS              */ "",
    /* IDR_DBUFF_POINTER_CACHE_0 */ "",
    /* IDR_DBUFF_POINTER_CACHE_1 */ "",
    /* IDR_DBUFF_POINTER_CACHE_2 */ "",
    /* IDR_DBUFF_POINTER_CACHE_3 */ "",
    /* IDR_DBUFF_POINTER_CACHE_4 */ "",
    /* IDR_DBUFF_POINTER_CACHE_5 */ "",
    /* IDR_DBUFF_POINTER_CACHE_6 */ "",
    /* IDR_DBUFF_POINTER_CACHE_7 */ "",
    /* IDR_DBUFF_POINTER_CACHE_8 */ "",
    /* IDR_DBUFF_POINTER_CACHE_9 */ "",
    /* IDR_DRAM_BUFFER_TYPE      */ "",
    /* IDR_DROP_PRECEDENCE_MAPPING */ "",
    /* IDR_ETHERNET_METER_CONFIG */ "",
    /* IDR_ETHERNET_METER_PROFILES */ "",
    /* IDR_GLOBAL_METER_PROFILES */ "",
    /* IDR_GLOBAL_METER_STATUS   */ "",
    /* IDR_IRDB                  */ "",
    /* IDR_MCDA_DYNAMIC          */ "",
    /* IDR_MCDA_DYNAMIC_0        */ "",
    /* IDR_MCDA_DYNAMIC_1        */ "",
    /* IDR_MCDA_PCUC             */ "",
    /* IDR_MCDA_PRFCFG_0         */ "",
    /* IDR_MCDA_PRFCFG_FORMAT_0  */ "",
    /* IDR_MCDA_PRFCFG_FORMAT_1  */ "",
    /* IDR_MCDA_PRFSEL           */ "",
    /* IDR_MCDA_PRFSEL_0         */ "",
    /* IDR_MCDA_PRFSEL_1         */ "",
    /* IDR_MCDB_DYNAMIC          */ "",
    /* IDR_MCDB_DYNAMIC_0        */ "",
    /* IDR_MCDB_DYNAMIC_1        */ "",
    /* IDR_MCDB_PCUC             */ "",
    /* IDR_MCDB_PRFCFG_0         */ "",
    /* IDR_MCDB_PRFSEL           */ "",
    /* IDR_MCDB_PRFSEL_0         */ "",
    /* IDR_MCDB_PRFSEL_1         */ "",
    /* IDR_MEM_00000             */ "",
    /* IDR_MEM_10000             */ "",
    /* IDR_MEM_30000             */ "",
    /* IDR_MEM_40000             */ "",
    /* IDR_MEM_50000             */ "",
    /* IDR_MEM_60000             */ "",
    /* IDR_MEM_100000            */ "",
    /* IDR_MEM_110000            */ "",
    /* IDR_MEM_120000            */ "",
    /* IDR_MEM_140000            */ "",
    /* IDR_MEM_160000            */ "",
    /* IDR_MEM_170000            */ "",
    /* IDR_MEM_180000            */ "",
    /* IDR_MEM_200000            */ "",
    /* IDR_MEM_280000            */ "",
    /* IDR_MEM_1A0000            */ "",
    /* IDR_MEM_1B0000            */ "",
    /* IDR_MEM_1D0000            */ "",
    /* IDR_MEM_1E0000            */ "",
    /* IDR_MEM_1F0000            */ "",
    /* IDR_MEM_C0000             */ "",
    /* IDR_MEM_E0000             */ "",
    /* IDR_MRPS_0_IN_DP_MAPPING  */ "",
    /* IDR_MRPS_1_IN_DP_MAPPING  */ "",
    /* IDR_OCB_BUFFER_TYPE       */ "",
    /* IDR_PCD_MAP               */ "",
    /* IDR_QUEUE_IS_DRAM_ELIGIBLE */ "",
    /* IDR_QUEUE_IS_OCB_ELIGIBLE */ "",
    /* IDR_REASSEMBLY_0          */ "",
    /* IDR_REASSEMBLY_1          */ "",
    /* IDR_REASSEMBLY_2          */ "",
    /* IDR_REASSEMBLY_3          */ "",
    /* IFP_COS_MAP               */ "index by IFP__PROFILE_IDX(from IFP policy table), INT_PRI",
    /* IFP_PORT_FIELD_SEL        */ "FIELD SELECT VALUE FOR EACH SLICE IN THE FP",
    /* IFP_REDIRECTION_PROFILE   */ "Contains the number of members in each ECMP group.  Used with ECMP_POINTER to calulate index to L3_ECMP table",
    /* IHB_COE_CHANNEL_ID        */ "",
    /* IHB_CONSISTENT_HASHING_PROGRAM_SEL_TCAM */ "",
    /* IHB_CONSISTENT_HASHING_PROGRAM_VARIABLES */ "",
    /* IHB_CPU_TRAP_CODE_CTR     */ "",
    /* IHB_DBG_LAST_FEM          */ "",
    /* IHB_DBG_LAST_FES          */ "",
    /* IHB_DESTINATION_STATUS    */ "",
    /* IHB_DSCP_EXP_MAP          */ "",
    /* IHB_DSCP_EXP_REMARK       */ "",
    /* IHB_ELK_PAYLOAD_FORMAT    */ "",
    /* IHB_ETHERNET_OAM_OPCODE_MAP */ "",
    /* IHB_FEC_ECMP              */ "",
    /* IHB_FEC_ECMP_IS_STATEFUL  */ "",
    /* IHB_FEC_ENTRY             */ "",
    /* IHB_FEC_ENTRY_0           */ "",
    /* IHB_FEC_ENTRY_1           */ "",
    /* IHB_FEC_ENTRY_ACCESSED    */ "",
    /* IHB_FEC_ENTRY_ACCESSED_0  */ "",
    /* IHB_FEC_ENTRY_ACCESSED_1  */ "",
    /* IHB_FEC_ENTRY_FORMAT_A    */ "",
    /* IHB_FEC_ENTRY_FORMAT_A_0  */ "",
    /* IHB_FEC_ENTRY_FORMAT_A_1  */ "",
    /* IHB_FEC_ENTRY_FORMAT_B    */ "",
    /* IHB_FEC_ENTRY_FORMAT_B_0  */ "",
    /* IHB_FEC_ENTRY_FORMAT_B_1  */ "",
    /* IHB_FEC_ENTRY_FORMAT_C    */ "",
    /* IHB_FEC_ENTRY_FORMAT_C_0  */ "",
    /* IHB_FEC_ENTRY_FORMAT_C_1  */ "",
    /* IHB_FEC_ENTRY_FORMAT_NULL */ "",
    /* IHB_FEC_ENTRY_FORMAT_NULL_0 */ "",
    /* IHB_FEC_ENTRY_FORMAT_NULL_1 */ "",
    /* IHB_FEC_ENTRY_GENERAL     */ "",
    /* IHB_FEC_ENTRY_GENERAL_0   */ "",
    /* IHB_FEC_ENTRY_GENERAL_1   */ "",
    /* IHB_FEC_RPF_ECMP          */ "",
    /* IHB_FEC_SUPER_ENTRY       */ "",
    /* IHB_FEM_0_4B_MAP_TABLE    */ "",
    /* IHB_FEM_0_BIT_SELECT      */ "",
    /* IHB_FEM_0_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_10_16B_MAP_TABLE  */ "",
    /* IHB_FEM_10_19B_MAP_TABLE  */ "",
    /* IHB_FEM_10_BIT_SELECT     */ "",
    /* IHB_FEM_10_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_11_16B_MAP_TABLE  */ "",
    /* IHB_FEM_11_19B_MAP_TABLE  */ "",
    /* IHB_FEM_11_BIT_SELECT     */ "",
    /* IHB_FEM_11_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_12_16B_MAP_TABLE  */ "",
    /* IHB_FEM_12_19B_MAP_TABLE  */ "",
    /* IHB_FEM_12_BIT_SELECT     */ "",
    /* IHB_FEM_12_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_13_19B_MAP_TABLE  */ "",
    /* IHB_FEM_13_BIT_SELECT     */ "",
    /* IHB_FEM_13_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_14_19B_MAP_TABLE  */ "",
    /* IHB_FEM_14_24B_MAP_TABLE  */ "",
    /* IHB_FEM_14_BIT_SELECT     */ "",
    /* IHB_FEM_14_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_15_19B_MAP_TABLE  */ "",
    /* IHB_FEM_15_24B_MAP_TABLE  */ "",
    /* IHB_FEM_15_BIT_SELECT     */ "",
    /* IHB_FEM_15_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_1_4B_MAP_TABLE    */ "",
    /* IHB_FEM_1_BIT_SELECT      */ "",
    /* IHB_FEM_1_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_2_16B_MAP_TABLE   */ "",
    /* IHB_FEM_2_19B_MAP_TABLE   */ "",
    /* IHB_FEM_2_BIT_SELECT      */ "",
    /* IHB_FEM_2_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_3_16B_MAP_TABLE   */ "",
    /* IHB_FEM_3_19B_MAP_TABLE   */ "",
    /* IHB_FEM_3_BIT_SELECT      */ "",
    /* IHB_FEM_3_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_4_16B_MAP_TABLE   */ "",
    /* IHB_FEM_4_19B_MAP_TABLE   */ "",
    /* IHB_FEM_4_BIT_SELECT      */ "",
    /* IHB_FEM_4_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_5_19B_MAP_TABLE   */ "",
    /* IHB_FEM_5_BIT_SELECT      */ "",
    /* IHB_FEM_5_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_6_19B_MAP_TABLE   */ "",
    /* IHB_FEM_6_24B_MAP_TABLE   */ "",
    /* IHB_FEM_6_BIT_SELECT      */ "",
    /* IHB_FEM_6_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_7_19B_MAP_TABLE   */ "",
    /* IHB_FEM_7_24B_MAP_TABLE   */ "",
    /* IHB_FEM_7_BIT_SELECT      */ "",
    /* IHB_FEM_7_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_8_4B_MAP_TABLE    */ "",
    /* IHB_FEM_8_BIT_SELECT      */ "",
    /* IHB_FEM_8_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_9_4B_MAP_TABLE    */ "",
    /* IHB_FEM_9_BIT_SELECT      */ "",
    /* IHB_FEM_9_MAP_INDEX_TABLE */ "",
    /* IHB_FEM_BIT_SELECT        */ "",
    /* IHB_FEM_MAP_INDEX_TABLE   */ "",
    /* IHB_FIFO_0_8_TO_41        */ "",
    /* IHB_FIFO_1_8_TO_41        */ "",
    /* IHB_FIFO_2_8_TO_41        */ "",
    /* IHB_FIFO_DSP_1            */ "",
    /* IHB_FIFO_DSP_2            */ "",
    /* IHB_FIFO_ELK_RX           */ "",
    /* IHB_FIFO_ELK_TX           */ "",
    /* IHB_FIFO_FCR_PIPE_7       */ "",
    /* IHB_FIFO_FCR_PIPE_9       */ "",
    /* IHB_FIFO_KAPS_PASS_1      */ "",
    /* IHB_FIFO_KAPS_PASS_2      */ "",
    /* IHB_FIFO_LEM              */ "",
    /* IHB_FIFO_PARTIAL_LB       */ "",
    /* IHB_FIFO_PIPE_40_TO_48    */ "",
    /* IHB_FIFO_PIPE_40_TO_50    */ "",
    /* IHB_FIFO_PIPE_44_TO_50    */ "",
    /* IHB_FIFO_PIPE_8_TO_40     */ "",
    /* IHB_FIFO_TCAM_PASS_1      */ "",
    /* IHB_FIFO_TCAM_PASS_2      */ "",
    /* IHB_FLP_CONSISTENT_HASHING_KEY_GEN */ "",
    /* IHB_FLP_KEY_CONSTRUCTION  */ "",
    /* IHB_FLP_LOOKUPS           */ "",
    /* IHB_FLP_PROCESS           */ "",
    /* IHB_FLP_PROGRAM_KEY_GEN_VAR */ "",
    /* IHB_FLP_PROGRAM_SELECTION_CAM */ "",
    /* IHB_FLP_PTC_PROGRAM_SELECT */ "",
    /* IHB_FWD_ACT_PROFILE       */ "",
    /* IHB_HEADER_PROFILE        */ "",
    /* IHB_IEEE_1588_ACTION      */ "",
    /* IHB_IEEE_1588_IDENTIFICATION_CAM */ "",
    /* IHB_IN_PORT_KEY_GEN_VAR   */ "",
    /* IHB_IPP_LAG_TO_LAG_RANGE  */ "",
    /* IHB_ISEM_MANAGEMENT_REQUEST */ "",
    /* IHB_ISEM_STEP_TABLE       */ "",
    /* IHB_LB_PFC_PROFILE        */ "",
    /* IHB_LB_VECTOR_PROGRAM_MAP */ "",
    /* IHB_LPM                   */ "",
    /* IHB_LPM_2                 */ "",
    /* IHB_LPM_3                 */ "",
    /* IHB_LPM_4                 */ "",
    /* IHB_LPM_5                 */ "",
    /* IHB_LPM_6                 */ "",
    /* IHB_L_4_OPS               */ "",
    /* IHB_MEM_230000            */ "",
    /* IHB_MEM_250000            */ "",
    /* IHB_MEM_260000            */ "",
    /* IHB_MEM_270000            */ "",
    /* IHB_MEM_1040000           */ "",
    /* IHB_MEM_1050000           */ "",
    /* IHB_MEM_1520000           */ "",
    /* IHB_MEM_1530000           */ "",
    /* IHB_MEM_1640000           */ "",
    /* IHB_MEM_1650000           */ "",
    /* IHB_MEM_2200000           */ "",
    /* IHB_MEM_2300000           */ "",
    /* IHB_MEM_2400000           */ "",
    /* IHB_MEM_3600000           */ "",
    /* IHB_MEM_3700000           */ "",
    /* IHB_MEM_3800000           */ "",
    /* IHB_MEM_10E0000           */ "",
    /* IHB_MEM_10F0000           */ "",
    /* IHB_MEM_14A0000           */ "",
    /* IHB_MEM_15B0000           */ "",
    /* IHB_MEM_15C0000           */ "",
    /* IHB_MEM_16E0000           */ "",
    /* IHB_MEM_16F0000           */ "",
    /* IHB_MEM_1A00000           */ "",
    /* IHB_MEM_2C00000           */ "",
    /* IHB_MEM_2D00000           */ "",
    /* IHB_MEM_E00000            */ "",
    /* IHB_MEM_E10000            */ "",
    /* IHB_MEM_EA0000            */ "",
    /* IHB_MEM_F20000            */ "",
    /* IHB_MEM_F30000            */ "",
    /* IHB_MEM_FB0000            */ "",
    /* IHB_MEM_FC0000            */ "",
    /* IHB_MRR_ACT_PROFILE       */ "",
    /* IHB_MY_BFD_DIP            */ "",
    /* IHB_OAMA                  */ "",
    /* IHB_OAMB                  */ "",
    /* IHB_OAM_CHANNEL_TYPE      */ "",
    /* IHB_OAM_COUNTER_FIFO      */ "",
    /* IHB_OAM_MY_CFM_MAC        */ "",
    /* IHB_OEMA_ACDT_H_0         */ "",
    /* IHB_OEMA_ACDT_H_1         */ "",
    /* IHB_OEMA_ACDT_H_2         */ "",
    /* IHB_OEMA_ACDT_H_3         */ "",
    /* IHB_OEMA_ACDT_H_4         */ "",
    /* IHB_OEMA_ACDT_H_5         */ "",
    /* IHB_OEMA_ACDT_H_6         */ "",
    /* IHB_OEMA_ACDT_H_7         */ "",
    /* IHB_OEMA_KEYT_H_0         */ "",
    /* IHB_OEMA_KEYT_H_1         */ "",
    /* IHB_OEMA_KEYT_H_2         */ "",
    /* IHB_OEMA_KEYT_H_3         */ "",
    /* IHB_OEMA_KEYT_H_4         */ "",
    /* IHB_OEMA_KEYT_H_5         */ "",
    /* IHB_OEMA_KEYT_H_6         */ "",
    /* IHB_OEMA_KEYT_H_7         */ "",
    /* IHB_OEMA_MANAGEMENT_MEMORY_H_0 */ "",
    /* IHB_OEMA_MANAGEMENT_MEMORY_H_1 */ "",
    /* IHB_OEMA_MANAGEMENT_MEMORY_H_2 */ "",
    /* IHB_OEMA_MANAGEMENT_MEMORY_H_3 */ "",
    /* IHB_OEMA_MANAGEMENT_MEMORY_H_4 */ "",
    /* IHB_OEMA_MANAGEMENT_MEMORY_H_5 */ "",
    /* IHB_OEMA_MANAGEMENT_MEMORY_H_6 */ "",
    /* IHB_OEMA_MANAGEMENT_MEMORY_H_7 */ "",
    /* IHB_OEMA_MANAGEMENT_REQUEST */ "",
    /* IHB_OEMA_PLDT_H_0         */ "",
    /* IHB_OEMA_PLDT_H_1         */ "",
    /* IHB_OEMA_PLDT_H_2         */ "",
    /* IHB_OEMA_PLDT_H_3         */ "",
    /* IHB_OEMA_PLDT_H_4         */ "",
    /* IHB_OEMA_PLDT_H_5         */ "",
    /* IHB_OEMA_PLDT_H_6         */ "",
    /* IHB_OEMA_PLDT_H_7         */ "",
    /* IHB_OEMA_STEP_TABLE       */ "",
    /* IHB_OEMB_ACDT_H_0         */ "",
    /* IHB_OEMB_ACDT_H_1         */ "",
    /* IHB_OEMB_ACDT_H_2         */ "",
    /* IHB_OEMB_ACDT_H_3         */ "",
    /* IHB_OEMB_ACDT_H_4         */ "",
    /* IHB_OEMB_ACDT_H_5         */ "",
    /* IHB_OEMB_ACDT_H_6         */ "",
    /* IHB_OEMB_ACDT_H_7         */ "",
    /* IHB_OEMB_KEYT_H_0         */ "",
    /* IHB_OEMB_KEYT_H_1         */ "",
    /* IHB_OEMB_KEYT_H_2         */ "",
    /* IHB_OEMB_KEYT_H_3         */ "",
    /* IHB_OEMB_KEYT_H_4         */ "",
    /* IHB_OEMB_KEYT_H_5         */ "",
    /* IHB_OEMB_KEYT_H_6         */ "",
    /* IHB_OEMB_KEYT_H_7         */ "",
    /* IHB_OEMB_MANAGEMENT_MEMORY_H_0 */ "",
    /* IHB_OEMB_MANAGEMENT_MEMORY_H_1 */ "",
    /* IHB_OEMB_MANAGEMENT_MEMORY_H_2 */ "",
    /* IHB_OEMB_MANAGEMENT_MEMORY_H_3 */ "",
    /* IHB_OEMB_MANAGEMENT_MEMORY_H_4 */ "",
    /* IHB_OEMB_MANAGEMENT_MEMORY_H_5 */ "",
    /* IHB_OEMB_MANAGEMENT_MEMORY_H_6 */ "",
    /* IHB_OEMB_MANAGEMENT_MEMORY_H_7 */ "",
    /* IHB_OEMB_MANAGEMENT_REQUEST */ "",
    /* IHB_OEMB_PLDT_H_0         */ "",
    /* IHB_OEMB_PLDT_H_1         */ "",
    /* IHB_OEMB_PLDT_H_2         */ "",
    /* IHB_OEMB_PLDT_H_3         */ "",
    /* IHB_OEMB_PLDT_H_4         */ "",
    /* IHB_OEMB_PLDT_H_5         */ "",
    /* IHB_OEMB_PLDT_H_6         */ "",
    /* IHB_OEMB_PLDT_H_7         */ "",
    /* IHB_OEMB_STEP_TABLE       */ "",
    /* IHB_OPCODE_MAP_RX         */ "",
    /* IHB_OPCODE_MAP_TX         */ "",
    /* IHB_PATH_SELECT           */ "",
    /* IHB_PFC_INFO              */ "",
    /* IHB_PINFO_COUNTERS        */ "",
    /* IHB_PINFO_FER             */ "",
    /* IHB_PINFO_FLP             */ "",
    /* IHB_PINFO_LBP             */ "",
    /* IHB_PINFO_PMF             */ "",
    /* IHB_PMF_FEM_PROGRAM       */ "",
    /* IHB_PMF_FES_PROGRAM       */ "",
    /* IHB_PMF_INITIAL_KEY_2ND_PASS */ "",
    /* IHB_PMF_PASS_1_KEY_GEN_LSB */ "",
    /* IHB_PMF_PASS_1_KEY_GEN_MSB */ "",
    /* IHB_PMF_PASS_1_LOOKUP     */ "",
    /* IHB_PMF_PASS_2_KEY_GEN_LSB */ "",
    /* IHB_PMF_PASS_2_KEY_GEN_MSB */ "",
    /* IHB_PMF_PASS_2_KEY_UPDATE */ "",
    /* IHB_PMF_PASS_2_LOOKUP     */ "",
    /* IHB_PMF_PROGRAM_COUNTERS  */ "",
    /* IHB_PMF_PROGRAM_GENERAL   */ "",
    /* IHB_PMF_PROGRAM_SELECTION_CAM */ "",
    /* IHB_PROGRAM_KEY_GEN_VAR   */ "",
    /* IHB_PTC_INFO_PMF          */ "",
    /* IHB_PTC_KEY_GEN_VAR       */ "",
    /* IHB_SNOOP_ACTION          */ "",
    /* IHB_SNP_ACT_PROFILE       */ "",
    /* IHB_TCAM_ACCESS_PROFILE   */ "",
    /* IHB_TCAM_ACTION           */ "",
    /* IHB_TCAM_ACTION_0         */ "",
    /* IHB_TCAM_ACTION_1         */ "",
    /* IHB_TCAM_ACTION_2         */ "",
    /* IHB_TCAM_ACTION_3         */ "",
    /* IHB_TCAM_ACTION_4         */ "",
    /* IHB_TCAM_ACTION_5         */ "",
    /* IHB_TCAM_ACTION_6         */ "",
    /* IHB_TCAM_ACTION_7         */ "",
    /* IHB_TCAM_ACTION_8         */ "",
    /* IHB_TCAM_ACTION_9         */ "",
    /* IHB_TCAM_ACTION_10        */ "",
    /* IHB_TCAM_ACTION_11        */ "",
    /* IHB_TCAM_ACTION_12        */ "",
    /* IHB_TCAM_ACTION_13        */ "",
    /* IHB_TCAM_ACTION_14        */ "",
    /* IHB_TCAM_ACTION_15        */ "",
    /* IHB_TCAM_ACTION_16        */ "",
    /* IHB_TCAM_ACTION_17        */ "",
    /* IHB_TCAM_ACTION_18        */ "",
    /* IHB_TCAM_ACTION_19        */ "",
    /* IHB_TCAM_ACTION_20        */ "",
    /* IHB_TCAM_ACTION_21        */ "",
    /* IHB_TCAM_ACTION_22        */ "",
    /* IHB_TCAM_ACTION_23        */ "",
    /* IHB_TCAM_ACTION_24        */ "",
    /* IHB_TCAM_ACTION_25        */ "",
    /* IHB_TCAM_ACTION_26        */ "",
    /* IHB_TCAM_ACTION_27        */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_0 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_1 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_2 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_3 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_4 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_5 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_6 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_7 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_8 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_9 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_10 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_11 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_12 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_13 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_14 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_15 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_16 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_17 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_18 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_19 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_20 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_21 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_22 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_23 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_24 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_25 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_26 */ "",
    /* IHB_TCAM_ACTION_HIT_INDICATION_27 */ "",
    /* IHB_TCAM_BANK             */ "",
    /* IHB_TCAM_BANK_COMMAND     */ "",
    /* IHB_TCAM_BANK_REPLY       */ "",
    /* IHB_TCAM_ENTRY_PARITY     */ "",
    /* IHB_TCAM_ENTRY_PARITY_0   */ "",
    /* IHB_TCAM_ENTRY_PARITY_1   */ "",
    /* IHB_TCAM_ENTRY_PARITY_2   */ "",
    /* IHB_TCAM_ENTRY_PARITY_3   */ "",
    /* IHB_TCAM_ENTRY_PARITY_4   */ "",
    /* IHB_TCAM_ENTRY_PARITY_5   */ "",
    /* IHB_TCAM_ENTRY_PARITY_6   */ "",
    /* IHB_TCAM_ENTRY_PARITY_7   */ "",
    /* IHB_TCAM_ENTRY_PARITY_8   */ "",
    /* IHB_TCAM_ENTRY_PARITY_9   */ "",
    /* IHB_TCAM_ENTRY_PARITY_10  */ "",
    /* IHB_TCAM_ENTRY_PARITY_11  */ "",
    /* IHB_TCAM_ENTRY_PARITY_12  */ "",
    /* IHB_TCAM_ENTRY_PARITY_13  */ "",
    /* IHB_TCAM_PD_PROFILE       */ "",
    /* IHB_TIME_STAMP_FIFO       */ "",
    /* IHB_UNKNOWN_DA_MAP        */ "",
    /* IHB_VRF_CONFIG            */ "",
    /* IHP_ACTION_PROFILE_MPLS_VALUE */ "",
    /* IHP_BVD_CFG               */ "",
    /* IHP_BVD_FID_CLASS         */ "",
    /* IHP_BVD_TOPOLOGY_ID       */ "",
    /* IHP_CONSISTENT_HASHING_PROGRAM_SEL_TCAM */ "",
    /* IHP_DEFAULT_COUNTER_SOURCE */ "",
    /* IHP_DESIGNATED_VLAN_TABLE */ "",
    /* IHP_DSCP_EXP_MAP          */ "",
    /* IHP_DSCP_EXP_REMARK       */ "",
    /* IHP_ELK_PAYLOAD_FORMAT    */ "",
    /* IHP_ETHERNET_OAM_OPCODE_MAP */ "",
    /* IHP_FID_CLASS_2_FID       */ "",
    /* IHP_FIFO_10_TO_41         */ "",
    /* IHP_FIFO_8_TO_41          */ "",
    /* IHP_FIFO_LEM_1            */ "",
    /* IHP_FIFO_LEM_2            */ "",
    /* IHP_FIFO_LPM_1            */ "",
    /* IHP_FIFO_LPM_2            */ "",
    /* IHP_FIFO_LPM_PUBLIC_1     */ "",
    /* IHP_FIFO_LPM_PUBLIC_2     */ "",
    /* IHP_FIFO_OAM              */ "",
    /* IHP_FIFO_OID_1            */ "",
    /* IHP_FIFO_OID_2            */ "",
    /* IHP_FIFO_PROGRAM_ATTRIBUTES */ "",
    /* IHP_FIFO_TCAM             */ "",
    /* IHP_FLP_CONSISTENT_HASHING_KEY_GEN */ "",
    /* IHP_FLP_KEY_CONSTRUCTION_LSB */ "",
    /* IHP_FLP_KEY_CONSTRUCTION_MSB */ "",
    /* IHP_FLP_LOOKUPS           */ "",
    /* IHP_FLP_PROCESS           */ "",
    /* IHP_FLP_PROGRAM_KEY_GEN_VAR */ "",
    /* IHP_FLP_PROGRAM_SELECTION_CAM */ "",
    /* IHP_FLP_PTC_PROGRAM_SELECT */ "",
    /* IHP_IEEE_1588_ACTION      */ "",
    /* IHP_IEEE_1588_IDENTIFICATION_CAM */ "",
    /* IHP_INGRESS_VLAN_EDIT_COMMAND_TABLE */ "",
    /* IHP_IN_RIF_CONFIG_TABLE   */ "",
    /* IHP_ISA_ACDT_H_0          */ "",
    /* IHP_ISA_ACDT_H_1          */ "",
    /* IHP_ISA_ACDT_H_2          */ "",
    /* IHP_ISA_ACDT_H_3          */ "",
    /* IHP_ISA_ACDT_H_4          */ "",
    /* IHP_ISA_ACDT_H_5          */ "",
    /* IHP_ISA_ACDT_H_6          */ "",
    /* IHP_ISA_ACDT_H_7          */ "",
    /* IHP_ISA_KEYT_H_0          */ "",
    /* IHP_ISA_KEYT_H_1          */ "",
    /* IHP_ISA_KEYT_H_2          */ "",
    /* IHP_ISA_KEYT_H_3          */ "",
    /* IHP_ISA_KEYT_H_4          */ "",
    /* IHP_ISA_KEYT_H_5          */ "",
    /* IHP_ISA_KEYT_H_6          */ "",
    /* IHP_ISA_KEYT_H_7          */ "",
    /* IHP_ISA_MANAGEMENT_MEMORY_H_0 */ "",
    /* IHP_ISA_MANAGEMENT_MEMORY_H_1 */ "",
    /* IHP_ISA_MANAGEMENT_MEMORY_H_2 */ "",
    /* IHP_ISA_MANAGEMENT_MEMORY_H_3 */ "",
    /* IHP_ISA_MANAGEMENT_MEMORY_H_4 */ "",
    /* IHP_ISA_MANAGEMENT_MEMORY_H_5 */ "",
    /* IHP_ISA_MANAGEMENT_MEMORY_H_6 */ "",
    /* IHP_ISA_MANAGEMENT_MEMORY_H_7 */ "",
    /* IHP_ISA_MANAGEMENT_REQUEST */ "",
    /* IHP_ISA_PLDT_H_0          */ "",
    /* IHP_ISA_PLDT_H_1          */ "",
    /* IHP_ISA_PLDT_H_2          */ "",
    /* IHP_ISA_PLDT_H_3          */ "",
    /* IHP_ISA_PLDT_H_4          */ "",
    /* IHP_ISA_PLDT_H_5          */ "",
    /* IHP_ISA_PLDT_H_6          */ "",
    /* IHP_ISA_PLDT_H_7          */ "",
    /* IHP_ISA_STEP_TABLE        */ "",
    /* IHP_ISB_ACDT_H_0          */ "",
    /* IHP_ISB_ACDT_H_1          */ "",
    /* IHP_ISB_ACDT_H_2          */ "",
    /* IHP_ISB_ACDT_H_3          */ "",
    /* IHP_ISB_ACDT_H_4          */ "",
    /* IHP_ISB_ACDT_H_5          */ "",
    /* IHP_ISB_ACDT_H_6          */ "",
    /* IHP_ISB_ACDT_H_7          */ "",
    /* IHP_ISB_KEYT_H_0          */ "",
    /* IHP_ISB_KEYT_H_1          */ "",
    /* IHP_ISB_KEYT_H_2          */ "",
    /* IHP_ISB_KEYT_H_3          */ "",
    /* IHP_ISB_KEYT_H_4          */ "",
    /* IHP_ISB_KEYT_H_5          */ "",
    /* IHP_ISB_KEYT_H_6          */ "",
    /* IHP_ISB_KEYT_H_7          */ "",
    /* IHP_ISB_MANAGEMENT_MEMORY_H_0 */ "",
    /* IHP_ISB_MANAGEMENT_MEMORY_H_1 */ "",
    /* IHP_ISB_MANAGEMENT_MEMORY_H_2 */ "",
    /* IHP_ISB_MANAGEMENT_MEMORY_H_3 */ "",
    /* IHP_ISB_MANAGEMENT_MEMORY_H_4 */ "",
    /* IHP_ISB_MANAGEMENT_MEMORY_H_5 */ "",
    /* IHP_ISB_MANAGEMENT_MEMORY_H_6 */ "",
    /* IHP_ISB_MANAGEMENT_MEMORY_H_7 */ "",
    /* IHP_ISB_MANAGEMENT_REQUEST */ "",
    /* IHP_ISB_PLDT_H_0          */ "",
    /* IHP_ISB_PLDT_H_1          */ "",
    /* IHP_ISB_PLDT_H_2          */ "",
    /* IHP_ISB_PLDT_H_3          */ "",
    /* IHP_ISB_PLDT_H_4          */ "",
    /* IHP_ISB_PLDT_H_5          */ "",
    /* IHP_ISB_PLDT_H_6          */ "",
    /* IHP_ISB_PLDT_H_7          */ "",
    /* IHP_ISB_STEP_TABLE        */ "",
    /* IHP_LIF_ACCESSED          */ "",
    /* IHP_LIF_ACCESSED_0        */ "",
    /* IHP_LIF_ACCESSED_1        */ "",
    /* IHP_LIF_ACCESSED_2        */ "",
    /* IHP_LIF_ACCESSED_3        */ "",
    /* IHP_LIF_TABLE             */ "",
    /* IHP_LIF_TABLE_0           */ "",
    /* IHP_LIF_TABLE_1           */ "",
    /* IHP_LIF_TABLE_2           */ "",
    /* IHP_LIF_TABLE_3           */ "",
    /* IHP_LIF_TABLE_AC_MP       */ "",
    /* IHP_LIF_TABLE_AC_MP_0     */ "",
    /* IHP_LIF_TABLE_AC_MP_1     */ "",
    /* IHP_LIF_TABLE_AC_MP_2     */ "",
    /* IHP_LIF_TABLE_AC_MP_3     */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_AC */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_AC_0 */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_AC_1 */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_AC_2 */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_AC_3 */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_PBB */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_PBB_0 */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_PBB_1 */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_PBB_2 */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_PBB_3 */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_PWE */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_PWE_0 */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_PWE_1 */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_PWE_2 */ "",
    /* IHP_LIF_TABLE_AC_P2P_TO_PWE_3 */ "",
    /* IHP_LIF_TABLE_IP_TT       */ "",
    /* IHP_LIF_TABLE_IP_TT_0     */ "",
    /* IHP_LIF_TABLE_IP_TT_1     */ "",
    /* IHP_LIF_TABLE_IP_TT_2     */ "",
    /* IHP_LIF_TABLE_IP_TT_3     */ "",
    /* IHP_LIF_TABLE_ISID_MP     */ "",
    /* IHP_LIF_TABLE_ISID_MP_0   */ "",
    /* IHP_LIF_TABLE_ISID_MP_1   */ "",
    /* IHP_LIF_TABLE_ISID_MP_2   */ "",
    /* IHP_LIF_TABLE_ISID_MP_3   */ "",
    /* IHP_LIF_TABLE_ISID_P2P    */ "",
    /* IHP_LIF_TABLE_ISID_P2P_0  */ "",
    /* IHP_LIF_TABLE_ISID_P2P_1  */ "",
    /* IHP_LIF_TABLE_ISID_P2P_2  */ "",
    /* IHP_LIF_TABLE_ISID_P2P_3  */ "",
    /* IHP_LIF_TABLE_LABEL_PROTOCOL_OR_LSP */ "",
    /* IHP_LIF_TABLE_LABEL_PROTOCOL_OR_LSP_0 */ "",
    /* IHP_LIF_TABLE_LABEL_PROTOCOL_OR_LSP_1 */ "",
    /* IHP_LIF_TABLE_LABEL_PROTOCOL_OR_LSP_2 */ "",
    /* IHP_LIF_TABLE_LABEL_PROTOCOL_OR_LSP_3 */ "",
    /* IHP_LIF_TABLE_LABEL_PWE_MP */ "",
    /* IHP_LIF_TABLE_LABEL_PWE_MP_0 */ "",
    /* IHP_LIF_TABLE_LABEL_PWE_MP_1 */ "",
    /* IHP_LIF_TABLE_LABEL_PWE_MP_2 */ "",
    /* IHP_LIF_TABLE_LABEL_PWE_MP_3 */ "",
    /* IHP_LIF_TABLE_LABEL_PWE_P2P */ "",
    /* IHP_LIF_TABLE_LABEL_PWE_P2P_0 */ "",
    /* IHP_LIF_TABLE_LABEL_PWE_P2P_1 */ "",
    /* IHP_LIF_TABLE_LABEL_PWE_P2P_2 */ "",
    /* IHP_LIF_TABLE_LABEL_PWE_P2P_3 */ "",
    /* IHP_LIF_TABLE_TRILL       */ "",
    /* IHP_LIF_TABLE_TRILL_0     */ "",
    /* IHP_LIF_TABLE_TRILL_1     */ "",
    /* IHP_LIF_TABLE_TRILL_2     */ "",
    /* IHP_LIF_TABLE_TRILL_3     */ "",
    /* IHP_LLR_LLVP              */ "",
    /* IHP_LL_MIRROR_PROFILE     */ "",
    /* IHP_MACT_ACDT_H_0         */ "",
    /* IHP_MACT_ACDT_H_1         */ "",
    /* IHP_MACT_ACDT_H_2         */ "",
    /* IHP_MACT_ACDT_H_3         */ "",
    /* IHP_MACT_ACDT_H_4         */ "",
    /* IHP_MACT_ACDT_H_5         */ "",
    /* IHP_MACT_ACDT_H_6         */ "",
    /* IHP_MACT_ACDT_H_7         */ "",
    /* IHP_MACT_AGET_H_0         */ "",
    /* IHP_MACT_AGET_H_1         */ "",
    /* IHP_MACT_AGET_H_2         */ "",
    /* IHP_MACT_AGET_H_3         */ "",
    /* IHP_MACT_AGET_H_4         */ "",
    /* IHP_MACT_AGET_H_5         */ "",
    /* IHP_MACT_AGET_H_6         */ "",
    /* IHP_MACT_AGET_H_7         */ "",
    /* IHP_MACT_AGING_CONFIGURATION_TABLE */ "",
    /* IHP_MACT_FID_COUNTER_DB   */ "",
    /* IHP_MACT_FID_COUNTER_PROFILE_DB */ "",
    /* IHP_MACT_FID_PROFILE_DB   */ "",
    /* IHP_MACT_FLUSH_DB         */ "",
    /* IHP_MACT_FORMAT_1         */ "",
    /* IHP_MACT_FORMAT_2         */ "",
    /* IHP_MACT_FORMAT_0_TYPE_0  */ "",
    /* IHP_MACT_FORMAT_0_TYPE_1  */ "",
    /* IHP_MACT_FORMAT_0_TYPE_2  */ "",
    /* IHP_MACT_FORMAT_3_TYPE_0  */ "",
    /* IHP_MACT_FORMAT_3_TYPE_1  */ "",
    /* IHP_MACT_KEYT_H_0         */ "",
    /* IHP_MACT_KEYT_H_1         */ "",
    /* IHP_MACT_KEYT_H_2         */ "",
    /* IHP_MACT_KEYT_H_3         */ "",
    /* IHP_MACT_KEYT_H_4         */ "",
    /* IHP_MACT_KEYT_H_5         */ "",
    /* IHP_MACT_KEYT_H_6         */ "",
    /* IHP_MACT_KEYT_H_7         */ "",
    /* IHP_MACT_MANAGEMENT_MEMORY_H_0 */ "",
    /* IHP_MACT_MANAGEMENT_MEMORY_H_1 */ "",
    /* IHP_MACT_MANAGEMENT_MEMORY_H_2 */ "",
    /* IHP_MACT_MANAGEMENT_MEMORY_H_3 */ "",
    /* IHP_MACT_MANAGEMENT_MEMORY_H_4 */ "",
    /* IHP_MACT_MANAGEMENT_MEMORY_H_5 */ "",
    /* IHP_MACT_MANAGEMENT_MEMORY_H_6 */ "",
    /* IHP_MACT_MANAGEMENT_MEMORY_H_7 */ "",
    /* IHP_MACT_PLDT_H_0         */ "",
    /* IHP_MACT_PLDT_H_1         */ "",
    /* IHP_MACT_PLDT_H_2         */ "",
    /* IHP_MACT_PLDT_H_3         */ "",
    /* IHP_MACT_PLDT_H_4         */ "",
    /* IHP_MACT_PLDT_H_5         */ "",
    /* IHP_MACT_PLDT_H_6         */ "",
    /* IHP_MACT_PLDT_H_7         */ "",
    /* IHP_MACT_PORT_MINE_TABLE_LAG_PORT */ "",
    /* IHP_MACT_PORT_MINE_TABLE_PHYSICAL_PORT */ "",
    /* IHP_MACT_STEP_TABLE       */ "",
    /* IHP_MAP_RIF_PROFILE_TO_ROUTING_ENABLE */ "",
    /* IHP_MEM_300000            */ "",
    /* IHP_MEM_380000            */ "",
    /* IHP_MEM_420000            */ "",
    /* IHP_MEM_430000            */ "",
    /* IHP_MEM_500000            */ "",
    /* IHP_MEM_580000            */ "",
    /* IHP_MEM_590000            */ "",
    /* IHP_MEM_610000            */ "",
    /* IHP_MEM_620000            */ "",
    /* IHP_MEM_740000            */ "",
    /* IHP_MEM_750000            */ "",
    /* IHP_MEM_820000            */ "",
    /* IHP_MEM_830000            */ "",
    /* IHP_MEM_940000            */ "",
    /* IHP_MEM_950000            */ "",
    /* IHP_MEM_6A0000            */ "",
    /* IHP_MEM_6B0000            */ "",
    /* IHP_MEM_7A0000            */ "",
    /* IHP_MEM_8B0000            */ "",
    /* IHP_MEM_8C0000            */ "",
    /* IHP_MEM_9E0000            */ "",
    /* IHP_MEM_9F0000            */ "",
    /* IHP_MEM_A10000            */ "",
    /* IHP_MEM_A90000            */ "",
    /* IHP_MEM_AA0000            */ "",
    /* IHP_MEM_B20000            */ "",
    /* IHP_MEM_B30000            */ "",
    /* IHP_MEM_BB0000            */ "",
    /* IHP_MEM_BC0000            */ "",
    /* IHP_MEM_C50000            */ "",
    /* IHP_MEM_C60000            */ "",
    /* IHP_MY_BFD_DIP            */ "",
    /* IHP_OAMA                  */ "",
    /* IHP_OAMB                  */ "",
    /* IHP_OAM_CHANNEL_TYPE      */ "",
    /* IHP_OAM_MY_CFM_MAC        */ "",
    /* IHP_PACKET_FORMAT_TABLE   */ "",
    /* IHP_PARSER_CUSTOM_MACRO_PARAMETERS */ "",
    /* IHP_PARSER_CUSTOM_MACRO_PROTOCOLS */ "",
    /* IHP_PARSER_CUSTOM_MACRO_WORD_MAP */ "",
    /* IHP_PARSER_ETH_PROTOCOLS  */ "",
    /* IHP_PARSER_IPV4_NEXT_PROTOCOL_SIZE */ "",
    /* IHP_PARSER_IPV6_NEXT_PROTOCOL_SIZE */ "",
    /* IHP_PARSER_IP_PROTOCOLS   */ "",
    /* IHP_PARSER_MPLS_NEXT_PROTOCOL_SPECULATE_MAP */ "",
    /* IHP_PARSER_PROGRAM        */ "",
    /* IHP_PARSER_PROGRAM_0      */ "",
    /* IHP_PARSER_PROGRAM_1      */ "",
    /* IHP_PARSER_PROGRAM_2      */ "",
    /* IHP_PARSER_PROGRAM_POINTER_FEM_BIT_SELECT_TABLE */ "",
    /* IHP_PARSER_PROGRAM_POINTER_FEM_FIELD_SELECT_MAP */ "",
    /* IHP_PARSER_PROGRAM_POINTER_FEM_MAP_INDEX_TABLE */ "",
    /* IHP_PFQ_0_FEM_BIT_SELECT_TABLE */ "",
    /* IHP_PFQ_0_FEM_FIELD_SELECT_MAP */ "",
    /* IHP_PFQ_0_FEM_MAP_INDEX_TABLE */ "",
    /* IHP_PINFO_FLP_0           */ "",
    /* IHP_PINFO_FLP_1           */ "",
    /* IHP_PINFO_LLR             */ "",
    /* IHP_PORT_PROTOCOL         */ "",
    /* IHP_PP_PORT_INFO          */ "",
    /* IHP_PTC_INFO              */ "",
    /* IHP_PTC_PARSER_PROGRAM_POINTER_CONFIG */ "",
    /* IHP_PTC_PFQ_0_CONFIG      */ "",
    /* IHP_PTC_SYS_PORT_CONFIG   */ "",
    /* IHP_PTC_VIRTUAL_PORT_CONFIG */ "",
    /* IHP_RECYCLE_COMMAND       */ "",
    /* IHP_RESERVED_MC           */ "",
    /* IHP_SRC_SYSTEM_PORT_FEM_BIT_SELECT_TABLE */ "",
    /* IHP_SRC_SYSTEM_PORT_FEM_FIELD_SELECT_MAP */ "",
    /* IHP_SRC_SYSTEM_PORT_FEM_MAP_INDEX_TABLE */ "",
    /* IHP_STP_TABLE             */ "",
    /* IHP_SUBNET_CLASSIFY       */ "",
    /* IHP_TC_DP_MAP_TABLE       */ "",
    /* IHP_TERMINATION_PROFILE_TABLE */ "",
    /* IHP_TOS_2_COS             */ "",
    /* IHP_UNKNOWN_DA_MAP        */ "",
    /* IHP_VIRTUAL_PORT_FEM_BIT_SELECT_TABLE */ "",
    /* IHP_VIRTUAL_PORT_FEM_FIELD_SELECT_MAP */ "",
    /* IHP_VIRTUAL_PORT_FEM_MAP_INDEX_TABLE */ "",
    /* IHP_VIRTUAL_PORT_TABLE    */ "",
    /* IHP_VLAN_EDIT_PCP_DEI_MAP */ "",
    /* IHP_VLAN_PORT_MEMBERSHIP_TABLE */ "",
    /* IHP_VLAN_PORT_MEMBERSHIP_TABLE_0 */ "",
    /* IHP_VLAN_PORT_MEMBERSHIP_TABLE_1 */ "",
    /* IHP_VLAN_RANGE_COMPRESSION_TABLE */ "",
    /* IHP_VRID_MY_MAC_CAM       */ "",
    /* IHP_VRID_MY_MAC_MAP       */ "",
    /* IHP_VRID_MY_MAC_TCAM      */ "",
    /* IHP_VRID_TO_VRF_MAP       */ "",
    /* IHP_VSI_HIGH_DA_NOT_FOUND_DESTINATION */ "",
    /* IHP_VSI_HIGH_MY_MAC       */ "",
    /* IHP_VSI_HIGH_PROFILE      */ "",
    /* IHP_VSI_LOW_CFG_1         */ "",
    /* IHP_VSI_LOW_CFG_2         */ "",
    /* IHP_VSI_PORT_MEMBERSHIP   */ "",
    /* IHP_VTT_1ST_KEY_PROG_SEL_TCAM */ "",
    /* IHP_VTT_1ST_LOOKUP_PROGRAM_0 */ "",
    /* IHP_VTT_1ST_LOOKUP_PROGRAM_1 */ "",
    /* IHP_VTT_2ND_KEY_PROG_SEL_TCAM */ "",
    /* IHP_VTT_2ND_LOOKUP_PROGRAM_0 */ "",
    /* IHP_VTT_2ND_LOOKUP_PROGRAM_1 */ "",
    /* IHP_VTT_ETH_PACKET_FORMAT_ATTRIBUTES_TABLE */ "",
    /* IHP_VTT_IN_PP_PORT_CONFIG */ "",
    /* IHP_VTT_IN_PP_PORT_VLAN_CONFIG */ "",
    /* IHP_VTT_IP_PACKET_FORMAT_ATTRIBUTES_TABLE */ "",
    /* IHP_VTT_LLVP              */ "",
    /* IHP_VTT_MPLS_LABEL_RANGE_TABLE */ "",
    /* IHP_VTT_MPLS_LABEL_TCAM   */ "",
    /* IHP_VTT_PATH_SELECT       */ "",
    /* IHP_VTT_PP_PORT_TT_KEY_VAR */ "",
    /* IHP_VTT_PP_PORT_VSI_PROFILES */ "",
    /* IHP_VTT_PP_PORT_VT_KEY_VAR */ "",
    /* IHP_VTT_PS_PACKET_FORMAT_CODE_MAP_TABLE */ "",
    /* IHP_VTT_PTC_CONFIG        */ "",
    /* ILKN0CALRX                */ "",
    /* ILKN0CALTX                */ "",
    /* ILKN0SCHMAP               */ "",
    /* ILKN1CALRX                */ "",
    /* ILKN1CALTX                */ "",
    /* ILKN1SCHMAP               */ "",
    /* ILKN_PMH_CORE_TX_FIFO_MEM */ "",
    /* ILKN_PMH_PORT_0_CPU_ACCESS */ "",
    /* ILKN_PMH_PORT_1_CPU_ACCESS */ "",
    /* ILKN_PMH_RX_STATS_MEM     */ "",
    /* ILKN_PMH_TX_STATS_MEM     */ "",
    /* ILKN_PML_CORE_TX_FIFO_MEM */ "",
    /* ILKN_PML_PORT_0_CPU_ACCESS */ "",
    /* ILKN_PML_PORT_1_CPU_ACCESS */ "",
    /* ILKN_PML_RX_STATS_MEM     */ "",
    /* ILKN_PML_TX_STATS_MEM     */ "",
    /* IL_CHANNEL_REMAP0         */ "Maps Interlaken channels to source port IDs",
    /* IL_CHANNEL_REMAP1         */ "Maps Interlaken channels to source port IDs",
    /* IL_STAT_MEM_0             */ "RX Stat Mem0",
    /* IL_STAT_MEM_1             */ "RX Stat Mem1",
    /* IL_STAT_MEM_2             */ "RX Stat Mem 2",
    /* IL_STAT_MEM_3             */ "TX Stat Mem3",
    /* IL_STAT_MEM_4             */ "TX Stat Mem 4",
    /* IMEM                      */ "Instruction Memory",
    /* IMEM_PMEM_DMA             */ "Provides a single table to access IMEM and PMEM[0-23]",
    /* IMIRROR_BITMAP            */ "Alternate Bitmap/path to MTP for Mirroring, FeatureSpecific-Ethernet.",
    /* IM_MTP_INDEX              */ "Ingress Mirror to Port Table",
    /* INCTRLBCASTPKTS           */ "Receive Broadcast Frame Counter - Implemented in RxPacketType Memory",
    /* INCTRLBYT                 */ "Receive Frame Octet Counter",
    /* INCTRLDISCPKTS            */ "Receive Discarded Frame Counter - Implemented in isec_RxErrDscrdsPkts",
    /* INCTRLERRPKTS             */ "Receive Error Frame Counter - Implemented in isec_RxErrDscrdsPkts",
    /* INCTRLMCASTPKTS           */ "Receive Multicast Frame Counter - Implemented in RxPacketType Memory",
    /* INCTRLUCASTPKTS           */ "Receive Unicast Frame Counter - Implemented in RxPacketType Memory",
    /* INGRESSVLANEDITCOMMANDTABLE */ "",
    /* INGRESS_OAM_OPCODE_GROUP  */ ".",
    /* ING_1588_INGRESS_CTRL     */ "ING_1588_INGRESS_CTRL. Indicates various 1588 status messages for each ingress port.",
    /* ING_1588_TS_DISPOSITION_PROFILE_TABLE */ "",
    /* ING_ACTIVE_L3_IIF_PROFILE */ "Ingress Active L3_IIF Profile table.",
    /* ING_DNAT_ADDRESS_TYPE     */ "Ingress DNAT Address Type table.",
    /* ING_DVP_2_TABLE           */ "Used to generate an ECMP_Group/NHI from the DVP value and other DVP properties.",
    /* ING_DVP_TABLE             */ "Used to generte a NHI from the DVP value and other DVP properties.",
    /* ING_EGRMSKBMAP            */ "Ingress Block Mask, FeatureSpecific-Ethernet.",
    /* ING_EN_EFILTER_BITMAP     */ "Ingress Enable EFilter Bitmap Register.",
    /* ING_ETAG_PCP_MAPPING      */ "Mapping table for Internal Priority and CNG to ETAG PCP/DE.",
    /* ING_FC_HEADER_TYPE        */ "FCoE Header Type.",
    /* ING_FLEX_CTR_COUNTER_TABLE_0 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_1 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_2 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_3 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_4 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_5 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_6 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_7 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_8 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_9 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_10 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_11 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_12 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_13 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_14 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_15 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_0_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_0_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_1_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_1_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_2_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_2_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_3_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_3_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_4_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_4_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_5_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_5_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_6_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_6_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_7_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_7_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_OFFSET_TABLE_0 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_1 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_2 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_3 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_4 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_5 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_6 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_7 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_8 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_9 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_10 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_11 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_12 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_13 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_14 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_15 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_PKT_PRI_MAP  */ "PKT PRI mapping function for ingress flex counters",
    /* ING_FLEX_CTR_PKT_RES_MAP  */ "PKT_RES mapping function for ingress flex counters",
    /* ING_FLEX_CTR_PORT_MAP     */ "PORT mapping function for ingress flex counters",
    /* ING_FLEX_CTR_PRI_CNG_MAP  */ "PRI & CNG mapping function for ingress flex counters",
    /* ING_FLEX_CTR_TOS_MAP      */ "TOS mapping function for ingress flex counters",
    /* ING_HIGIG_TRUNK_OVERRIDE_PROFILE */ "Higig Trunk Override Profile Pointer.",
    /* ING_IPFIX_DSCP_XLATE_TABLE */ "IPFIX DSCP Translation Table -- Address = {IP_DSCP_PROFILE[1:0], pkt_dscp[5:0]}",
    /* ING_IPFIX_EOP_BUFFER      */ "IPFIX EOP BUFFER - to save info per-port from SOP cells to EOP cells.",
    /* ING_IPFIX_EXPORT_FIFO     */ "Ingress IPFIX Export FIFO",
    /* ING_IPFIX_FLOW_RATE_METER_TABLE */ "IPFIX Flow Rate Meter Table",
    /* ING_IPFIX_IPV4_MASK_SET_A */ "IPFIX IPv4 Address Masks",
    /* ING_IPFIX_IPV4_MASK_SET_B */ "IPFIX IPv4 Address Masks",
    /* ING_IPFIX_IPV6_MASK_SET_A */ "IPFIX IPv6 Address Masks",
    /* ING_IPFIX_IPV6_MASK_SET_B */ "IPFIX IPv6 Address Masks",
    /* ING_IPFIX_PROFILE         */ "Ingress IPFIX Per-Port Profile Pointers, FeatureSpecific-FP",
    /* ING_IPFIX_SESSION_TABLE   */ "Ingress IPFIX Session Table",
    /* ING_IPV6_MC_RESERVED_ADDRESS */ "Ingress IPV6 Multicast Reserved Address table.",
    /* ING_L3_NEXT_HOP           */ "Reduced version of L3_NEXT_HOP table.  Used to provide just mod and port/TGID",
    /* ING_L3_NEXT_HOP_A         */ "Physical view of first copy of ING_L3_NEXT_HOP - contains all fields.",
    /* ING_L3_NEXT_HOP_ATTRIBUTE_1 */ "index by ING_L3_NEXT_HOP_ATTRIBUTE_1_INDEX.INDEX or ING_L3_NEXT_HOP.DVP_ATTRIBUTE_1_INDEX .",
    /* ING_L3_NEXT_HOP_ATTRIBUTE_1_INDEX */ "index by ING_L3_NEXT_HOP.L3_OIF or ipmc_index or VID.",
    /* ING_L3_NEXT_HOP_B         */ "Physical view of second copy of ING_L3_NEXT_HOP - contains a subset of fields.",
    /* ING_MOD_MAP_TABLE         */ "Ingress Module Remapping Table",
    /* ING_MPLS_EXP_MAPPING      */ "EXP to Internal Priority and Color Maping table. Address = {EXP_MAPPING_PTR, EXP}",
    /* ING_NETWORK_PRUNE_CONTROL */ "ING_NETWORK_PRUNE_CONTROL Indexed by SVP NETWORK_GROUP.",
    /* ING_NLF_PORT_MAP          */ "Map NLF ID to LOGICAL Port Number, index by LOOPBACK_PACKET_TYPE",
    /* ING_OAM_DGLP_PROFILE      */ ".",
    /* ING_OAM_FLEXIBLE_DOMAIN_CONTROL */ "index:{INNER PRIORITY TAGGED,PRE VXLT IVID VALID,PRE VXLT OVID VALID,POST VXLT IVID VALID,POST VXLT OVID VALID,SVP VALID}",
    /* ING_OUTER_DOT1P_MAPPING_TABLE */ "Outer Dot1p mapping table, used to mark traffic from non-QCN-aware sources with a dot1p value that does not map to QCN-aware queues. The PORT_TABLE/SVP/VFI tables select the profile, and the {cfi,got1p[2:0]} value selects one of 16 entries.",
    /* ING_PHYSICAL_PORT_TABLE   */ "Port Table, FeatureSpecific-Ethernet.",
    /* ING_PHYSICAL_TO_LOGICAL_PORT_NUMBER_MAPPING_TABLE */ "Ingress Physical to Logical Port Number Mapping Table. Indexed by the Physical port number, and provides the corresponding logical port number.",
    /* ING_PORT_THROTTLE_ENABLE  */ "Table to enable Ingress Port Throttling on physical ports.",
    /* ING_PRI_CNG_MAP           */ "Per port ingress priority/CFI mapping table",
    /* ING_PW_TERM_COUNTERS      */ "Pseudo-wire Termination Byte counter - index by PW number",
    /* ING_PW_TERM_SEQ_NUM       */ "Pseudo-wire Termination Sequence Number - index by PW number",
    /* ING_PW_TERM_SEQ_NUM_X     */ "Pseudo-wire Termination Sequence Number - index by PW number.",
    /* ING_PW_TERM_SEQ_NUM_Y     */ "Pseudo-wire Termination Sequence Number - index by PW number.",
    /* ING_QUEUE_MAP             */ "New table for Flex Queueing",
    /* ING_QUEUE_OFFSET_MAPPING_TABLE */ "New table for Flex Queueing",
    /* ING_ROUTED_INT_PRI_MAPPING */ "Internal priority mapping table, used to steer traffic from non-QCN-aware sources away from QCN queues.",
    /* ING_SERVICE_COUNTER_TABLE */ "Ingress Service Interface Counters",
    /* ING_SERVICE_COUNTER_TABLE_X */ "Ingress Service Interface Counters.",
    /* ING_SERVICE_COUNTER_TABLE_Y */ "Ingress Service Interface Counters.",
    /* ING_SERVICE_PRI_MAP       */ "Ingress Class of Service instance priority value to OAM LM counter offset mapping table",
    /* ING_SER_FIFO              */ "ING SER FIFO. FIFO containing the parity error logging information in IPIPE.",
    /* ING_SER_FIFO_X            */ "ING SER FIFO",
    /* ING_SER_FIFO_Y            */ "ING SER FIFO",
    /* ING_SNAT                  */ "Ingress SNAT Lookup.",
    /* ING_SNAT_DATA_ONLY        */ "ING_SNAT Data SRAM for ING_SNAT TCAM.",
    /* ING_SNAT_HIT_ONLY         */ "hit bit for ING_SNAT TCAM.",
    /* ING_SNAT_HIT_ONLY_X       */ "hit bit for ING_SNAT TCAM.",
    /* ING_SNAT_HIT_ONLY_Y       */ "hit bit for ING_SNAT TCAM.",
    /* ING_SNAT_ONLY             */ "ING_SNAT TCAM only view.",
    /* ING_SVM_PKT_PRI_MAP       */ "PKT_PRI_MAP",
    /* ING_SVM_PKT_RES_MAP       */ "PKT_RES_MAP",
    /* ING_SVM_PORT_MAP          */ "PORT_MAP",
    /* ING_SVM_PRI_CNG_MAP       */ "PRI_CNG_MAP",
    /* ING_SVM_TOS_MAP           */ "TOS_MAP",
    /* ING_TRILL_PARSE_CONTROL   */ "Trill parse control.",
    /* ING_TRILL_PAYLOAD_PARSE_CONTROL */ "Trill parse control.",
    /* ING_UNTAGGED_PHB          */ "Table used to derive untagged packet's PHB.",
    /* ING_VFT_PRI_MAP           */ "To derive the pri field of the VSAN tag.",
    /* ING_VINTF_COUNTER_TABLE   */ "Ingress Virtual Port / Interface Counters",
    /* ING_VINTF_COUNTER_TABLE_X */ "Ingress Virtual Port / Interface Counters.",
    /* ING_VINTF_COUNTER_TABLE_Y */ "Ingress Virtual Port / Interface Counters.",
    /* ING_VLAN_RANGE            */ "vlan range match table",
    /* ING_VLAN_TAG_ACTION_PROFILE */ "ACTIONS for the VXLT stage",
    /* ING_VP_VLAN_MEMBERSHIP    */ "Ingress VP VLAN member table.",
    /* ING_VSAN                  */ "VSAN attributes",
    /* INITIAL_ING_L3_NEXT_HOP   */ "Reduced version of L3_NEXT_HOP table.  Used to provide just mod and port/TGID",
    /* INITIAL_L3_ECMP           */ "Initial L3 Equal Cost Multipath table",
    /* INITIAL_L3_ECMP_COUNT     */ "Contains the number of members in each ECMP group.  Used with ECMP_pointer Group Propertis - indexed by ECMP group number from LPM table",
    /* INITIAL_L3_ECMP_GROUP     */ "Contains the number of members in each ECMP group and the ECMP base pointer.  It is indexed by ECMP group number from LPM table.",
    /* INITIAL_L3_ECMP_X         */ "Initial L3 Equal Cost Multipath table.",
    /* INITIAL_L3_ECMP_Y         */ "Initial L3 Equal Cost Multipath table.",
    /* INITIAL_PROT_GROUP_TABLE  */ "Protection Switching (backup path) Next Hop Table",
    /* INITIAL_PROT_NHI_TABLE    */ "Protection Switching (backup path) Next Hop Table",
    /* INITIAL_PROT_NHI_TABLE_1  */ "Protection Switching (backup path) Next Hop Table.",
    /* INITIAL_PROT_NHI_TABLE_1_DMA */ "DMA view of INITIAL_PROT_NHI_TABLE_1",
    /* INRIFCONFIGTABLE          */ "",
    /* INTERFACE_MAX_SHAPER_TABLE */ "The entries in this table are the parameters for the Interface Max Shaper",
    /* INT_CN_TO_MMUIF_MAPPING   */ "Mapping for INT_CN to MMU CN.",
    /* IPEXPMAP                  */ "",
    /* IPMC_VLAN_TBL0            */ "First physical copy of MMU_IPMC_VLAN_TBL",
    /* IPMC_VLAN_TBL1            */ "Second physical copy of MMU_IPMC_VLAN_TBL",
    /* IPORT_TABLE               */ "Port Table",
    /* IPOVERMPLSEXPMAPPING      */ "",
    /* IPST_CR_VAL_SEL           */ "",
    /* IPST_MEM_0                */ "",
    /* IPST_MEM_10000            */ "",
    /* IPS_CRBAL                 */ "",
    /* IPS_CRBALTH               */ "",
    /* IPS_CREDIT_BALANCE_BASED_THRESHOLDS_TABLE */ "",
    /* IPS_CREDIT_WATCHDOG_THRESHOLDS_TABLE */ "",
    /* IPS_CRWDTH                */ "",
    /* IPS_CR_BAL_TABLE          */ "",
    /* IPS_EMPTYQCRBAL           */ "",
    /* IPS_EMPTY_QUEUE_CREDIT_BALANCE_TABLE */ "",
    /* IPS_FLOW_ID_LOOKUP_TABLE  */ "",
    /* IPS_FLWID                 */ "",
    /* IPS_FMS_BYP_SEL           */ "",
    /* IPS_MAXQSZ                */ "",
    /* IPS_MEM_180000            */ "",
    /* IPS_MEM_200000            */ "",
    /* IPS_MEM_220000            */ "",
    /* IPS_MEM_240000            */ "",
    /* IPS_MEM_260000            */ "",
    /* IPS_MEM_280000            */ "",
    /* IPS_MEM_1A0000            */ "",
    /* IPS_MEM_1C0000            */ "",
    /* IPS_MEM_1E0000            */ "",
    /* IPS_QDESC                 */ "",
    /* IPS_QDESC_TABLE           */ "",
    /* IPS_QPM_1                 */ "",
    /* IPS_QPM_2                 */ "",
    /* IPS_QPM_1_NO_SYS_RED      */ "",
    /* IPS_QPM_1_SYS_RED         */ "",
    /* IPS_QPM_2_NO_SYS_RED      */ "",
    /* IPS_QPM_2_SYS_RED         */ "",
    /* IPS_QPRISEL               */ "",
    /* IPS_QSZ                   */ "",
    /* IPS_QSZTH                 */ "",
    /* IPS_QTYPE                 */ "",
    /* IPS_QUEUE_DESCRIPTOR_TABLE */ "",
    /* IPS_QUEUE_PRIORITY_TABLE  */ "",
    /* IPS_QUEUE_SIZE_BASED_THRESHOLDS_TABLE */ "",
    /* IPS_QUEUE_SIZE_TABLE      */ "",
    /* IPS_QUEUE_TYPE_LOOKUP_TABLE */ "",
    /* IPS_Q_PRIORITY_BIT_MAP    */ "",
    /* IPS_SLOW_FACTOR_THRESHOLDS_TABLE */ "",
    /* IPS_SYSTEM_RED_MAX_QUEUE_SIZE_TABLE */ "",
    /* IPTCTRLFIFO               */ "",
    /* IPTE_CLIENT_CAL           */ "This is the IPTE Client Selection calendar memory.",
    /* IPTE_CLIENT_CAL1          */ "This is the IPTE Client Selection calendar memory. client calendar 1",
    /* IPTE_PORT_CAL             */ "This is the IPTE PORT Selection calendar memory.",
    /* IPTE_PORT_CAL1            */ "This is the IPTE PORT Selection calendar memory for Port calendar 1.",
    /* IPTE_PORT_CONTEXT         */ "This is the IPTE pre-Port packet context memory",
    /* IPTE_PREFETCH_FIFO        */ "This is the IPTE Queue Selection calendar memory.",
    /* IPTE_Q2C_MAP              */ "This is the IPTE Queue to channel mapping Database. Indexed by destination queue. On a reset, all entries are initialized with fc_index=0, port=0xf",
    /* IPTE_QMAX_BUCKET          */ "This is the IPTE QMAX credit bucket working memory. Access onl",
    /* IPTE_QMAX_BURST           */ "This is the IPTE QMAX burst threshold configuration memory.",
    /* IPTE_QMAX_RATE            */ "This is the IPTE QMAX rate configuration memory.",
    /* IPTE_RESIDUAL_DB          */ "This is the IPTE Working Residual Database. Access for Debug only",
    /* IPTE_RRPC                 */ "This is the IPTE Read Request packet Context Database",
    /* IPTE_TX_STATS             */ "This is the IPTE per queue transmit statistics. Each addresss has packet and byte counts for queue, with address cleared after read. CPU writes are supported, but cause memory to be initialised to CPU write value",
    /* IPTE_WDRR_CREDIT_CFG      */ "This is the IPTE WDRR Credit Configuration Database",
    /* IPTE_WDRR_STATE           */ "This is the IPTE WDRR Working Credit State Database",
    /* IPT_ARAD_SNP_MIR_STAMP_EN */ "",
    /* IPT_ARAD_SNP_MIR_STAMP_VALUES */ "",
    /* IPT_BDQ                   */ "",
    /* IPT_DBLF                  */ "",
    /* IPT_DQCF                  */ "",
    /* IPT_DRAM_IP_TS_ARB        */ "",
    /* IPT_DRAM_MIX_RET_BANK     */ "",
    /* IPT_EGQCTL                */ "",
    /* IPT_EGQDATA               */ "",
    /* IPT_EGQ_TXQ_RD_ADDR       */ "",
    /* IPT_EGQ_TXQ_WR_ADDR       */ "",
    /* IPT_FDTCTL                */ "",
    /* IPT_FDTDATA               */ "",
    /* IPT_FDT_TXQ_RD_ADDR       */ "",
    /* IPT_FDT_TXQ_WR_ADDR       */ "",
    /* IPT_GCI_BACKOFF_MASK      */ "",
    /* IPT_IPT_0_DEST_PIPE_MAPPING_2_FDT */ "",
    /* IPT_IPT_1_DEST_PIPE_MAPPING_2_FDT */ "",
    /* IPT_ITM_TO_OTM_MAP        */ "",
    /* IPT_MAX_LATENCY           */ "",
    /* IPT_MEM_80000             */ "",
    /* IPT_MIX_MOP_DESC          */ "",
    /* IPT_MIX_OCB_REQ           */ "",
    /* IPT_MIX_SOP_DESC          */ "",
    /* IPT_MOP_MMU               */ "",
    /* IPT_OCB_MOP_DESC          */ "",
    /* IPT_OCB_ONLY_OR_MIX_AND_IQ_MS_ARB */ "",
    /* IPT_OCB_SOP_DESC          */ "",
    /* IPT_PCQ                   */ "",
    /* IPT_PRIORITY_BITS_MAPPING_2_FDT */ "",
    /* IPT_PRIORITY_BITS_MAP_2_FDT */ "",
    /* IPT_SNP_MIR_CMD_MAP       */ "",
    /* IPT_SOP_MMU               */ "",
    /* IPT_TDM_BIT_MAPPING_2_FDT */ "",
    /* IPV4_IN_IPV6_PREFIX_MATCH_TABLE */ "IPv6 in IPv6 Address Prefix Matching Memory",
    /* IPV6_PROXY_ENABLE_TABLE   */ "Source Trunk Map Table",
    /* IP_MULTICAST_TCAM         */ "IP Multicast TCAM..",
    /* IP_OPTION_CONTROL_PROFILE_TABLE */ "Actions on IP packets with options. Indexed by L3_IIF.IP_OPTION_PROFILE_INDEX(2 bits) + IP option number (8 bits)",
    /* IP_TO_INT_CN_MAPPING      */ "Mapping for IP ECN to INT_CN.",
    /* IQMT_BDB_LINK_LIST        */ "",
    /* IQMT_EGRESS_HDR_CMP_PROFILE_MAPPING_TABLE */ "",
    /* IQMT_FULL_USER_COUNT_MEMORY */ "",
    /* IQMT_HEADER_APPEND_PTR_TO_EGRESS_HDR_CMP_MAPPING_TABLE */ "",
    /* IQMT_HEADER_APPEND_PTR_TO_INGRESS_HDR_CMP_MAPPING_TABLE */ "",
    /* IQMT_INGRESS_HDR_CMP_PROFILE_MAPPING_TABLE */ "",
    /* IQMT_IN_PP_PORT_TO_EGRESS_HDR_CMP_PROFILE_TABLE */ "",
    /* IQMT_IN_PP_PORT_TO_INGRESS_HDR_CMP_PROFILE_TABLE */ "",
    /* IQMT_MEM_300000           */ "",
    /* IQMT_MINI_MULTICAST_USER_COUNT_MEMORY */ "",
    /* IQMT_PAKCET_DESCRIPTOR_MEMORY_0_DYNAMIC */ "",
    /* IQMT_PAKCET_DESCRIPTOR_MEMORY_1_DYNAMIC */ "",
    /* IQMT_PAKCET_DESCRIPTOR_MEMORY_2_DYNAMIC */ "",
    /* IQMT_PAKCET_DESCRIPTOR_MEMORY_3_DYNAMIC */ "",
    /* IQMT_PAKCET_DESCRIPTOR_MEMORY_4_DYNAMIC */ "",
    /* IQMT_PAKCET_DESCRIPTOR_MEMORY_5_DYNAMIC */ "",
    /* IQM_BDBLL                 */ "",
    /* IQM_CNG_QUE_SET           */ "",
    /* IQM_CNI_QUEUE_RED_PARAMETERS_TABLE_STATIC */ "",
    /* IQM_CNRED                 */ "",
    /* IQM_CONGESTION_POINT_CNM_DESCRIPTOR_DYNAMIC */ "",
    /* IQM_CONGESTION_POINT_CNM_DESCRIPTOR_DYNAMIC_SAMPLING_MODE_OFF */ "",
    /* IQM_CONGESTION_POINT_CNM_DESCRIPTOR_DYNAMIC_SAMPLING_MODE_ON */ "",
    /* IQM_CONGESTION_POINT_CNM_DESCRIPTOR_STATIC */ "",
    /* IQM_CONGESTION_POINT_CNM_DESCRIPTOR_STATIC_SAMPLING_MODE_OFF */ "",
    /* IQM_CONGESTION_POINT_CNM_DESCRIPTOR_STATIC_SAMPLING_MODE_ON */ "",
    /* IQM_CONGESTION_POINT_CNM_PARAMETERS_TABLE */ "",
    /* IQM_COUNTER_HDR_CMP_PROFILE_MAPPING_TABLE */ "",
    /* IQM_CPDMD                 */ "",
    /* IQM_CPDMS                 */ "",
    /* IQM_CPPRM                 */ "",
    /* IQM_CRDTDIS               */ "",
    /* IQM_CREDIT_CLASS_TO_SCH_HDR_CMP_PROFILE_TABLE */ "",
    /* IQM_CREDIT_DISCOUNT_TABLE */ "",
    /* IQM_DBFFM                 */ "",
    /* IQM_DBUFF_FIFO_MEMORY     */ "",
    /* IQM_DELETE_FIFO_MEMORY    */ "",
    /* IQM_DELFFM                */ "",
    /* IQM_ELIGIBLE_PARAMETERS_TABLE_STATIC */ "",
    /* IQM_FLUSCNT               */ "",
    /* IQM_FRDMT                 */ "",
    /* IQM_FREE_RESOURCE_DYNAMIC_MAX_TH_TABLE */ "",
    /* IQM_GRSPRM                */ "",
    /* IQM_GUARANTEED_SPACE_PARAMETERS_TABLE_STATIC */ "",
    /* IQM_HEADER_APPEND_PTR_TO_COUNTER_HDR_CMP_MAPPING_TABLE */ "",
    /* IQM_HEADER_APPEND_PTR_TO_IRPP_COUNTER_HDR_CMP_MAPPING_TABLE */ "",
    /* IQM_HEADER_APPEND_PTR_TO_SCH_HDR_CMP_MAPPING_TABLE */ "",
    /* IQM_IN_PP_PORT_MAPPING_TABLE_STATIC */ "",
    /* IQM_IN_PP_PORT_TO_COUNTER_HDR_CMP_PROFILE_TABLE */ "",
    /* IQM_IN_PP_PORT_TO_IRPP_COUNTER_HDR_CMP_PROFILE_TABLE */ "",
    /* IQM_IN_PP_PORT_TO_SCH_HDR_CMP_PROFILE_TABLE */ "",
    /* IQM_IRPP_COUNTER_HDR_CMP_PROFILE_MAPPING_TABLE */ "",
    /* IQM_ITMPM                 */ "",
    /* IQM_MAP_IQM_TC_TO_PG_OFFSET_VSQ_GROUP_F */ "",
    /* IQM_MEM_1400000           */ "",
    /* IQM_MEM_1600000           */ "",
    /* IQM_MEM_1800000           */ "",
    /* IQM_MEM_8000000           */ "",
    /* IQM_MEM_9600000           */ "",
    /* IQM_MEM_9700000           */ "",
    /* IQM_MEM_7E00000           */ "",
    /* IQM_MNUSCNT               */ "",
    /* IQM_NIFTCM                */ "",
    /* IQM_OCBPRM                */ "",
    /* IQM_PACKET_QUEUE_DESCRIPTOR_DYNAMIC */ "",
    /* IQM_PACKET_QUEUE_DESCRIPTOR_STATIC */ "",
    /* IQM_PACKET_QUEUE_RED_PARAMETERS_TABLE */ "",
    /* IQM_PACKET_QUEUE_RED_WEIGHT_TABLE */ "",
    /* IQM_PACKET_QUEUE_TAIL_POINTER */ "",
    /* IQM_PACKING_MODE_TABLE    */ "",
    /* IQM_PAKCET_DESCRIPTOR_MEMORY_A_DYNAMIC */ "",
    /* IQM_PAKCET_DESCRIPTOR_MEMORY_B_DYNAMIC */ "",
    /* IQM_PAKCET_DESCRIPTOR_MEMORY_ECC_DYNAMIC */ "",
    /* IQM_PDM                   */ "",
    /* IQM_PG_VSQ_PARAMETERS_TABLE_GROUP_F */ "",
    /* IQM_PQDMD                 */ "",
    /* IQM_PQDMS                 */ "",
    /* IQM_PQRED                 */ "",
    /* IQM_PQWQ                  */ "",
    /* IQM_QUEUE_CONGESTION_ARRAY_DYNAMIC */ "",
    /* IQM_SCH_HDR_CMP_ENCODING_TABLE */ "",
    /* IQM_SCH_HDR_CMP_PROFILE_MAPPING_TABLE */ "",
    /* IQM_SCRBUFFTH             */ "",
    /* IQM_SCRUBBER_BUFFER_THRESHOLD_TABLE_STATIC */ "",
    /* IQM_SOURCE_QSIZE_RANGE_THRESHOLDS_SYSTEM_RED */ "",
    /* IQM_SPRDPRM               */ "",
    /* IQM_SRCQRNG               */ "",
    /* IQM_SRDPRB                */ "",
    /* IQM_SYSTEM_RED_DROP_PROBABILITY_VALUES */ "",
    /* IQM_SYSTEM_RED_PARAMETERS_TABLE */ "",
    /* IQM_TAIL                  */ "",
    /* IQM_VQFCPR_MA             */ "",
    /* IQM_VQFCPR_MB             */ "",
    /* IQM_VQFCPR_MC             */ "",
    /* IQM_VQFCPR_MD             */ "",
    /* IQM_VQFCPR_ME             */ "",
    /* IQM_VQFCPR_MF             */ "",
    /* IQM_VQPR_MA               */ "",
    /* IQM_VQPR_MB               */ "",
    /* IQM_VQPR_MC               */ "",
    /* IQM_VQPR_MD               */ "",
    /* IQM_VQPR_ME               */ "",
    /* IQM_VQPR_MF               */ "",
    /* IQM_VSQDRC_A              */ "",
    /* IQM_VSQDRC_B              */ "",
    /* IQM_VSQDRC_C              */ "",
    /* IQM_VSQDRC_D              */ "",
    /* IQM_VSQDRC_E              */ "",
    /* IQM_VSQDRC_F              */ "",
    /* IQM_VSQE_TO_LLFC_MAP      */ "",
    /* IQM_VSQF_TO_PFC_MAP       */ "",
    /* IQM_VSQ_AVERAGE_QSIZE_MEMORY_GROUP_A */ "",
    /* IQM_VSQ_AVERAGE_QSIZE_MEMORY_GROUP_B */ "",
    /* IQM_VSQ_AVERAGE_QSIZE_MEMORY_GROUP_C */ "",
    /* IQM_VSQ_AVERAGE_QSIZE_MEMORY_GROUP_D */ "",
    /* IQM_VSQ_AVERAGE_QSIZE_MEMORY_GROUP_E */ "",
    /* IQM_VSQ_AVERAGE_QSIZE_MEMORY_GROUP_F */ "",
    /* IQM_VSQ_A_MX_OC           */ "",
    /* IQM_VSQ_B_MX_OC           */ "",
    /* IQM_VSQ_C_MX_OC           */ "",
    /* IQM_VSQ_DESCRIPTOR_RATE_CLASS_GROUP_A */ "",
    /* IQM_VSQ_DESCRIPTOR_RATE_CLASS_GROUP_B */ "",
    /* IQM_VSQ_DESCRIPTOR_RATE_CLASS_GROUP_C */ "",
    /* IQM_VSQ_DESCRIPTOR_RATE_CLASS_GROUP_D */ "",
    /* IQM_VSQ_DESCRIPTOR_RATE_CLASS_GROUP_E */ "",
    /* IQM_VSQ_DESCRIPTOR_RATE_CLASS_GROUP_F */ "",
    /* IQM_VSQ_D_MX_OC           */ "",
    /* IQM_VSQ_E_MX_OC           */ "",
    /* IQM_VSQ_FLOW_CONTROL_PARAMETERS_TABLE_GROUP_A */ "",
    /* IQM_VSQ_FLOW_CONTROL_PARAMETERS_TABLE_GROUP_B */ "",
    /* IQM_VSQ_FLOW_CONTROL_PARAMETERS_TABLE_GROUP_C */ "",
    /* IQM_VSQ_FLOW_CONTROL_PARAMETERS_TABLE_GROUP_D */ "",
    /* IQM_VSQ_FLOW_CONTROL_PARAMETERS_TABLE_GROUP_E */ "",
    /* IQM_VSQ_FLOW_CONTROL_PARAMETERS_TABLE_GROUP_F */ "",
    /* IQM_VSQ_F_MX_OC           */ "",
    /* IQM_VSQ_MAX_OCCUPANCY_MEMORY_GROUP_A */ "",
    /* IQM_VSQ_MAX_OCCUPANCY_MEMORY_GROUP_B */ "",
    /* IQM_VSQ_MAX_OCCUPANCY_MEMORY_GROUP_C */ "",
    /* IQM_VSQ_MAX_OCCUPANCY_MEMORY_GROUP_D */ "",
    /* IQM_VSQ_MAX_OCCUPANCY_MEMORY_GROUP_E */ "",
    /* IQM_VSQ_MAX_OCCUPANCY_MEMORY_GROUP_F */ "",
    /* IQM_VSQ_PARAMETERS_TABLE_GROUP_A */ "",
    /* IQM_VSQ_PARAMETERS_TABLE_GROUP_B */ "",
    /* IQM_VSQ_PARAMETERS_TABLE_GROUP_C */ "",
    /* IQM_VSQ_PARAMETERS_TABLE_GROUP_D */ "",
    /* IQM_VSQ_PARAMETERS_TABLE_GROUP_E */ "",
    /* IQM_VSQ_PARAMETERS_TABLE_GROUP_F */ "",
    /* IQM_VSQ_QSIZE_MEMORY_GROUP_A */ "",
    /* IQM_VSQ_QSIZE_MEMORY_GROUP_B */ "",
    /* IQM_VSQ_QSIZE_MEMORY_GROUP_C */ "",
    /* IQM_VSQ_QSIZE_MEMORY_GROUP_D */ "",
    /* IQM_VSQ_QSIZE_MEMORY_GROUP_E */ "",
    /* IQM_VSQ_QSIZE_MEMORY_GROUP_F */ "",
    /* IQM_VSQ_RED_WEIGHT_TABLE_GROUP_A */ "",
    /* IQM_VSQ_RED_WEIGHT_TABLE_GROUP_B */ "",
    /* IQM_VSQ_RED_WEIGHT_TABLE_GROUP_C */ "",
    /* IQM_VSQ_RED_WEIGHT_TABLE_GROUP_D */ "",
    /* IQM_VSQ_RED_WEIGHT_TABLE_GROUP_E */ "",
    /* IQM_VSQ_RED_WEIGHT_TABLE_GROUP_F */ "",
    /* IQM_VS_QA_AVG             */ "",
    /* IQM_VS_QA_QSZ             */ "",
    /* IQM_VS_QB_AVG             */ "",
    /* IQM_VS_QB_QSZ             */ "",
    /* IQM_VS_QC_AVG             */ "",
    /* IQM_VS_QC_QSZ             */ "",
    /* IQM_VS_QD_AVG             */ "",
    /* IQM_VS_QD_QSZ             */ "",
    /* IQM_VS_QE_AVG             */ "",
    /* IQM_VS_QE_QSZ             */ "",
    /* IQM_VS_QF_AVG             */ "",
    /* IQM_VS_QF_QSZ             */ "",
    /* IRDB                      */ "",
    /* IRE_CPU_CTXT_MAP          */ "",
    /* IRE_CPU_TDM_CTXT_MAP      */ "",
    /* IRE_CTXT_MAP              */ "",
    /* IRE_CTXT_MEM_CONTROL      */ "",
    /* IRE_LAST_RECEIVED_PACKET  */ "",
    /* IRE_MEM_60000             */ "",
    /* IRE_MEM_90000             */ "",
    /* IRE_MEM_130000            */ "",
    /* IRE_MEM_150000            */ "",
    /* IRE_MEM_170000            */ "",
    /* IRE_MEM_1D0000            */ "",
    /* IRE_MEM_D0000             */ "",
    /* IRE_NIF_CTXT_MAP          */ "",
    /* IRE_NIF_PORT_MAP          */ "",
    /* IRE_NIF_PORT_TO_CTXT_BIT_MAP */ "",
    /* IRE_NIF_TDM_CTXT_MAP      */ "",
    /* IRE_PKT_SRC_TO_CHANNEL_MAP */ "",
    /* IRE_PORT_TO_BASE_ADDRESS_MAP */ "",
    /* IRE_RCY_CTXT_MAP          */ "",
    /* IRE_TAG_SWAP_0_CFG        */ "",
    /* IRE_TAG_SWAP_1_CFG        */ "",
    /* IRE_TDM_CONFIG            */ "",
    /* IRR_DESTINATION_TABLE     */ "",
    /* IRR_FLOW_TABLE            */ "",
    /* IRR_FREE_PCB_MEMORY       */ "",
    /* IRR_IRDB                  */ "",
    /* IRR_ISF_MEMORY            */ "",
    /* IRR_IS_FREE_PCB_MEMORY    */ "",
    /* IRR_IS_PCB_LINK_TABLE     */ "",
    /* IRR_IS_PC_MEMORY          */ "",
    /* IRR_LAG_MAPPING           */ "",
    /* IRR_LAG_NEXT_MEMBER       */ "",
    /* IRR_LAG_TO_LAG_RANGE      */ "",
    /* IRR_MCDB                  */ "",
    /* IRR_MCDB_EGRESS_FORMAT_0  */ "",
    /* IRR_MCDB_EGRESS_FORMAT_1  */ "",
    /* IRR_MCDB_EGRESS_FORMAT_2  */ "",
    /* IRR_MCDB_EGRESS_FORMAT_3  */ "",
    /* IRR_MCDB_EGRESS_FORMAT_4  */ "",
    /* IRR_MCDB_EGRESS_FORMAT_5  */ "",
    /* IRR_MCDB_EGRESS_FORMAT_6  */ "",
    /* IRR_MCDB_EGRESS_FORMAT_7  */ "",
    /* IRR_MCDB_EGRESS_SPECIAL_FORMAT */ "",
    /* IRR_MCDB_EGRESS_TDM_FORMAT */ "",
    /* IRR_MCR_MEMORY            */ "",
    /* IRR_MEM_300000            */ "",
    /* IRR_MEM_340000            */ "",
    /* IRR_MEM_3C0000            */ "",
    /* IRR_PCBLINKTABLE          */ "",
    /* IRR_PCB_LINK_TABLE        */ "",
    /* IRR_PC_MEMORY             */ "",
    /* IRR_QUEUE_IS_OCB_COMMITTED */ "",
    /* IRR_SMOOTH_DIVISION       */ "",
    /* IRR_SNOOP_MIRROR_DEST_TABLE */ "",
    /* IRR_SNOOP_MIRROR_TABLE_0  */ "",
    /* IRR_SNOOP_MIRROR_TABLE_1  */ "",
    /* IRR_SNOOP_MIRROR_TM_TABLE */ "",
    /* IRR_STACK_FEC_RESOLVE     */ "",
    /* IRR_STACK_TRUNK_RESOLVE   */ "",
    /* IRR_TRAFFIC_CLASS_MAPPING */ "",
    /* IRR_TRAFFIC_CLASS_MAPPING_0 */ "",
    /* IRR_TRAFFIC_CLASS_MAPPING_1 */ "",
    /* ISBS_PORT_TO_PIPE_MAPPING */ "SBS Port to Pipe Mapping table.",
    /* ISEC_BYPASS_FILTER_TABLE  */ "traffic is de-multiplexed into controlled port and uncontrolled port using the filter table. This filter table allows traffic to be separated based on MAC_SA, MAC_DA, ranges of MAC_DA, ranges of MAC_SA or EtherType",
    /* ISEC_DEBUG_RAM            */ "ISEC DEBUG RAM",
    /* ISEC_SA_KEY_TABLE         */ "SA Key table",
    /* ISEC_SA_TABLE             */ "SA attribute Table",
    /* ISEC_SC_TABLE             */ "ISEC SC Index (SCI) Table",
    /* ISEMMANAGEMENTREQUEST     */ "",
    /* ISFMEMORY                 */ "",
    /* ISFREEPCBMEMORY           */ "",
    /* ISM_SER_FIFO              */ "ISM SER FIFO",
    /* ISPCBLINKTABLE            */ "",
    /* ISPCMEMORY                */ "",
    /* KEYA_PROGRAMINSTRUCTIONTABLE0 */ "",
    /* KEYA_PROGRAMINSTRUCTIONTABLE1 */ "",
    /* KEYA_PROGRAMINSTRUCTIONTABLE2 */ "",
    /* KEYA_PROGRAMINSTRUCTIONTABLE3 */ "",
    /* KEYB_PROGRAMINSTRUCTIONTABLE0 */ "",
    /* KEYB_PROGRAMINSTRUCTIONTABLE1 */ "",
    /* KEYB_PROGRAMINSTRUCTIONTABLE2 */ "",
    /* KEYB_PROGRAMINSTRUCTIONTABLE3 */ "",
    /* KEYPROFILEMAPINDEX        */ "",
    /* KNOWN_MCAST_BLOCK_MASK    */ "Known Multicast Block Mask, FeatureSpecific-Ethernet.",
    /* L1_BK                     */ "Level 1 Bucket Table",
    /* L1_BP                     */ "Level 1 Bucket Parameters Table",
    /* L1_LA                     */ "Level 1 Leak Aperiodic Pending Update Table. INIT=0.",
    /* L1_N0                     */ "Level 1 Node Info 0 Table",
    /* L1_N1                     */ "Level 1 Node Info 1 Table",
    /* L1_N2                     */ "Level 1 Node Info 2 Table.",
    /* L1_NG                     */ "Level 1 Node Groups Table",
    /* L1_NM                     */ "Level 1 Node Mapping Table",
    /* L1_NP                     */ "Level 1 Node Profile Table",
    /* L2MC                      */ "L2 Multicast table",
    /* L2X                       */ "Combined HW managed L2 entry table.  Includes L2_ENTRY, L2_HITDA, and L2_HITSA",
    /* L2_BK                     */ "Level 2 Bucket Table.",
    /* L2_BP                     */ "Level 2 Bucket Parameters Table.",
    /* L2_BULK                   */ "L2_BULK_MATCH and L2_BULK_REPLACE fields.            Addr 0: L2_BULK_MATCH_DATA\n            Addr 1: L2_BULK_MATCH_MASK\n            Addr 2: L2_BULK_REPLACE_DATA\n            Addr 3: L2_BULK_REPLACE_MASK",
    /* L2_BULK_MATCH_DATA        */ "L2 Bulk match enable.",
    /* L2_BULK_MATCH_MASK        */ "L2 Bulk match enable.",
    /* L2_BULK_MATCH_VLANS_PORT_A */ "VLAN Membership bitmap for PORT_A for L2_BULK.",
    /* L2_BULK_MATCH_VLANS_PORT_B */ "VLAN Membership bitmap for PORT_B for L2_BULK.",
    /* L2_BULK_REPLACE_DATA      */ "L2 Bulk match enable.",
    /* L2_BULK_REPLACE_MASK      */ "L2 Bulk match enable.",
    /* L2_ENDPOINT_ID            */ "L2 Endpoint ID table. REFER TO: L2_ENDPOINT_ID_HASH_CONTROL register.",
    /* L2_ENTRY_1                */ "L2_ENTRY_1, Single base entry views. FeatureSpecific-Ethernet.",
    /* L2_ENTRY_2                */ "L2_ENTRY_2, Double base entry views. FeatureSpecific-Ethernet.",
    /* L2_ENTRY_1_HIT_ONLY       */ "L2_ENTRY_1_HIT_ONLY, Single base entry views. FeatureSpecific-Ethernet.",
    /* L2_ENTRY_2_HIT_ONLY       */ "L2_ENTRY_2_HIT_ONLY, Double base entry views. FeatureSpecific-Ethernet.",
    /* L2_ENTRY_LP               */ "L2_ENTRY LP Control Table.",
    /* L2_ENTRY_ONLY             */ "HW managed L2_ENTRY table only.  Does not include L2_HITSA or L2_HITDA",
    /* L2_ENTRY_OVERFLOW         */ "Small overflow for L2_ENTRY table.  Treated as extra entries for all buckets.",
    /* L2_ENTRY_SCRATCH          */ "Single L2_ENTRY that is usable by software - never written by h/w learn, etc.  Fully usable L2 entry that is searched for every packet.",
    /* L2_HITDA_ONLY             */ "HW managed L2_HITDA_ONLY table.  Just the DA hit bits.",
    /* L2_HITDA_ONLY_X           */ "HW managed L2_HITDA_ONLY table.  Just the DA hit bits.",
    /* L2_HITDA_ONLY_Y           */ "HW managed L2_HITDA_ONLY table.  Just the DA hit bits.",
    /* L2_HITSA_ONLY             */ "HW managed L2_HITSA_ONLY table.  Just the SA hit bits.",
    /* L2_HITSA_ONLY_X           */ "HW managed L2_HITSA_ONLY table.  Just the SA hit bits.",
    /* L2_HITSA_ONLY_Y           */ "HW managed L2_HITSA_ONLY table.  Just the SA hit bits.",
    /* L2_LA                     */ "Level 2 Leak Aperiodic Pending Update Table.",
    /* L2_LEARN_INSERT_FAILURE   */ "If L2_ENTRY hardware learning encounters a bucket full condition, the L2_ENTRY that was to be learned is recorded to this register. Software writes all zeros to this register to reset, allowing hardware to record again.  An L2_LEARN_INSERT_FAILURE interrupt is generated when this register is non-zero.",
    /* L2_MB                     */ "Level 2 Multipath Pending Update Table.",
    /* L2_MOD_FIFO               */ "FIFO for operations that MODify the L2_ENTRY table.",
    /* L2_N0                     */ "Level 2 Node Info 0 Table.",
    /* L2_N1                     */ "Level 2 Node Info 1 Table.",
    /* L2_N2                     */ "Level 2 Node Info 2 Table.",
    /* L2_NG                     */ "Level 2 Node Groups Table.",
    /* L2_NM                     */ "Level 2 Node Mapping Table.",
    /* L2_NP                     */ "Level 2 Node Profile Table.",
    /* L2_USER_ENTRY             */ "Combined L2_ENTRY TCAM/Data RAM for guaranteed L2 entries and BPDUs.",
    /* L2_USER_ENTRY_DATA_ONLY   */ "Data SRAM for L2_USER_ENTRY TCAM.",
    /* L2_USER_ENTRY_ONLY        */ "TCAM for guaranteed L2 entries and BPDUs.",
    /* L3_BK                     */ "Level 3 Bucket Table.",
    /* L3_BP                     */ "Level 3 Bucket Parameters Table.",
    /* L3_DEFIP                  */ "L3 Default IP Route (LPM) TCAM view with data and hit bits",
    /* L3_DEFIP_128              */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet",
    /* L3_DEFIP_128_DATA_ONLY    */ "L3 Default IP Route (LPM) Data SRAM for the L3_DEFIP_128 TCAM. FeatureSpecific-Ethernet",
    /* L3_DEFIP_128_HIT_ONLY     */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet",
    /* L3_DEFIP_128_HIT_ONLY_X   */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_DEFIP_128_HIT_ONLY_Y   */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_DEFIP_128_ONLY         */ "L3 Default IP Route (LPM) TCAM only view. FeatureSpecific-Ethernet",
    /* L3_DEFIP_128_X            */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_128_Y            */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_ALPM_HIT_ONLY    */ "L3_DEFIP Hit bit table..",
    /* L3_DEFIP_ALPM_HIT_ONLY_X  */ "L3_DEFIP Hit bit table..",
    /* L3_DEFIP_ALPM_HIT_ONLY_Y  */ "L3_DEFIP Hit bit table..",
    /* L3_DEFIP_ALPM_IPV4        */ "(ALPM) SRAM Data for IPv4 view, no flex counters.",
    /* L3_DEFIP_ALPM_IPV4_1      */ "(ALPM) SRAM Data for IPv4 view with flex counters.",
    /* L3_DEFIP_ALPM_IPV6_64     */ "(ALPM) SRAM Data for IPv6(64b) view, no flex counters.",
    /* L3_DEFIP_ALPM_IPV6_128    */ "(ALPM) SRAM Data for IPv6(128b) view",
    /* L3_DEFIP_ALPM_IPV6_64_1   */ "(ALPM) SRAM Data for IPv6(64b) view, with flex counters.",
    /* L3_DEFIP_ALPM_RAW         */ "L3_DEFIP_ALPM raw view to ISS memory",
    /* L3_DEFIP_AUX_HITBIT_UPDATE */ "L3 DEFIP ALPM hitbit replacement configuration register",
    /* L3_DEFIP_AUX_SCRATCH      */ "L3 Default IP Route (LPM) Data SRAM for the L3_DEFIP TCAM.",
    /* L3_DEFIP_AUX_TABLE        */ "L3 Default IP Route (LPM) Data SRAM for the L3_DEFIP TCAM.",
    /* L3_DEFIP_DATA_ONLY        */ "L3 Default IP Route (LPM) Data SRAM for the L3_DEFIP TCAM",
    /* L3_DEFIP_HIT_ONLY         */ "L3_DEFIP Hit bit table",
    /* L3_DEFIP_HIT_ONLY_X       */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_DEFIP_HIT_ONLY_Y       */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_DEFIP_ONLY             */ "L3 Default IP Route (LPM) TCAM only view",
    /* L3_DEFIP_PAIR_128         */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_PAIR_128_DATA_ONLY */ "L3 Default IP Route (LPM) Data SRAM for the L3_DEFIP_128 TCAM. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_PAIR_128_HIT_ONLY */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_DEFIP_PAIR_128_HIT_ONLY_X */ "L3_DEFIP Hit bit table..",
    /* L3_DEFIP_PAIR_128_HIT_ONLY_Y */ "L3_DEFIP Hit bit table..",
    /* L3_DEFIP_PAIR_128_ONLY    */ "L3 Default IP Route (LPM) TCAM only view. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_X                */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_Y                */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet.",
    /* L3_ECMP                   */ "L3 Equal Cost Multipath table",
    /* L3_ECMP_COUNT             */ "Contains the number of members in each ECMP group.  Used with ECMP_POINTER to calulate index to L3_ECMP table",
    /* L3_ENTRY_1                */ "L3_ENTRY_1, Single base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_2                */ "L3_ENTRY_2, Double base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_4                */ "L3_ENTRY_4, Quad base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_1_HIT_ONLY       */ "L3_ENTRY_1_HIT_ONLY, Single base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_2_HIT_ONLY       */ "L3_ENTRY_2_HIT_ONLY, Double base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_4_HIT_ONLY       */ "L3_ENTRY_4_HIT_ONLY, Quad base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_HIT_ONLY         */ "L3 Hit bit table",
    /* L3_ENTRY_HIT_ONLY_X       */ "L3 Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_HIT_ONLY_Y       */ "L3 Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV4_MULTICAST   */ "L3 routing table IPV4 MULTICAST view",
    /* L3_ENTRY_IPV4_MULTICAST_SCRATCH */ "L3 routing table IPV4 MULTICAST_SCRATCH view, FeatureSpecific-Ethernet",
    /* L3_ENTRY_IPV4_MULTICAST_X */ "L3 routing table IPV4 MULTICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV4_MULTICAST_Y */ "L3 routing table IPV4 MULTICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV4_UNICAST     */ "L3 routing table IPV4 UNICAST view",
    /* L3_ENTRY_IPV4_UNICAST_SCRATCH */ "L3 routing table IPV4 UNICAST view, FeatureSpecific-Ethernet",
    /* L3_ENTRY_IPV4_UNICAST_X   */ "L3 routing table IPV4 UNICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV4_UNICAST_Y   */ "L3 routing table IPV4 UNICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV6_MULTICAST   */ "L3 routing table IPV6 MULTICAST view",
    /* L3_ENTRY_IPV6_MULTICAST_SCRATCH */ "L3 routing table IPV6 MULTICAST_SCRATCH view, FeatureSpecific-Ethernet",
    /* L3_ENTRY_IPV6_MULTICAST_X */ "L3 routing table IPV6 MULTICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV6_MULTICAST_Y */ "L3 routing table IPV6 MULTICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV6_UNICAST     */ "L3 routing table IPV6 UNICAST view",
    /* L3_ENTRY_IPV6_UNICAST_SCRATCH */ "L3 routing table IPV6 UNICAST view, FeatureSpecific-Ethernet",
    /* L3_ENTRY_IPV6_UNICAST_X   */ "L3 routing table IPV6 UNICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV6_UNICAST_Y   */ "L3 routing table IPV6 UNICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_LP               */ "L3_ENTRY LP Control Table.",
    /* L3_ENTRY_ONLY             */ "L3 routing table with fb_regs arch view.  No hit bits",
    /* L3_ENTRY_VALID_ONLY       */ "L3 routing table Valid Bits only view.  Organized into buckets",
    /* L3_IIF                    */ "Layer 3 Input Interface Properties",
    /* L3_IIF_PROFILE            */ "Layer 3 Input Interface Properties. Indexed by L3_IIF.L3_IIF_PROFILE_INDEX.",
    /* L3_IPMC                   */ "L3 IPMC Table",
    /* L3_IPMC_1                 */ "L3 IPMC Table (for source properties)",
    /* L3_IPMC_2                 */ "L3 IPMC Table.",
    /* L3_IPMC_REMAP             */ "L3 IPMC Remap Table",
    /* L3_LA                     */ "Level 3 Leak Aperiodic Pending Update Table.",
    /* L3_MB                     */ "Level 3 Multipath Pending Update Table.",
    /* L3_MTU_VALUES             */ "index by ING_L3_NEXT_HOP.L3_OIF or ipmc_index or VID",
    /* L3_N0                     */ "Level 3 Node Info 0 Table.",
    /* L3_N1                     */ "Level 3 Node Info 1 Table.",
    /* L3_N2                     */ "Level 3 Node Info 2 Table.",
    /* L3_NG                     */ "Level 3 Node Groups Table.",
    /* L3_NM                     */ "Level 3 Node Mapping Table.",
    /* L3_NP                     */ "Level 3 Node Profile Table.",
    /* L3_TUNNEL                 */ "L3 Tunnel Table TCAM",
    /* L3_TUNNEL_DATA_ONLY       */ "L3 Tunnel Table TCAM..",
    /* L3_TUNNEL_ONLY            */ "L3 Tunnel Table TCAM..",
    /* L4_BK                     */ "Level 4 Bucket Table.",
    /* L4_BP                     */ "Level 4 Bucket Parameters Table.",
    /* L4_FL                     */ "Level 4 Full State Table.",
    /* L4_FS                     */ "Level 4 Full Pending Update Table.",
    /* L4_LA                     */ "Level 4 Leak Aperiodic Pending Update Table.",
    /* L4_MB                     */ "Level 4 Multipath Pending Update Table.",
    /* L4_N0                     */ "Level 4 Node Info 0 Table.",
    /* L4_N1                     */ "Level 4 Node Info 1 Table.",
    /* L4_N2                     */ "Level 4 Node Info 2 Table.",
    /* L4_NG                     */ "Level 4 Node Groups Table.",
    /* L4_NM                     */ "Level 4 Node Mapping Table.",
    /* L4_NP                     */ "Level 4 Node Profile Table.",
    /* L5_BK                     */ "Level 5 Bucket Table.",
    /* L5_BP                     */ "Level 5 Bucket Parameters Table.",
    /* L5_FL                     */ "Level 5 Full State Table.",
    /* L5_FS                     */ "Level 5 Full Pending Update Table.",
    /* L5_MB                     */ "Level 5 Multipath Pending Update Table.",
    /* L5_N0                     */ "Level 5 Node Info 0 Table.",
    /* L5_N1                     */ "Level 5 Node Info 1 Table.",
    /* L5_N2                     */ "Level 5 Node Info 2 Table.",
    /* L5_NG                     */ "Level 5 Node Groups Table.",
    /* L5_NM                     */ "Level 5 Node Mapping Table.",
    /* L5_NP                     */ "Level 5 Node Profile Table.",
    /* L6_BK                     */ "Level 6 Bucket Table.",
    /* L6_BP                     */ "Level 6 Bucket Parameters Table.",
    /* L6_FL                     */ "Level 6 Full State Table.",
    /* L6_FS                     */ "Level 6 Full Pending Update Table.",
    /* L6_MB                     */ "Level 6 Multipath Pending Update Table.",
    /* L6_N0                     */ "Level 6 Node Info 0 Table.",
    /* L6_N1                     */ "Level 6 Node Info 1 Table.",
    /* L6_N2                     */ "Level 6 Node Info 2 Table.",
    /* L6_NG                     */ "Level 6 Node Groups Table.",
    /* L6_NM                     */ "Level 6 Node Mapping Table.",
    /* L6_NP                     */ "Level 6 Node Profile Table.",
    /* L7_BK                     */ "Level 7 Bucket Table.",
    /* L7_BP                     */ "Level 7 Bucket Parameters Table.",
    /* L7_N0                     */ "Level 7 Node Info 0 Table.",
    /* L7_N1                     */ "Level 7 Node Info 1 Table.",
    /* L7_N2                     */ "Level 7 Node Info 2 Table.",
    /* L7_NG                     */ "Level 7 Node Groups Table.",
    /* L7_NM                     */ "Level 7 Node Mapping Table.",
    /* L7_NP                     */ "Level 7 Node Profile Table.",
    /* LAGMAPPING                */ "",
    /* LAGNEXTMEMBER             */ "",
    /* LAGTOLAGRANGE             */ "",
    /* LAST_SENT                 */ "Priority look up table",
    /* LBPFCPROFILE              */ "",
    /* LBVECTORPROGRAMMAP        */ "",
    /* LEAFNODE_TO_QUEUE         */ "Leafnode to base queue mapping",
    /* LFEM0FIELDSELECTMAP       */ "",
    /* LFEM1FIELDSELECTMAP       */ "",
    /* LFEM2FIELDSELECTMAP       */ "",
    /* LF_QD                     */ "Leaf queue destination table",
    /* LF_QP                     */ "Leaf queue priority table",
    /* LINK_STATUS               */ "Link Status Indication Register.",
    /* LLA_TRANS                 */ "This database holds the translation from logical buffer offset to LLA buffer offset",
    /* LLMIRRORPROFILE           */ "",
    /* LLRLLVP                   */ "",
    /* LLS_L0_CHILD_STATE1       */ "L0 Child Status 1 Database",
    /* LLS_L0_CHILD_STATE1_A     */ "L0 Child Status 1 Database",
    /* LLS_L0_CHILD_WEIGHT_CFG   */ "L0 Child Weight Config Database",
    /* LLS_L0_CHILD_WEIGHT_CFG_CNT */ "L0 Child Weight Config and count Database",
    /* LLS_L0_CHILD_WEIGHT_WORKING */ "L0 Child Working Weight and Count Database",
    /* LLS_L0_CONFIG             */ "L0 Configuration Database",
    /* LLS_L0_CONFIG_A           */ "L0 Configuration Database",
    /* LLS_L0_EF_NEXT            */ "L0 Child EF Linked List Next Database",
    /* LLS_L0_ERROR              */ "L0 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L0_ERROR_MIN          */ "L0 Min Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L0_HEADS_TAILS        */ "L0 Heads and Tails Database",
    /* LLS_L0_MIN_BUCKET_C       */ "L0 Min Bucket Database for L0 child entities",
    /* LLS_L0_MIN_CONFIG_C       */ "L0 Min Configuration Database for L0 child entities",
    /* LLS_L0_MIN_NEXT           */ "L0 Child Min Linked List Next Database",
    /* LLS_L0_PARENT             */ "L0 Parent Database",
    /* LLS_L0_PARENT_STATE       */ "L0 Parent State Database",
    /* LLS_L0_PARENT_STATE_A     */ "L0 Parent State Database",
    /* LLS_L0_SHAPER_BUCKET_C    */ "L0 Shaper Bucket Database for L0 child entities",
    /* LLS_L0_SHAPER_CONFIG_C    */ "L0 Shaper Configuration Database for L0 child entities",
    /* LLS_L0_WERR_MAX_SC        */ "L0 Max Surplus Count Database",
    /* LLS_L0_WERR_NEXT          */ "L0 Child WERR Linked List Next Database",
    /* LLS_L0_XOFF               */ "Port XOFF Database",
    /* LLS_L1_CHILD_STATE1       */ "L1 Child Status 1 Database 4 entries of 7 bits per line",
    /* LLS_L1_CHILD_STATE1_A     */ "L1 Child Status 1 Database 4 entries of 7 bits per line",
    /* LLS_L1_CHILD_WEIGHT_CFG   */ "L1 Child Weight Config Database",
    /* LLS_L1_CHILD_WEIGHT_CFG_CNT */ "L1 Child Weight Config and Count Database",
    /* LLS_L1_CHILD_WEIGHT_WORKING */ "L1 Child Working Weight and Count Database",
    /* LLS_L1_CONFIG             */ "L1 Configuration Database",
    /* LLS_L1_CONFIG_A           */ "L1 Configuration Database",
    /* LLS_L1_EF_NEXT            */ "L1 Child EF Linked List Next Database",
    /* LLS_L1_ERROR              */ "L1 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L1_ERROR_MIN          */ "L1 Min Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L1_HEADS_TAILS        */ "L1 Heads Tails Database for non ef list",
    /* LLS_L1_MIN_BUCKET_C       */ "L1 Min Bucket Database for L1 child entities",
    /* LLS_L1_MIN_CONFIG_C       */ "L0 Min Configuration Database for L1 child entities",
    /* LLS_L1_MIN_NEXT           */ "L1 Child Min Linked List Next Database",
    /* LLS_L1_PARENT             */ "L1 Parent Database",
    /* LLS_L1_PARENT_STATE       */ "L1 Parent State Database",
    /* LLS_L1_PARENT_STATE_A     */ "L1 Parent State Database",
    /* LLS_L1_SHAPER_BUCKET_C    */ "L1 Shaper Bucket Database for L1 child entities",
    /* LLS_L1_SHAPER_CONFIG_C    */ "L1 Shaper Configuration Database for L1 child entities",
    /* LLS_L1_WERR_MAX_SC        */ "L1 Max Surplus Count Database",
    /* LLS_L1_WERR_NEXT          */ "L1 Child WERR Linked List Next Database",
    /* LLS_L1_XOFF               */ "Port XOFF Database",
    /* LLS_L2_ACT_MIN            */ "L2 min activation table",
    /* LLS_L2_ACT_SHAPER         */ "L2 shaper activation table",
    /* LLS_L2_ACT_XON            */ "L2 xon activation table",
    /* LLS_L2_CHILD_STATE1       */ "L2 Child state database",
    /* LLS_L2_CHILD_STATE1_A     */ "L2 Child state database",
    /* LLS_L2_CHILD_WEIGHT_CFG   */ "L2 Child Weight Config and count Database",
    /* LLS_L2_CHILD_WEIGHT_CFG_CNT */ "L2 Child Weight Config and count Database",
    /* LLS_L2_CHILD_WEIGHT_WORKING */ "L2 Child Working Weight and count Database",
    /* LLS_L2_EMPTY_STATE        */ "L2 EMPTY_STATE Database",
    /* LLS_L2_ERROR              */ "L2 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L2_ERROR_MIN          */ "L2 Min Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L2_MIN_BUCKET_LOWER_C */ "L2 Min Bucket Database for L2 child entities",
    /* LLS_L2_MIN_BUCKET_UPPER_C */ "L2 Min Bucket Database for L2 child entities",
    /* LLS_L2_MIN_CONFIG_LOWER_C */ "L2 Min Configuration Database for L2 child entities",
    /* LLS_L2_MIN_CONFIG_UPPER_C */ "L2 Min Configuration Database for L2 child entities",
    /* LLS_L2_MIN_NEXT           */ "L2 Child MIN Linked List Next Database",
    /* LLS_L2_PARENT             */ "L2 Parent Database",
    /* LLS_L2_SHAPER_BUCKET_LOWER */ "L2 Shaper Bucket Database 0 for L2 child entities",
    /* LLS_L2_SHAPER_BUCKET_UPPER */ "L2 Shaper Bucket Database 0 for L2 child entities",
    /* LLS_L2_SHAPER_CONFIG_LOWER */ "L2 Shaper Configuration Database for L2 child entities",
    /* LLS_L2_SHAPER_CONFIG_UPPER */ "L2 Shaper Configuration Database for L2 child entities",
    /* LLS_L2_WERR_NEXT          */ "L2 Child WERR Linked List Next Database 4 entries per word",
    /* LLS_L2_XOFF               */ "L2 XOFF Database",
    /* LLS_PORT_CONFIG           */ "Port Configuration Database",
    /* LLS_PORT_CONFIG_A         */ "Port Configuration Database. Implemented using flops, No ECC or Parity protection",
    /* LLS_PORT_ERROR            */ "Port Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_PORT_HEADS            */ "Port Heads Database",
    /* LLS_PORT_PARENT_STATE     */ "Port Parent State Database",
    /* LLS_PORT_PARENT_STATE_A   */ "Port Parent State Database. Implemented using flops, No ECC or Parity protection",
    /* LLS_PORT_SHAPER_BUCKET_C  */ "Port Shaper Bucket Database",
    /* LLS_PORT_SHAPER_CONFIG_C  */ "Port Shaper Configuration Database",
    /* LLS_PORT_TAILS            */ "Port Tails Database",
    /* LLS_PORT_TDM              */ "PORT TDM table",
    /* LLS_PORT_WERR_MAX_SC      */ "Port Max Surplus Count Database",
    /* LLS_PORT_XOFF             */ "Port XOFF Database",
    /* LLS_S0_ERROR              */ "S0 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_S0_SHAPER_BUCKET_C    */ "Port Shaper Bucket Database",
    /* LLS_S0_SHAPER_CONFIG_C    */ "S0 Shaper Configuration Database",
    /* LLS_S1_CONFIG             */ "S1 Configuration Database for S1s 0 to 127. S1s 128 to 255 do not require this database as those S1s map directly to an L0 with the same node ID. May be updated during traffic but only S1s that do not have any traffic to allow the setup of a new S1",
    /* LLS_S1_ERROR              */ "S1 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_S1_HEADS              */ "S1 Heads Database for S1s 0 to 127. S1s 128 to 255 do not require this database as those S1s map directly to an L0 with the same node ID : Working memory that cannot be accessed during traffic",
    /* LLS_S1_PARENT_STATE       */ "S1 Parent State Database for S1s 0 to 127. S1s 128 to 255 do not require this database as those S1s map directly to an L0 with the same node ID : Working memory that cannot be accessed during traffic",
    /* LLS_S1_SHAPER_BUCKET_C    */ "Port Shaper Bucket Database",
    /* LLS_S1_SHAPER_CONFIG_C    */ "S0 Shaper Configuration Database : Only Locations 0 to 127 should be configured. Locations 128 to 255 should be set to 0 as S1 128 to 255 is L0 128 to 255 so L0 shaping should be used for these",
    /* LLS_S1_TAILS              */ "S1 Tails Database for S1s 0 to 127. S1s 128 to 255 do not require this database as those S1s map directly to an L0 with the same node ID",
    /* LLVPPROGSEL               */ "",
    /* LLVPTABLE                 */ "",
    /* LMEP                      */ "",
    /* LMEP_1                    */ "LMEP extension",
    /* LMEP_DA                   */ "Destination MAC Address for the LMEP_TX Packets.",
    /* LM_COUNTER_CONTROL        */ "Per opcode OAM LM packets counter control.",
    /* LOCAL_SW_DISABLE_DEFAULT_PBM */ "Local switching disable default port bitmap, FeatureSpecific-Ethernet.",
    /* LOCAL_SW_DISABLE_DEFAULT_PBM_MIRR */ "Local switching disable default port bitmap for ingress mirror or egress mirror packets, FeatureSpecific-Ethernet.",
    /* LPM1                      */ "",
    /* LPM2                      */ "",
    /* LPM3                      */ "",
    /* LPM4                      */ "",
    /* LPM5                      */ "",
    /* LPM6                      */ "",
    /* LPORT_TAB                 */ "LPort Table",
    /* LRA_INST_B0_MEM0          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B0_MEM1          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B0_MEM2          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B0_MEM3          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B0_MEM4          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B0_MEM5          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM0          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM1          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM2          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM3          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM4          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM5          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_DEBUG            */ "Instruction memory for debug stream",
    /* LRA_INST_TASK_MAP         */ "Task map for instruction streams",
    /* LRB_BUBBLE_INTERVAL_TABLE */ "Holds the timer interval increment values",
    /* LRB_DM_SEGMENT_TABLE      */ "Segement table entires for DM ports 0-2.  These entries determine how many 128b results\nwill be returned from a read to these ports.  There is no entry for DM3 because it can\nonly return 1 result.",
    /* LRB_PROGRAM_TRANSLATION   */ "Search engine program translation table",
    /* LSM                       */ "",
    /* LSMEXT                    */ "",
    /* MACTAGINGCONFIGURATIONTABLE */ "",
    /* MACTFIDCOUNTERDB          */ "",
    /* MACTFIDCOUNTERPROFILEDB   */ "",
    /* MACTPLDTFORMAT1           */ "",
    /* MACTPLDTFORMAT2           */ "",
    /* MACTPLDTFORMAT1ASDETHERNET */ "",
    /* MACTPLDTFORMAT1ASDILM     */ "",
    /* MACTPLDTFORMAT1ASDPBP     */ "",
    /* MACTPLDTFORMAT1ASDSP2P    */ "",
    /* MACTPLDTFORMAT1ASDTP2P    */ "",
    /* MACTPLDTFORMAT2AUTH       */ "",
    /* MACTPLDTFORMAT2TRILL      */ "",
    /* MAC_BLOCK                 */ "Source Trunk Bitmap Table",
    /* MAC_LIMIT_PORT_MAP_TABLE  */ "TABLE for mapping a INGRESS PORT to a index into MAC_LIMIT_COUNT_TABLE.",
    /* MAC_LIMIT_TRUNK_MAP_TABLE */ "TABLE for mapping a TRUNK group to a index into MAC_LIMIT_COUNT_TABLE.",
    /* MAID_REDUCTION            */ "",
    /* MAXQSZ                    */ "",
    /* MA_INDEX                  */ "",
    /* MA_STATE                  */ "",
    /* MC1FIFO                   */ "",
    /* MC2FIFO                   */ "",
    /* MCDB                      */ "",
    /* MCRMEMORY                 */ "",
    /* MDM                       */ "",
    /* MEM_EGR_MODMAP            */ "MODID in 64 module space",
    /* MEM_INGBUF                */ "DEBUG ONLY:  69 data + 1 parity",
    /* MEM_ING_MODMAP            */ "Module mapping of 32-64 space to 128 space modids (indexed by MODID)",
    /* MEM_ING_SRCMODBLK         */ "port Block map of src_modids (indexed by SRC_MODID)",
    /* MEM_IPMC                  */ "IPMC bitmap w/ mcast id index",
    /* MEM_LLA                   */ "DEBUG ONLY:  Linked list data and reference count.",
    /* MEM_MC                    */ "MC bitmap w/ mcast id index",
    /* MEM_PP                    */ "DEBUG ONLY:  Packet data.",
    /* MEM_TRUNK_PORT_POOL       */ "This table provides the bitmap for trunk-N indexed by the hashed fields. Note: This memory does not contain parity.",
    /* MEM_UC                    */ "9-port bitmap indexed by mod id",
    /* MEM_VID                   */ "9-port bitmap indexed by VID",
    /* MEM_XQ                    */ "DEBUG ONLY:  Egress queues.",
    /* MEM_XQ_PTRS               */ "DEBUG ONLY:  Per cos queues.",
    /* MIRROR_CONTROL            */ "Mirror control register, FeatureSpecific-Ethernet.",
    /* MMU_ADM_QUEUE_DB          */ "",
    /* MMU_ADM_SRC_CTXT_DB       */ "",
    /* MMU_AGING_CTR             */ "Aging Counter RAM",
    /* MMU_AGING_CTR_EXT         */ "External Aging Counter RAM",
    /* MMU_AGING_CTR_INT         */ "Internal Aging Counter RAM",
    /* MMU_AGING_EXP             */ "Aging Expiration Status RAM",
    /* MMU_AGING_EXP_EXT         */ "External Aging Expiration Status RAM",
    /* MMU_AGING_EXP_INT         */ "Internal Aging Expiration Status RAM",
    /* MMU_AGING_LMT_EXT         */ "External Aging Limit Lookup Table, one entry per 6-bit Port value.  Used for Unicast, where Limit is a function of 6-bit Port and 4-bit PRI.",
    /* MMU_AGING_LMT_INT         */ "Internal Aging Limit Lookup Table, one entry per 6-bit Port value.  Used for Unicast, where Limit is a function of 6-bit Port and 4-bit PRI.",
    /* MMU_AGING_MASK_TBL_PIPE0  */ "replication state of the MCQS",
    /* MMU_AGING_MASK_TBL_PIPE1  */ "replication state of the MCQS",
    /* MMU_ARB_TDM_TABLE         */ "MMU to EPIPE Arbiter TDM Table",
    /* MMU_CBPCELLHEADER         */ "CBP Header RAM",
    /* MMU_CBPDATA0              */ "CBP Data RAM 0",
    /* MMU_CBPDATA1              */ "CBP Data RAM 1",
    /* MMU_CBPDATA2              */ "CBP Data RAM 2",
    /* MMU_CBPDATA3              */ "CBP Data RAM 3",
    /* MMU_CBPDATA4              */ "CBP Data RAM 4",
    /* MMU_CBPDATA5              */ "CBP Data RAM 5",
    /* MMU_CBPDATA6              */ "CBP Data RAM 6",
    /* MMU_CBPDATA7              */ "CBP Data RAM 7",
    /* MMU_CBPDATA8              */ "CBP Data RAM 8",
    /* MMU_CBPDATA9              */ "CBP Data RAM 9",
    /* MMU_CBPDATA10             */ "CBP Data RAM 10",
    /* MMU_CBPDATA11             */ "CBP Data RAM 11",
    /* MMU_CBPDATA12             */ "CBP Data RAM 12",
    /* MMU_CBPDATA13             */ "CBP Data RAM 13",
    /* MMU_CBPDATA14             */ "CBP Data RAM 14",
    /* MMU_CBPDATA15             */ "CBP Data RAM 15",
    /* MMU_CBPDATA16             */ "CBP Data RAM 16",
    /* MMU_CBPDATA17             */ "CBP Data RAM 17",
    /* MMU_CBPDATA18             */ "CBP Data RAM 18",
    /* MMU_CBPDATA19             */ "CBP Data RAM 19",
    /* MMU_CBPDATA20             */ "CBP Data RAM 20",
    /* MMU_CBPDATA21             */ "CBP Data RAM 21",
    /* MMU_CBPDATA22             */ "CBP Data RAM 22",
    /* MMU_CBPDATA23             */ "CBP Data RAM 23",
    /* MMU_CBPDATA24             */ "CBP Data RAM 24",
    /* MMU_CBPDATA25             */ "CBP Data RAM 25",
    /* MMU_CBPDATA26             */ "CBP Data RAM 26",
    /* MMU_CBPDATA27             */ "CBP Data RAM 27",
    /* MMU_CBPDATA28             */ "CBP Data RAM 28",
    /* MMU_CBPDATA29             */ "CBP Data RAM 29",
    /* MMU_CBPDATA30             */ "CBP Data RAM 30",
    /* MMU_CBPDATA31             */ "CBP Data RAM 31",
    /* MMU_CBPDATA32             */ "CBP Data RAM 32",
    /* MMU_CBPDATA33             */ "CBP Data RAM 33",
    /* MMU_CBPDATA34             */ "CBP Data RAM 34",
    /* MMU_CBPDATA35             */ "CBP Data RAM 35",
    /* MMU_CBPDATA36             */ "CBP Data RAM 36",
    /* MMU_CBPDATA37             */ "CBP Data RAM 37",
    /* MMU_CBPDATA38             */ "CBP Data RAM 38",
    /* MMU_CBPDATA39             */ "CBP Data RAM 39",
    /* MMU_CBPDATA40             */ "CBP Data RAM 40",
    /* MMU_CBPDATA41             */ "CBP Data RAM 41",
    /* MMU_CBPDATA42             */ "CBP Data RAM 42",
    /* MMU_CBPDATA43             */ "CBP Data RAM 43",
    /* MMU_CBPDATA44             */ "CBP Data RAM 44",
    /* MMU_CBPDATA45             */ "CBP Data RAM 45",
    /* MMU_CBPDATA46             */ "CBP Data RAM 46",
    /* MMU_CBPDATA47             */ "CBP Data RAM 47",
    /* MMU_CBPDATA48             */ "CBP Data RAM 48",
    /* MMU_CBPDATA49             */ "CBP Data RAM 49",
    /* MMU_CBPDATA50             */ "CBP Data RAM 50",
    /* MMU_CBPDATA51             */ "CBP Data RAM 51",
    /* MMU_CBPDATA52             */ "CBP Data RAM 52",
    /* MMU_CBPDATA53             */ "CBP Data RAM 53",
    /* MMU_CBPDATA54             */ "CBP Data RAM 54",
    /* MMU_CBPDATA55             */ "CBP Data RAM 55",
    /* MMU_CBPDATA56             */ "CBP Data RAM 56",
    /* MMU_CBPDATA57             */ "CBP Data RAM 57",
    /* MMU_CBPDATA58             */ "CBP Data RAM 58",
    /* MMU_CBPDATA59             */ "CBP Data RAM 59",
    /* MMU_CBPDATA60             */ "CBP Data RAM 60",
    /* MMU_CBPDATA61             */ "CBP Data RAM 61",
    /* MMU_CBPDATA62             */ "CBP Data RAM 62",
    /* MMU_CBPDATA63             */ "CBP Data RAM 63",
    /* MMU_CBPDATA64             */ "CBP Data RAM 64",
    /* MMU_CBPDATA65             */ "CBP Data RAM 65",
    /* MMU_CBPDATA66             */ "CBP Data RAM 66",
    /* MMU_CBPDATA67             */ "CBP Data RAM 67",
    /* MMU_CBPDATA68             */ "CBP Data RAM 68",
    /* MMU_CBPDATA69             */ "CBP Data RAM 69",
    /* MMU_CBPDATA70             */ "CBP Data RAM 70",
    /* MMU_CBPDATA71             */ "CBP Data RAM 71",
    /* MMU_CBPDATA72             */ "CBP Data RAM 72",
    /* MMU_CBPDATA73             */ "CBP Data RAM 73",
    /* MMU_CBPDATA74             */ "CBP Data RAM 74",
    /* MMU_CBPDATA75             */ "CBP Data RAM 75",
    /* MMU_CBPDATA76             */ "CBP Data RAM 76",
    /* MMU_CBPDATA77             */ "CBP Data RAM 77",
    /* MMU_CBPDATA78             */ "CBP Data RAM 78",
    /* MMU_CBPDATA79             */ "CBP Data RAM 79",
    /* MMU_CBPDATA80             */ "CBP Data RAM 80",
    /* MMU_CBPDATA81             */ "CBP Data RAM 81",
    /* MMU_CBPDATA82             */ "CBP Data RAM 82",
    /* MMU_CBPDATA83             */ "CBP Data RAM 83",
    /* MMU_CBPDATA84             */ "CBP Data RAM 84",
    /* MMU_CBPDATA85             */ "CBP Data RAM 85",
    /* MMU_CBPDATA86             */ "CBP Data RAM 86",
    /* MMU_CBPDATA87             */ "CBP Data RAM 87",
    /* MMU_CBPDATA88             */ "CBP Data RAM 88",
    /* MMU_CBPDATA89             */ "CBP Data RAM 89",
    /* MMU_CBPDATA90             */ "CBP Data RAM 90",
    /* MMU_CBPDATA91             */ "CBP Data RAM 91",
    /* MMU_CBPDATA92             */ "CBP Data RAM 92",
    /* MMU_CBPDATA93             */ "CBP Data RAM 93",
    /* MMU_CBPDATA94             */ "CBP Data RAM 94",
    /* MMU_CBPDATA95             */ "CBP Data RAM 95",
    /* MMU_CBPDATA96             */ "CBP Data RAM 96",
    /* MMU_CBPDATA97             */ "CBP Data RAM 97",
    /* MMU_CBPDATA98             */ "CBP Data RAM 98",
    /* MMU_CBPDATA99             */ "CBP Data RAM 99",
    /* MMU_CBPDATA100            */ "CBP Data RAM 100",
    /* MMU_CBPDATA101            */ "CBP Data RAM 101",
    /* MMU_CBPDATA102            */ "CBP Data RAM 102",
    /* MMU_CBPDATA103            */ "CBP Data RAM 103",
    /* MMU_CBPI_0                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 0",
    /* MMU_CBPI_1                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 1",
    /* MMU_CBPI_2                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 2",
    /* MMU_CBPI_3                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 3",
    /* MMU_CBPI_4                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 4",
    /* MMU_CBPI_5                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 5",
    /* MMU_CBPI_6                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 6",
    /* MMU_CBPI_7                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 7",
    /* MMU_CBPI_8                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 8",
    /* MMU_CBPI_9                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 9",
    /* MMU_CBPI_10               */ "Internal Payload Memory, Address Range 0 to 10923, RAM 10",
    /* MMU_CBPI_11               */ "Internal Payload Memory, Address Range 0 to 10923, RAM 11",
    /* MMU_CBPPKTHEADER0         */ "CBP Packet Header RAM 0",
    /* MMU_CBPPKTHEADER1         */ "CBP Packet Header RAM 1",
    /* MMU_CBPPKTHEADER2         */ "CBP Packet Header RAM 1 MEM0",
    /* MMU_CBPPKTHEADER0_MEM0    */ "CBP Packet Header RAM 0",
    /* MMU_CBPPKTHEADER0_MEM1    */ "CBP Packet Header RAM 1",
    /* MMU_CBPPKTHEADER0_MEM2    */ "CBP Packet Header RAM 2",
    /* MMU_CBPPKTHEADER0_MEM3    */ "CBP Packet Header RAM 2",
    /* MMU_CBPPKTHEADER1_MEM0    */ "CBP Packet Header RAM 1 MEM0",
    /* MMU_CBPPKTHEADER1_MEM1    */ "CBP Packet Header RAM 1 MEM0",
    /* MMU_CBPPKTHEADER1_MEM2    */ "CBP Packet Header 1 RAM 2",
    /* MMU_CBPPKTHEADERCPU       */ "CBP Packet Header CPU RAM",
    /* MMU_CBPPKTHEADER_EXT      */ "CBP Packet Header RAM 2 - is written at EOP",
    /* MMU_CBPPKTLENGTH          */ "CBP Packet Length RAM",
    /* MMU_CCP                   */ "Copy Count Pool RAM",
    /* MMU_CCP0_RESEQ_MEM        */ "Copy Count Pool RAM",
    /* MMU_CCP1_RESEQ_MEM        */ "Copy Count Pool RAM",
    /* MMU_CCPE_MEM              */ "External Buffer Copy Count Pool RAM",
    /* MMU_CCPI_MEM              */ "Internal Buffer Copy Count Pool RAM",
    /* MMU_CCP_MEM               */ "Copy Count Pool RAM",
    /* MMU_CCP_RELEASE_FIFO      */ "CCP Release FiFo",
    /* MMU_CELLCHK               */ "Cell CRC Check",
    /* MMU_CELLCHK0              */ "Cell CRC Check",
    /* MMU_CELLCHK1              */ "Cell CRC Check",
    /* MMU_CELLCHK2              */ "Cell CRC Check",
    /* MMU_CELLCHK3              */ "Cell CRC Check",
    /* MMU_CELLLINK              */ "CELLLINK",
    /* MMU_CELLLINKE             */ "CELLLINK Database for External Buffers",
    /* MMU_CELLLINKI             */ "CELLLINK Database for Internal Buffers",
    /* MMU_CELL_LINK             */ "CELL_LINK",
    /* MMU_CFAP                  */ "CBP Free Address Pool RAM",
    /* MMU_CFAPE_BITMAP          */ "External Free Address Pool Bitmap RAM",
    /* MMU_CFAPE_STACK           */ "Internal Free Address Pool Stack RAM",
    /* MMU_CFAPI_BITMAP          */ "Internal Free Address Pool Bitmap RAM",
    /* MMU_CFAPI_STACK           */ "Internal Free Address Pool Stack RAM",
    /* MMU_CFAP_BANK0            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK1            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK2            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK3            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK4            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK5            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK6            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK7            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK8            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK9            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK10           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK11           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK12           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK13           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK14           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK15           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_MEM              */ "CBP Free Address Pool RAM",
    /* MMU_CHFC_SYSPORT_MAPPING  */ "Mapping from channel Flow Control Byte number to System port number",
    /* MMU_CPQLINK               */ "CPQLINK",
    /* MMU_CTR_COLOR_DROP_MEM    */ "Unicast WRED Color drop counter ,and\nUnicast/Multicast Color drop counter.\n0x0   -  0x41 :  Port0 - Port65 Unicast WRED Red Color drop count\n0x42  -  0x83 :  Port0 - Port65 Unicast WRED Yellow Color drop count\n0x84  -  0xC5 :  Port0 - Port65 Unicast WRED Greeen Color drop count\n0xC6  -  0x107:  Port0 - Port65 Red Color drop count\n0x108 -  0x149:  Port0 - Port65 Yellow Color drop count\n--\n|0x0\n|   Unicast WRED Red Drop CNT\n|\n--\n|0x42\n|   Unicast WRED Yellow Drop CNT\n|\n-\n|0x84\n|   Unicast WRED Gre ...",
    /* MMU_CTR_ING_DROP_MEM      */ "Per ingress port drop counter, due to THDI  drop.\nentries 0 - 52    :   PIPEx Ingress port 0  - 52\nentries 64 - 116  :   PIPEy Ingress port 64 - 116",
    /* MMU_CTR_MC_DROP_MEM       */ "Unicast drop counter mmeory.\nPORT0 - has 48 entries, map to CPU_COS0 - CPU_COS47\nPORT1 - PORT65 have 5 entries per port: 0-4 map to COS0-COS4;\nPort0:  0x0   <= addr <= 0x2F    48 entries\nPort1:  0x30  <= addr <= 0x34    10 entries\nPort2:  0x35  <= addr <= 0x39    10 entries\n...                              10 entries\nport65: 0x170 <= addr <= 0x174   10 entries",
    /* MMU_CTR_MC_DROP_MEM0      */ "Multicast drop counter mmeory for PIPEx.\nPORT0  - PORT51  : 10 entries each port: 0 - 519\nPORT52 (CPU Port): 48 entries : 520-567",
    /* MMU_CTR_MC_DROP_MEM1      */ "Multicast drop counter mmeory for PIPEx.\nPORT64  - PORT115 : 10 entries per port : 0 - 519\nport116 (loopback port)  : 8 entries    : 520 - 527",
    /* MMU_CTR_MTRI_DROP_MEM     */ "Per ingress port drop counter, due to MTRI drop ONLY.\nentries 0 - 52    :   PIPEx Ingress port 0  - 52\nentries 64 - 116  :   PIPEy Ingress port 64 - 116",
    /* MMU_CTR_UC_DROP_MEM       */ "Unicast drop counter mmeory.\nDrop Counters for MMU PORT1 - PORT32,PORT34 - PORT65.\nDrop Counters for CPU & LBP port are in \"MMU_CTR_MC_DROP_MEM\"\nPORT1  - PORT4 have  74 entries per port: 64-73 map to COS0-COS9, 0-63 map to VOQ 64-127\nPORT34 - PORT37 have 74 entries per port: 64-73 map to COS0-COS9, 0-63 map to VOQ 64-127\nPORT5  - PORT32 have 10 entries per port: 0-9 map to COS0-COS9.\nPORT38 - PORT65 have 10 entries per port: 0-9 map to COS0-COS9.\nPort1:  0x0   <= addr <= 0x49    74 entries\nPort2 ...",
    /* MMU_DEQ_AGING_MASK_LOOKUP_TABLE_MEM */ "Aging Mask Memory, Address Range 0 to 63, RAM Instance 0",
    /* MMU_DEQ_RDE_DESCP_MEM     */ "Redirect Descriptor RAM",
    /* MMU_DRAM_ADDRESS_SPACE    */ "",
    /* MMU_ENQ_CBP_32B_WR_STORE_0 */ "Temporary store of SOP/EOP data - CPU readable only",
    /* MMU_ENQ_CBP_32B_WR_STORE_1 */ "Temporary store of SOP/EOP data - CPU readable only",
    /* MMU_ENQ_CBP_32B_WR_STORE_2 */ "Temporary store of SOP/EOP data - CPU readable only",
    /* MMU_ENQ_CFAPI_INTERNAL_RECYCLE */ "Internal Pointer Cache",
    /* MMU_ENQ_FAP_BITMAP        */ "ENQ FAP BITMAP",
    /* MMU_ENQ_FAP_STACK         */ "ENQ FAP STACK",
    /* MMU_ENQ_PACKING_CTXT_FIFOS_FP_LL */ "ENQ PAcking per Ctxt Reasembly FIFOs Free Pool and Linked List",
    /* MMU_ENQ_PBI_DB            */ "ENQ memory for storage of PBI information at SOP.",
    /* MMU_ENQ_RQE_WR_COMPLETE_0 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_RQE_WR_COMPLETE_1 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_RQE_WR_COMPLETE_2 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_RQE_WR_COMPLETE_3 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_RQE_WR_COMPLETE_4 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_RQE_WR_COMPLETE_5 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_SRC_PORT_STATE_0  */ "ENQ SRC PORT STATE 0",
    /* MMU_ENQ_SRC_PORT_STATE_1  */ "ENQ SRC PORT STATE 1",
    /* MMU_ENQ_SRC_PORT_STATE_2  */ "ENQ SRC PORT STATE 2",
    /* MMU_ENQ_SRC_PPP_TO_S1_LOOKUP */ "MPB.SRC_PPP to Destination Channel lookup for COE Pause Frames",
    /* MMU_EPRG_MEM              */ "Egress purge queue memory",
    /* MMU_EXT_MC_GROUP_MAP      */ "Extended MC group mapping table",
    /* MMU_EXT_MC_QUEUE_LIST0    */ "Extended MC group mapping table",
    /* MMU_EXT_MC_QUEUE_LIST1    */ "Extended MC group mapping table",
    /* MMU_EXT_MC_QUEUE_LIST4    */ "Extended MC group mapping table",
    /* MMU_FDF                   */ "",
    /* MMU_IDF                   */ "",
    /* MMU_INTFI_BASE_INDEX_TBL  */ "Base Index Table in Mapping and Storage",
    /* MMU_INTFI_BASE_TBL        */ "Flow Control Base Table",
    /* MMU_INTFI_DEBUG_MEM       */ "Flow Control Debug Memory",
    /* MMU_INTFI_FC_MAP_TBL0     */ "FC Map Table for Level 0 in Mapping and Storage",
    /* MMU_INTFI_FC_MAP_TBL1     */ "FC Map Table for Level 1 in Mapping and Storage",
    /* MMU_INTFI_FC_MAP_TBL2     */ "FC Map Table for Level 2 in Mapping and Storage",
    /* MMU_INTFI_FC_STATE_TBL    */ "Flow Control State Table",
    /* MMU_INTFI_FC_ST_TBL0      */ "FC State Table for Level 0 in Mapping and Storage",
    /* MMU_INTFI_FC_ST_TBL1      */ "FC State Table for Level 1 in Mapping and Storage",
    /* MMU_INTFI_FC_ST_TBL2      */ "FC State Table for Level 2 in Mapping and Storage",
    /* MMU_INTFI_MAP_TBL         */ "Flow Control Map Table",
    /* MMU_INTFI_MERGE_ST_TBL    */ "Merge State Table in DMVOQ merge block maintained by hardware",
    /* MMU_INTFI_OFFSET_MAP_TBL  */ "Offset Map Table in DMVOQ merge block",
    /* MMU_INTFI_PFC_ST_TBL      */ "PFC State Table in Mapping and Storage",
    /* MMU_INTFI_ST_TRANS_TBL    */ "State Translation Table in Mapping and Storage",
    /* MMU_INTFI_XLATE_TBL       */ "Status Translation Table. XLATE_TBL0 = 0-255, XLATE_TBL1 = 256-511",
    /* MMU_INTFI_XPIPE_FC_MAP_TBL0 */ "FC Map Table for Level 0 in Mapping and Storage",
    /* MMU_INTFI_XPIPE_FC_MAP_TBL1 */ "FC Map Table for Level 1 in Mapping and Storage",
    /* MMU_INTFI_XPIPE_FC_MAP_TBL2 */ "FC Map Table for Level 2 in Mapping and Storage",
    /* MMU_INTFI_YPIPE_FC_MAP_TBL0 */ "FC Map Table for Level 0 in Mapping and Storage",
    /* MMU_INTFI_YPIPE_FC_MAP_TBL1 */ "FC Map Table for Level 1 in Mapping and Storage",
    /* MMU_INTFI_YPIPE_FC_MAP_TBL2 */ "FC Map Table for Level 2 in Mapping and Storage",
    /* MMU_INTFO_QCN_CNM_RVD_TBL */ "number of received QCN CNM which triggered PRP PFC/PAUSE",
    /* MMU_INTFO_QCN_CNM_TIMER_TBL */ "Timer for triggered PRP PFC/PAUSE",
    /* MMU_INTFO_QCN_TBID_TBL    */ "table ID for QCN_TIMEOUT_VALUE map table, addressed by dst_port[5:0]",
    /* MMU_INTFO_QCN_TOV_TBL     */ "QCN_TIMEOUT_VALUE table",
    /* MMU_INTFO_TC2PRI_MAPPING  */ "Channel TC state to Priority mapping",
    /* MMU_IPCTR_CTXT_COUNTER_0  */ "IPCTR CTXT COUNTER 0",
    /* MMU_IPCTR_PG_COUNTER_0    */ "IPCTR PG COUNTER 0",
    /* MMU_IPCTR_PG_COUNTER_1    */ "IPCTR PG COUNTER 1",
    /* MMU_IPMC_GROUP_TBL0       */ "IPMC VLAN Group Table 0",
    /* MMU_IPMC_GROUP_TBL1       */ "IPMC VLAN Group Table 1",
    /* MMU_IPMC_GROUP_TBL2       */ "IPMC VLAN Group Table 2",
    /* MMU_IPMC_GROUP_TBL3       */ "IPMC VLAN Group Table 3",
    /* MMU_IPMC_GROUP_TBL4       */ "IPMC VLAN Group Table 4",
    /* MMU_IPMC_GROUP_TBL5       */ "IPMC VLAN Group Table 5",
    /* MMU_IPMC_GROUP_TBL6       */ "IPMC VLAN Group Table 6",
    /* MMU_IPMC_GROUP_TBL7       */ "IPMC VLAN Group Table 7",
    /* MMU_IPMC_GROUP_TBL8       */ "IPMC VLAN Group Table 8",
    /* MMU_IPMC_GROUP_TBL9       */ "IPMC VLAN Group Table 9",
    /* MMU_IPMC_GROUP_TBL10      */ "IPMC VLAN Group Table 10",
    /* MMU_IPMC_GROUP_TBL11      */ "IPMC VLAN Group Table 11",
    /* MMU_IPMC_GROUP_TBL12      */ "IPMC VLAN Group Table 12",
    /* MMU_IPMC_GROUP_TBL13      */ "IPMC VLAN Group Table 13",
    /* MMU_IPMC_GROUP_TBL14      */ "IPMC VLAN Group Table 14",
    /* MMU_IPMC_GROUP_TBL15      */ "IPMC VLAN Group Table 15",
    /* MMU_IPMC_GROUP_TBL16      */ "IPMC VLAN Group Table 16",
    /* MMU_IPMC_GROUP_TBL17      */ "IPMC VLAN Group Table 17",
    /* MMU_IPMC_GROUP_TBL18      */ "IPMC VLAN Group Table 18",
    /* MMU_IPMC_GROUP_TBL19      */ "IPMC VLAN Group Table 19",
    /* MMU_IPMC_GROUP_TBL20      */ "IPMC VLAN Group Table 20",
    /* MMU_IPMC_GROUP_TBL21      */ "IPMC VLAN Group Table 21",
    /* MMU_IPMC_GROUP_TBL22      */ "IPMC VLAN Group Table 22",
    /* MMU_IPMC_GROUP_TBL23      */ "IPMC VLAN Group Table 23",
    /* MMU_IPMC_GROUP_TBL24      */ "IPMC VLAN Group Table 24",
    /* MMU_IPMC_GROUP_TBL25      */ "IPMC VLAN Group Table 25",
    /* MMU_IPMC_GROUP_TBL26      */ "IPMC VLAN Group Table 26",
    /* MMU_IPMC_GROUP_TBL27      */ "IPMC VLAN Group Table 27",
    /* MMU_IPMC_GROUP_TBL28      */ "IPMC VLAN Group Table 28",
    /* MMU_IPMC_GROUP_TBL29      */ "IPMC VLAN Group Table 29",
    /* MMU_IPMC_GROUP_TBL30      */ "IPMC VLAN Group Table 30",
    /* MMU_IPMC_GROUP_TBL31      */ "IPMC VLAN Group Table 31",
    /* MMU_IPMC_GROUP_TBL32      */ "IPMC VLAN Group Table 32",
    /* MMU_IPMC_GROUP_TBL33      */ "IPMC VLAN Group Table 33",
    /* MMU_IPMC_GROUP_TBL34      */ "IPMC VLAN Group Table 34",
    /* MMU_IPMC_GROUP_TBL35      */ "IPMC VLAN Group Table 35",
    /* MMU_IPMC_GROUP_TBL36      */ "IPMC VLAN Group Table 36",
    /* MMU_IPMC_GROUP_TBL37      */ "IPMC VLAN Group Table 37",
    /* MMU_IPMC_GROUP_TBL38      */ "IPMC VLAN Group Table 38",
    /* MMU_IPMC_GROUP_TBL39      */ "IPMC VLAN Group Table 39",
    /* MMU_IPMC_GROUP_TBL40      */ "IPMC VLAN Group Table 40",
    /* MMU_IPMC_GROUP_TBL41      */ "IPMC VLAN Group Table 41",
    /* MMU_IPMC_GROUP_TBL42      */ "IPMC VLAN Group Table 42",
    /* MMU_IPMC_GROUP_TBL43      */ "IPMC VLAN Group Table 43",
    /* MMU_IPMC_GROUP_TBL44      */ "IPMC VLAN Group Table 44",
    /* MMU_IPMC_GROUP_TBL45      */ "IPMC VLAN Group Table 45",
    /* MMU_IPMC_GROUP_TBL46      */ "IPMC VLAN Group Table 46",
    /* MMU_IPMC_GROUP_TBL47      */ "IPMC VLAN Group Table 47",
    /* MMU_IPMC_GROUP_TBL48      */ "IPMC VLAN Group Table 48",
    /* MMU_IPMC_GROUP_TBL49      */ "IPMC VLAN Group Table 49",
    /* MMU_IPMC_GROUP_TBL50      */ "IPMC VLAN Group Table 50",
    /* MMU_IPMC_GROUP_TBL51      */ "IPMC VLAN Group Table 51",
    /* MMU_IPMC_GROUP_TBL52      */ "IPMC VLAN Group Table 52",
    /* MMU_IPMC_GROUP_TBL53      */ "IPMC VLAN Group Table 53",
    /* MMU_IPMC_GROUP_TBL54      */ "IPMC VLAN Group Table 54",
    /* MMU_IPMC_GROUP_TBL55      */ "IPMC VLAN Group Table 55",
    /* MMU_IPMC_GROUP_TBL56      */ "IPMC VLAN Group Table 56",
    /* MMU_IPMC_GROUP_TBL57      */ "IPMC VLAN Group Table 57",
    /* MMU_IPMC_GROUP_TBL58      */ "IPMC VLAN Group Table 58",
    /* MMU_IPMC_GROUP_TBL59      */ "IPMC VLAN Group Table 59",
    /* MMU_IPMC_GROUP_TBL60      */ "IPMC VLAN Group Table 60",
    /* MMU_IPMC_GROUP_TBL61      */ "IPMC VLAN Group Table 61",
    /* MMU_IPMC_GROUP_TBL62      */ "IPMC VLAN Group Table 62",
    /* MMU_IPMC_GROUP_TBL63      */ "IPMC VLAN Group Table 63",
    /* MMU_IPMC_GROUP_TBL64      */ "IPMC VLAN Group Table 64",
    /* MMU_IPMC_GROUP_TBL65      */ "IPMC VLAN Group Table 65",
    /* MMU_IPMC_VLAN_TBL         */ "IPMC VLAN LSB Bitmap Table RAM",
    /* MMU_IPMC_VLAN_TBL_MEM0    */ "IPMC VLAN LSB Bitmap Table RAM 0",
    /* MMU_IPMC_VLAN_TBL_MEM1    */ "IPMC VLAN LSB Bitmap Table RAM 0",
    /* MMU_ITE_CTRL_0            */ "ITE Control used for write complete information",
    /* MMU_ITE_CTRL_1            */ "ITE Control used for write complete information",
    /* MMU_ITE_PACKET_PTR_STORE  */ "",
    /* MMU_ITE_QMGR_FLL          */ "EMA FIFO Free Pointer Linked List",
    /* MMU_ITE_QMGR_QLL          */ "EMA FIFO Queue Block Linked List",
    /* MMU_ITE_WORK_QUEUE_0      */ "EMA FIFO Working memory 0",
    /* MMU_ITE_WORK_QUEUE_1      */ "EMA FIFO Working memory 1",
    /* MMU_ITE_WORK_QUEUE_2      */ "EMA FIFO Working memory 2",
    /* MMU_MAX_BUCKET_GPORT      */ "MMU_MAX_BUCKET_GPORT",
    /* MMU_MAX_BUCKET_PGRP0      */ "MMU_MAX_BUCKET_PGRP0 - port 2 ~ 15\nport/cos to MEM idx mapping: idx = {port - 2, cos[2:0]}",
    /* MMU_MAX_BUCKET_PGRP1      */ "MMU_MAX_BUCKET_PGRP1 - port 0, 16 ~ 29\nport/cos to MEM idx mapping:\n1. port=0, idx = {0, cos[2:0]}\n2. port!=0, idx = {port - 15, cos[2:0]}    (port 16~29)",
    /* MMU_MCFP                  */ "MCFP",
    /* MMU_MCQDB0                */ "MCQDB0",
    /* MMU_MCQDB1                */ "MCQDB1",
    /* MMU_MCQE                  */ "MCQE",
    /* MMU_MCQN                  */ "MCQN",
    /* MMU_MC_FIFO0              */ "MC_FIFO",
    /* MMU_MC_FIFO1              */ "MC_FIFO1",
    /* MMU_MC_FIFO2              */ "MC_FIFO1",
    /* MMU_MC_FIFO3              */ "MC_FIFO1",
    /* MMU_MC_FIFO4              */ "MC_FIFO1",
    /* MMU_MC_FIFO5              */ "MC_FIFO1",
    /* MMU_MC_FIFO6              */ "MC_FIFO1",
    /* MMU_MC_FIFO7              */ "MC_FIFO1",
    /* MMU_MC_FIFO8              */ "MC_FIFO1",
    /* MMU_MC_FIFO9              */ "MC_FIFO1",
    /* MMU_MC_FIFO10             */ "MC_FIFO1",
    /* MMU_MC_FIFO11             */ "MC_FIFO1",
    /* MMU_MC_FIFO12             */ "MC_FIFO1",
    /* MMU_MC_FIFO13             */ "MC_FIFO1",
    /* MMU_MC_FIFO14             */ "MC_FIFO1",
    /* MMU_MC_FIFO15             */ "MC_FIFO1",
    /* MMU_MC_FIFO16             */ "MC_FIFO1",
    /* MMU_MC_FIFO17             */ "MC_FIFO1",
    /* MMU_MC_FIFO18             */ "MC_FIFO1",
    /* MMU_MC_FIFO19             */ "MC_FIFO1",
    /* MMU_MC_FIFO20             */ "MC_FIFO1",
    /* MMU_MC_FIFO21             */ "MC_FIFO1",
    /* MMU_MC_FIFO22             */ "MC_FIFO1",
    /* MMU_MC_FIFO23             */ "MC_FIFO1",
    /* MMU_MC_FIFO24             */ "MC_FIFO1",
    /* MMU_MC_FIFO25             */ "MC_FIFO1",
    /* MMU_MC_FIFO26             */ "MC_FIFO1",
    /* MMU_MC_FIFO27             */ "MC_FIFO1",
    /* MMU_MC_FIFO28             */ "MC_FIFO1",
    /* MMU_MC_FIFO29             */ "MC_FIFO1",
    /* MMU_MC_FIFO30             */ "MC_FIFO1",
    /* MMU_MC_FIFO31             */ "MC_FIFO1",
    /* MMU_MC_FIFO32             */ "MC_FIFO1",
    /* MMU_MC_FIFO33             */ "MC_FIFO1",
    /* MMU_MC_FIFO34             */ "MC_FIFO1",
    /* MMU_MC_FIFO35             */ "MC_FIFO1",
    /* MMU_MC_FIFO36             */ "MC_FIFO1",
    /* MMU_MC_FIFO37             */ "MC_FIFO1",
    /* MMU_MC_FIFO38             */ "MC_FIFO1",
    /* MMU_MC_FIFO39             */ "MC_FIFO1",
    /* MMU_MC_FIFO40             */ "MC_FIFO1",
    /* MMU_MC_FIFO41             */ "MC_FIFO1",
    /* MMU_MC_FIFO42             */ "MC_FIFO1",
    /* MMU_MC_FIFO43             */ "MC_FIFO1",
    /* MMU_MC_FIFO44             */ "MC_FIFO1",
    /* MMU_MC_FIFO45             */ "MC_FIFO1",
    /* MMU_MC_FIFO46             */ "MC_FIFO1",
    /* MMU_MC_FIFO47             */ "MC_FIFO1",
    /* MMU_MC_FIFO48             */ "MC_FIFO1",
    /* MMU_MC_FIFO49             */ "MC_FIFO1",
    /* MMU_MC_FIFO50             */ "MC_FIFO1",
    /* MMU_MC_FIFO51             */ "MC_FIFO1",
    /* MMU_MC_FIFO52             */ "MC_FIFO1",
    /* MMU_MC_FIFO53             */ "MC_FIFO1",
    /* MMU_MC_FIFO54             */ "MC_FIFO1",
    /* MMU_MC_FIFO55             */ "MC_FIFO1",
    /* MMU_MC_FIFO56             */ "MC_FIFO1",
    /* MMU_MC_FIFO57             */ "MC_FIFO1",
    /* MMU_MC_FIFO58             */ "MC_FIFO1",
    /* MMU_MC_FIFO59             */ "MC_FIFO1",
    /* MMU_MC_FIFO60             */ "MC_FIFO1",
    /* MMU_MC_FIFO61             */ "MC_FIFO1",
    /* MMU_MC_FIFO62             */ "MC_FIFO1",
    /* MMU_MC_FIFO63             */ "MC_FIFO1",
    /* MMU_MC_FIFO64             */ "MC_FIFO1",
    /* MMU_MC_FIFO65             */ "MC_FIFO1",
    /* MMU_MC_FIFO48_1           */ "MC_FIFO",
    /* MMU_MC_FIFO49_1           */ "MC_FIFO",
    /* MMU_MC_FIFO50_1           */ "MC_FIFO",
    /* MMU_MC_FIFO51_1           */ "MC_FIFO",
    /* MMU_MC_FIFO52_1           */ "MC_FIFO",
    /* MMU_MC_FIFO53_1           */ "MC_FIFO",
    /* MMU_MC_FIFO54_1           */ "MC_FIFO",
    /* MMU_MC_FIFO55_1           */ "MC_FIFO",
    /* MMU_MC_FIFO57_1           */ "MC_FIFO",
    /* MMU_MC_FIFO57_2           */ "MC_FIFO",
    /* MMU_MC_FIFO57_3           */ "MC_FIFO",
    /* MMU_MC_FIFO59_1           */ "MC_FIFO",
    /* MMU_MC_FIFO59_2           */ "MC_FIFO",
    /* MMU_MIN_BUCKET_GPORT      */ "MMU_MIN_BUCKET_GPORT",
    /* MMU_MIN_BUCKET_PGRP0      */ "MMU_MIN_BUCKET_PGRP0 - port 2 ~ 15\nport/cos to MEM idx mapping: idx = {port - 2, cos[2:0]}",
    /* MMU_MIN_BUCKET_PGRP1      */ "MMU_MIN_BUCKET_PGRP1 - port 0, 16 ~ 29\nport/cos to MEM idx mapping:\n1. port=0, idx = {0, cos[2:0]}\n2. port!=0, idx = {port - 15, cos[2:0]}    (port 16~29)",
    /* MMU_MTRI_BKPMETERINGBUCKET_MEM_0 */ "Back-pressure Metering Bucket",
    /* MMU_MTRI_BKPMETERINGBUCKET_MEM_1 */ "Back-pressure Metering Bucket",
    /* MMU_MTRI_BKPMETERINGCONFIG_MEM_0 */ "Back-pressure Metering Config",
    /* MMU_MTRI_BKPMETERINGCONFIG_MEM_1 */ "Back-pressure Metering Config",
    /* MMU_MTRO_BUCKET_L0_MEM    */ "L0 nodes min/max bucket. This cannot be written to, and is used by the shaping logic to store the bucket count/status",
    /* MMU_MTRO_BUCKET_L0_MEM_0  */ "L0 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L0_MEM_1  */ "L0 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L1_MEM    */ "L1 nodes min/max bucket. This cannot be written to, and is used by the shaping logic to store the bucket count/status",
    /* MMU_MTRO_BUCKET_L1_MEM_0  */ "L1 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L1_MEM_1  */ "L1 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L2_MEM    */ "L2 nodes min/max bucket. This cannot be written to, and is used by the shaping logic to store the bucket count/status",
    /* MMU_MTRO_BUCKET_L2_MEM_0  */ "L2 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L2_MEM_1  */ "L2 nodes min/max bucket",
    /* MMU_MTRO_EGRMETERINGBUCKET_MEM_0 */ "Port level metering configuration",
    /* MMU_MTRO_EGRMETERINGBUCKET_MEM_1 */ "Port level metering configuration",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_0 */ "Port level metering configuration",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_1 */ "Port level metering configuration",
    /* MMU_MTRO_L0_MEM           */ "L0 nodes min/max configuration",
    /* MMU_MTRO_L0_MEM_0         */ "L0 nodes min/max configuration",
    /* MMU_MTRO_L0_MEM_1         */ "L0 nodes min/max configuration",
    /* MMU_MTRO_L1_MEM           */ "L1 nodes min/max configuration",
    /* MMU_MTRO_L1_MEM_0         */ "L1 nodes min/max configuration",
    /* MMU_MTRO_L1_MEM_1         */ "L1 nodes min/max configuration",
    /* MMU_MTRO_L2_MEM           */ "L2 nodes min/max configuration",
    /* MMU_MTRO_L2_MEM_0         */ "L2 nodes min/max configuration",
    /* MMU_MTRO_L2_MEM_1         */ "L2 nodes min/max configuration",
    /* MMU_OVQ_BANK0_MEM0        */ "OVQ BANK0 MEM0",
    /* MMU_OVQ_BANK0_MEM1        */ "OVQ BANK0 MEM1",
    /* MMU_OVQ_BANK0_MEM2        */ "OVQ BANK0 MEM2",
    /* MMU_OVQ_BANK0_MEM3        */ "OVQ BANK0 MEM3",
    /* MMU_OVQ_BANK1_MEM0        */ "OVQ BANK1 MEM0",
    /* MMU_OVQ_BANK1_MEM1        */ "OVQ BANK1 MEM1",
    /* MMU_OVQ_BANK1_MEM2        */ "OVQ BANK1 MEM2",
    /* MMU_OVQ_BANK1_MEM3        */ "OVQ BANK0 MEM3",
    /* MMU_OVQ_BANK2_MEM0        */ "OVQ BANK2 MEM0",
    /* MMU_OVQ_BANK2_MEM1        */ "OVQ BANK2 MEM1",
    /* MMU_OVQ_BANK2_MEM2        */ "OVQ BANK2 MEM2",
    /* MMU_OVQ_BANK2_MEM3        */ "OVQ BANK2 MEM3",
    /* MMU_OVQ_BANK3_MEM0        */ "OVQ BANK3 MEM0",
    /* MMU_OVQ_BANK3_MEM1        */ "OVQ BANK3 MEM1",
    /* MMU_OVQ_BANK3_MEM2        */ "OVQ BANK0 MEM2",
    /* MMU_OVQ_BANK3_MEM3        */ "OVQ BANK3 MEM3",
    /* MMU_OVQ_DISTRIBUTOR_MEM0  */ "OVQ_DISTRIBUTOR_MEM0",
    /* MMU_OVQ_DISTRIBUTOR_MEM1  */ "OVQ_DISTRIBUTOR_MEM1",
    /* MMU_OVQ_DISTRIBUTOR_MEM2  */ "OVQ Distributor MEM2",
    /* MMU_OVQ_DISTRIBUTOR_MEM3  */ "OVQ DISTRIBUTOR MEM3",
    /* MMU_PDB0                  */ "PDB0",
    /* MMU_PDB1                  */ "PDB1",
    /* MMU_PFAP_MEM              */ "Packet Pointer Free Address Pool RAM",
    /* MMU_PKTHDR                */ "CBP Packet Header RAM",
    /* MMU_PKTLINK               */ "PKTLINK",
    /* MMU_PKTLINK0              */ "PKTLINK0",
    /* MMU_PKTLINK1              */ "PKTLINK1",
    /* MMU_PKTLINK2              */ "PKTLINK2",
    /* MMU_PKTLINK3              */ "PKTLINK3",
    /* MMU_PKTLINK4              */ "PKTLINK4",
    /* MMU_PKTLINK5              */ "PKTLINK5",
    /* MMU_PKTLINK6              */ "PKTLINK6",
    /* MMU_PKTLINK7              */ "PKTLINK7",
    /* MMU_PKTLINK8              */ "PKTLINK8",
    /* MMU_PKTLINK9              */ "PKTLINK9",
    /* MMU_PKTLINK10             */ "PKTLINK10",
    /* MMU_PKTLINK11             */ "PKTLINK11",
    /* MMU_PKTLINK12             */ "PKTLINK12",
    /* MMU_PKTLINK13             */ "PKTLINK13",
    /* MMU_PKTLINK14             */ "PKTLINK14",
    /* MMU_PKTLINK15             */ "PKTLINK15",
    /* MMU_PKTLINK16             */ "PKTLINK16",
    /* MMU_PKTLINK17             */ "PKTLINK17",
    /* MMU_PKTLINK18             */ "PKTLINK18",
    /* MMU_PKTLINK19             */ "PKTLINK19",
    /* MMU_PKTLINK20             */ "PKTLINK20",
    /* MMU_PKTLINK21             */ "PKTLINK21",
    /* MMU_PKTLINK22             */ "PKTLINK22",
    /* MMU_PKTLINK23             */ "PKTLINK23",
    /* MMU_PKTLINK24             */ "PKTLINK24",
    /* MMU_PKTLINK25             */ "PKTLINK25",
    /* MMU_PKTLINK26             */ "PKTLINK26",
    /* MMU_PKTLINK27             */ "PKTLINK27",
    /* MMU_PKTLINK28             */ "PKTLINK28",
    /* MMU_PKTLINK29             */ "PKTLINK29",
    /* MMU_PKTLINK30             */ "PKTLINK30",
    /* MMU_PKTLINK31             */ "PKTLINK31",
    /* MMU_PKTLINK32             */ "PKTLINK32",
    /* MMU_PKTLINK33             */ "PKTLINK33",
    /* MMU_PKTLINK34             */ "PKTLINK34",
    /* MMU_PKTLINK35             */ "PKTLINK35",
    /* MMU_PKTLINK36             */ "PKTLINK36",
    /* MMU_PKTLINK37             */ "PKTLINK37",
    /* MMU_PKTLINK38             */ "PKTLINK38",
    /* MMU_PKTLINK39             */ "PKTLINK39",
    /* MMU_PKTLINK40             */ "PKTLINK40",
    /* MMU_PKTLINK41             */ "PKTLINK41",
    /* MMU_PKTLINK42             */ "PKTLINK42",
    /* MMU_PKTLINK43             */ "PKTLINK43",
    /* MMU_PKTLINK44             */ "PKTLINK44",
    /* MMU_PKTLINK45             */ "PKTLINK45",
    /* MMU_PKTLINK46             */ "PKTLINK46",
    /* MMU_PKTLINK47             */ "PKTLINK47",
    /* MMU_PKTLINK48             */ "PKTLINK48",
    /* MMU_PKTLINK49             */ "PKTLINK49",
    /* MMU_PKTLINK50             */ "PKTLINK50",
    /* MMU_PKTLINK51             */ "PKTLINK51",
    /* MMU_PKTLINK52             */ "PKTLINK52",
    /* MMU_PKTLINK53             */ "PKTLINK53",
    /* MMU_PKTLINK54             */ "PKTLINK54",
    /* MMU_PKT_LINK              */ "PKT_LINK",
    /* MMU_PORTCNT               */ "",
    /* MMU_PQE0_MEM              */ "Central Purge Queue RAM",
    /* MMU_PQE1_MEM              */ "Central Purge Queue RAM",
    /* MMU_PQE_MEM               */ "Central Purge Queue RAM",
    /* MMU_PQE_MEM0              */ "Central Purge Queue RAM",
    /* MMU_PQE_MEM1              */ "Central Purge Queue RAM",
    /* MMU_QCN_CNM_COUNTER       */ "QCN CNM Counter per CP Queue.",
    /* MMU_QCN_CNM_QUEUE         */ "QCN CNM queue memory",
    /* MMU_QCN_CNM_QUEUE0        */ "QCN CNM queue.",
    /* MMU_QCN_CNM_QUEUE1        */ "QCN CNM queue.",
    /* MMU_QCN_CPQCFG            */ "Memory address = dest_port_num\nCPQ configuration",
    /* MMU_QCN_CPQST_QLEN        */ "Per CPQ state memory for Q length and jitter.",
    /* MMU_QCN_CPQST_TSSLS       */ "Per CPQ state memory for TSSLS.",
    /* MMU_QCN_ENABLE            */ "Memory address = dest_port_num\nto enable or disable QCN on per cos queue basis,\nand assign CPQ_index to each QCN enalbed queue (0 or 1).\nOnly up to two CPQs enalbed per egress port.",
    /* MMU_QCN_ENABLE_0          */ "Memory address = unicast queue number  (11bits)\n0-1479     unicast queues on PIPEx\nEnable or disable QCN on per unicast queue basis,\nand assign CPQ_ID to each QCN enalbed queue .\nOnly support up to  1480 CPQs per chip.",
    /* MMU_QCN_ENABLE_1          */ "Memory address = unicast queue number  (11bits)\n0-1479     unicast queues on PIPEy\nEnable or disable QCN on per unicast queue basis,\nand assign CPQ_ID to each QCN enalbed queue .\nOnly support up to 1480  CPQs per chip.",
    /* MMU_QCN_QFBTB             */ "The Table to map QuantizedFb[5:0] from PreQntzFb[6:0].\nThere are eight different choices per PreQntzFb.",
    /* MMU_QCN_QLEN_SHADOW       */ "Shadow copy of ThDO Unicast queue length in QCN block.",
    /* MMU_QCN_QLEN_SHADOW0      */ "Unicast queue length PIPEx.",
    /* MMU_QCN_QLEN_SHADOW1      */ "Unicast queue length PIPEy.",
    /* MMU_QCN_SITB              */ "Sample Interval Table.\nTwo Tables, each has 64 entries.",
    /* MMU_QSTRUCT_QBLOCK_BM_0   */ "QBLOCK_BM DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_1   */ "QBLOCK_BM DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_2   */ "QBLOCK_BM DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_3   */ "QBLOCK_BM DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_FIFO_0 */ "QBLOCK_BM_FIFO DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_FIFO_1 */ "QBLOCK_BM_FIFO DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_FIFO_2 */ "QBLOCK_BM_FIFO DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_FIFO_3 */ "QBLOCK_BM_FIFO DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_0 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_1 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_2 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_3 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_4 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_5 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_6 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_7 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_0 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_1 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_2 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_3 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_4 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_5 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_6 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_7 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_0 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_1 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_2 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_3 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_4 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_5 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_6 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_7 */ "QENTRY_UPPER DATABASE",
    /* MMU_RAFA_RADDR_STATUS     */ "",
    /* MMU_RAFB_RADDR_STATUS     */ "",
    /* MMU_RAFC_RADDR_STATUS     */ "",
    /* MMU_RAFD_RADDR_STATUS     */ "",
    /* MMU_RAFE_RADDR_STATUS     */ "",
    /* MMU_RAFF_RADDR_STATUS     */ "",
    /* MMU_RAFG_RADDR_STATUS     */ "",
    /* MMU_RAFH_RADDR_STATUS     */ "",
    /* MMU_RAF_WADDR             */ "",
    /* MMU_RDEHEADER_MEM0        */ "Re-direct Packet Pass-Through Header MEM0",
    /* MMU_RDEHEADER_MEM1        */ "Re-direct Packet Pass-Through Header MEM1",
    /* MMU_RDE_ADM_DPC_STORE_MEM */ "RDE ADM needs to store some info per DPC",
    /* MMU_RDE_CFIFO_MEM0        */ "DEQ to RDE Cell deallocation info",
    /* MMU_RDE_CFIFO_MEM1        */ "DEQ to RDE cell deallocation info",
    /* MMU_RDE_COSPCP_MEM        */ "Per PG_CoS Packet Redirect Count Table",
    /* MMU_RDE_DESCP_MEM         */ "Redirect Packet Descriptor",
    /* MMU_RDE_FREEDESCPLIST_MEM */ "Redirect FREE List",
    /* MMU_RDE_FREELIST_MEM      */ "Redirect FREE List",
    /* MMU_RDE_FREEPKTLIST_MEM   */ "Redirect FREE List",
    /* MMU_RDE_ITE_REL_FIFO_MEM  */ "DEQ to RDE Cell deallocation info",
    /* MMU_RDE_PKTLINK_MEM       */ "Redirect Packet Link",
    /* MMU_RDE_PQE_FIFO_MEM      */ "DEQ to RDE Cell deallocation info",
    /* MMU_RDE_PRCP_MEM          */ "Packet Redirect Copy Count Table",
    /* MMU_RDE_REAL_CELL_FIFO_MEM */ "DEQ to RDE Cell deallocation info",
    /* MMU_RDE_TXQ_FLL           */ "Free Pointer Block Link List",
    /* MMU_RDE_TXQ_QLL           */ "Queue Pointer Block Link List",
    /* MMU_RDE_TXQ_STATE         */ "Store the packet details from ENQ",
    /* MMU_RDFA_WADDR_STATUS     */ "",
    /* MMU_RDFB_WADDR_STATUS     */ "",
    /* MMU_RDFC_WADDR_STATUS     */ "",
    /* MMU_RDFD_WADDR_STATUS     */ "",
    /* MMU_RDFE_WADDR_STATUS     */ "",
    /* MMU_RDFF_WADDR_STATUS     */ "",
    /* MMU_RDFG_WADDR_STATUS     */ "",
    /* MMU_RDFH_WADDR_STATUS     */ "",
    /* MMU_RDF_RADDR             */ "",
    /* MMU_REPL_GROUP            */ "Replication group table",
    /* MMU_REPL_GROUP_INFO0      */ "REPL_GROUP_INFO0",
    /* MMU_REPL_GROUP_INFO1      */ "REPL_GROUP_INFO1",
    /* MMU_REPL_GROUP_INITIAL_COPY_COUNT */ "Replication Group Initial Copy Count. Values are in physical port domain.",
    /* MMU_REPL_GRP_TBL0         */ "IPMC Replication Group Table 0",
    /* MMU_REPL_GRP_TBL1         */ "IPMC Replication Group Table 1",
    /* MMU_REPL_GRP_TBL2         */ "IPMC Replication Group Table 2",
    /* MMU_REPL_HEAD_TBL         */ "IPMC Replication Head Table",
    /* MMU_REPL_HEAD_TBL_PIPE0   */ "REPL_HEAD_PIPE0",
    /* MMU_REPL_HEAD_TBL_PIPE1   */ "REPL_HEAD_PIPE1",
    /* MMU_REPL_LIST_TBL         */ "IPMC Replication List LSB Bitmap Table",
    /* MMU_REPL_LIST_TBL_PIPE0   */ "IPMC Replication List LSB Bitmap Table",
    /* MMU_REPL_LIST_TBL_PIPE1   */ "IPMC Replication List LSB Bitmap Table",
    /* MMU_REPL_MAP_TBL          */ "TOQ REPL_MAP Database, memory : Configuration database for mapping DEQ_PKT_CONTEXT to DEST_PPP",
    /* MMU_REPL_STATE_TBL        */ "replication state of the MCQS",
    /* MMU_REPL_STATE_TBL_PIPE0  */ "replication state of the MCQS",
    /* MMU_REPL_STATE_TBL_PIPE1  */ "replication state of the MCQS",
    /* MMU_RPFAP_BITMAP          */ "Redirect Packet-header Free Address Pool Bitmap",
    /* MMU_RPFAP_STACK           */ "Redirect Packet-header Free Address Pool Stack",
    /* MMU_RQE_QMGR_FLL          */ "Free+Queue Block Link List",
    /* MMU_RQE_QMGR_QLL          */ "Free+Queue Block Link List",
    /* MMU_RQE_QUEUE_OP_NODE_MAP */ "Queue to OP NODE mapping table",
    /* MMU_RQE_WORK_QUEUE        */ "Store the packet details from ENQ",
    /* MMU_SM                    */ "Signature Matching RAM",
    /* MMU_THDM_DB_PORTSP_BST_0  */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_DB_PORTSP_BST_1  */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_PORTSP_CONFIG_0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_0A */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_0B */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_0C */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_1A */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_1B */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_1C */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_QUEUE_BST_0   */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_BST_1   */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_0 */ "THDO configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_1 */ "THDO configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_0A */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_0B */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_0C */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_1A */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_1B */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_1C */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_0 */ "THDO counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_1 */ "THDO counters for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_0 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_1 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_0A */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_0B */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_0C */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_1A */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_1B */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_1C */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_0 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_1 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_PORTSP_BST_0 */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_MCQE_PORTSP_BST_1 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_0A */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_0B */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_1A */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_1B */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_QUEUE_BST_0 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_BST_1 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_0 */ "THDO configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_1 */ "THDO configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_0A */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_0B */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_0C */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_1A */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_1B */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_1C */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_0 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_1 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_0 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_1 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_0A */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_0B */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_0C */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_1A */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_1B */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_1C */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_0 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_1 */ "THDO queue reset value for UC queues.",
    /* MMU_THDO_BST_PORT         */ "THDO BST counters for UC ports.",
    /* MMU_THDO_BST_QGROUP       */ "THDO BST counters for UC queue group.",
    /* MMU_THDO_BST_QUEUE        */ "THDO BST counters for UC queues.",
    /* MMU_THDO_CONFIG_0         */ "THDO configuration for UC queues in normal (non-VOQ) ports, MMU ports 5 - 32.  Address index = ( port_num - 5 ) * 10 + cos_num.",
    /* MMU_THDO_CONFIG_1         */ "THDO configuration for UC queues in normal (non-VOQ) ports, MMU ports 38 - 65.  Address index = ( port_num - 38 ) * 10 + cos_num.",
    /* MMU_THDO_CONFIG_EX_0      */ "THDO configuration for UC extended queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 74 + ext_queue_num.",
    /* MMU_THDO_CONFIG_EX_1      */ "THDO configuration for UC extended queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 74 + ext_queue_num.",
    /* MMU_THDO_CONFIG_PORT      */ "THDO configuration for UC queue groups.",
    /* MMU_THDO_CONFIG_QGROUP    */ "THDO configuration for UC queue groups.",
    /* MMU_THDO_CONFIG_QUEUE     */ "THDO configuration for UC queues.",
    /* MMU_THDO_CONFIG_SP_0      */ "THDO configuration for UC COS queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 10 + cos_num.",
    /* MMU_THDO_CONFIG_SP_1      */ "THDO configuration for UC COS queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 10 + cos_num.",
    /* MMU_THDO_COUNTER_PORT     */ "THDO counters for UC queue groups.",
    /* MMU_THDO_COUNTER_QGROUP   */ "THDO counters for UC queue groups.",
    /* MMU_THDO_COUNTER_QUEUE    */ "THDO counters for UC queues.",
    /* MMU_THDO_CTRO_UC_DTYPE    */ "THDO CTRO stores UC packet drop_level & drop_resources to be used for reporting to CTRO i/f, on per SRC_CONTEXT basis.",
    /* MMU_THDO_CTRO_UC_PKT_STORE */ "THDO CTRO stores UC packet information from SOP to be used for reporting to CTRO i/f, on per SRC_CONTEXT basis.",
    /* MMU_THDO_OFFSET_0         */ "THDO configuration for UC queues in normal (non-VOQ) ports, MMU ports 5 - 32.  Address index = ( port_num - 5 ) * 10 + cos_num.",
    /* MMU_THDO_OFFSET_1         */ "THDO configuration for UC queues in normal (non-VOQ) ports, MMU ports 38 - 65.  Address index = ( port_num - 38 ) * 10 + cos_num.",
    /* MMU_THDO_OFFSET_EX_0      */ "THDO configuration for UC extended queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 74 + ext_queue_num.",
    /* MMU_THDO_OFFSET_EX_1      */ "THDO configuration for UC extended queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 74 + ext_queue_num.",
    /* MMU_THDO_OFFSET_QGROUP    */ "THDO offset for UC queue groups.",
    /* MMU_THDO_OFFSET_QUEUE     */ "THDO queue offset for UC queues.",
    /* MMU_THDO_OFFSET_SP_0      */ "THDO offset configuration for UC COS queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 10 + cos_num.",
    /* MMU_THDO_OFFSET_SP_1      */ "THDO offset configuration for UC COS queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 10 + cos_num.",
    /* MMU_THDO_OPNCONFIG_CELL   */ "THDO configuration for o/p nodes",
    /* MMU_THDO_OPNCONFIG_QENTRY */ "THDO configuration for o/p nodes",
    /* MMU_THDO_OPNCOUNT_CELL    */ "THDO Op-Node total count shadow storage for WRED access for op-node in the range of 0-511",
    /* MMU_THDO_OPNOFFSET_CELL   */ "THDO configuration for output nodes",
    /* MMU_THDO_OPNOFFSET_QENTRY */ "THDO configuration for output nodes",
    /* MMU_THDO_OPNSTATUS_CELL   */ "THDO Output Node cell count and other status info for output nodes",
    /* MMU_THDO_OPNSTATUS_QENTRY */ "THDO Output Node qentry count and other status info for output nodes",
    /* MMU_THDO_QCONFIG_CELL     */ "THDO configuration for queues",
    /* MMU_THDO_QCONFIG_QENTRY   */ "THDO configuration for queues",
    /* MMU_THDO_QCOUNT_CELL_0    */ "THDO Queue total count shadow storage for WRED access for queue in the range [0...2047]",
    /* MMU_THDO_QDRPRST_0        */ "THDO cos_queue_drop_state_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 5 - 32.  Address index = ( port_num - 5 ) * 10 + cos_num.",
    /* MMU_THDO_QDRPRST_1        */ "THDO cos_queue_drop_state_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 38 - 65.  Address index = ( port_num - 38 ) * 10 + cos_num.",
    /* MMU_THDO_QDRPRST_EX_0     */ "THDO cos_queue_drop_state_cell reset value for UC extended queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QDRPRST_EX_1     */ "THDO cos_queue_drop_state_cell reset value for UC extended queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QDRPRST_SP_0     */ "THDO cos_queue_drop_state_cell reset value for UC COS queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 10 + cos_num.",
    /* MMU_THDO_QDRPRST_SP_1     */ "THDO cos_queue_drop_state_cell reset value for UC COS queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 10 + cos_num.",
    /* MMU_THDO_QOFFSET_CELL     */ "THDO reset offset config for queues",
    /* MMU_THDO_QOFFSET_QENTRY   */ "THDO reset offset config for queues",
    /* MMU_THDO_QREDRST_0        */ "THDO cos_red_ds_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 5 - 32.  Address index = ( port_num - 5 ) * 10 + cos_num.",
    /* MMU_THDO_QREDRST_1        */ "THDO cos_red_ds_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 38 - 65.  Address index = ( port_num - 38 ) * 10 + cos_num.",
    /* MMU_THDO_QREDRST_EX_0     */ "THDO cos_red_ds_cell reset value for UC extended queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QREDRST_EX_1     */ "THDO cos_red_ds_cell reset value for UC extended queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QREDRST_SP_0     */ "THDO cos_red_ds_cell reset value for UC COS queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 10 + cos_num.",
    /* MMU_THDO_QREDRST_SP_1     */ "THDO cos_red_ds_cell reset value for UC COS queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 10 + cos_num.",
    /* MMU_THDO_QRESET_VALUE_CELL_0 */ "THDO green, yellow and red buffer reset values for queues in the range 0-2047. Used for status collection for diagnostic purposes only.",
    /* MMU_THDO_QRESET_VALUE_QENTRY_0 */ "THDO green, yellow and red buffer reset values for queues in the range 0-2047. Used for status collection for diagnostic purposes only.",
    /* MMU_THDO_QSTATUS_CELL_0   */ "THDO queue cell count and other status info for queues in the range 0-2047",
    /* MMU_THDO_QSTATUS_QENTRY_0 */ "THDO queue qentry count and other status info for queues in the range 0-2047",
    /* MMU_THDO_QYELRST_0        */ "THDO cos_yellow_ds_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 5 - 32.  Address index = ( port_num - 5 ) * 10 + cos_num.",
    /* MMU_THDO_QYELRST_1        */ "THDO cos_yellow_ds_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 38 - 65.  Address index = ( port_num - 38 ) * 10 + cos_num.",
    /* MMU_THDO_QYELRST_EX_0     */ "THDO cos_yellow_ds_cell reset value for UC extended queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QYELRST_EX_1     */ "THDO cos_yellow_ds_cell reset value for UC extended queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QYELRST_SP_0     */ "THDO cos_yellow_ds_cell reset value for UC COS queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 10 + cos_num.",
    /* MMU_THDO_QYELRST_SP_1     */ "THDO cos_yellow_ds_cell reset value for UC COS queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 10 + cos_num.",
    /* MMU_THDO_Q_TO_QGRP_MAP    */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDO_RESUME_QGROUP    */ "THDO queue reset value for UC queue groups.",
    /* MMU_THDO_RESUME_QUEUE     */ "THDO queue reset value for UC queues.",
    /* MMU_THDU_XPIPE_BST_PORT   */ "THDU BST counters for UC ports.    This is for ports in X pipe.",
    /* MMU_THDU_XPIPE_BST_QGROUP */ "THDU BST counters for UC queue group.  This is for queue groups in X pipe.",
    /* MMU_THDU_XPIPE_BST_QUEUE  */ "THDU BST counters for UC queues.  This is for queues in X pipe.",
    /* MMU_THDU_XPIPE_CONFIG_PORT */ "THDU configuration for UC queue groups.  This is for ports in X pipe.",
    /* MMU_THDU_XPIPE_CONFIG_QGROUP */ "THDU configuration for UC queue groups.  This is for queue groups in X pipe.",
    /* MMU_THDU_XPIPE_CONFIG_QUEUE */ "THDU configuration for UC queues.  This is for queues in X pipe.",
    /* MMU_THDU_XPIPE_COUNTER_PORT */ "THDU counters for UC queue groups.    This is for ports in X pipe.",
    /* MMU_THDU_XPIPE_COUNTER_QGROUP */ "THDU counters for UC queue groups.  This is for queue groups in X pipe.",
    /* MMU_THDU_XPIPE_COUNTER_QUEUE */ "THDU counters for UC queues.  This is for queues in X pipe.",
    /* MMU_THDU_XPIPE_OFFSET_QGROUP */ "THDU offset for UC queue groups.  This is for queue groups in X pipe.",
    /* MMU_THDU_XPIPE_OFFSET_QUEUE */ "THDU queue offset for UC queues.  This is for queues in X pipe.",
    /* MMU_THDU_XPIPE_Q_TO_QGRP_MAP */ "UC queue to queue group mapping.  Address index = uc_queue_num.  This is for queues in X pipe.",
    /* MMU_THDU_XPIPE_Q_TO_QGRP_MAP_0 */ "First physical copy of MMU_THDU_Q_TO_QGRP_MAP",
    /* MMU_THDU_XPIPE_Q_TO_QGRP_MAP_1 */ "Second physical copy of MMU_THDU_Q_TO_QGRP_MAP",
    /* MMU_THDU_XPIPE_RESUME_PORT */ "THDU configuration for UC queue groups.  This is for ports in X pipe.",
    /* MMU_THDU_XPIPE_RESUME_PORT_0 */ "First physical copy of MMU_THDU_RESUME_PORT",
    /* MMU_THDU_XPIPE_RESUME_PORT_1 */ "Second physical copy of MMU_THDU_RESUME_PORT",
    /* MMU_THDU_XPIPE_RESUME_QGROUP */ "THDU queue reset value for UC queue groups.  This is for queue groups in X pipe.",
    /* MMU_THDU_XPIPE_RESUME_QUEUE */ "THDU queue reset value for UC queues.  This is for queues in X pipe.",
    /* MMU_THDU_YPIPE_BST_PORT   */ "THDU BST counters for UC ports.",
    /* MMU_THDU_YPIPE_BST_QGROUP */ "THDU BST counters for UC queue group.",
    /* MMU_THDU_YPIPE_BST_QUEUE  */ "THDU BST counters for UC queues.",
    /* MMU_THDU_YPIPE_CONFIG_PORT */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_YPIPE_CONFIG_QGROUP */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_YPIPE_CONFIG_QUEUE */ "THDU configuration for UC queues.",
    /* MMU_THDU_YPIPE_COUNTER_PORT */ "THDU counters for UC queue groups.",
    /* MMU_THDU_YPIPE_COUNTER_QGROUP */ "THDU counters for UC queue groups.",
    /* MMU_THDU_YPIPE_COUNTER_QUEUE */ "THDU counters for UC queues.",
    /* MMU_THDU_YPIPE_OFFSET_QGROUP */ "THDU offset for UC queue groups.",
    /* MMU_THDU_YPIPE_OFFSET_QUEUE */ "THDU queue offset for UC queues.",
    /* MMU_THDU_YPIPE_Q_TO_QGRP_MAP */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_YPIPE_Q_TO_QGRP_MAP_0 */ "First physical copy of MMU_THDU_YPIPE_Q_TO_QGRP_MAP",
    /* MMU_THDU_YPIPE_Q_TO_QGRP_MAP_1 */ "Second physical copy of MMU_THDU_YPIPE_Q_TO_QGRP_MAP",
    /* MMU_THDU_YPIPE_RESUME_PORT */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_YPIPE_RESUME_PORT_0 */ "First physical copy of MMU_THDU_YPIPE_RESUME_PORT",
    /* MMU_THDU_YPIPE_RESUME_PORT_1 */ "Second physical copy of MMU_THDU_YPIPE_RESUME_PORT",
    /* MMU_THDU_YPIPE_RESUME_QGROUP */ "THDU queue reset value for UC queue groups.",
    /* MMU_THDU_YPIPE_RESUME_QUEUE */ "THDU queue reset value for UC queues.",
    /* MMU_TOQRDE                */ "TOQRDE",
    /* MMU_TOQ_EOPE_TBL          */ "TOQ EOPE Database, memory : Hold EOPE state for external buffer usage tracking. No CPU access in traffic",
    /* MMU_TOQ_IPMC_GROUP_TBL0   */ "TOQ IPMC VLAN Group Table 0 for port#1-5",
    /* MMU_TOQ_IPMC_GROUP_TBL1   */ "TOQ IPMC VLAN Group Table 1 for port#6-10",
    /* MMU_TOQ_IPMC_GROUP_TBL2   */ "TOQ IPMC VLAN Group Table 2 for port#11-15",
    /* MMU_TOQ_IPMC_GROUP_TBL3   */ "TOQ IPMC VLAN Group Table 3 for port#16-20",
    /* MMU_TOQ_IPMC_GROUP_TBL4   */ "TOQ IPMC VLAN Group Table 4 for port#21-25",
    /* MMU_TOQ_IPMC_GROUP_TBL5   */ "TOQ IPMC VLAN Group Table 5 for port#26-30",
    /* MMU_TOQ_IPMC_GROUP_TBL6   */ "TOQ IPMC VLAN Group Table 6 for port#31-35",
    /* MMU_TOQ_PORT_STATE_MEM    */ "TOQ PORT_STATE Database, memory : Dbug access only for 4K queues midpacket state info. No access in traffic",
    /* MMU_TOQ_QPACK_MODE        */ "TOQ QPACK_MODE. Per queue configuration, 16 Queues per address, so memory is addressed by QID[11:4] and bits within memory by QID[3:0]",
    /* MMU_TOQ_STATE_MEM0        */ "TOQ STATE Database, mem0",
    /* MMU_TOQ_STATE_MEM1        */ "TOQ STATE Database, mem1",
    /* MMU_UCQDB0                */ "UCQDB0",
    /* MMU_UCQDB1                */ "UCQDB1",
    /* MMU_UCQ_RP                */ "UCQ_RP",
    /* MMU_UCQ_WP                */ "UCQ_WP",
    /* MMU_UC_QDB                */ "UC_QDB",
    /* MMU_WAFA_HALFA_RADDR_STATUS */ "",
    /* MMU_WAFA_HALFB_RADDR_STATUS */ "",
    /* MMU_WAFB_HALFA_RADDR_STATUS */ "",
    /* MMU_WAFB_HALFB_RADDR_STATUS */ "",
    /* MMU_WAFC_HALFA_RADDR_STATUS */ "",
    /* MMU_WAFC_HALFB_RADDR_STATUS */ "",
    /* MMU_WAFD_HALFA_RADDR_STATUS */ "",
    /* MMU_WAFD_HALFB_RADDR_STATUS */ "",
    /* MMU_WAFE_HALFA_RADDR_STATUS */ "",
    /* MMU_WAFE_HALFB_RADDR_STATUS */ "",
    /* MMU_WAFF_HALFA_RADDR_STATUS */ "",
    /* MMU_WAFF_HALFB_RADDR_STATUS */ "",
    /* MMU_WAFG_HALFA_RADDR_STATUS */ "",
    /* MMU_WAFG_HALFB_RADDR_STATUS */ "",
    /* MMU_WAFH_HALFA_RADDR_STATUS */ "",
    /* MMU_WAFH_HALFB_RADDR_STATUS */ "",
    /* MMU_WAF_HALFA_WADDR       */ "",
    /* MMU_WAF_HALFB_WADDR       */ "",
    /* MMU_WAMULINK              */ "WAMULINK",
    /* MMU_WAMU_MEM0             */ "Wireless Reassembly Context Table RAM",
    /* MMU_WAMU_MEM1             */ "Wireless Reassembly Context Table RAM",
    /* MMU_WAMU_MEM2             */ "Wireless Reassembly Context Table RAM",
    /* MMU_WAMU_MEM3             */ "Wireless Reassembly Context Table RAM",
    /* MMU_WRED_AVG_QSIZE        */ "WRED Average Queue Size Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1023 ~    0: Unicast Queue\n1279 ~ 1024: Queue Group\n1531 ~ 1280: Port Service Pool (port 0 to 62)\n             Address = { 1, PortID[5:0], SPID[1:0]}\n         Each Port's service pool is addressed by Address[1:0] of this memory address .\n1535 ~ 1532: Global Service Pool\n       1532: Global Service Pool 0\n       1533: Global Service Pool 1\n       1534: Global Service Pool 2\n       1535: Global Service  ...",
    /* MMU_WRED_AVG_QSIZE_X_PIPE */ "WRED Average Queue Size Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1479 ~    0: Unicast Queue\n1487 ~ 1480: Not Used\n1615 - 1488: Queue Group\n             Address = 1488 + {QGROUPID[6:0]}\n1823 ~ 1616: Port Service Pool (port 0 to 51)\n             Address = 1616 + {PortID[5:0], SPID[1:0]}\n         Each Port's service pool is addressed by Address[1:0] of this memory address .\n1839 ~ 1824: Not Used\n1843 ~ 1840: Global Service Pool\n       1840: Global Service Pool 0\n      ...",
    /* MMU_WRED_AVG_QSIZE_Y_PIPE */ "WRED Average Queue Size Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1479 ~    0: Unicast Queue\n1487 ~ 1480: Not Used\n1615 - 1488: Queue Group\n             Address = 1488 + {QGROUPID[6:0]}\n1823 ~ 1616: Port Service Pool (port 0 to 51)\n             Address = 1616 + {PortID[5:0], SPID[1:0]}\n         Each Port's service pool is addressed by Address[1:0] of this memory address .\n1839 ~ 1824: Not Used\n1843 ~ 1840: Global Service Pool\n       1840: Global Service Pool 0\n      ...",
    /* MMU_WRED_CFG_CELL         */ "WRED Configuartion and Average Qsize Memory for Cell",
    /* MMU_WRED_CFG_PACKET       */ "WRED Configuartion and Average Qsize Memory for Packet",
    /* MMU_WRED_CONFIG           */ "WRED Config Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1023 ~    0: Unicast Queue\n1279 ~ 1024: Queue Group\n1531 ~ 1280: Port Service Pool (port 0 to 62)\n             Address = { 1, PortID[5:0], SPID[1:0]}\n         Each Port's service pool is addressed by Address[1:0] of this memory address .\n1535 ~ 1532: Global Service Pool\n       1532: Global Service Pool 0\n       1533: Global Service Pool 1\n       1534: Global Service Pool 2\n       1535: Global Service Pool 3\nQGROU ...",
    /* MMU_WRED_CONFIG_X_PIPE    */ "WRED Config Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1479 ~    0: Unicast Queue\n1487 ~ 1480: Not used.\n1615 - 1488: Queue Group per PIPE\n             Address = 1488 + QGROUPID[6:0] per PIPE\n1823 ~ 1616: Port Service Pool (port 0 to 52)\n             Address = 1616 + {PORTID[5:0], SPID[1:0]} per PIPE\n         Each Port's service pool is addressed by Address[1:0] of this memory address .\n1843 ~ 1840: Global Service Pool\n       1840: Global Service Pool 0\n       1841:  ...",
    /* MMU_WRED_CONFIG_Y_PIPE    */ "WRED Config Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1479 ~    0: Unicast Queue\n1535 ~ 1480: Not used.\n1663 - 1536: Queue Group per PIPE\n             Address = 1536 + {QGROUPID[4:0]}\n1875 ~ 1664: Port Service Pool (port 0 to 52) per PIPE\n             Address = 1664 + {PORTID[5:0], SPID[1:0]}\n         Each Port's service pool is addressed by Address[1:0] of this memory address .\n1879 ~ 1876: Not Available\nQGROUPID, PORTID and SPID are only valid for the first 1k ent ...",
    /* MMU_WRED_DROP_CURVE_PROFILE_0 */ "WRED Drop Curve Profile for TCP Green Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_1 */ "WRED Drop Curve Profile for TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_2 */ "WRED Drop Curve Profile For TCP Red Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_3 */ "WRED Drop Curve Profile For Non-TCP Green Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_4 */ "WRED Drop Curve Profile For Non-TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_5 */ "WRED Drop Curve Profile For Non-TCP Red Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_0_X_PIPE */ "WRED Drop Curve Profile for TCP Green Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_0_Y_PIPE */ "WRED Drop Curve Profile for TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_1_X_PIPE */ "WRED Drop Curve Profile for TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_1_Y_PIPE */ "WRED Drop Curve Profile for TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_2_X_PIPE */ "WRED Drop Curve Profile For TCP Red Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_2_Y_PIPE */ "WRED Drop Curve Profile For TCP Red Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_3_X_PIPE */ "WRED Drop Curve Profile For Non-TCP Green Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_3_Y_PIPE */ "WRED Drop Curve Profile For Non-TCP Green Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_4_X_PIPE */ "WRED Drop Curve Profile For Non-TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_4_Y_PIPE */ "WRED Drop Curve Profile For Non-TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_5_X_PIPE */ "WRED Drop Curve Profile For Non-TCP Red Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_5_Y_PIPE */ "WRED Drop Curve Profile For Non-TCP Red Traffic",
    /* MMU_WRED_DROP_PROFILE_GREEN */ "WRED Responsive Drop Curve Profile for Green Packet",
    /* MMU_WRED_DROP_PROFILE_RED */ "WRED Responsive Drop Curve Profile for RED Packet",
    /* MMU_WRED_DROP_PROFILE_YELLOW */ "WRED Responsive Drop Curve Profile for Yellow Packet",
    /* MMU_WRED_DROP_THD_UC_DEQ0 */ "WRED Unicast Drop Threshold Memory for Deq pipe 0",
    /* MMU_WRED_DROP_THD_UC_DEQ1 */ "WRED Unicast Drop Threshold Memory for Deq pipe 1",
    /* MMU_WRED_DROP_THD_UC_ENQ0 */ "WRED Unicast Drop Threshold Memory for Enq pipe 0",
    /* MMU_WRED_DROP_THD_UC_ENQ1 */ "WRED Unicast Drop Threshold Memory for Enq pipe 1",
    /* MMU_WRED_MARK_PROFILE_GREEN */ "WRED Mark Curve Profile for Green Packet",
    /* MMU_WRED_MARK_PROFILE_RED */ "WRED Mark Curve Profile for Red Packet",
    /* MMU_WRED_MARK_PROFILE_YELLOW */ "WRED Mark Curve Profile for Yellow Packet",
    /* MMU_WRED_MARK_THD         */ "WRED Mark Threshold Memory\nMEM_ADDR[7:0]={PORT_ID[4:0], QUEUE_ID[2:0]}\nPORT_ID[4:0] = 0, PORT 2,\nPORT_ID[4:0] = 1, PORT 3,\n...\nPORT_ID[4:0] = 27, PORT 29,\nPORT_ID[4:0] = 28, Invalid,\n...\nPORT_ID[4:0] = 31, Invalid.\nQUEUE_ID[2:0] = 0, Queue 0,\nQUEUE_ID[2:0] = 1, Queue 1,\n...\nQUEUE_ID[2:0] = 7, Queue 7.",
    /* MMU_WRED_OPN_AVG_QSIZE_BUFFER */ "WRED O/P Node Avg Q Size memory - will be split in 8 banks",
    /* MMU_WRED_OPN_AVG_QSIZE_QENTRY */ "WRED O/P Node Avg Q Size memory - will be split in 8 banks",
    /* MMU_WRED_OPN_CONFIG_BUFFER */ "WRED Output Node Config Memory - will be split in 8 banks",
    /* MMU_WRED_OPN_CONFIG_QENTRY */ "WRED Output Node Config Memory - will be split in 8 banks",
    /* MMU_WRED_OPN_DROP_THD_DEQ */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_OPN_DROP_THD_ENQ */ "WRED Unicast Drop Threshold Memory for Enq",
    /* MMU_WRED_PORT_CFG_CELL    */ "WRED Port Configuartion and Average Qsize Memory for Cell",
    /* MMU_WRED_PORT_CFG_PACKET  */ "WRED Port Configuartion and Average Qsize Memory for Packet",
    /* MMU_WRED_PORT_SP_DROP_THD */ "WRED Unicast Drop Threshold Memory for Port Service Pool",
    /* MMU_WRED_PORT_SP_DROP_THD_X_PIPE */ "WRED Unicast Drop Threshold Memory for Port Service Pool X PIPE",
    /* MMU_WRED_PORT_SP_DROP_THD_Y_PIPE */ "WRED Unicast Drop Threshold Memory for Port Service Pool Y PIPE",
    /* MMU_WRED_PORT_SP_SHARED_COUNT */ "WRED Port Service Pool Total Count Shadow Copy Memory",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_X_PIPE */ "WRED Port Service Pool Shared Count Shadow Copy Memory X PIPE",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_Y_PIPE */ "WRED Port Service Pool Shared Count Shadow Copy Memory Y PIPE",
    /* MMU_WRED_PORT_THD_0_CELL  */ "WRED Port Green and Yellow Threshold Memory for Cell",
    /* MMU_WRED_PORT_THD_0_PACKET */ "WRED Port Green and Yellow Threshold Memory for Packet",
    /* MMU_WRED_PORT_THD_1_CELL  */ "WRED Port Green and Yellow Threshold Memory for Cell",
    /* MMU_WRED_PORT_THD_1_PACKET */ "WRED Red and Nontcp Threshold Memory for Packet",
    /* MMU_WRED_QGROUP_DROP_THD  */ "WRED Unicast Drop Threshold Memory for Queue Group",
    /* MMU_WRED_QGROUP_DROP_THD_X_PIPE */ "WRED Unicast Drop Threshold Memory for Queue Group X PIPE",
    /* MMU_WRED_QGROUP_DROP_THD_Y_PIPE */ "WRED Unicast Drop Threshold Memory for Queue Group Y PIPE",
    /* MMU_WRED_QGROUP_SHARED_COUNT */ "WRED Queue Group Shared Count Shadow Copy Memory",
    /* MMU_WRED_QGROUP_SHARED_COUNT_X_PIPE */ "WRED Queue Group Shared Count Shadow Copy Memory X PIPE",
    /* MMU_WRED_QGROUP_SHARED_COUNT_Y_PIPE */ "WRED Queue Group Shared Count Shadow Copy Memory Y PIPE",
    /* MMU_WRED_QUEUE_AVG_QSIZE_BUFFER */ "WRED Queue Avg Q Size Memory - will be split in 8 banks",
    /* MMU_WRED_QUEUE_AVG_QSIZE_QENTRY */ "WRED Queue Avg Q Size Memory - will be split in 8 banks",
    /* MMU_WRED_QUEUE_CONFIG_BUFFER */ "WRED Queue Config Memory - will be split in 8 banks",
    /* MMU_WRED_QUEUE_CONFIG_QENTRY */ "WRED Queue Config Memory - will be split in 8 banks",
    /* MMU_WRED_QUEUE_DROP_THD_DEQ */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_QUEUE_DROP_THD_ENQ_0 */ "WRED Unicast Drop Threshold Memory for Enq",
    /* MMU_WRED_QUEUE_DROP_THD_ENQ_1 */ "WRED Unicast Drop Threshold Memory for Enq",
    /* MMU_WRED_QUEUE_OP_NODE_MAP */ "Queue to OP NODE mapping table",
    /* MMU_WRED_THD_0_CELL       */ "WRED Green and Yellow Threshold Memory for Cell",
    /* MMU_WRED_THD_0_PACKET     */ "WRED Green and Yellow Threshold Memory for Packet",
    /* MMU_WRED_THD_1_CELL       */ "WRED Green and Yellow Threshold Memory for Cell",
    /* MMU_WRED_THD_1_PACKET     */ "WRED Red and Nontcp Threshold Memory for Packet",
    /* MMU_WRED_UC_QUEUE_DROP_THD_DEQ */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_DEQ_X_PIPE_0 */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_DEQ_Y_PIPE_1 */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_ENQ */ "WRED Unicast Drop Threshold Memory for Enq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_ENQ_X_PIPE_0 */ "WRED Unicast Drop Threshold Memory for Enq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_ENQ_X_PIPE_1 */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_ENQ_Y_PIPE_0 */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_ENQ_Y_PIPE_1 */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT */ "WRED UC Queue Total Count Shadow Copy Memory",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_X_PIPE */ "WRED UC Queue Total Count Shadow Copy Memory X PIPE",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_Y_PIPE */ "WRED UC Queue Total Count Shadow Copy Memory Y PIPE",
    /* MMU_XQ0                   */ "XQ0",
    /* MMU_XQ1                   */ "XQ1",
    /* MMU_XQ2                   */ "XQ2",
    /* MMU_XQ3                   */ "XQ3",
    /* MMU_XQ4                   */ "XQ4",
    /* MMU_XQ5                   */ "XQ5",
    /* MMU_XQ6                   */ "XQ6",
    /* MMU_XQ7                   */ "XQ7",
    /* MMU_XQ8                   */ "XQ8",
    /* MMU_XQ9                   */ "XQ9",
    /* MMU_XQ10                  */ "XQ10",
    /* MMU_XQ11                  */ "XQ11",
    /* MMU_XQ12                  */ "XQ12",
    /* MMU_XQ13                  */ "XQ13",
    /* MMU_XQ14                  */ "XQ14",
    /* MMU_XQ15                  */ "XQ15",
    /* MMU_XQ16                  */ "XQ16",
    /* MMU_XQ17                  */ "XQ17",
    /* MMU_XQ18                  */ "XQ18",
    /* MMU_XQ19                  */ "XQ19",
    /* MMU_XQ20                  */ "XQ20",
    /* MMU_XQ21                  */ "XQ21",
    /* MMU_XQ22                  */ "XQ22",
    /* MMU_XQ23                  */ "XQ23",
    /* MMU_XQ24                  */ "XQ24",
    /* MMU_XQ25                  */ "XQ25",
    /* MMU_XQ26                  */ "XQ26",
    /* MMU_XQ27                  */ "XQ27",
    /* MMU_XQ28                  */ "XQ28",
    /* MMU_XQ29                  */ "XQ29",
    /* MMU_XQ30                  */ "XQ30",
    /* MMU_XQ31                  */ "XQ31",
    /* MMU_XQ32                  */ "XQ32",
    /* MMU_XQ33                  */ "XQ33",
    /* MMU_XQ34                  */ "XQ34",
    /* MMU_XQ35                  */ "XQ35",
    /* MMU_XQ36                  */ "XQ36",
    /* MMU_XQ37                  */ "XQ37",
    /* MMU_XQ38                  */ "XQ38",
    /* MMU_XQ39                  */ "XQ39",
    /* MMU_XQ40                  */ "XQ40",
    /* MMU_XQ41                  */ "XQ41",
    /* MMU_XQ42                  */ "XQ42",
    /* MMU_XQ43                  */ "XQ43",
    /* MMU_XQ44                  */ "XQ44",
    /* MMU_XQ45                  */ "XQ45",
    /* MMU_XQ46                  */ "XQ46",
    /* MMU_XQ47                  */ "XQ47",
    /* MMU_XQ48                  */ "XQ48",
    /* MMU_XQ49                  */ "XQ49",
    /* MMU_XQ50                  */ "XQ50",
    /* MMU_XQ51                  */ "XQ51",
    /* MMU_XQ52                  */ "XQ52",
    /* MMU_XQ53                  */ "XQ53",
    /* MNUSCNT                   */ "",
    /* MODPORT_MAP               */ "Module Port Mapping Table",
    /* MODPORT_MAP_EM            */ "Third physical copy of Module Port Mapping Table - used for mapping the egress mirrored copy of a packet",
    /* MODPORT_MAP_IM            */ "Second physical copy of Module Port Mapping Table - used for mapping the ingress mirrored copy of a packet",
    /* MODPORT_MAP_M0            */ "First physical copy of Module Port Mapping Table - used for mapping the M0 copy of a packet.",
    /* MODPORT_MAP_M1            */ "First physical copy of Module Port Mapping Table - used for mapping the M1 copy of a packet.",
    /* MODPORT_MAP_M2            */ "First physical copy of Module Port Mapping Table - used for mapping the M2 copy of a packet.",
    /* MODPORT_MAP_M3            */ "First physical copy of Module Port Mapping Table - used for mapping the M3 copy of a packet.",
    /* MODPORT_MAP_MIRROR        */ "Second physical copy of Module Port Mapping Table - used for mapping the ingress mirrored copy of a packet",
    /* MODPORT_MAP_MIRROR_1      */ "Third physical copy of Module Port Mapping Table - used for mapping the egress mirrored copy of a packet",
    /* MODPORT_MAP_SW            */ "First physical copy of Module Port Mapping Table - used for mapping the switched copy of a packet",
    /* MOPMMU                    */ "",
    /* MPLSLABELRANGEENCOUNTERED */ "",
    /* MPLSTUNNELTERMINATIONVALID */ "",
    /* MPLS_ENTRY                */ "MPLS Label Lookup. Dual-Hash table with Keys and Data",
    /* MPLS_ENTRY_1              */ "",
    /* MPLS_ENTRY_1_HIT_ONLY     */ "MPLS_ENTRY_1_HIT_ONLY, Single base entry views. FeatureSpecific-Ethernet.",
    /* MPLS_ENTRY_2_HIT_ONLY     */ "MPLS_ENTRY_2_HIT_ONLY, Double base entry views. FeatureSpecific-Ethernet.",
    /* MPLS_ENTRY_EXTD           */ "MPLS_ENTRY_2, Double base entry views. FeatureSpecific-Ethernet.",
    /* MPLS_ENTRY_SCRATCH        */ "Single MPLS_ENTRY entry that is usable by software.when shifting MPLS_ENTRY entries across the dual hash.  Fully usable entry that is searched for every packet. Acts like a fully-associative 9th entry (for every bucket.)",
    /* MPLS_STATION_TCAM         */ "TCAM for MPLS My Station lookups - no associated data",
    /* MRM                       */ "",
    /* MRPS_CONTEXT_COLOR        */ "",
    /* MRPS_CONTEXT_SIZE_HIGH    */ "",
    /* MRPS_CONTEXT_SIZE_LOW     */ "",
    /* MRPS_MCDA_DYNAMIC         */ "",
    /* MRPS_MCDA_HEADER_APPEND_SIZE_PTR_MAP */ "",
    /* MRPS_MCDA_IN_PP_PORT_MAP  */ "",
    /* MRPS_MCDA_IN_PP_PORT_MAP_AND_MTR_PRF_MAP */ "",
    /* MRPS_MCDA_PCUC            */ "",
    /* MRPS_MCDA_PRFCFG_0        */ "",
    /* MRPS_MCDA_PRFCFG_1        */ "",
    /* MRPS_MCDA_PRFCFG_SHARING_DIS */ "",
    /* MRPS_MCDA_PRFCFG_SHARING_EN */ "",
    /* MRPS_MCDA_PRFSEL          */ "",
    /* MRPS_MCDB_DYNAMIC         */ "",
    /* MRPS_MCDB_HEADER_APPEND_SIZE_PTR_MAP */ "",
    /* MRPS_MCDB_IN_PP_PORT_MAP  */ "",
    /* MRPS_MCDB_IN_PP_PORT_MAP_AND_MTR_PRF_MAP */ "",
    /* MRPS_MCDB_PCUC            */ "",
    /* MRPS_MCDB_PRFCFG_0        */ "",
    /* MRPS_MCDB_PRFCFG_1        */ "",
    /* MRPS_MCDB_PRFSEL          */ "",
    /* MRPS_PCD_MAP              */ "",
    /* MRRACTPROFILE             */ "",
    /* MTRMP                     */ "",
    /* MULTIPASS_LOOPBACK_BITMAP */ "Multipass Loopback Bitmap Register.",
    /* MY_STATION_TCAM           */ "TCAM for MPLS My Station lookups - no associated data.",
    /* MY_STATION_TCAM_DATA_ONLY */ "TCAM for MPLS My Station lookups - no associated data.",
    /* MY_STATION_TCAM_ENTRY_ONLY */ "TCAM for MPLS My Station lookups - no associated data.",
    /* NBIH_EGQ_2_NIF_PORT_MAP   */ "",
    /* NBIL_MEM_92000            */ "",
    /* NBIL_MEM_92100            */ "",
    /* NBIL_MEM_92200            */ "",
    /* NBIL_MEM_92300            */ "",
    /* NBIL_MEM_94000            */ "",
    /* NBIL_MEM_94100            */ "",
    /* NBIL_MEM_94200            */ "",
    /* NBIL_MEM_94300            */ "",
    /* NBIL_MEM_94400            */ "",
    /* NBIL_MEM_94600            */ "",
    /* NBI_EGR_MEM_CTRL          */ "",
    /* NBI_EGR_MEM_DATA          */ "",
    /* NBI_ING_MEM_CTRL          */ "",
    /* NBI_ING_MEM_DATA          */ "",
    /* NBI_MEM_92000             */ "",
    /* NBI_MEM_93000             */ "",
    /* NBI_MEM_94000             */ "",
    /* NBI_MEM_95000             */ "",
    /* NBI_MLF_RX_0_MEM_A_CTRL   */ "",
    /* NBI_MLF_RX_0_MEM_B_CTRL   */ "",
    /* NBI_MLF_RX_1_MEM_A_CTRL   */ "",
    /* NBI_MLF_RX_1_MEM_B_CTRL   */ "",
    /* NBI_MLF_RX_2_MEM_A_CTRL   */ "",
    /* NBI_MLF_RX_2_MEM_B_CTRL   */ "",
    /* NBI_MLF_RX_3_MEM_A_CTRL   */ "",
    /* NBI_MLF_RX_3_MEM_B_CTRL   */ "",
    /* NBI_MLF_RX_4_MEM_A_CTRL   */ "",
    /* NBI_MLF_RX_4_MEM_B_CTRL   */ "",
    /* NBI_MLF_RX_5_MEM_A_CTRL   */ "",
    /* NBI_MLF_RX_5_MEM_B_CTRL   */ "",
    /* NBI_MLF_RX_6_MEM_A_CTRL   */ "",
    /* NBI_MLF_RX_6_MEM_B_CTRL   */ "",
    /* NBI_MLF_RX_MEM_A_CTRL     */ "",
    /* NBI_MLF_RX_MEM_B_CTRL     */ "",
    /* NBI_MLF_TX_0_MEM_CTRL     */ "",
    /* NBI_MLF_TX_1_MEM_CTRL     */ "",
    /* NBI_MLF_TX_2_MEM_CTRL     */ "",
    /* NBI_MLF_TX_3_MEM_CTRL     */ "",
    /* NBI_MLF_TX_4_MEM_CTRL     */ "",
    /* NBI_MLF_TX_5_MEM_CTRL     */ "",
    /* NBI_MLF_TX_6_MEM_CTRL     */ "",
    /* NBI_MLF_TX_MEM_CTRL       */ "",
    /* NBI_RBINS_MEM             */ "",
    /* NBI_RBINS_MEM_0           */ "",
    /* NBI_RBINS_MEM_1           */ "",
    /* NBI_RBINS_MEM_2           */ "",
    /* NBI_RBINS_MEM_3           */ "",
    /* NBI_RBINS_MEM_4           */ "",
    /* NBI_RBINS_MEM_5           */ "",
    /* NBI_RBINS_MEM_6           */ "",
    /* NBI_RBINS_MEM_7           */ "",
    /* NBI_RBINS_MEM_8           */ "",
    /* NBI_RBINS_MEM_9           */ "",
    /* NBI_RBINS_MEM_10          */ "",
    /* NBI_RBINS_MEM_11          */ "",
    /* NBI_RBINS_MEM_12          */ "",
    /* NBI_RBINS_MEM_13          */ "",
    /* NBI_RBINS_MEM_14          */ "",
    /* NBI_RBINS_MEM_15          */ "",
    /* NBI_RBINS_MEM_16          */ "",
    /* NBI_RBINS_MEM_17          */ "",
    /* NBI_RBINS_MEM_18          */ "",
    /* NBI_RBINS_MEM_19          */ "",
    /* NBI_RBINS_MEM_20          */ "",
    /* NBI_RBINS_MEM_21          */ "",
    /* NBI_RBINS_MEM_22          */ "",
    /* NBI_RBINS_MEM_23          */ "",
    /* NBI_RBINS_MEM_24          */ "",
    /* NBI_RBINS_MEM_25          */ "",
    /* NBI_RBINS_MEM_26          */ "",
    /* NBI_RBINS_MEM_27          */ "",
    /* NBI_RLENG_MEM             */ "",
    /* NBI_RPKTS_MEM             */ "",
    /* NBI_RTYPE_MEM             */ "",
    /* NBI_TBINS_MEM             */ "",
    /* NBI_TBINS_MEM_0           */ "",
    /* NBI_TBINS_MEM_1           */ "",
    /* NBI_TBINS_MEM_2           */ "",
    /* NBI_TBINS_MEM_3           */ "",
    /* NBI_TBINS_MEM_4           */ "",
    /* NBI_TBINS_MEM_5           */ "",
    /* NBI_TBINS_MEM_6           */ "",
    /* NBI_TBINS_MEM_7           */ "",
    /* NBI_TBINS_MEM_8           */ "",
    /* NBI_TBINS_MEM_9           */ "",
    /* NBI_TBINS_MEM_10          */ "",
    /* NBI_TBINS_MEM_11          */ "",
    /* NBI_TBINS_MEM_12          */ "",
    /* NBI_TBINS_MEM_13          */ "",
    /* NBI_TBINS_MEM_14          */ "",
    /* NBI_TBINS_MEM_15          */ "",
    /* NBI_TBINS_MEM_16          */ "",
    /* NBI_TBINS_MEM_17          */ "",
    /* NBI_TBINS_MEM_18          */ "",
    /* NBI_TBINS_MEM_19          */ "",
    /* NBI_TBINS_MEM_20          */ "",
    /* NBI_TBINS_MEM_21          */ "",
    /* NBI_TBINS_MEM_22          */ "",
    /* NBI_TBINS_MEM_23          */ "",
    /* NBI_TBINS_MEM_24          */ "",
    /* NBI_TBINS_MEM_25          */ "",
    /* NBI_TBINS_MEM_26          */ "",
    /* NBI_TBINS_MEM_27          */ "",
    /* NBI_TLENG_MEM             */ "",
    /* NBI_TPKTS_MEM             */ "",
    /* NBI_TTYPE_MEM             */ "",
    /* NHI_GROUP_TC_PROFILE      */ "NHI group offset based on {tc_profile_index, int_pri}",
    /* NIFCLSB2OFP               */ "",
    /* NIFCTXTMAP                */ "",
    /* NIFMAL0SCM                */ "",
    /* NIFMAL10SCM               */ "",
    /* NIFMAL11SCM               */ "",
    /* NIFMAL12SCM               */ "",
    /* NIFMAL13SCM               */ "",
    /* NIFMAL14SCM               */ "",
    /* NIFMAL15SCM               */ "",
    /* NIFMAL1SCM                */ "",
    /* NIFMAL2SCM                */ "",
    /* NIFMAL3SCM                */ "",
    /* NIFMAL4SCM                */ "",
    /* NIFMAL5SCM                */ "",
    /* NIFMAL6SCM                */ "",
    /* NIFMAL7SCM                */ "",
    /* NIFMAL8SCM                */ "",
    /* NIFMAL9SCM                */ "",
    /* NIFPORTTOCTXTBITMAP       */ "",
    /* NONUCAST_TRUNK_BLOCK_MASK */ "Multicast and Broadcast Trunk Block Mask Table",
    /* NORMALDYNAMICA            */ "",
    /* NORMALDYNAMICB            */ "",
    /* NUM_QCN_CNM_RECEIVED      */ "Counts the number of QCN CNMs that are destined to egress on the associated (Egress Port, Priority)HG-Trunk DLB Control.",
    /* OAMP_DM_TRIGER            */ "",
    /* OAMP_FLOW_STAT_10_SEC_ENTRY_1 */ "",
    /* OAMP_FLOW_STAT_10_SEC_ENTRY_2 */ "",
    /* OAMP_FLOW_STAT_10_SEC_ENTRY_3 */ "",
    /* OAMP_FLOW_STAT_1_SEC_ENTRY_1 */ "",
    /* OAMP_FLOW_STAT_1_SEC_ENTRY_2 */ "",
    /* OAMP_FLOW_STAT_1_SEC_ENTRY_3 */ "",
    /* OAMP_FLOW_STAT_ACCUM_ENTRY_1 */ "",
    /* OAMP_FLOW_STAT_ACCUM_ENTRY_2 */ "",
    /* OAMP_FLOW_STAT_ACCUM_ENTRY_3 */ "",
    /* OAMP_FLOW_STAT_ACCUM_ENTRY_34 */ "",
    /* OAMP_LMM_DA_NIC_TABLE     */ "",
    /* OAMP_LOCAL_PORT_2_SYSTEM_PORT */ "",
    /* OAMP_MEM_20000            */ "",
    /* OAMP_MEM_40000            */ "",
    /* OAMP_MEM_50000            */ "",
    /* OAMP_MEM_60000            */ "",
    /* OAMP_MEM_70000            */ "",
    /* OAMP_MEM_80000            */ "",
    /* OAMP_MEM_100000           */ "",
    /* OAMP_MEM_180000           */ "",
    /* OAMP_MEM_190000           */ "",
    /* OAMP_MEM_210000           */ "",
    /* OAMP_MEM_220000           */ "",
    /* OAMP_MEM_340000           */ "",
    /* OAMP_MEM_350000           */ "",
    /* OAMP_MEM_900000           */ "",
    /* OAMP_MEM_1300000          */ "",
    /* OAMP_MEM_1400000          */ "",
    /* OAMP_MEM_1D00000          */ "",
    /* OAMP_MEM_1E00000          */ "",
    /* OAMP_MEM_2A0000           */ "",
    /* OAMP_MEM_2B0000           */ "",
    /* OAMP_MEM_A00000           */ "",
    /* OAMP_MEM_B0000            */ "",
    /* OAMP_MEM_B00000           */ "",
    /* OAMP_MEM_C0000            */ "",
    /* OAMP_MEP_DB               */ "",
    /* OAMP_MEP_DB_BFD_CC_ON_MPLSTP */ "",
    /* OAMP_MEP_DB_BFD_CV_ON_MPLSTP */ "",
    /* OAMP_MEP_DB_BFD_ON_IPV4_MULTI_HOP */ "",
    /* OAMP_MEP_DB_BFD_ON_IPV4_ONE_HOP */ "",
    /* OAMP_MEP_DB_BFD_ON_MPLS   */ "",
    /* OAMP_MEP_DB_BFD_ON_PWE    */ "",
    /* OAMP_MEP_DB_DM_STAT       */ "",
    /* OAMP_MEP_DB_LM_DB         */ "",
    /* OAMP_MEP_DB_LM_STAT       */ "",
    /* OAMP_MEP_DB_RFC_6374_ON_MPLSTP */ "",
    /* OAMP_MEP_DB_Y_1731_ON_MPLSTP */ "",
    /* OAMP_MEP_DB_Y_1731_ON_PWE */ "",
    /* OAMP_MEP_PROFILE          */ "",
    /* OAMP_MEP_SCAN_PROFILE     */ "",
    /* OAMP_PE_0_PROG_TCAM       */ "",
    /* OAMP_PE_1_PROG_TCAM       */ "",
    /* OAMP_PE_GEN_MEM           */ "",
    /* OAMP_PE_PROGRAM           */ "",
    /* OAMP_PE_PROG_TCAM         */ "",
    /* OAMP_REMOTE_MEP_EXACT_MATCH_STEP_TABLE */ "",
    /* OAMP_RFC_FILTER           */ "",
    /* OAMP_RMAPEM_ACDT_H_0      */ "",
    /* OAMP_RMAPEM_ACDT_H_1      */ "",
    /* OAMP_RMAPEM_ACDT_H_2      */ "",
    /* OAMP_RMAPEM_ACDT_H_3      */ "",
    /* OAMP_RMAPEM_ACDT_H_4      */ "",
    /* OAMP_RMAPEM_ACDT_H_5      */ "",
    /* OAMP_RMAPEM_ACDT_H_6      */ "",
    /* OAMP_RMAPEM_ACDT_H_7      */ "",
    /* OAMP_RMAPEM_KEYT_H_0      */ "",
    /* OAMP_RMAPEM_KEYT_H_1      */ "",
    /* OAMP_RMAPEM_KEYT_H_2      */ "",
    /* OAMP_RMAPEM_KEYT_H_3      */ "",
    /* OAMP_RMAPEM_KEYT_H_4      */ "",
    /* OAMP_RMAPEM_KEYT_H_5      */ "",
    /* OAMP_RMAPEM_KEYT_H_6      */ "",
    /* OAMP_RMAPEM_KEYT_H_7      */ "",
    /* OAMP_RMAPEM_MANAGEMENT_MEMORY_H_0 */ "",
    /* OAMP_RMAPEM_MANAGEMENT_MEMORY_H_1 */ "",
    /* OAMP_RMAPEM_MANAGEMENT_MEMORY_H_2 */ "",
    /* OAMP_RMAPEM_MANAGEMENT_MEMORY_H_3 */ "",
    /* OAMP_RMAPEM_MANAGEMENT_MEMORY_H_4 */ "",
    /* OAMP_RMAPEM_MANAGEMENT_MEMORY_H_5 */ "",
    /* OAMP_RMAPEM_MANAGEMENT_MEMORY_H_6 */ "",
    /* OAMP_RMAPEM_MANAGEMENT_MEMORY_H_7 */ "",
    /* OAMP_RMAPEM_MANAGEMENT_REQUEST */ "",
    /* OAMP_RMAPEM_PLDT_H_0      */ "",
    /* OAMP_RMAPEM_PLDT_H_1      */ "",
    /* OAMP_RMAPEM_PLDT_H_2      */ "",
    /* OAMP_RMAPEM_PLDT_H_3      */ "",
    /* OAMP_RMAPEM_PLDT_H_4      */ "",
    /* OAMP_RMAPEM_PLDT_H_5      */ "",
    /* OAMP_RMAPEM_PLDT_H_6      */ "",
    /* OAMP_RMAPEM_PLDT_H_7      */ "",
    /* OAMP_RMAPEM_STEP_TABLE    */ "",
    /* OAMP_RMEP_DB              */ "",
    /* OAMP_RSP_TCAM             */ "",
    /* OAMP_RX_OAM_ID_TCAM       */ "",
    /* OAMP_SAT_RX_FLOW_ID       */ "",
    /* OAMP_SAT_RX_FLOW_PARAMS   */ "",
    /* OAMP_SAT_RX_FLOW_STATS    */ "",
    /* OAMP_SAT_TX               */ "",
    /* OAMP_SAT_TX_EVC_PARAMS_ENTRY_1 */ "",
    /* OAMP_SAT_TX_EVC_PARAMS_ENTRY_2 */ "",
    /* OAMP_SAT_TX_GEN_PARAMS    */ "",
    /* OAMP_UMC_TABLE            */ "",
    /* OAM_LM_COUNTERS           */ "Packet counter for OAM Loss Measurement",
    /* OAM_LM_COUNTERS_0         */ "Packet counter for OAM Loss Measurement pool 0",
    /* OAM_LM_COUNTERS_1         */ "Packet counter for OAM Loss Measurement pool 1",
    /* OAM_OPCODE_CONTROL_PROFILE */ ".",
    /* OCB_OCBM_EVEN             */ "",
    /* OCB_OCBM_ODD              */ "",
    /* OCB_OCB_ADDRESS_SPACE     */ "",
    /* OC_CMU_PORT0_BLOCK        */ "CMU Port 0 Block Table, provides logical-to-physical address mapping.",
    /* OC_CMU_PORT1_BLOCK        */ "CMU Port 1 Block Table, provides logical-to-physical address mapping.",
    /* OC_COP0_PORT_BLOCK        */ "COP0 Port Block Table, provides logical-to-physical address mapping.",
    /* OC_COP1_PORT_BLOCK        */ "COP1 Port Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_BUBBLE_PORT_BLOCK  */ "Bubble Port Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_BUBBLE_PORT_SEGMENT */ "Bubble Port Segment Table RAM, provides port-to-logical address mapping.  Note all 128 locations can be written and read, but only location 0 is used by the hardware.",
    /* OC_LRP_PORT0_BLOCK        */ "LRP Port 0 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT0_SEGMENT      */ "Port 0 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT1_BLOCK        */ "LRP Port 1 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT1_SEGMENT      */ "Port 1 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT2_BLOCK        */ "LRP Port 2 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT2_SEGMENT      */ "Port 2 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT3_BLOCK        */ "LRP Port 3 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT3_SEGMENT      */ "Port 3 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT4_BLOCK        */ "LRP Port 4 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT4_SEGMENT      */ "Port 4 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT5_BLOCK        */ "LRP Port 5 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT5_SEGMENT      */ "Port 5 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT6_BLOCK        */ "LRP Port 6 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT6_SEGMENT      */ "Port 6 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT7_BLOCK        */ "LRP Port 7 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT7_SEGMENT      */ "Port 7 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT8_BLOCK        */ "LRP Port 8 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT8_SEGMENT      */ "Port 8 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT9_BLOCK        */ "LRP Port 9 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT9_SEGMENT      */ "Port 9 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_MEMORY                 */ "OCM MEMORY. PROC_PORT_ID or DMA_PORT_ID field in OC_CONFIG must be loaded prior to accessing this memory, to specify which Port Interface is to be used.  Specified Port Interface's OC_PORT_SEGMENT table (if LRP port) and OC_PORT_BLOCK table must be initialized before accessing this memory.  ECC and parity bit assignments only apply when memory configured for ECC protection.  This memory has 128M addresses, to allow bit access to any bit.  For dibit access, only the bottom 64M addresses will be u ...",
    /* OLM                       */ "",
    /* OLP_DSPG_CMD_FIFO_0       */ "",
    /* OLP_DSPG_CMD_FIFO_1       */ "",
    /* OLP_DSP_EVENT_ROUTE       */ "",
    /* OLP_MEM_00000             */ "",
    /* OLP_MEM_20000             */ "",
    /* OOB0SCHMAP                */ "",
    /* OOB1SCHMAP                */ "",
    /* OUTCTRLBCASTPKTS          */ "Controlled Port Transmit Broadcast Frame Counter",
    /* OUTCTRLBYT                */ "Controlled Port Transmit Frame Octet Counter",
    /* OUTCTRLERRPKTS            */ "Controlled Port Transmit Error Frame Counter",
    /* OUTCTRLMCASTPKTS          */ "Controlled Port Transmit Multicast Frame Counter",
    /* OUTCTRLUCASTPKTS          */ "Controlled Port Transmit Unicast Frame Counter",
    /* OUTUNCTRLBCASTPKTS        */ "Uncontrolled Port Transmit Broadcast Frame Counter",
    /* OUTUNCTRLBYT              */ "Uncontrolled Port Transmit Frame Octet Counter",
    /* OUTUNCTRLERRPKTS          */ "Uncontrolled Port Transmit Error Frame Counter",
    /* OUTUNCTRLMCASTPKTS        */ "Uncontrolled Port Transmit Multicast Frame Counter",
    /* OUTUNCTRLUCASTPKTS        */ "Uncontrolled Port Transmit Unicast Frame Counter",
    /* OVTHMEMA                  */ "",
    /* OVTHMEMB                  */ "",
    /* PACKETFORMATCODEPROFILE   */ "",
    /* PACKETFORMATTABLE         */ "",
    /* PARSERCUSTOMMACROPARAMETERS */ "",
    /* PARSERCUSTOMMACROPROTOCOLS */ "",
    /* PARSERETHPROTOCOLS        */ "",
    /* PARSERIPPROTOCOLS         */ "",
    /* PARSERPROGRAM1            */ "",
    /* PARSERPROGRAM2            */ "",
    /* PATHSELECT                */ "",
    /* PBBCFMTABLE               */ "",
    /* PBI_DEBUG_TABLE           */ "PBI Debug Table",
    /* PB_PAYLOAD_MEM_BANK0      */ "Bank 0 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK1      */ "Bank 1 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK2      */ "Bank 2 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK3      */ "Bank 3 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK4      */ "Bank 4 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK5      */ "Bank 5 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK6      */ "Bank 6 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK7      */ "Bank 7 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK8      */ "Bank 8 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK9      */ "Bank 9 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK10     */ "Bank 10 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK11     */ "Bank 11 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK12     */ "Bank 12 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK13     */ "Bank 13 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK14     */ "Bank 14 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK15     */ "Bank 15 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PCMEMORY                  */ "",
    /* PCP                       */ "",
    /* PCQ                       */ "",
    /* PCT                       */ "",
    /* PDM                       */ "",
    /* PEFMEM                    */ "",
    /* PFC_ENQ_SRC_PORT_LKUP     */ "SIRIUS C0 : This database contains the PFC Source Port Lookup table. A similar database, TX_PFC_SRC_PORT_LKUP, exists in the TX block. The two databases must have identical entry values.",
    /* PFC_SP_PG_LINE_CNT        */ "SIRIUS C0 : This database contains the PFC SRC/PG Line Counts. Access is only permited for debug, with no traffic in system. The 128 entries database is indexed by {src_port[3:0], priority_group[2:0]}",
    /* PFS_PACKET_TYPE_OFFSET    */ "Provide index offset to FP_PORT_FIELD_SEL table based on L3 types of the packet",
    /* PGEMEM                    */ "",
    /* PHB2_COS_MAP              */ "index by PHB2_DOT1P_MAPPING_PTR(4-bit), 802.1 priority(3-bit), CFI/DE",
    /* PHYSICAL_PORT_BASE_QUEUE  */ "",
    /* PINFOFER                  */ "",
    /* PINFOFLP                  */ "",
    /* PINFOLBP                  */ "",
    /* PINFOLLR                  */ "",
    /* PINFOPMF                  */ "",
    /* PINFOPMF_KEYGENVAR        */ "",
    /* PLM                       */ "",
    /* PMC                       */ "",
    /* PMEM0                     */ "SBLK0 Pattern Memory",
    /* PMEM1                     */ "SBLK1 Pattern Memory",
    /* PMEM2                     */ "SBLK2 Pattern Memory",
    /* PMEM3                     */ "SBLK3 Pattern Memory",
    /* PMEM4                     */ "SBLK4 Pattern Memory",
    /* PMEM5                     */ "SBLK5 Pattern Memory",
    /* PMEM6                     */ "SBLK6 Pattern Memory",
    /* PMEM7                     */ "SBLK7 Pattern Memory",
    /* PMEM8                     */ "SBLK8 Pattern Memory",
    /* PMEM9                     */ "SBLK9 Pattern Memory",
    /* PMEM10                    */ "SBLK10 Pattern Memory",
    /* PMEM11                    */ "SBLK11 Pattern Memory",
    /* PMEM12                    */ "SBLK12 Pattern Memory",
    /* PMEM13                    */ "SBLK13 Pattern Memory",
    /* PMEM14                    */ "SBLK14 Pattern Memory",
    /* PMEM15                    */ "SBLK15 Pattern Memory",
    /* PMEM16                    */ "SBLK16 Pattern Memory",
    /* PMEM17                    */ "SBLK17 Pattern Memory",
    /* PMEM18                    */ "SBLK18 Pattern Memory",
    /* PMEM19                    */ "SBLK19 Pattern Memory",
    /* PMEM20                    */ "SBLK20 Pattern Memory",
    /* PMEM21                    */ "SBLK21 Pattern Memory",
    /* PMEM22                    */ "SBLK22 Pattern Memory",
    /* PMEM23                    */ "SBLK23 Pattern Memory",
    /* PORTMINETABLELAGPORT      */ "",
    /* PORTMINETABLEPHYSICALPORT */ "",
    /* PORTPROTOCOL              */ "",
    /* PORT_BRIDGE_BMAP          */ "Bitmap of ports with port_bridge enabled.",
    /* PORT_BRIDGE_MIRROR_BMAP   */ "Bitmap of ports with port_bridge enabled for mirror packets.",
    /* PORT_CBL_TABLE            */ "Port Class Based Learning Attribute Table for class based station movement. Direct index table, address = {mod[6:0], port[5:0]} or address = virtual_port_num",
    /* PORT_CBL_TABLE_MODBASE    */ "Specifies the port(s) that is (are) CPU.",
    /* PORT_COS_MAP              */ "index by COS_MAP_SEL.SELECT(2-bit), ingress port internal priority(4-bit)",
    /* PORT_EHG_RX_TUNNEL_DATA   */ "Embedded Higig Rx tunnel data memory",
    /* PORT_EHG_RX_TUNNEL_MASK   */ "Embedded Higig Rx tunnel mask memory",
    /* PORT_EHG_TX_TUNNEL_DATA   */ "Embedded Higig Tx tunnel data memory",
    /* PORT_LAG_FAILOVER_SET     */ "Port LAG Failover Set Table",
    /* PORT_OR_TRUNK_MAC_ACTION  */ "indexed with the indicies from MAC_LIMIT_TRUNK_MAP_TABLE or MAC_LIMIT_PORT_MAP_TABLE",
    /* PORT_OR_TRUNK_MAC_COUNT   */ "TABLE for per port /LAG MAC counts .",
    /* PORT_OR_TRUNK_MAC_LIMIT   */ "the system MAC count limit value",
    /* PORT_QUEUE_SIZE           */ "",
    /* PORT_TAB                  */ "Port Table",
    /* PORT_WC_UCMEM_DATA        */ "",
    /* PPCONTEXTFEMBITSELECTTABLE */ "",
    /* PPCONTEXTFEMFIELDSELECTMAP */ "",
    /* PPCONTEXTFEMMAPINDEXTABLE */ "",
    /* PPCT                      */ "",
    /* PPDB_A_FEC_ENTRY_FORMAT_A */ "",
    /* PPDB_A_FEC_ENTRY_FORMAT_B */ "",
    /* PPDB_A_FEC_ENTRY_FORMAT_C */ "",
    /* PPDB_A_FEC_ENTRY_FORMAT_NULL */ "",
    /* PPDB_A_FEC_ENTRY_GENERAL  */ "",
    /* PPDB_A_FEC_SUPER_ENTRY_BANK */ "",
    /* PPDB_A_MEM_12000000       */ "",
    /* PPDB_A_MEM_12800000       */ "",
    /* PPDB_A_MEM_12900000       */ "",
    /* PPDB_A_MEM_13200000       */ "",
    /* PPDB_A_MEM_13300000       */ "",
    /* PPDB_A_MEM_15000000       */ "",
    /* PPDB_A_MEM_15800000       */ "",
    /* PPDB_A_MEM_15900000       */ "",
    /* PPDB_A_MEM_16200000       */ "",
    /* PPDB_A_MEM_16300000       */ "",
    /* PPDB_A_MEM_12A00000       */ "",
    /* PPDB_A_MEM_13C00000       */ "",
    /* PPDB_A_MEM_13D00000       */ "",
    /* PPDB_A_MEM_13E00000       */ "",
    /* PPDB_A_MEM_15A00000       */ "",
    /* PPDB_A_MEM_16C00000       */ "",
    /* PPDB_A_MEM_16D00000       */ "",
    /* PPDB_A_MEM_16E00000       */ "",
    /* PPDB_A_OEMA_MANAGEMENT_REQUEST */ "",
    /* PPDB_A_OEMA_STEP_TABLE    */ "",
    /* PPDB_A_OEMB_MANAGEMENT_REQUEST */ "",
    /* PPDB_A_OEMB_STEP_TABLE    */ "",
    /* PPDB_A_TCAM_ACCESS_PROFILE */ "",
    /* PPDB_A_TCAM_ACTION        */ "",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION */ "",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_24 */ "",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_25 */ "",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_26 */ "",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_27 */ "",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_28 */ "",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_29 */ "",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_30 */ "",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_31 */ "",
    /* PPDB_A_TCAM_ACTION_SMALL_24 */ "",
    /* PPDB_A_TCAM_ACTION_SMALL_25 */ "",
    /* PPDB_A_TCAM_ACTION_SMALL_26 */ "",
    /* PPDB_A_TCAM_ACTION_SMALL_27 */ "",
    /* PPDB_A_TCAM_ACTION_SMALL_28 */ "",
    /* PPDB_A_TCAM_ACTION_SMALL_29 */ "",
    /* PPDB_A_TCAM_ACTION_SMALL_30 */ "",
    /* PPDB_A_TCAM_ACTION_SMALL_31 */ "",
    /* PPDB_A_TCAM_BANK          */ "",
    /* PPDB_A_TCAM_BANK_COMMAND  */ "",
    /* PPDB_A_TCAM_BANK_REPLY    */ "",
    /* PPDB_A_TCAM_ENTRY_PARITY  */ "",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_12 */ "",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_13 */ "",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_14 */ "",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_15 */ "",
    /* PPDB_A_TCAM_PD_PROFILE    */ "",
    /* PPDB_B_LARGE_EM_AGING_CONFIGURATION_TABLE */ "",
    /* PPDB_B_LARGE_EM_FID_COUNTER_DB */ "",
    /* PPDB_B_LARGE_EM_FID_COUNTER_PROFILE_DB */ "",
    /* PPDB_B_LARGE_EM_FID_PROFILE_DB */ "",
    /* PPDB_B_LARGE_EM_FLUSH_DB  */ "",
    /* PPDB_B_LARGE_EM_FORMAT_1  */ "",
    /* PPDB_B_LARGE_EM_FORMAT_2  */ "",
    /* PPDB_B_LARGE_EM_FORMAT_0_TYPE_0 */ "",
    /* PPDB_B_LARGE_EM_FORMAT_3_TYPE_0 */ "",
    /* PPDB_B_LARGE_EM_FORMAT_3_TYPE_1 */ "",
    /* PPDB_B_LARGE_EM_FORMAT_SLB_COUNTER */ "",
    /* PPDB_B_LARGE_EM_LEARN_FORMAT */ "",
    /* PPDB_B_LARGE_EM_PORT_MINE_TABLE_LAG_PORT */ "",
    /* PPDB_B_LARGE_EM_PORT_MINE_TABLE_PHYSICAL_PORT */ "",
    /* PPDB_B_LARGE_EM_STEP_TABLE */ "",
    /* PPDB_B_LEARN_FEC_POINTER  */ "",
    /* PPDB_B_LIF_TABLE          */ "",
    /* PPDB_B_LIF_TABLE_AC_2_EEI */ "",
    /* PPDB_B_LIF_TABLE_AC_2_OUT_LIF */ "",
    /* PPDB_B_LIF_TABLE_AC_MP    */ "",
    /* PPDB_B_LIF_TABLE_IP_TT    */ "",
    /* PPDB_B_LIF_TABLE_ISID_MP  */ "",
    /* PPDB_B_LIF_TABLE_ISID_P2P */ "",
    /* PPDB_B_LIF_TABLE_LABEL_DOUBLE_DATA */ "",
    /* PPDB_B_LIF_TABLE_LABEL_PROTOCOL_OR_LSP */ "",
    /* PPDB_B_LIF_TABLE_LABEL_PWE_MP */ "",
    /* PPDB_B_LIF_TABLE_LABEL_PWE_P2P */ "",
    /* PPDB_B_LIF_TABLE_TRILL    */ "",
    /* PPDB_B_MEM_10400000       */ "",
    /* PPDB_B_MEM_10500000       */ "",
    /* PPDB_B_MEM_10C00000       */ "",
    /* PPDB_B_MEM_10D00000       */ "",
    /* PPDB_B_MEM_10E00000       */ "",
    /* PPDB_B_MEM_E000000        */ "",
    /* PPDB_B_MEM_E600000        */ "",
    /* PPDB_B_MEM_E610000        */ "",
    /* PPDB_B_MEM_F110000        */ "",
    /* PPDB_B_MEM_F210000        */ "",
    /* PPDB_B_MEM_F600000        */ "",
    /* PPDB_B_MEM_FC00000        */ "",
    /* PPDB_B_MEM_FD00000        */ "",
    /* PPDB_B_MEM_FE00000        */ "",
    /* PPDB_B_SYSTEM_PORT_LAG    */ "",
    /* PPDB_B_TYPE               */ "",
    /* PPDB_TCAM_ACCESS_PROFILE  */ "",
    /* PPDB_TCAM_ACTION          */ "",
    /* PPDB_TCAM_ACTION_HIT_INDICATION */ "",
    /* PPDB_TCAM_BANK            */ "",
    /* PPDB_TCAM_ENTRY_PARITY    */ "",
    /* PPDB_TCAM_PD_PROFILE      */ "",
    /* PPPORTFEMBITSELECTTABLE   */ "",
    /* PPPORTFEMFIELDSELECTMAP   */ "",
    /* PPPORTFEMMAPINDEXTABLE    */ "",
    /* PPPORTINFO                */ "",
    /* PPPORTVALUES              */ "",
    /* PP_CAM_RAM                */ "Parser CAM Index RAM Access Table.  Accesses all 7 CAM RAMs.  Addresses 0-255 access CAM RAM0, addresses 256-511 access CAM RAM1, etc",
    /* PP_CPDM                   */ "Header Copy Memory",
    /* PP_HASH_BIT_TEMPLATE      */ "Hash Bit Template Memory",
    /* PP_HASH_BYTE_TEMPLATE     */ "Hash Byte Template Memory",
    /* PP_IQSM                   */ "Initial Queue State Table",
    /* PP_PCT                    */ "",
    /* PP_PORT_GPP_TRANSLATION_1 */ "Port Table, FeatureSpecific-Ethernet.",
    /* PP_PORT_GPP_TRANSLATION_2 */ "Port Table, FeatureSpecific-Ethernet.",
    /* PP_PORT_GPP_TRANSLATION_3 */ "",
    /* PP_PORT_GPP_TRANSLATION_4 */ "Port Table, FeatureSpecific-Ethernet.",
    /* PP_PORT_TO_PHYSICAL_PORT_MAP */ "",
    /* PP_PPCT                   */ "",
    /* PP_SQDM                   */ "Source Queue Data Memory",
    /* PP_TCAM                   */ "TCAM Access Table.  Accesses all 7 TCAMs.  Addresses 0-255 access TCAM0, addresses 256-511 access TCAM1, etc",
    /* PQDMD                     */ "",
    /* PQDMS                     */ "",
    /* PQRED                     */ "",
    /* PQWQ                      */ "",
    /* PRCM                      */ "",
    /* PRDM                      */ "",
    /* PRFCFGA                   */ "",
    /* PRFCFGB                   */ "",
    /* PRFSELA                   */ "",
    /* PRFSELB                   */ "",
    /* PRI_LUT                   */ "Priority look up table",
    /* PROGRAMSELECTIONMAP0      */ "",
    /* PROGRAMSELECTIONMAP1      */ "",
    /* PROGRAMSELECTIONMAP2      */ "",
    /* PROGRAMSELECTIONMAP3      */ "",
    /* PROGRAMSELECTIONMAP4      */ "",
    /* PROGRAMSELECTIONMAP5      */ "",
    /* PROGRAMSELECTIONMAP6      */ "",
    /* PROGRAMSELECTIONMAP7      */ "",
    /* PROGRAMTRANSLATIONMAP     */ "",
    /* PROGRAMVARS               */ "",
    /* PROGRAMVARSTABLE          */ "",
    /* PROG_MEM                  */ "Provides Access To ETU Wrapper Program Memory",
    /* PR_ICC_LOOKUP_CORE_LOOKUP_RESULTS_TABLE */ "If Last = 0 (LSB from Lookup Table entry)\n\n                                            Entry = {State[23:00], Shift[04:00], Last = 0}\n\n                                            If Last = 1 (LSB from Lookup Table entry)\n\n                                            Entry = {Queue[05:00], Drop, QueueAction[01:00], COS[02:00], DP[01:00], DefaultDE[01:00], SelectDE, Last = 1}",
    /* PR_ICC_LOOKUP_CORE_PORT_DEFAULTS_TABLE */ "",
    /* PR_ICC_LOOKUP_CORE_TCAM_TABLE */ "TCAM Access Table.",
    /* PR_IDP_POLICER_METER_BUCKET */ "Meter Bucket Memory",
    /* PR_IDP_POLICER_METER_CONFIG */ "Meter Config Memory",
    /* PTP_LABEL_RANGE_PROFILE_TABLE */ "",
    /* PUPFIFO_HI                */ "Priority Update Pipeline Hi Pri Fifo",
    /* PUPFIFO_LO                */ "Priority Update Pipeline Lo Pri Fifo",
    /* QBUFFSPROFILE             */ "The database assigns queues to buffer usage profiles",
    /* QDEPTH_THRESH0            */ "Queue depth threshold pointers - Lower 32K queues - 4 queues per entry",
    /* QDEPTH_THRESH1            */ "Queue depth threshold pointers - Upper 32K queues - 4 queues per entry",
    /* QDESC                     */ "",
    /* QDRDLLMEM                 */ "",
    /* QDRMEM                    */ "",
    /* QL_TABLE0                 */ "Average Queue Length Table 0",
    /* QL_TABLE1                 */ "Average Queue Length Table 1",
    /* QM                        */ "",
    /* QM_ALLOCATION_WATERMARK   */ "Source queue pages allocation watermark memory. Indexed by a source queue number.",
    /* QM_BUFFER_STATE0          */ "Buffer state0 table. Indexed by the SOP page of a HPP packet.",
    /* QM_BUFFER_STATE2          */ "Buffer state2 table. Indexed by the SOP page of a packet.",
    /* QM_BUFFER_STATE3          */ "Buffer state3 table. Indexed by the SOP page of a packet.",
    /* QM_BUFFER_STATE_AGE       */ "Buffer state age memory. Indexed by the SOP page of a packet.",
    /* QM_DEQUEUE_CONTEXT0       */ "Packet dequeue context0. Indexed by destination queue number, contains the active, aged, src buffer page of the context.",
    /* QM_DEQUEUE_CONTEXT1       */ "Packet dequeue context1. Indexed by destination queue number, contains the next_page field of the dequeue context.",
    /* QM_DEST_QUEUE_HEADPTR     */ "Destination queue head buffer pointer. Indexed by a destination queue number.",
    /* QM_DEST_QUEUE_STATE       */ "Destination queue state memory. Indexed by a destination queue number.",
    /* QM_DQ_NEXT_BUFFER         */ "Pointers to the next packet for destination queues processing. Indexed by the SOP page of the current packet.",
    /* QM_EGRESS_BUFFER_STATE1   */ "Egress buffer state1 table. Indexed by the SOP page of a packet.",
    /* QM_FREE_PAGE_FIFO0        */ "Free page FIFO. Pages in the FIFO is available for new allocation to queues. There are five FIFO's that can opererate in parallel. Pages are pushed or popped from the five FIFO's in a round robin fashion",
    /* QM_FREE_PAGE_FIFO1        */ "Free page FIFO. Pages in the FIFO is available for new allocation to queues. There are five FIFO's that can opererate in parallel. Pages are pushed or popped from the five FIFO's in a round robin fashion",
    /* QM_FREE_PAGE_FIFO2        */ "Free page FIFO. Pages in the FIFO is available for new allocation to queues. There are five FIFO's that can opererate in parallel. Pages are pushed or popped from the five FIFO's in a round robin fashion",
    /* QM_FREE_PAGE_FIFO3        */ "Free page FIFO. Pages in the FIFO is available for new allocation to queues. There are five FIFO's that can opererate in parallel. Pages are pushed or popped from the five FIFO's in a round robin fashion",
    /* QM_FREE_PAGE_FIFO4        */ "Free page FIFO. Pages in the FIFO is available for new allocation to queues. There are five FIFO's that can opererate in parallel. Pages are pushed or popped from the five FIFO's in a round robin fashion",
    /* QM_INGRESS_BUFFER_STATE1  */ "Ingress buffer state1 table. Indixed by the SOP page of a packet.",
    /* QM_NEXT_PAGE              */ "For looking up the next page of a packet. Indexed by the current page.",
    /* QM_PAGE_ROTATION          */ "To look up the rotation index of a page. Indexed by the current page.",
    /* QM_REPLICATION_CONTEXT    */ "Packet replication context. Indexed by source queue number. To keep track of the number of replication copies sent to the HPP.",
    /* QM_REPLICATION_DEREF      */ "Replication state table: de-reference count. Index to the table is the SOP page of a packet.",
    /* QM_REPLICATION_LRP_STATE  */ "Replication state table: rep LRP states. Index to the table is the SOP page of a packet.",
    /* QM_REPLICATION_REF        */ "Replication state table: reference count. Index to the table is the SOP page of a packet.",
    /* QM_REPLICATION_REP_COPY   */ "Replication state table: repplication copy count. Indexed by the SOP page of a packet.",
    /* QM_SCOREBOARD0            */ "One of two Free page scoreboard tables. Each entry is 32 bits, with one bit for each page. A bit is set whenever the associated page is enqueued. Page 0 is represented by bit 0 of entry 0. Page 16383 is represented by bit 31 of entry 511. Up to two pages can be enqueued per clock cycle, there are two scoreboard tables such that a page is considered free if its freed bit is set in any of the two scoreboard table.",
    /* QM_SCOREBOARD1            */ "One of two Free page scoreboard tables. Each entry is 32 bits, with one bit for each page. A bit is set whenever the associated page is enqueued. Page 0 is represented by bit 0 of entry 0. Page 16383 is represented by bit 31 of entry 511. Up to two pages can be enqueued per clock cycle, there are two scoreboard tables such that a page is considered free if its freed bit is set in any of the two scoreboard table.",
    /* QM_SOURCE_QUEUE           */ "Source queue lookup table. Indexed by the current page.",
    /* QM_SOURCE_QUEUE_CONFIG    */ "Source queue config table. Indexed by a source queue number.",
    /* QM_SOURCE_QUEUE_HEADPTR   */ "Source queue head buffer pointer. Indexed by a source queue number.",
    /* QM_SOURCE_QUEUE_STATE0    */ "Source queue state0 memory. Indexed by a source queue number.",
    /* QM_SOURCE_QUEUE_STATE1    */ "Source queue state1 memory. Indexed by a source queue number.",
    /* QM_SQ_NEXT_BUFFER         */ "Pointers to the next packet for source queues processing. Indexed by the SOP page of the current packet.",
    /* QPRISEL                   */ "",
    /* QSM                       */ "",
    /* QSZ                       */ "",
    /* QSZTH                     */ "",
    /* QTYPE                     */ "",
    /* QUEUE_MAP                 */ "This database contains the Queue Map Table.",
    /* QUEUE_PARAMETER_HI        */ "Queue parameter database for upper 32K queues",
    /* QUEUE_PARAMETER_LO        */ "Queue parameter database for lower 32K queues",
    /* QUEUE_STATE_HI            */ "Queue parameter database for upper 32K queues",
    /* QUEUE_STATE_LO            */ "Queue parameter database for lower 32K queues",
    /* QUEUE_TO_SC_0             */ "Queue to sysport and cos conversion",
    /* QUEUE_TO_SC_1             */ "Queue to sysport and cos conversion",
    /* QUEUE_TO_SC_2             */ "Queue to sysport and cos conversion",
    /* QUEUE_TO_SC_3             */ "Queue to sysport and cos conversion",
    /* Q_MAX_BUFFS               */ "The database contains the maximum buffer and WRED gain parameters for buffer profile",
    /* Q_MIN_BUFFS               */ "The database contains the minimum buffer parameter for buffer profile",
    /* Q_PRIORITY_BIT_MAP        */ "",
    /* RAFARADDRSTATUS           */ "",
    /* RAFBRADDRSTATUS           */ "",
    /* RAFCRADDRSTATUS           */ "",
    /* RAFDRADDRSTATUS           */ "",
    /* RAFERADDRSTATUS           */ "",
    /* RAFFRADDRSTATUS           */ "",
    /* RAFWADDR                  */ "",
    /* RANDGEN                   */ "The database contains WRED random Number generator seeds",
    /* RATE_DELTA_MAX            */ "This database holds the range of possible rate_max_deltas for the demand calculation.",
    /* RAW_ENTRY_TABLE           */ "Raw physical access to the Search Bank Memories.",
    /* RAW_HITBIT_TABLE          */ "Raw physical access to the Hitbit Search Bank Memories.",
    /* RCL2OFP                   */ "",
    /* RCNT                      */ "",
    /* RCYCTXTMAP                */ "",
    /* RCYSCM                    */ "",
    /* RDFAWADDRSTATUS           */ "",
    /* RDFBWADDRSTATUS           */ "",
    /* RDFCWADDRSTATUS           */ "",
    /* RDFDWADDRSTATUS           */ "",
    /* RDFEWADDRSTATUS           */ "",
    /* RDFFWADDRSTATUS           */ "",
    /* RDFRADDR                  */ "",
    /* RDM                       */ "",
    /* REPLICATION_FIFO_BANK0    */ "Bank0 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* REPLICATION_FIFO_BANK1    */ "Bank1 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* RESERVEDMC                */ "",
    /* RESPONSIVE_PROTOCOL_MATCH */ "Responsive protocol match register set.",
    /* RH_ECMP_DROPS             */ "RH_ECMP drop counter.",
    /* RH_ECMP_DROPS_X           */ "RH_ECMP drop counter.",
    /* RH_ECMP_DROPS_Y           */ "RH_ECMP drop counter.",
    /* RH_ECMP_ETHERTYPE_ELIGIBILITY_MAP */ "A list of ethertype within which RH ECMP can be applied (or excluded).",
    /* RH_ECMP_FLOWSET           */ "RH_ECMP Flow Set Assigned Member.",
    /* RH_HGT_DROPS              */ "RH_HGT Group Member Statistic.",
    /* RH_HGT_DROPS_X            */ "RH_HGT Group Member Statistic.",
    /* RH_HGT_DROPS_Y            */ "RH_HGT Group Member Statistic.",
    /* RH_HGT_ETHERTYPE_ELIGIBILITY_MAP */ "A list of ethertype within which RH HGT can be applied (or excluded).",
    /* RH_HGT_FLOWSET            */ "RH_HGT Flow Set Assigned Member.",
    /* RH_HGT_GROUP_CONTROL      */ "RH_HGT Group Parameters.",
    /* RH_LAG_DROPS              */ "RH_LAG drop counter.",
    /* RH_LAG_DROPS_X            */ "RH_LAG drop counter.",
    /* RH_LAG_DROPS_Y            */ "RH_LAG drop counter.",
    /* RH_LAG_ETHERTYPE_ELIGIBILITY_MAP */ "A list of ethertype within which RH LAG can be applied (or excluded).",
    /* RH_LAG_FLOWSET            */ "RH_LAG Flow Set Assigned Member.",
    /* RMEP                      */ "",
    /* RPDM                      */ "",
    /* RPDMHDR                   */ "",
    /* RPFMEMORY                 */ "",
    /* RQE_FREE_LIST             */ "RQE FREE LIST",
    /* RQE_LINK_LIST             */ "RQE LINK LIST",
    /* RRDM                      */ "",
    /* RTAG7_FLOW_BASED_HASH     */ "RTAG7 Flow-based Hash table.",
    /* RTAG7_PORT_BASED_HASH     */ ". FeatureSpecific-Ethernet.",
    /* RTP_CRMA                  */ "",
    /* RTP_CUCT                  */ "",
    /* RTP_DLLUP                 */ "",
    /* RTP_DLLUS                 */ "",
    /* RTP_DRMA                  */ "",
    /* RTP_DUCTP                 */ "",
    /* RTP_DUCTS                 */ "",
    /* RTP_FFLBP                 */ "",
    /* RTP_FFLBS                 */ "",
    /* RTP_MCLBTP                */ "",
    /* RTP_MCLBTS                */ "",
    /* RTP_MCSFFP                */ "",
    /* RTP_MCT                   */ "",
    /* RTP_MEM_800000            */ "",
    /* RTP_MEM_900000            */ "",
    /* RTP_MEM_1100000           */ "",
    /* RTP_MEM_A00000            */ "",
    /* RTP_MEM_C00000            */ "",
    /* RTP_MEM_D00000            */ "",
    /* RTP_MNOLP                 */ "",
    /* RTP_MULTI_CAST_TABLE_UPDATE */ "",
    /* RTP_MULTI_TB              */ "",
    /* RTP_RCGLBT                */ "",
    /* RTP_RESERVED_23           */ "",
    /* RTP_RMHMT                 */ "",
    /* RTP_RRMA                  */ "",
    /* RTP_SCTINC                */ "",
    /* RTP_SLSCT                 */ "",
    /* RTP_TOTSF                 */ "",
    /* RTP_UNICAST_DISTRIBUTION_MEMORY */ "",
    /* RTP_UNICAST_DISTRIBUTION_MEMORY_FOR_CTRL_CELLS */ "",
    /* RTP_UNICAST_DISTRIBUTION_MEMORY_FOR_DATA_CELLS */ "",
    /* RT_BK                     */ "Root Node Bucket Table.",
    /* RT_FM                     */ "Root Node Full Map Table.",
    /* RT_FS                     */ "Root Node Full State Table.",
    /* RT_IF                     */ "Root Node Interface Configuration Table.",
    /* RT_ST                     */ "Root Node State Table.",
    /* RXBADTAGPKTS              */ "Receive Bad Tag Frame Counter  - Implemented in isec_RxTagUntagNoneBad",
    /* RXLP_CHANNEL_CONTROL_BUFFER */ "",
    /* RXLP_DEBUG_COUNTER0       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER0_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER1       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER1_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER2       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER2_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER3       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER3_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER4       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER4_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER5       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER5_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER6       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER6_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER7       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER7_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER8       */ "This table counts the number of Fragment-Bytes/stream transmitted by RXLP",
    /* RXLP_DEBUG_COUNTER9       */ "This table counts the number of Fragments/stream transmitted by RXLP",
    /* RXLP_DEBUG_COUNTER10      */ "This table counts the number of Frame-Bytes/stream transmitted by RXLP",
    /* RXLP_DEBUG_COUNTER11      */ "This table counts the number of Frames/stream transmitted by RXLP",
    /* RXLP_DFC_MSG_BIT_REMAP_PORT_0 */ "External -> Remapped translation table",
    /* RXLP_DFC_MSG_BIT_REMAP_PORT_1 */ "External -> Remapped translation table",
    /* RXLP_DFC_MSG_BIT_REMAP_PORT_2 */ "External -> Remapped translation table",
    /* RXLP_DFC_MSG_BIT_REMAP_PORT_3 */ "External -> Remapped translation table",
    /* RXLP_ERROR_ACTION_MAP_DATA */ "",
    /* RXLP_ERROR_ACTION_MAP_TCAM */ "Interrupt Data Log Memory that stores the fragment information corresponding to an error case log",
    /* RXLP_INTERNAL_STREAM_MAP_PORT_0 */ "Maps (External Stream ID - RXLP_PORT_STREAM_ID_BASE) to internal stream ID in the range 0-127. There is one copy of this table for each port. The internal stream IDs configured in this table should be unique across the four ports associated with the RXLP slice.",
    /* RXLP_INTERNAL_STREAM_MAP_PORT_1 */ "Maps (External Stream ID - RXLP_PORT_STREAM_ID_BASE) to internal stream ID in the range 0-127. There is one copy of this table for each port. The internal stream IDs configured in this table should be unique across the four ports associated with the RXLP slice.",
    /* RXLP_INTERNAL_STREAM_MAP_PORT_2 */ "Maps (External Stream ID - RXLP_PORT_STREAM_ID_BASE) to internal stream ID in the range 0-127. There is one copy of this table for each port. The internal stream IDs configured in this table should be unique across the four ports associated with the RXLP slice.",
    /* RXLP_INTERNAL_STREAM_MAP_PORT_3 */ "Maps (External Stream ID - RXLP_PORT_STREAM_ID_BASE) to internal stream ID in the range 0-127. There is one copy of this table for each port. The internal stream IDs configured in this table should be unique across the four ports associated with the RXLP slice.",
    /* RXLP_INTR_DATA_MEM        */ "Interrupt Data Log Memory that stores the fragment information corresponding to an error case log",
    /* RXLP_MAX_FRAME_SIZE       */ "External -> Remapped translation table",
    /* RXNOSCIPKTS               */ "Receive Unknown SCI Discarded Frame Counter - Implemented in isec_RxSCIUnknownNonePkts",
    /* RXNOTAGPKTS               */ "Receive No Tag Frame Counter  - Implemented in isec_RxTagUntagNoneBad",
    /* RXSAINVLDPKTS             */ "Receive SA Invalid Frame Counter",
    /* RXSANOTUSINGSAPKTS        */ "Receive Unused SA Discarded Encrypted Frame Counter",
    /* RXSANOTVLDPKTS            */ "Receive SA Invalid Frame Counter",
    /* RXSAOKPKTS                */ "Receive SA Valid Frame Counter",
    /* RXSAUNUSEDSAPKTS          */ "Receive Unused SA Unencrypted Frame Counter",
    /* RXSCDCRPTBYT              */ "Receive Encrypted Frame Octet Count for each SC",
    /* RXSCDLYPKTS               */ "Receive PN Violation Frame Counter for SC",
    /* RXSCINVLDPKTS             */ "Summation of Receive SA Invalid Frame Counter for SC",
    /* RXSCLATEPKTS              */ "Receive  PN Violation Discarded Frame Counter for SC",
    /* RXSCNOTUSINGSAPKTS        */ "Summation of Receive Unused SA Encrypted Frame Counter for SC",
    /* RXSCNOTVLDPKTS            */ "Summation of Receive SA Not Valid Frame Counter for SC",
    /* RXSCOKPKTS                */ "Summation of Receive SA Valid Frame Counter for SC",
    /* RXSCUNCHKPKTS             */ "Receive Unchecked Frame Counter for SC",
    /* RXSCUNUSEDSAPKTS          */ "Summation of Receive Unused SA Unencrypted Frame Counter for SC",
    /* RXSCVLDTBYT               */ "Receive Authentication Only Frame Octet Count for SC",
    /* RXUNKNOWNSCIPKTS          */ "Receive Unknown SCI Frame Counter - Implemented in isec_RxSCIUnknownNonePkts",
    /* RXUNTAGPKTS               */ "Receive Untagged Frame Counter - Implemented in isec_RxTagUntagNoneBad",
    /* RX_PROT_GROUP_TABLE       */ "Protection Switching Drop Enable.",
    /* RX_PROT_GROUP_TABLE_1     */ "Protection Switching Drop Enable.",
    /* RX_PROT_GROUP_TABLE_1_DMA */ "Protection Switching Drop Enable DMA view-1.",
    /* RX_PROT_GROUP_TABLE_DMA   */ "Protection Switching Drop Enable DMA view-1.",
    /* SCHEDULER_CREDIT_GENERATION_CALENDAR */ "",
    /* SCHEDULER_ENABLE_MEMORY   */ "",
    /* SCHEDULER_INIT            */ "",
    /* SCH_BUCKET_DEFICIT_BDF    */ "",
    /* SCH_BUCKET_DEFICIT__BDF   */ "",
    /* SCH_CH_NIF_CALENDAR_CONFIGURATION_CNCC */ "",
    /* SCH_CH_NIF_CALENDAR_CONFIGURATION__CNCC */ "",
    /* SCH_CH_NIF_RATES_CONFIGURATION_CNRC */ "",
    /* SCH_CH_NIF_RATES_CONFIGURATION__CNRC */ "",
    /* SCH_CIR_SHAPERS_STATIC_TABEL_CSST */ "",
    /* SCH_CIR_SHAPERS_STATIC_TABEL__CSST */ "",
    /* SCH_CIR_SHAPER_CALENDAR_CSC */ "",
    /* SCH_CIR_SHAPER_CALENDAR__CSC */ "",
    /* SCH_CL_SCHEDULERS_CONFIGURATION_SCC */ "",
    /* SCH_CL_SCHEDULERS_CONFIGURATION__SCC */ "",
    /* SCH_CL_SCHEDULERS_TYPE_SCT */ "",
    /* SCH_CL_SCHEDULERS_TYPE__SCT */ "",
    /* SCH_DEVICE_RATE_MEMORY_DRM */ "",
    /* SCH_DEVICE_RATE_MEMORY__DRM */ "",
    /* SCH_DSP_2_PORT_MAP_DSPP   */ "",
    /* SCH_DSP_2_PORT_MAP__DSPP  */ "",
    /* SCH_DUAL_SHAPER_MEMORY_DSM */ "",
    /* SCH_DUAL_SHAPER_MEMORY__DSM */ "",
    /* SCH_FC_MAP_FCM            */ "",
    /* SCH_FC_MAP__FCM           */ "",
    /* SCH_FLOW_DESCRIPTOR_MEMORY_STATIC_FDMS */ "",
    /* SCH_FLOW_DESCRIPTOR_MEMORY_STATIC__FDMS */ "",
    /* SCH_FLOW_GROUP_MEMORY_FGM */ "",
    /* SCH_FLOW_GROUP_MEMORY__FGM */ "",
    /* SCH_FLOW_INSTALLED_MEMORY_FIM */ "",
    /* SCH_FLOW_INSTALLED_MEMORY__FIM */ "",
    /* SCH_FLOW_STATUS_MEMORY_FSM */ "",
    /* SCH_FLOW_STATUS_MEMORY_FSM_B */ "",
    /* SCH_FLOW_STATUS_MEMORY__FSM */ "",
    /* SCH_FLOW_SUB_FLOW_FSF     */ "",
    /* SCH_FLOW_SUB_FLOW__FSF    */ "",
    /* SCH_FLOW_TO_FIP_MAPPING_FFM */ "",
    /* SCH_FLOW_TO_FIP_MAPPING__FFM */ "",
    /* SCH_FLOW_TO_QUEUE_MAPPING_FQM */ "",
    /* SCH_FLOW_TO_QUEUE_MAPPING__FQM */ "",
    /* SCH_FORCE_STATUS_MESSAGE  */ "",
    /* SCH_HR_SCHEDULER_CONFIGURATION_SHC */ "",
    /* SCH_HR_SCHEDULER_CONFIGURATION__SHC */ "",
    /* SCH_MEM_01300000          */ "",
    /* SCH_MEM_01400000          */ "",
    /* SCH_MEM_01500000          */ "",
    /* SCH_MEM_01600000          */ "",
    /* SCH_MEM_01700000          */ "",
    /* SCH_MEM_01800000          */ "",
    /* SCH_MEM_01900000          */ "",
    /* SCH_MEM_03000000          */ "",
    /* SCH_MEM_03100000          */ "",
    /* SCH_MEM_03200000          */ "",
    /* SCH_MEM_03300000          */ "",
    /* SCH_MEM_03400000          */ "",
    /* SCH_MEM_03500000          */ "",
    /* SCH_MEM_04700000          */ "",
    /* SCH_MEM_07100000          */ "",
    /* SCH_MEM_07300000          */ "",
    /* SCH_MEM_07500000          */ "",
    /* SCH_MEM_30000000          */ "",
    /* SCH_MEM_01A00000          */ "",
    /* SCH_MEM_01B00000          */ "",
    /* SCH_MEM_01C00000          */ "",
    /* SCH_MEM_01F00000          */ "",
    /* SCH_MEM_03A00000          */ "",
    /* SCH_MEM_03B00000          */ "",
    /* SCH_MEM_03C00000          */ "",
    /* SCH_MEM_03D00000          */ "",
    /* SCH_MEM_03E00000          */ "",
    /* SCH_MEM_03F00000          */ "",
    /* SCH_MEM_04A00000          */ "",
    /* SCH_MEM_04D00000          */ "",
    /* SCH_MEM_07D00000          */ "",
    /* SCH_ONE_PORT_NIF_CONFIGURATION_OPNC */ "",
    /* SCH_ONE_PORT_NIF_CONFIGURATION__OPNC */ "",
    /* SCH_PIR_SHAPERS_STATIC_TABEL_PSST */ "",
    /* SCH_PIR_SHAPERS_STATIC_TABEL__PSST */ "",
    /* SCH_PIR_SHAPER_CALENDAR_PSC */ "",
    /* SCH_PIR_SHAPER_CALENDAR__PSC */ "",
    /* SCH_PORT_ENABLE_PORTEN    */ "",
    /* SCH_PORT_ENABLE__PORTEN   */ "",
    /* SCH_PORT_GROUP_PFGM       */ "",
    /* SCH_PORT_GROUP__PFGM      */ "",
    /* SCH_PORT_QUEUE_SIZE_PQS   */ "",
    /* SCH_PORT_QUEUE_SIZE__PQS  */ "",
    /* SCH_PORT_SCHEDULER_MAP_PSM */ "",
    /* SCH_PORT_SCHEDULER_MAP__PSM */ "",
    /* SCH_PORT_SCHEDULER_WEIGHTS_PSW */ "",
    /* SCH_PORT_SCHEDULER_WEIGHTS__PSW */ "",
    /* SCH_PS_8P_RATES_PSR       */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_0 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_1 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_2 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_3 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_4 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_5 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_6 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_7 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_8 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_9 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_10 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_11 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_12 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_13 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_14 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_15 */ "",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR__CAL */ "",
    /* SCH_SCHEDULER_ENABLE_MEMORY_SEM */ "",
    /* SCH_SCHEDULER_ENABLE_MEMORY__SEM */ "",
    /* SCH_SCHEDULER_INIT        */ "",
    /* SCH_SHAPER_DESCRIPTOR_MEMORY_STATIC_SHDS */ "",
    /* SCH_SHAPER_DESCRIPTOR_MEMORY_STATIC__SHDS */ "",
    /* SCH_SHARED_DEVICE_RATE_SHARED_DRM */ "",
    /* SCH_SLOW_FACTOR_MEMORY_SFM */ "",
    /* SCH_SLOW_SCALE_A_SSA      */ "",
    /* SCH_SLOW_SCALE_B_SSB      */ "",
    /* SCH_TOKEN_MEMORY_CONTROLLER_TMC */ "",
    /* SCH_TOKEN_MEMORY_CONTROLLER_TMC_MSB */ "",
    /* SCH_TOKEN_MEMORY_CONTROLLER__TMC */ "",
    /* SEMOPCODEIPOFFSETS        */ "",
    /* SEMOPCODEPCPDEIOFFSETS    */ "",
    /* SEMOPCODETCDPOFFSETS      */ "",
    /* SEMRESULT                 */ "",
    /* SEMRESULTACCESSED         */ "",
    /* SEMRESULTTABLE            */ "",
    /* SEMRESULTTABLEACMP        */ "",
    /* SEMRESULTTABLEACP2PTOAC   */ "",
    /* SEMRESULTTABLEACP2PTOPBB  */ "",
    /* SEMRESULTTABLEACP2PTOPWE  */ "",
    /* SEMRESULTTABLEIPTT        */ "",
    /* SEMRESULTTABLEISIDMP      */ "",
    /* SEMRESULTTABLEISIDP2P     */ "",
    /* SEMRESULTTABLELABELLSP    */ "",
    /* SEMRESULTTABLELABELPWEMP  */ "",
    /* SEMRESULTTABLELABELPWEP2P */ "",
    /* SEMRESULTTABLELABELVRL    */ "",
    /* SEMRESULTTABLETRILL       */ "",
    /* SEQM                      */ "",
    /* SERVICE_COS_MAP           */ "index by {service_cos_profile_idx[1:0], int_pri[3:0]",
    /* SERVICE_PORT_MAP          */ "index by {service_port_profile_idx[2:0], local_dst_port[6:0]",
    /* SERVICE_QUEUE_MAP         */ "index by {0, vid[11:0] or {1, vfi[11:0]}",
    /* SER_ACC_TYPE_MAP          */ "",
    /* SER_MEMORY                */ "",
    /* SER_RESULT_0              */ "",
    /* SER_RESULT_1              */ "",
    /* SER_RESULT_DATA_0         */ "",
    /* SER_RESULT_DATA_1         */ "",
    /* SER_RESULT_EXPECTED_0     */ "",
    /* SER_RESULT_EXPECTED_1     */ "",
    /* SHAPER_BUCKET_0           */ "Data base for shaper working credit",
    /* SHAPER_BUCKET_1           */ "Data base for shaper working credit",
    /* SHAPER_BUCKET_2           */ "Data base for shaper working credit",
    /* SHAPER_BUCKET_3           */ "Data base for shaper working credit",
    /* SHAPER_DESCRIPTOR_MEMORY_STATIC */ "",
    /* SHAPER_EVENT              */ "Shaper change soon status",
    /* SHAPER_LEAK_0             */ "Data base to define shaper leak rates in bits per clock cycle and threshold",
    /* SHAPER_LEAK_1             */ "Data base to define shaper leak rates in bits per clock cycle and threshold",
    /* SHAPER_LEAK_2             */ "Data base to define shaper leak rates in bits per clock cycle and threshold",
    /* SHAPER_LEAK_3             */ "Data base to define shaper leak rates in bits per clock cycle and threshold",
    /* SHAPER_STATE              */ "shaped_bit flags for 128 queues",
    /* SLQ_COUNTER               */ "This is the SLQ Counter database",
    /* SMOOTHDIVISION            */ "",
    /* SNOOPACTION               */ "",
    /* SNOOPMIRRORTABLE0         */ "",
    /* SNOOPMIRRORTABLE1         */ "",
    /* SNPACTPROFILE             */ "",
    /* SOPMMU                    */ "",
    /* SOURCE_MOD_PROXY_TABLE    */ "Source MODID table for Higig Lookup",
    /* SOURCE_NODE_TYPE_TAB      */ "2 bits source node type lookup by source_node[7:0] field in TS header for UC packlets.",
    /* SOURCE_TRUNK_MAP_MODBASE  */ "Specifies the port(s) that is (are) CPU.",
    /* SOURCE_TRUNK_MAP_TABLE    */ "Source Trunk Map Table",
    /* SOURCE_VP                 */ "Source Virtual Port Properties",
    /* SOURCE_VP_2               */ "TPID parse control for 2nd parser",
    /* SOURCE_VP_ATTRIBUTES_2    */ "Attributes associated with Looped back WLAN Packets.",
    /* SPORT_EHG_RX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* SPORT_EHG_RX_TUNNEL_MASK  */ "Embedded Higig Rx tunnel data memory",
    /* SPORT_EHG_TX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* SPRDPRM                   */ "",
    /* SRCDESTPORTFORL3ACL_KEY   */ "",
    /* SRCQRNG                   */ "",
    /* SRCSYSTEMPORTFEMBITSELECTTABLE */ "",
    /* SRCSYSTEMPORTFEMFIELDSELECTMAP */ "",
    /* SRCSYSTEMPORTFEMMAPINDEXTABLE */ "",
    /* SRC_MODID_BLOCK           */ "Source Modid based blocking mask table",
    /* SRC_MODID_EGRESS          */ "Source Modid based blocking mask table",
    /* SRC_MODID_INGRESS_BLOCK   */ "Source Modid based blocking mask table",
    /* SRDPRB                    */ "",
    /* STATSCFG                  */ "This is the Central Statistic Configuration database",
    /* STG_TAB                   */ "Spanning Tree Group state table",
    /* STM                       */ "",
    /* STP                       */ "",
    /* STPTABLE                  */ "",
    /* SUBNETCLASSIFY            */ "",
    /* SUBPORT_MAP_TABLE         */ "Configuration Map for all the Sub-ports",
    /* SUBPORT_SHAPER_TABLE      */ "Parameters for the Min and Max Shapers used to shape the sub-ports",
    /* SUBPORT_TAG_TO_PP_PORT_MAP */ "SPVID to SGPP conversion table for Triple Vlan Application.\nThis table is looked up if PORT_TABLE.PORT_TYPE=4 i.e., CASCADED_FOR_TRIPLE_VLAN",
    /* SUBPORT_TAG_TO_PP_PORT_MAP_DATA_ONLY */ "SPVID to SGPP conversion table for Triple Vlan Application.\nThis table is looked up if PORT_TABLE.PORT_TYPE=4 i.e., CASCADED_FOR_TRIPLE_VLAN",
    /* SUBPORT_TAG_TO_PP_PORT_MAP_ONLY */ "Subport Tag  to ingress Packet Processing Port conversion table for Triple Vlan Application.\nThis table is looked up if PORT_TABLE.PORT_TYPE=4 i.e., CASCADED_FOR_TRIPLE_VLAN",
    /* SUBPORT_WERR_TABLE        */ "WERR parameters for for all the Sub-ports",
    /* SVEMMANAGEMENTREQUEST     */ "",
    /* SVM_MACROFLOW_INDEX_TABLE */ "Used for computing the final meter index from the base meter index",
    /* SVM_METER_TABLE           */ "Used for computing the final meter index from the base meter index",
    /* SVM_OFFSET_TABLE          */ "Used for computing the final meter index from the base meter index",
    /* SVM_POLICY_TABLE          */ "Used for computing the final meter index from the base meter index",
    /* SVP_DISABLE_VLAN_CHECKS_TAB */ "Contains cntrls assoc with the 4K VLANs.",
    /* SYSP                      */ "",
    /* SYSPORT_PRI_HI            */ "Priority and next priority pairs for upper 8 COS in a Sys Port",
    /* SYSPORT_PRI_LO            */ "Priority and next priority pairs for lower 8 COS in a Sys Port",
    /* SYSPORT_TO_NODE           */ "Sysport to node mapping",
    /* SYSPORT_TO_QUEUE          */ "Sysport to base queue mapping, msb indicates multicast",
    /* SYSTEM_CONFIG_TABLE       */ "System Port Table. Holds fields necessary to futher parse a higig packet, address = {src_modid[6:0], src_port[5:0]} FeatureSpecific-Ethernet",
    /* SYSTEM_CONFIG_TABLE_MODBASE */ "Specifies the port(s) that is (are) CPU.",
    /* SYS_PORTMAP               */ "System Port Mapping Table (maps local system port number to a local physical port number)",
    /* TABLE0_LOG_TO_PHY_MAP     */ "Table 0 (VLAN_XLATE) Logical to Physical address mapping.  Maps upper 6 bits of the address.",
    /* TABLE1_LOG_TO_PHY_MAP     */ "Table 1 (L2_ENTRY) Logical to Physical address mapping.  Maps upper 6 bits of the address.",
    /* TABLE2_LOG_TO_PHY_MAP     */ "Table 2 (L3_ENTRY) Logical to Physical address mapping.  Maps upper 6 bits of the address.",
    /* TABLE3_LOG_TO_PHY_MAP     */ "Table 3 (EP_VLAN_XLATE) Logical to Physical address mapping.  Maps upper 6 bits of the address.",
    /* TABLE4_LOG_TO_PHY_MAP     */ "Table 4 (MPLS_ENTRY) Logical to Physical address mapping.  Maps upper 6 bits of the address.",
    /* TABLE_BRIDGE1Q_MEMBERSHIP_INGRESS */ "",
    /* TABLE_BRIDGE1Q_PP_PA      */ "",
    /* TABLE_BRIDGE1Q_STP_STATE  */ "",
    /* TABLE_BRIDGE_ACCEPTABLE_FRAME_TYPE */ "",
    /* TABLE_BRIDGE_IP_TC        */ "",
    /* TABLE_BRIDGE_L4_PORT_TC   */ "",
    /* TABLE_BRIDGE_PCP_DEI_DECODE */ "",
    /* TABLE_BRIDGE_PORT_PROTOCOL */ "",
    /* TABLE_BRIDGE_PP_PA        */ "",
    /* TABLE_BRIDGE_TAG_FORMAT   */ "",
    /* TABLE_BRIDGE_UNKNOWN_DA_ACTION */ "",
    /* TABLE_BRIDGE_VLAN_EDIT_COMMAND */ "",
    /* TABLE_BRIDGE_VSI          */ "",
    /* TABLE_FIRST_PROTOCOLS_DB  */ "",
    /* TABLE_L2_INTERFACE        */ "",
    /* TABLE_L2_PROTECTION_STATUS */ "",
    /* TABLE_PP_PA_DB            */ "",
    /* TABLE_SNOOP_COMMAND       */ "",
    /* TABLE_TERMINATION_DB      */ "",
    /* TABLE_VSI_TO_RIF_TABLE    */ "",
    /* TAIL                      */ "",
    /* TAIL_LLA                  */ "This database contains the queue tail pointers",
    /* TAPS_BB_CMD_NOP           */ "taps bb nop command definition",
    /* TAPS_BB_CMD_READ          */ "taps bb read command definition",
    /* TAPS_BB_CMD_WRITE         */ "taps bb write command definition",
    /* TAPS_BB_RAW_CMD_READ      */ "taps bb raw read command definition",
    /* TAPS_BB_RAW_CMD_WRITE     */ "taps bb raw write command definition",
    /* TAPS_BRR_CMD_NOP          */ "",
    /* TAPS_BRR_CMD_READ         */ "taps brr read command definition",
    /* TAPS_BRR_CMD_WRITE        */ "taps brr write command definition",
    /* TAPS_BRR_WIDE_CMD_READ    */ "taps brr wide read command definition",
    /* TAPS_BRR_WIDE_CMD_WRITE   */ "taps brr wide write command definition",
    /* TAPS_RPB_CMD_FIND_BUCKET  */ "taps rpb find bucket command definition",
    /* TAPS_RPB_CMD_NOP          */ "",
    /* TAPS_RPB_CMD_PROPAGATE    */ "taps rpb propagate command definition",
    /* TAPS_RPB_CMD_READ         */ "taps rpb read command definition",
    /* TAPS_RPB_CMD_REPLACE      */ "taps rpb replace command definition",
    /* TAPS_RPB_CMD_WRITE        */ "taps rpb write command definition",
    /* TAPS_RPB_RAW_TCAM_CMD_READ */ "taps rpb raw tcam read command definition",
    /* TAPS_RPB_RAW_TCAM_CMD_WRITE */ "taps rpb raw tcam write command definition",
    /* TCAMACTION0               */ "",
    /* TCAMACTION1               */ "",
    /* TCAMACTION2               */ "",
    /* TCAMACTION3               */ "",
    /* TCAMBANK                  */ "",
    /* TCAM_1STPASSKEYPROFILERESOLVEDDATA */ "",
    /* TCAM_2NDPASSKEYPROFILERESOLVEDDATA */ "",
    /* TCAM_BRIDGE_IPV4_SUBNET   */ "",
    /* TCAM_BRIDGE_L4_PORT       */ "",
    /* TCAM_ETHERNET_PROTOCOL_DB */ "",
    /* TCAM_ETHER_TAG_OR_ETHER_TYPE */ "",
    /* TCAM_IPV4_NEXT_PROTOCOL   */ "",
    /* TCAM_IPV4_PROTOCOL_DB     */ "",
    /* TCAM_IPV6_PROTOCOL_DB     */ "",
    /* TCAM_KEYRESOLUTIONPROFILE */ "",
    /* TCAM_TPID                 */ "",
    /* TCAM_TPID_DB              */ "",
    /* TCDPMAP                   */ "",
    /* TCDPMAPTABLE              */ "",
    /* TCP_FN                    */ "TCP function table to map TCP Flags to any value for an IFP key, FeatureSpecific-Ethernet",
    /* TC_FREE_POOL              */ "This database is the tag Controller Free Pool Regfile. Access is only permited for debug, with no traffic in system",
    /* TDMCONFIG                 */ "",
    /* TDM_TABLE                 */ "The entries in this table identify the next interface to be serviced",
    /* THDIEMA_THDI_PORT_PG_CNTRS */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41] * 8 + pg[0..7]. Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min count:          No. of cells in PG min space\n* pg_sp_min_count        No. of cells in the min space for th ...",
    /* THDIEMA_THDI_PORT_PG_CONFIG */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..62] * 8 + pg[0..7].Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min_limit:          No. of cells reserved f ...",
    /* THDIEMA_THDI_PORT_SP_CNTRS */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_shared_count:      No. of cells current used by this port in this service pool\n* ecc:                  SECDED across the other bits in this row.",
    /* THDIEMA_THDI_PORT_SP_CONFIG */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_port_min_limit:    No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* sp_port_max_limit:    No. of cells allowed to be used by this port in this service pool - includes the minimum allocation ...",
    /* THDIEXT_THDI_PORT_PG_CNTRS */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41] * 8 + pg[0..7]. Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min count:          No. of cells in PG min space\n* pg_sp_min_count        No. of cells in the min space for th ...",
    /* THDIEXT_THDI_PORT_PG_CONFIG */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..62] * 8 + pg[0..7].Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min_limit:          No. of cells reserved f ...",
    /* THDIEXT_THDI_PORT_SP_CNTRS */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_shared_count:      No. of cells current used by this port in this service pool\n* ecc:                  SECDED across the other bits in this row.",
    /* THDIEXT_THDI_PORT_SP_CONFIG */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_port_min_limit:    No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* sp_port_max_limit:    No. of cells allowed to be used by this port in this service pool - includes the minimum allocation ...",
    /* THDIQEN_THDI_PORT_PG_CNTRS */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41] * 8 + pg[0..7]. Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min count:          No. of cells in PG min space\n* pg_sp_min_count        No. of cells in the min space for th ...",
    /* THDIQEN_THDI_PORT_PG_CONFIG */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..62] * 8 + pg[0..7].Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min_limit:          No. of cells reserved f ...",
    /* THDIQEN_THDI_PORT_SP_CNTRS */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_shared_count:      No. of cells current used by this port in this service pool\n* ecc:                  SECDED across the other bits in this row.",
    /* THDIQEN_THDI_PORT_SP_CONFIG */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_port_min_limit:    No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* sp_port_max_limit:    No. of cells allowed to be used by this port in this service pool - includes the minimum allocation ...",
    /* THDIRQE_THDI_PORT_PG_CNTRS */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41] * 8 + pg[0..7]. Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min count:          No. of cells in PG min space\n* pg_sp_min_count        No. of cells in the min space for th ...",
    /* THDIRQE_THDI_PORT_PG_CONFIG */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..62] * 8 + pg[0..7].Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min_limit:          No. of cells reserved f ...",
    /* THDIRQE_THDI_PORT_SP_CNTRS */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_shared_count:      No. of cells current used by this port in this service pool\n* ecc:                  SECDED across the other bits in this row.",
    /* THDIRQE_THDI_PORT_SP_CONFIG */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_port_min_limit:    No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* sp_port_max_limit:    No. of cells allowed to be used by this port in this service pool - includes the minimum allocation ...",
    /* THDI_PORT_PG_BST          */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par: Even parity across the row\n* Ing_PG_BST_Stat_Shared: Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Threshold_Profile_Shared: Which ...",
    /* THDI_PORT_PG_BST_X        */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                 Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:   ...",
    /* THDI_PORT_PG_BST_Y        */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:  ...",
    /* THDI_PORT_PG_CNTRS        */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min count:          No. of cells in PG min space\n* pg_sp_min_count        No. of cells in the min space for the service pool that contains this PG\n* pg_shared_count        No. of cells in the shared space for this PG\n* pg_hdrm_count          No. of cells in the local rese ...",
    /* THDI_PORT_PG_CNTRS_RT1_X  */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that contains ...",
    /* THDI_PORT_PG_CNTRS_RT1_Y  */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count     No. of cells in the min space for the service pool that contai ...",
    /* THDI_PORT_PG_CNTRS_RT2_X  */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is gre ...",
    /* THDI_PORT_PG_CNTRS_RT2_Y  */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is g ...",
    /* THDI_PORT_PG_CNTRS_SH1_X  */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that c ...",
    /* THDI_PORT_PG_CNTRS_SH1_Y  */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that ...",
    /* THDI_PORT_PG_CNTRS_SH2_X  */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG ...",
    /* THDI_PORT_PG_CNTRS_SH2_Y  */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this  ...",
    /* THDI_PORT_PG_CONFIG       */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:          No. of cells reserved for PG min space\n* pg_shared_dynamic      Is the shared limit for this PG static or dynamic?\n* pg_shared_limit        No. of cells allowed to be consumed in the s ...",
    /* THDI_PORT_PG_CONFIG0_X    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                    No. of cells allowed to be consumed in the shared space for th ...",
    /* THDI_PORT_PG_CONFIG0_Y    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                          No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared spac ...",
    /* THDI_PORT_PG_CONFIG1_X    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                    No. of cells allowed to be consumed in the shared space for th ...",
    /* THDI_PORT_PG_CONFIG1_Y    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                          No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared spac ...",
    /* THDI_PORT_PG_CONFIG2_X    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                    No. of cells allowed to be consumed in the shared space for th ...",
    /* THDI_PORT_PG_CONFIG2_Y    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                          No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared spac ...",
    /* THDI_PORT_PG_CONFIG_X     */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared space for ...",
    /* THDI_PORT_PG_CONFIG_Y     */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                          No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared spac ...",
    /* THDI_PORT_SP_BST          */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 4 + sp[0..3].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* Ing_Port_SP_BST_Threshold_Profile: Which of the eight compare profiles should be used to force a trigger.",
    /* THDI_PORT_SP_BST_X        */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per SP memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* ecc:                                  SE ...",
    /* THDI_PORT_SP_BST_Y        */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP",
    /* THDI_PORT_SP_CNTRS        */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 4 + sp[0..3].\nEach Entry contains:\n* sp_shared_count:      No. of cells current used by this port in this service pool\n* ecc:                  SECDED across the other bits in this row.",
    /* THDI_PORT_SP_CNTRS_RT_X   */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_coun ...",
    /* THDI_PORT_SP_CNTRS_RT_Y   */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_co ...",
    /* THDI_PORT_SP_CNTRS_SH_X   */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_m ...",
    /* THDI_PORT_SP_CNTRS_SH_Y   */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp ...",
    /* THDI_PORT_SP_CONFIG       */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 4 + sp[0..3].\nEach Entry contains:\n* sp_port_min_limit:    No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* sp_port_max_limit:    No. of cells allowed to be used by this port in this service pool - includes the mi ...",
    /* THDI_PORT_SP_CONFIG0_X    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG0_Y    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                        ...",
    /* THDI_PORT_SP_CONFIG1_X    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG1_Y    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                        ...",
    /* THDI_PORT_SP_CONFIG2_X    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG2_Y    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                        ...",
    /* THDI_PORT_SP_CONFIG_X     */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG_Y     */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                        ...",
    /* THDO_CONFIG_0A            */ "First physical copy of MMU_THDO_CONFIG_0",
    /* THDO_CONFIG_0B            */ "Second physical copy of MMU_THDO_CONFIG_0",
    /* THDO_CONFIG_1A            */ "First physical copy of MMU_THDO_CONFIG_1",
    /* THDO_CONFIG_1B            */ "Second physical copy of MMU_THDO_CONFIG_1",
    /* THDO_CONFIG_EX_0A         */ "First physical copy of MMU_THDO_CONFIG_EX_0",
    /* THDO_CONFIG_EX_0B         */ "Second physical copy of MMU_THDO_CONFIG_EX_0",
    /* THDO_CONFIG_EX_1A         */ "First physical copy of MMU_THDO_CONFIG_EX_1",
    /* THDO_CONFIG_EX_1B         */ "Second physical copy of MMU_THDO_CONFIG_EX_1",
    /* THDO_OFFSET_0A            */ "First physical copy of MMU_THDO_OFFSET_0",
    /* THDO_OFFSET_0B            */ "Second physical copy of MMU_THDO_OFFSET_0",
    /* THDO_OFFSET_1A            */ "First physical copy of MMU_THDO_OFFSET_1",
    /* THDO_OFFSET_1B            */ "Second physical copy of MMU_THDO_OFFSET_1",
    /* THDO_OFFSET_EX_0A         */ "First physical copy of MMU_THDO_OFFSET_EX_0",
    /* THDO_OFFSET_EX_0B         */ "Second physical copy of MMU_THDO_OFFSET_EX_0",
    /* THDO_OFFSET_EX_1A         */ "First physical copy of MMU_THDO_OFFSET_EX_1",
    /* THDO_OFFSET_EX_1B         */ "Second physical copy of MMU_THDO_OFFSET_EX_1",
    /* THDO_OPNCOUNT_QENTRY      */ "THDO Op-Node total count shadow storage for WRED access in the range 0-511",
    /* THDO_QCOUNT_CELL_1        */ "copy of MMU_THDO_QCOUNT_CELL_0 for queues in the range [2048...4095]",
    /* THDO_QCOUNT_QENTRY_0      */ "THDO Queue total count shadow storage for WRED access for queues in the range 0-2047",
    /* THDO_QCOUNT_QENTRY_1      */ "copy of MMU_THDO_QCOUNT_QENTRY_0 for queues in the range 2048-4095",
    /* THDO_QRESET_VALUE_CELL_1  */ "copy of MMU_THDO_QRESET_VALUE_CELL_0 for queues > 2047",
    /* THDO_QRESET_VALUE_QENTRY_1 */ "copy of MMU_THDO_QRESET_VALUE_QENTRY_0 for queues in the range 2048-4095",
    /* THDO_QSTATUS_CELL_1       */ "copy of MMU_THDO_QSTATUS_CELL_0 for queues in the range 2048-4095",
    /* THDO_QSTATUS_QENTRY_1     */ "copy of MMU_THDO_QSTATUS_QENTRY_0 for queues in the range 2048-4095",
    /* TIMESLOT_BURST_SIZE_BYTES */ "burst size in bytes for each node type for 1 to 48 channels",
    /* TMA_HASH0_RANDTABLE0      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE1      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE2      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE3      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE4      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE5      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE6      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE7      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE0      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE1      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE2      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE3      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE4      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE5      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE6      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE7      */ "RandTable entries for hash computation",
    /* TMA_PM_HIST0              */ "Performance Monitor Histogram Table 0",
    /* TMA_PM_HIST1              */ "Performance Monitor Histogram Table 1",
    /* TMA_PM_HIST2              */ "Performance Monitor Histogram Table 2",
    /* TMA_PM_HIST3              */ "Performance Monitor Histogram Table 3",
    /* TMA_PM_HIST4              */ "Performance Monitor Histogram Table 4",
    /* TMA_PM_HIST5              */ "Performance Monitor Histogram Table 5",
    /* TMA_PM_HIST6              */ "Performance Monitor Histogram Table 6",
    /* TMA_PM_HIST7              */ "Performance Monitor Histogram Table 7",
    /* TMB_DISTRIBUTOR_REGION_DEFINITION */ "Each entry defines a region",
    /* TMB_DISTRIBUTOR_SCRAMBLE_TABLE0 */ "Each entry defines a region",
    /* TMB_DISTRIBUTOR_SCRAMBLE_TABLE1 */ "Each entry defines a region",
    /* TMB_DISTRIBUTOR_SCRAMBLE_TABLE2 */ "Each entry defines a region",
    /* TMB_HASH0_RANDTABLE0      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE1      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE2      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE3      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE4      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE5      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE6      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE7      */ "RandTable entries for hash computation",
    /* TMB_LPM_DBUCKET_IPV4_128  */ "TMB LPM IPV4 128 bits bucket format",
    /* TMB_LPM_DBUCKET_IPV4_256  */ "TMB LPM IPV4 256 bits bucket format",
    /* TMB_LPM_DBUCKET_IPV6_128  */ "TMB LPM IPV6 128 bits bucket format",
    /* TMB_LPM_DBUCKET_IPV6_256  */ "TMB LPM IPV6 256 bits bucket format",
    /* TMB_UPDATER_CMD_EML_DELETE */ "EML Delete command definition",
    /* TMB_UPDATER_CMD_EML_INS_BEGIN_END */ "EML INS/END command definition",
    /* TMB_UPDATER_CMD_FIFO0     */ "Writing to this memory pushes 4 64b command words into FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_CMD_FIFO1     */ "Writing to this memory pushes 4 64b command words into FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_CMD_LOCK_RELEASE */ "tmu lock release command definition",
    /* TMB_UPDATER_CMD_NOP       */ "NOP command definition",
    /* TMB_UPDATER_CMD_RAW_READ  */ "tmu raw read command definition",
    /* TMB_UPDATER_CMD_RAW_WRITE */ "tmu raw write command definition",
    /* TMB_UPDATER_CMD_XL_READ   */ "XL read command definition",
    /* TMB_UPDATER_CMD_XL_WRITE  */ "XL write command definition",
    /* TMB_UPDATER_FREE_CHAIN_FIFO0 */ "Writing to this memory pushes a free chain into the FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_FREE_CHAIN_FIFO1 */ "Writing to this memory pushes a free chain into the FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_FREE_CHAIN_FIFO2 */ "Writing to this memory pushes a free chain into the FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_FREE_CHAIN_FIFO3 */ "Writing to this memory pushes a free chain into the FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_RECYCLE_CHAIN_FIFO */ "Reading from memory pops a recycled chain from the FIFO. The \"memory\" is Read-Only, Writes will be nack'd.",
    /* TMB_UPDATER_RESPONSE      */ "non-TAPS response definition",
    /* TMB_UPDATER_RSP_FIFO0     */ "Reading from memory pops a 64b response words from the FIFO. The \"memory\" is Read-Only, Writes will be nack'd.",
    /* TMB_UPDATER_RSP_FIFO1     */ "Reading from memory pops a 64b response words from the FIFO. The \"memory\" is Read-Only, Writes will be nack'd.",
    /* TMB_UPDATER_TAPS_RESPONSE */ "TAPS response definition",
    /* TMPORTPPCONTEXTCONFIG     */ "",
    /* TMPORTPPPORTCONFIG        */ "",
    /* TMPORTSYSPORTCONFIG       */ "",
    /* TOKEN_MEMORY_CONTROLLER   */ "",
    /* TOS_2COS                  */ "",
    /* TOS_FN                    */ "TOS FUNCTION TABLE FOR IFP, FeatureSpecific-Ethernet",
    /* TRAFFICCLASSMAPPING       */ "",
    /* TRILL_DROP_STATS          */ "TRILL_DROP_STATS table.",
    /* TRILL_DROP_STATS_X        */ "TRILL_DROP_STATS table.",
    /* TRILL_DROP_STATS_Y        */ "TRILL_DROP_STATS table.",
    /* TRUNK32_CONFIG_TABLE      */ "TRUNK32_CONFIG_TABLE holds fields necessary to futher parse a higig packet when the source is a TrunkID (no src_modid/port are present), address=TGID[4:0], FeatureSpecific-Ethernet",
    /* TRUNK32_PORT_TABLE        */ "HG port PWE_PROFILE_INDEX lookup in Trunk32 mode",
    /* TRUNK_BITMAP              */ "Source Trunk Bitmap Table",
    /* TRUNK_CBL_TABLE           */ "Trunk (LAG) Class Based Learning Attribute Table for class based station movement. Direct index table, address = TGID[6:0]",
    /* TRUNK_EGR_MASK            */ "Trunk Egress Block Mask Table",
    /* TRUNK_GROUP               */ "Egress Mask Table",
    /* TRUNK_MEMBER              */ "Contains the members in each LAG group.",
    /* TTLSCOPE                  */ "",
    /* TTL_FN                    */ "TTL FUNCTION TABLE FOR IFP, FeatureSpecific-Ethernet",
    /* TXLP_DEBUG_COUNTER0       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT0 register",
    /* TXLP_DEBUG_COUNTER1       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT1 register",
    /* TXLP_DEBUG_COUNTER2       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT2 register",
    /* TXLP_DEBUG_COUNTER3       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT3 register",
    /* TXLP_DEBUG_COUNTER4       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT4 register",
    /* TXLP_DEBUG_COUNTER5       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT5 register",
    /* TXLP_DEBUG_COUNTER6       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT6 register",
    /* TXLP_DEBUG_COUNTER7       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT7 register",
    /* TXLP_DEBUG_COUNTER8       */ "This table counts the number of Fragment-Bytes/stream transmitted by TXLP",
    /* TXLP_DEBUG_COUNTER9       */ "This table counts the number of Fragments/stream transmitted by TXLP",
    /* TXLP_DEBUG_COUNTER10      */ "This table counts the number of Frame-Bytes/stream transmitted by TXLP",
    /* TXLP_DEBUG_COUNTER11      */ "This table counts the number of Frames/stream transmitted by TXLP",
    /* TXLP_INT2EXT_STREAM_MAP_TABLE */ "Used for mapping the Internal-SID(7b) to External-SID(10b)",
    /* TXLP_PORT_ADDR_MAP_TABLE  */ "-----------------------------------------------------------------------\nNOTE::\nTHIS TABLE HAS TO BE PROGRAMMED ONLY WHEN ATLEAST ONE OR MORE PORTS IS\nRUNNING IN NON-LP-MODE.\nWHEN ALL-PORTS ARE RUNNING IN LP MODE, DONOT PROGRAM THIS TABLE.\n-----------------------------------------------------------------------\nThis table governs the buffer allocation for the  NON-LP PORTS.(4-sub-ports).\nThere is a total of 856-cell worth of storage in the TXL-DATA-BUFFER.\n856 cells have to be distributed across:\n ...",
    /* TXLP_PORT_MMU_REQUESTS    */ "This table contains buffer-utilization information on per-port basis for the NON-LP-Ports.\nThis is READ_ONLY for s/w\",",
    /* TXLP_PORT_REQUESTS        */ "This table contains the cell requests asserted by the port-block.",
    /* TXLP_PORT_STREAM_BITMAP_TABLE */ "Indicates what are the valid streams on a sub-port of a port-interface in a bitmap format.\nEach bit set indicates that SID being part of that port.\nNote that same stream cannot be enabled on more than one sub-port.\nWhen the port is in LP-mode, then Stream-ID for that sub-port is in Range [0-127] only.\nIn LP-Mode:\n===========\nSub-port    |  SID range\n   0        |     [0-127]\n   1        |     [0-127]\n   2        |     [0-127]\n   3        |     [0-127]\n\nHowever,When it is in Non-LP Mode following ...",
    /* TXLP_PORT_USED_ENTRIES    */ "This table contains the entires (each 96B) occupied in the buffer on per-stream basis\non a NON-LP-PORT.",
    /* TXLP_STREAM_ADDR_MAP_TABLE */ "-----------------------------------------------------------------------\nNOTE::\nTHIS TABLE HAS TO BE PROGRAMMED ONLY WHEN ATLEAST ONE OR MORE PORTS IS\nRUNNING IN LP-MODE.\nWHEN ALL-PORTS ARE RUNNING IN NON-LP MODE, DONOT PROGRAM THIS TABLE.\n-----------------------------------------------------------------------\nThis table governs the buffer allocation for the streams across all LP-ENABLED ports.\nThere is a total of 856-cell worth of storage in the TXL-DATA-BUFFER.\n856 cells have to be distributed  ...",
    /* TXLP_STREAM_MMU_REQUESTS  */ "This table contains buffer-utilization information on per-stream basis for the LP-ENABLED Ports.\nThis is READ_ONLY for s/w\",",
    /* TXLP_STREAM_USED_ENTRIES  */ "This table contains the entires (each 96B) occupied in the buffer on per-stream basis\non a LP-ENABLED-PORT.",
    /* TXSACRPTPKTS              */ "Transmit SA Encrypted Frame Counter",
    /* TXSAPRTCPKTS              */ "Transmit SA Authentication Only Frame Counter",
    /* TXSCCRPTBYT               */ "Transmit Encrypted Frame Octet Counter for SC",
    /* TXSCCRPTPKTS              */ "Transmit Encrypted Frame Counter for SC",
    /* TXSCPRTCBYT               */ "Transmit Authentication Only Frame Octet Counter for SC",
    /* TXSCPRTCPKTS              */ "Transmit Authentication Only Frame Counter for SC",
    /* TXTAGTABLE                */ "",
    /* TXUNTAGPKTS               */ "Transmit Untagged Frame Counter",
    /* TX_PFC_SRC_PORT_LKUP      */ "This database contains the PFC Source Port Lookup table. A similar database, PFC_ENQ_SRC_PORT_LKUP, exists in the QM block. The two databases must have identical entry values. All entries are initialized to 0 on a reset",
    /* TX_SFI_CFIFO              */ "This is the SFI Control FIFO. Access is for debug only and not in traffic.  Address format is {plane, fifo_addr}",
    /* TX_SFI_DFIFO              */ "This is the SFI Data FIFO. Access is for debug only and not in traffic.  Address format is {plane, lane, fifo_addr}",
    /* TYPE_RESOLUTION_TABLE     */ "This database contains the Type Resolution Table.",
    /* UCFIFO                    */ "",
    /* UDF_CONDITIONAL_CHECK_TABLE_CAM */ "Flexible Hashing Scheme conditional check matching TCAM.",
    /* UDF_CONDITIONAL_CHECK_TABLE_RAM */ "Flexible Hashing Scheme conditional check offsets. and masks.",
    /* UDF_OFFSET                */ "UDF offset table",
    /* UFLOW_A                   */ "Flow table A",
    /* UFLOW_B                   */ "UFLOW table B",
    /* UNKNOWNDAACTIONPROFILES   */ "",
    /* UNKNOWN_HGI_BITMAP        */ "Forwarding bitmap for unknown HGI.",
    /* UNKNOWN_MCAST_BLOCK_MASK  */ "Unknown Multicast Block Mask, FeatureSpecific-Ethernet.",
    /* UNKNOWN_UCAST_BLOCK_MASK  */ "Unknown Unicast Block Mask, FeatureSpecific-Ethernet.",
    /* VFI                       */ "VFI Properties - address is VFI value.",
    /* VFI_1                     */ "VFI-1 Table (used for MAC-in-MAC and HG ports) - address is VFI value.",
    /* VFP_HASH_FIELD_BMAP_TABLE_A */ "VFP_HASH_FIELD_BMAP_TABLE_A.",
    /* VFP_HASH_FIELD_BMAP_TABLE_B */ "VFP_HASH_FIELD_BMAP_TABLE_B.",
    /* VFP_POLICY_TABLE          */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE VFP",
    /* VFP_TCAM                  */ "TCAM FOR VFP",
    /* VLANEDITPCPDEIMAP         */ "",
    /* VLANPORTMEMBERSHIPTABLE   */ "",
    /* VLANRANGECOMPRESSIONTABLE */ "",
    /* VLANTABLE                 */ "",
    /* VLAN_COS_MAP              */ "index by vid",
    /* VLAN_MAC                  */ "Holds key & data for MAC-based VLAN substitution",
    /* VLAN_MAC_OVERFLOW         */ "Holds key & data for MAC-based VLAN substitution. Overflow Table to populate entries if regular table is full. FeatureSpecific-Ethernet.",
    /* VLAN_MAC_SCRATCH          */ "Single VLAN_MAC entry that is usable by software when shifting VLAN_MAC entries across the dual hash.  Fully usable entry that is searched for every packet. Acts like a fully-associative 9th entry (for every bucket.)",
    /* VLAN_MPLS                 */ "Contains MPLS cntrls assoc with the 4K VLANs.",
    /* VLAN_OR_VFI_MAC_COUNT     */ "Vlan MAC limit counters",
    /* VLAN_OR_VFI_MAC_LIMIT     */ "Vlan MAC limit counters",
    /* VLAN_PROFILE_2            */ "Vlan Profile Table 2",
    /* VLAN_PROFILE_TAB          */ "VLAN profile table",
    /* VLAN_PROTOCOL             */ "Holds data for Protocol-based VLAN substitution.  Just the VLAN_PROTOCOL RAM.",
    /* VLAN_PROTOCOL_DATA        */ "Holds data for Protocol-based VLAN substitution",
    /* VLAN_SUBNET               */ "TCAM for IP subnet based VLAN substitution",
    /* VLAN_SUBNET_DATA_ONLY     */ "Holds data for IP Subnet-based VLAN substitution",
    /* VLAN_SUBNET_ONLY          */ "TCAM for IP subnet based VLAN substitution",
    /* VLAN_TAB                  */ "Contains cntrls assoc with the 4K VLANs.",
    /* VLAN_XLATE                */ "BCAM for VLAN trans of tagged pkts.",
    /* VLAN_XLATE_1              */ "",
    /* VLAN_XLATE_1_HIT_ONLY     */ "VLAN_XLATE_1_HIT_ONLY, Single base entry views. FeatureSpecific-Ethernet.",
    /* VLAN_XLATE_2_HIT_ONLY     */ "VLAN_XLATE_2_HIT_ONLY, Double base entry views. FeatureSpecific-Ethernet.",
    /* VLAN_XLATE_DATA_ONLY      */ "Data SRAM for VLAN_XLATE BCAM.",
    /* VLAN_XLATE_EXTD           */ "VLAN_XLATE_2, Double base entry views. FeatureSpecific-Ethernet.",
    /* VLAN_XLATE_LP             */ "VLAN_XLATE LP Control Table.",
    /* VLAN_XLATE_MASK           */ "View of CAM and RAM, with the mask bits visible and readable and writable. FeatureSpecific-Ethernet",
    /* VLAN_XLATE_ONLY           */ "BCAM for VLAN trans of tagged pkts.",
    /* VLAN_XLATE_OVERFLOW       */ "This table is shared with the VLAN_MAC_OVERFLOW table. View of CAM and RAM for overflow table, which is used if entry can not be inserted in the Normal Vlan Xlate Table. FeatureSpecific-Ethernet.",
    /* VLAN_XLATE_SCRATCH        */ "Single VLAN_XLATE entry that is usable by software.when shifting VLAN_XLATE entries across the dual hash.  Fully usable entry that is searched for every packet. Acts like a fully-associative 9th entry (for every bucket.)",
    /* VOQ_ARRIVALS              */ "The database assigns queues to buffer usage profiles",
    /* VOQ_CONFIG                */ "The database contains the minimum buffer parameter for buffer profile",
    /* VOQ_COS_MAP               */ "VOQ Mapping table.",
    /* VOQ_MOD_MAP               */ "VOQ MODID Mapping table. index by dest_ModID[7:0]",
    /* VOQ_PORT_MAP              */ "VOQ PORTID Mapping table. index by {voq_port_profile_index[1:0], Dest_Port[6:0]",
    /* VQFCPRMA                  */ "",
    /* VQFCPRMB                  */ "",
    /* VQFCPRMC                  */ "",
    /* VQFCPRMD                  */ "",
    /* VQPRMA                    */ "",
    /* VQPRMB                    */ "",
    /* VQPRMC                    */ "",
    /* VQPRMD                    */ "",
    /* VRF                       */ "VRF Properties - address is VRF value.",
    /* VRFCONFIG                 */ "",
    /* VRIDMYMACMAP              */ "",
    /* VSIDANOTFOUND             */ "",
    /* VSIFIDCLASS               */ "",
    /* VSIISID                   */ "",
    /* VSIMEMBERSHIP             */ "",
    /* VSIMYMAC                  */ "",
    /* VSITOPOLOGYID             */ "",
    /* VSQA_AVG                  */ "",
    /* VSQA_QSZ                  */ "",
    /* VSQB_AVG                  */ "",
    /* VSQB_QSZ                  */ "",
    /* VSQC_AVG                  */ "",
    /* VSQC_QSZ                  */ "",
    /* VSQDRC_A                  */ "",
    /* VSQDRC_B                  */ "",
    /* VSQDRC_C                  */ "",
    /* VSQDRC_D                  */ "",
    /* VSQD_AVG                  */ "",
    /* VSQD_QSZ                  */ "",
    /* VTT1STKEYCONSTRUCTION0    */ "",
    /* VTT1STKEYCONSTRUCTION1    */ "",
    /* VTT2NDKEYCONSTRUCTION     */ "",
    /* VTTINPPPORTCONFIG         */ "",
    /* VTTINPPPORTVLANCONFIG     */ "",
    /* VTTLLVP                   */ "",
    /* WAFAHALFARADDRSTATUS      */ "",
    /* WAFAHALFBRADDRSTATUS      */ "",
    /* WAFBHALFARADDRSTATUS      */ "",
    /* WAFBHALFBRADDRSTATUS      */ "",
    /* WAFCHALFARADDRSTATUS      */ "",
    /* WAFCHALFBRADDRSTATUS      */ "",
    /* WAFDHALFARADDRSTATUS      */ "",
    /* WAFDHALFBRADDRSTATUS      */ "",
    /* WAFEHALFARADDRSTATUS      */ "",
    /* WAFEHALFBRADDRSTATUS      */ "",
    /* WAFFHALFARADDRSTATUS      */ "",
    /* WAFFHALFBRADDRSTATUS      */ "",
    /* WAFHALFAWADDR             */ "",
    /* WAFHALFBWADDR             */ "",
    /* WDFMEM                    */ "",
    /* WDM                       */ "",
    /* WLAN_SVP_TABLE            */ "Holds fields specific to WLAN SVPs for second pass processing. FeatureSpecific-Wireless",
    /* WRED_AVG_QUEUE_LENGTH     */ "The database contains the current QAVG for LQs with IDs 32k to 64k-1",
    /* WRED_CURVE                */ "The database stored the WRED Curve configurations for local queues.",
    /* WRED_STATE                */ "The database stored the VOQ WRED Drop Data provided by BME.",
    /* XLPORT_WC_UCMEM_DATA      */ "Warpcore External Memory Interface to program micro-controller memory",
    /* XPORT_EHG_RX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* XPORT_EHG_RX_TUNNEL_MASK  */ "Embedded Higig Rx tunnel data memory",
    /* XPORT_EHG_TX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* XPORT_WC_UCMEM_DATA       */ "Warpcore External Memory Interface to program micro-controller memory",
    /* XQPORT_EHG_RX_TUNNEL_DATA */ "Embedded Higig Rx tunnel data memory",
    /* XQPORT_EHG_RX_TUNNEL_MASK */ "Embedded Higig Rx tunnel data memory",
    /* XQPORT_EHG_TX_TUNNEL_DATA */ "Embedded Higig Rx tunnel data memory",
    /* X_ARB_TDM_TABLE           */ "MMU to X_EPIPE Arbiter TDM Table",
    /* Y_ARB_TDM_TABLE           */ "MMU to X_EPIPE Arbiter TDM Table",
